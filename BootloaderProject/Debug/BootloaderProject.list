
BootloaderProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002680  08002680  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002688  08002688  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  20000014  080026a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002054  080026a4  00022054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005024  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b4  00000000  00000000  000250ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00026860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000446  00000000  00000000  00026e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020036  00000000  00000000  00027286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007aa7  00000000  00000000  000472bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c011f  00000000  00000000  0004ed63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001574  00000000  00000000  0010ee84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002658 	.word	0x08002658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002658 	.word	0x08002658

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <error_handler>:
//	   // Jump to the application
//	   jump_to_application(APP_START_ADDR);
//
//}
uint32_t backup_buffer[SECTOR_SIZE / sizeof(uint32_t)];
void error_handler(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
    // Initialize LED GPIO as an output pin
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b1b      	ldr	r3, [pc, #108]	; (800053c <error_handler+0x78>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a1a      	ldr	r2, [pc, #104]	; (800053c <error_handler+0x78>)
 80004d4:	f043 0302 	orr.w	r3, r3, #2
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	4b18      	ldr	r3, [pc, #96]	; (800053c <error_handler+0x78>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = ERROR_LED_PIN;
 80004f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2300      	movs	r3, #0
 8000504:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(ERROR_LED_PORT, &GPIO_InitStruct);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	480d      	ldr	r0, [pc, #52]	; (8000540 <error_handler+0x7c>)
 800050c:	f001 f990 	bl	8001830 <HAL_GPIO_Init>

    while (1) {
        // Turn the LED on
        HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <error_handler+0x7c>)
 8000518:	f001 fb26 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_Delay(ERROR_BLINK_INTERVAL);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fda4 	bl	800106c <HAL_Delay>

        // Turn the LED off
        HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <error_handler+0x7c>)
 800052c:	f001 fb1c 	bl	8001b68 <HAL_GPIO_WritePin>
        HAL_Delay(ERROR_BLINK_INTERVAL);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f000 fd9a 	bl	800106c <HAL_Delay>
        HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_SET);
 8000538:	e7ea      	b.n	8000510 <error_handler+0x4c>
 800053a:	bf00      	nop
 800053c:	40023800 	.word	0x40023800
 8000540:	40020c00 	.word	0x40020c00

08000544 <bootloader_function>:
    }
}

void bootloader_function(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

    if (*config_flag == UPDATE_FLAG_VALUE) {
 800054a:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <bootloader_function+0xc4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a2e      	ldr	r2, [pc, #184]	; (800060c <bootloader_function+0xc8>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d12b      	bne.n	80005ae <bootloader_function+0x6a>
        // Step 1: Verify firmware before writing
        if (is_firmware_valid(TEMP_START_ADDR, *firmware_size)) {
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <bootloader_function+0xcc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	482d      	ldr	r0, [pc, #180]	; (8000614 <bootloader_function+0xd0>)
 8000560:	f000 f882 	bl	8000668 <is_firmware_valid>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d01f      	beq.n	80005aa <bootloader_function+0x66>
            // Indicate that the update process has started
//            *config_flag = UPDATE_START_FLAG_VALUE;
        	update_config_flag(UPDATE_START_FLAG_VALUE);
 800056a:	482b      	ldr	r0, [pc, #172]	; (8000618 <bootloader_function+0xd4>)
 800056c:	f000 f9ee 	bl	800094c <update_config_flag>

            // Step 2: Start updating application with the firmware
            if (update_application(*firmware_size)) {
 8000570:	4b27      	ldr	r3, [pc, #156]	; (8000610 <bootloader_function+0xcc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f854 	bl	8000624 <update_application>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d010      	beq.n	80005a4 <bootloader_function+0x60>

                // Step 3: Verify the firmware after writing
                if (is_firmware_valid(APP_START_ADDR, *firmware_size)) {
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <bootloader_function+0xcc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	4824      	ldr	r0, [pc, #144]	; (800061c <bootloader_function+0xd8>)
 800058c:	f000 f86c 	bl	8000668 <is_firmware_valid>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <bootloader_function+0x5a>
                    // Indicate that the update process is completed successfully
//                    *config_flag = UPDATE_COMPLETE_FLAG_VALUE;
                	update_config_flag(UPDATE_COMPLETE_FLAG_VALUE);
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <bootloader_function+0xdc>)
 8000598:	f000 f9d8 	bl	800094c <update_config_flag>
 800059c:	e007      	b.n	80005ae <bootloader_function+0x6a>
                } else {
                    // Handle verification failure after firmware write
                    error_handler(); // This function needs to be defined to handle this specific case.
 800059e:	f7ff ff91 	bl	80004c4 <error_handler>
 80005a2:	e004      	b.n	80005ae <bootloader_function+0x6a>
                }

            } else {
                // Handle firmware update error
                error_handler(); // This function will manage errors such as flashing a specific LED or logging.
 80005a4:	f7ff ff8e 	bl	80004c4 <error_handler>
 80005a8:	e001      	b.n	80005ae <bootloader_function+0x6a>
            }
        } else {
            // Handle CRC mismatch error
            error_handler(); // Handle the error if the firmware's CRC doesn't match.
 80005aa:	f7ff ff8b 	bl	80004c4 <error_handler>
        }
    }

    // Handle timeout (if needed)
    uint32_t start_time = HAL_GetTick();
 80005ae:	f000 fd51 	bl	8001054 <HAL_GetTick>
 80005b2:	6078      	str	r0, [r7, #4]
    while (!is_timeout_expired(start_time, BOOTLOADER_TIMEOUT_MS)) {
 80005b4:	bf00      	nop
 80005b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 fa34 	bl	8000a28 <is_timeout_expired>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f4      	bne.n	80005b6 <bootloader_function+0x72>
        // Your bootloader code can have additional functionality here
    }

    // Step 4: If everything is fine, jump to the application
    if (*config_flag == UPDATE_COMPLETE_FLAG_VALUE){
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <bootloader_function+0xc4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <bootloader_function+0xdc>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d110      	bne.n	80005fa <bootloader_function+0xb6>
    	if (is_firmware_valid(APP_START_ADDR, *firmware_size)){
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <bootloader_function+0xcc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <bootloader_function+0xd8>)
 80005e2:	f000 f841 	bl	8000668 <is_firmware_valid>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d003      	beq.n	80005f4 <bootloader_function+0xb0>
    		jump_to_application(APP_START_ADDR);
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <bootloader_function+0xd8>)
 80005ee:	f000 f855 	bl	800069c <jump_to_application>
    		error_handler();
    	}
    }else{
    	jump_to_application(APP_START_ADDR);
    }
}
 80005f2:	e005      	b.n	8000600 <bootloader_function+0xbc>
    		error_handler();
 80005f4:	f7ff ff66 	bl	80004c4 <error_handler>
}
 80005f8:	e002      	b.n	8000600 <bootloader_function+0xbc>
    	jump_to_application(APP_START_ADDR);
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <bootloader_function+0xd8>)
 80005fc:	f000 f84e 	bl	800069c <jump_to_application>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	deadbeef 	.word	0xdeadbeef
 8000610:	20000004 	.word	0x20000004
 8000614:	080c0000 	.word	0x080c0000
 8000618:	12345678 	.word	0x12345678
 800061c:	08040000 	.word	0x08040000
 8000620:	87654321 	.word	0x87654321

08000624 <update_application>:
// Function to update the application with error handling
bool update_application(uint32_t app_size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
//    uint32_t *temp_src = (uint32_t *)TEMP_START_ADDR;
//    uint32_t *app_dest = (uint32_t *)APP_START_ADDR;


    if (HAL_OK != erase_flash(APP_START_ADDR, APP_END_ADDR)) {
 800062c:	490b      	ldr	r1, [pc, #44]	; (800065c <update_application+0x38>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <update_application+0x3c>)
 8000630:	f000 f902 	bl	8000838 <erase_flash>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <update_application+0x1a>
        // Handle error: Erasing flash failed
        return false;     // Return an error
 800063a:	2300      	movs	r3, #0
 800063c:	e00a      	b.n	8000654 <update_application+0x30>
    }

    // Check if the new binary size is valid
    if (HAL_OK != transfer_flash_data(TEMP_START_ADDR, APP_START_ADDR, app_size)) {
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <update_application+0x3c>)
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <update_application+0x40>)
 8000644:	f000 f93b 	bl	80008be <transfer_flash_data>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <update_application+0x2e>
        return false;
 800064e:	2300      	movs	r3, #0
 8000650:	e000      	b.n	8000654 <update_application+0x30>
    // Reset the flag in the config section
//    if (HAL_OK != erase_flash(CONFIG_START_ADDR, CONFIG_END_ADDR)) {
//        // Handle error: Erasing flash failed
//        return false;     // Return an error
//    }
    return true; // Indicate successful update
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	080a0000 	.word	0x080a0000
 8000660:	08040000 	.word	0x08040000
 8000664:	080c0000 	.word	0x080c0000

08000668 <is_firmware_valid>:

bool is_firmware_valid(uint32_t addr, uint32_t size) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
    if (size <= sizeof(uint32_t)) { // Ensure that size is at least greater than the CRC size itself.
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	2b04      	cmp	r3, #4
 8000676:	d801      	bhi.n	800067c <is_firmware_valid+0x14>
        return false;
 8000678:	2300      	movs	r3, #0
 800067a:	e00b      	b.n	8000694 <is_firmware_valid+0x2c>
    }

    // Calculate CRC32 of the firmware excluding the embedded CRC
    uint32_t calculated_crc = calculate_crc32((uint8_t *)addr, size);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6839      	ldr	r1, [r7, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f831 	bl	80006e8 <calculate_crc32>
 8000686:	60f8      	str	r0, [r7, #12]

    return (calculated_crc == 0x00);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <jump_to_application>:
// Function pointer to the application
typedef void (*pFunction)(void);

//void bootloader_function(void) __attribute__((section(".bootloader")));

void jump_to_application(uint32_t app_address) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    // 1. Define application entry and stack pointer
    uint32_t app_stack_pointer = *(volatile uint32_t*)app_address;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	617b      	str	r3, [r7, #20]
    pFunction app_entry = (pFunction)(*(volatile uint32_t*)(app_address + 4));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3304      	adds	r3, #4
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]

    // 2. Disable all interrupts
//    __disable_irq();

    // 3. Reset all peripherals (optional but recommended)
    HAL_DeInit();
 80006b2:	f000 fc57 	bl	8000f64 <HAL_DeInit>

    // 4. Clear any pending system interrupts. Especially if a SysTick is running, it should be stopped.
    SysTick->CTRL = 0;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <jump_to_application+0x48>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <jump_to_application+0x48>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <jump_to_application+0x48>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]

    // 5. Reset the RCC clock configuration to the default reset state
    // -- Reset the RCC clock configuration to the default reset state
    // -- Disable all peripherals clock
    // -- Update the SystemCoreClock variable
    HAL_RCC_DeInit();
 80006c8:	f001 fecc 	bl	8002464 <HAL_RCC_DeInit>
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f383 8808 	msr	MSP, r3
}
 80006d6:	bf00      	nop

    // 7. Initialize master stack pointer with application stack pointer
    __set_MSP(app_stack_pointer);

    // 8. Jump to the application
    app_entry();
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	4798      	blx	r3
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <calculate_crc32>:

// Function to calculate a simple checksum
// Manual CRC32 calculation
uint32_t calculate_crc32(uint8_t *data, uint32_t size) {
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < size; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e01f      	b.n	800073e <calculate_crc32+0x56>
        crc ^= ((uint32_t)data[i]) << 24;
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	061b      	lsls	r3, r3, #24
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4053      	eors	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

        for (uint32_t j = 0; j < 8; j++) {
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e00e      	b.n	8000732 <calculate_crc32+0x4a>
            if (crc & 0x80000000) {
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	2b00      	cmp	r3, #0
 8000718:	da05      	bge.n	8000726 <calculate_crc32+0x3e>
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005a      	lsls	r2, r3, #1
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <calculate_crc32+0x6c>)
 8000720:	4053      	eors	r3, r2
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	e002      	b.n	800072c <calculate_crc32+0x44>
            } else {
                crc = crc << 1;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 8; j++) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b07      	cmp	r3, #7
 8000736:	d9ed      	bls.n	8000714 <calculate_crc32+0x2c>
    for (uint32_t i = 0; i < size; i++) {
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	3301      	adds	r3, #1
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d3db      	bcc.n	80006fe <calculate_crc32+0x16>
            }
        }
    }

    return crc;
 8000746:	697b      	ldr	r3, [r7, #20]
}
 8000748:	4618      	mov	r0, r3
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	04c11db7 	.word	0x04c11db7

08000758 <get_flash_sector>:

uint32_t get_flash_sector(uint32_t address) {
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    uint32_t sector;

    // STM32F407VG flash sectors
    if (address < 0x08004000) sector = FLASH_SECTOR_0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <get_flash_sector+0xb4>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d202      	bcs.n	800076e <get_flash_sector+0x16>
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e047      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08008000) sector = FLASH_SECTOR_1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <get_flash_sector+0xb8>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d202      	bcs.n	800077c <get_flash_sector+0x24>
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e040      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x0800C000) sector = FLASH_SECTOR_2;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a25      	ldr	r2, [pc, #148]	; (8000814 <get_flash_sector+0xbc>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d202      	bcs.n	800078a <get_flash_sector+0x32>
 8000784:	2302      	movs	r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	e039      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08010000) sector = FLASH_SECTOR_3;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <get_flash_sector+0xc0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d802      	bhi.n	8000798 <get_flash_sector+0x40>
 8000792:	2303      	movs	r3, #3
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e032      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08020000) sector = FLASH_SECTOR_4;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a20      	ldr	r2, [pc, #128]	; (800081c <get_flash_sector+0xc4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d802      	bhi.n	80007a6 <get_flash_sector+0x4e>
 80007a0:	2304      	movs	r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e02b      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08040000) sector = FLASH_SECTOR_5;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a1d      	ldr	r2, [pc, #116]	; (8000820 <get_flash_sector+0xc8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d802      	bhi.n	80007b4 <get_flash_sector+0x5c>
 80007ae:	2305      	movs	r3, #5
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e024      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08060000) sector = FLASH_SECTOR_6;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <get_flash_sector+0xcc>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d802      	bhi.n	80007c2 <get_flash_sector+0x6a>
 80007bc:	2306      	movs	r3, #6
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e01d      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x08080000) sector = FLASH_SECTOR_7;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a18      	ldr	r2, [pc, #96]	; (8000828 <get_flash_sector+0xd0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d802      	bhi.n	80007d0 <get_flash_sector+0x78>
 80007ca:	2307      	movs	r3, #7
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e016      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x080A0000) sector = FLASH_SECTOR_8;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <get_flash_sector+0xd4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d802      	bhi.n	80007de <get_flash_sector+0x86>
 80007d8:	2308      	movs	r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	e00f      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x080C0000) sector = FLASH_SECTOR_9;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a13      	ldr	r2, [pc, #76]	; (8000830 <get_flash_sector+0xd8>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d802      	bhi.n	80007ec <get_flash_sector+0x94>
 80007e6:	2309      	movs	r3, #9
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e008      	b.n	80007fe <get_flash_sector+0xa6>
    else if (address < 0x080E0000) sector = FLASH_SECTOR_10;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <get_flash_sector+0xdc>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d802      	bhi.n	80007fa <get_flash_sector+0xa2>
 80007f4:	230a      	movs	r3, #10
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	e001      	b.n	80007fe <get_flash_sector+0xa6>
    else sector = FLASH_SECTOR_11;  // covers up to 0x08100000
 80007fa:	230b      	movs	r3, #11
 80007fc:	60fb      	str	r3, [r7, #12]

    return sector;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	08004000 	.word	0x08004000
 8000810:	08008000 	.word	0x08008000
 8000814:	0800c000 	.word	0x0800c000
 8000818:	0800ffff 	.word	0x0800ffff
 800081c:	0801ffff 	.word	0x0801ffff
 8000820:	0803ffff 	.word	0x0803ffff
 8000824:	0805ffff 	.word	0x0805ffff
 8000828:	0807ffff 	.word	0x0807ffff
 800082c:	0809ffff 	.word	0x0809ffff
 8000830:	080bffff 	.word	0x080bffff
 8000834:	080dffff 	.word	0x080dffff

08000838 <erase_flash>:

HAL_StatusTypeDef erase_flash(uint32_t start_address, uint32_t end_address) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase;
    uint32_t error;

    // Unlock the flash
   status = HAL_FLASH_Unlock();
 8000842:	f000 fd71 	bl	8001328 <HAL_FLASH_Unlock>
 8000846:	4603      	mov	r3, r0
 8000848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (status != HAL_OK) {
 800084c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <erase_flash+0x22>
       // Handle flash unlock error
       return status;
 8000854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000858:	e02d      	b.n	80008b6 <erase_flash+0x7e>
   }

    // Define the erase parameters
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Adjust according to your needs
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
    erase.Sector = get_flash_sector(start_address); // You need to implement the get_flash_sector function
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff78 	bl	8000758 <get_flash_sector>
 8000868:	4603      	mov	r3, r0
 800086a:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = get_flash_sector(end_address) - erase.Sector + 1;
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f7ff ff73 	bl	8000758 <get_flash_sector>
 8000872:	4602      	mov	r2, r0
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	3301      	adds	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&erase, &error);
 800087c:	f107 020c 	add.w	r2, r7, #12
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 feb0 	bl	80015ec <HAL_FLASHEx_Erase>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 8000892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <erase_flash+0x68>
        // Handle flash unlock error
        return status;
 800089a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800089e:	e00a      	b.n	80008b6 <erase_flash+0x7e>
    }

    // Lock the flash
    HAL_FLASH_Lock();
 80008a0:	f000 fd64 	bl	800136c <HAL_FLASH_Lock>
    if (status != HAL_OK) {
 80008a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <erase_flash+0x7a>
        // Handle flash unlock error
        return status;
 80008ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008b0:	e001      	b.n	80008b6 <erase_flash+0x7e>
    }

    return status;
 80008b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <transfer_flash_data>:

HAL_StatusTypeDef transfer_flash_data(uint32_t src_address, uint32_t dest_address, uint32_t length) {
 80008be:	b5b0      	push	{r4, r5, r7, lr}
 80008c0:	b088      	sub	sp, #32
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    // Unlock the flash
    status = HAL_FLASH_Unlock();
 80008ca:	f000 fd2d 	bl	8001328 <HAL_FLASH_Unlock>
 80008ce:	4603      	mov	r3, r0
 80008d0:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 80008d2:	7efb      	ldrb	r3, [r7, #27]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <transfer_flash_data+0x1e>
        // Handle flash unlock error
        return status;
 80008d8:	7efb      	ldrb	r3, [r7, #27]
 80008da:	e033      	b.n	8000944 <transfer_flash_data+0x86>
    }

    for (uint32_t i = 0; i < length; i += 4) {
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	e027      	b.n	8000932 <transfer_flash_data+0x74>
        // Read data from the source address
        uint32_t data_word = *(uint32_t*)(src_address + i);
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	617b      	str	r3, [r7, #20]

        // Write data to the destination address
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, dest_address + i, data_word);
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	18d1      	adds	r1, r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2200      	movs	r2, #0
 80008f6:	461c      	mov	r4, r3
 80008f8:	4615      	mov	r5, r2
 80008fa:	4622      	mov	r2, r4
 80008fc:	462b      	mov	r3, r5
 80008fe:	2002      	movs	r0, #2
 8000900:	f000 fcbe 	bl	8001280 <HAL_FLASH_Program>
 8000904:	4603      	mov	r3, r0
 8000906:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 8000908:	7efb      	ldrb	r3, [r7, #27]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <transfer_flash_data+0x58>
            // Lock the flash before returning in case of an error
            HAL_FLASH_Lock();
 800090e:	f000 fd2d 	bl	800136c <HAL_FLASH_Lock>
            return status;
 8000912:	7efb      	ldrb	r3, [r7, #27]
 8000914:	e016      	b.n	8000944 <transfer_flash_data+0x86>
        }

        // Verify data has been written correctly
        if(*(uint32_t*)(dest_address + i) != data_word) {
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	4413      	add	r3, r2
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	429a      	cmp	r2, r3
 8000922:	d003      	beq.n	800092c <transfer_flash_data+0x6e>
            // Handle data mismatch error
            HAL_FLASH_Lock();
 8000924:	f000 fd22 	bl	800136c <HAL_FLASH_Lock>
            return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e00b      	b.n	8000944 <transfer_flash_data+0x86>
    for (uint32_t i = 0; i < length; i += 4) {
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	3304      	adds	r3, #4
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d3d3      	bcc.n	80008e2 <transfer_flash_data+0x24>
        }
    }

    // Lock the flash
    status = HAL_FLASH_Lock();
 800093a:	f000 fd17 	bl	800136c <HAL_FLASH_Lock>
 800093e:	4603      	mov	r3, r0
 8000940:	76fb      	strb	r3, [r7, #27]
    return status;
 8000942:	7efb      	ldrb	r3, [r7, #27]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bdb0      	pop	{r4, r5, r7, pc}

0800094c <update_config_flag>:


HAL_StatusTypeDef update_config_flag(uint32_t new_value) {
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;
    uint32_t i;

    // 1. Backup the sector content
    uint32_t* flash_ptr = (uint32_t*)CONFIG_START_ADDR;
 8000954:	4b30      	ldr	r3, [pc, #192]	; (8000a18 <update_config_flag+0xcc>)
 8000956:	613b      	str	r3, [r7, #16]
    for(i = 0; i < SECTOR_SIZE / sizeof(uint32_t); i++) {
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e00a      	b.n	8000974 <update_config_flag+0x28>
        backup_buffer[i] = *flash_ptr++;
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1d1a      	adds	r2, r3, #4
 8000962:	613a      	str	r2, [r7, #16]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	492d      	ldr	r1, [pc, #180]	; (8000a1c <update_config_flag+0xd0>)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(i = 0; i < SECTOR_SIZE / sizeof(uint32_t); i++) {
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800097a:	d3f0      	bcc.n	800095e <update_config_flag+0x12>
    }

    // 2. Modify data in the buffer
    uint32_t offset = (uint32_t)(config_flag) - CONFIG_START_ADDR;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <update_config_flag+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f103 4377 	add.w	r3, r3, #4143972352	; 0xf7000000
 8000984:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8000988:	60fb      	str	r3, [r7, #12]
    backup_buffer[offset / sizeof(uint32_t)] = new_value;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	4923      	ldr	r1, [pc, #140]	; (8000a1c <update_config_flag+0xd0>)
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // 3. Erase the sector
    status = erase_flash(CONFIG_START_ADDR, CONFIG_END_ADDR);
 8000996:	4923      	ldr	r1, [pc, #140]	; (8000a24 <update_config_flag+0xd8>)
 8000998:	481f      	ldr	r0, [pc, #124]	; (8000a18 <update_config_flag+0xcc>)
 800099a:	f7ff ff4d 	bl	8000838 <erase_flash>
 800099e:	4603      	mov	r3, r0
 80009a0:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <update_config_flag+0x60>
        return status;
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	e030      	b.n	8000a0e <update_config_flag+0xc2>
    }

    // 4. Write back the modified buffer
    status = HAL_FLASH_Unlock();
 80009ac:	f000 fcbc 	bl	8001328 <HAL_FLASH_Unlock>
 80009b0:	4603      	mov	r3, r0
 80009b2:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 80009b4:	7afb      	ldrb	r3, [r7, #11]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <update_config_flag+0x72>
        return status;
 80009ba:	7afb      	ldrb	r3, [r7, #11]
 80009bc:	e027      	b.n	8000a0e <update_config_flag+0xc2>
    }

    for (i = 0; i < SECTOR_SIZE / sizeof(uint32_t); i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e01d      	b.n	8000a00 <update_config_flag+0xb4>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CONFIG_START_ADDR + i * sizeof(uint32_t), backup_buffer[i]);
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80009ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80009ce:	0099      	lsls	r1, r3, #2
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <update_config_flag+0xd0>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	2200      	movs	r2, #0
 80009da:	461c      	mov	r4, r3
 80009dc:	4615      	mov	r5, r2
 80009de:	4622      	mov	r2, r4
 80009e0:	462b      	mov	r3, r5
 80009e2:	2002      	movs	r0, #2
 80009e4:	f000 fc4c 	bl	8001280 <HAL_FLASH_Program>
 80009e8:	4603      	mov	r3, r0
 80009ea:	72fb      	strb	r3, [r7, #11]
        if (status != HAL_OK) {
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <update_config_flag+0xae>
            HAL_FLASH_Lock();
 80009f2:	f000 fcbb 	bl	800136c <HAL_FLASH_Lock>
            return status;
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	e009      	b.n	8000a0e <update_config_flag+0xc2>
    for (i = 0; i < SECTOR_SIZE / sizeof(uint32_t); i++) {
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a06:	d3dd      	bcc.n	80009c4 <update_config_flag+0x78>
        }
    }

    HAL_FLASH_Lock();
 8000a08:	f000 fcb0 	bl	800136c <HAL_FLASH_Lock>
    return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bdb0      	pop	{r4, r5, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08020000 	.word	0x08020000
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	20000000 	.word	0x20000000
 8000a24:	08030000 	.word	0x08030000

08000a28 <is_timeout_expired>:



bool is_timeout_expired(uint32_t start_time, uint32_t timeout_ms) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    uint32_t current_time = HAL_GetTick(); // Use the HAL function for time
 8000a32:	f000 fb0f 	bl	8001054 <HAL_GetTick>
 8000a36:	60f8      	str	r0, [r7, #12]
    return (current_time - start_time) > timeout_ms;
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	bf34      	ite	cc
 8000a44:	2301      	movcc	r3, #1
 8000a46:	2300      	movcs	r3, #0
 8000a48:	b2db      	uxtb	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <bl_main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int bl_main(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 fa63 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f805 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f000 f86d 	bl	8000b3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  bootloader_function();
 8000a62:	f7ff fd6f 	bl	8000544 <bootloader_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <bl_main+0x14>

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fdc2 	bl	8002600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemClock_Config+0xcc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <SystemClock_Config+0xd0>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <SystemClock_Config+0xd0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000acc:	2310      	movs	r3, #16
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000adc:	2332      	movs	r3, #50	; 0x32
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f855 	bl	8001b9c <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af8:	f000 f97e 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2302      	movs	r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fab6 	bl	800208c <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b26:	f000 f967 	bl	8000df8 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3750      	adds	r7, #80	; 0x50
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4ba2      	ldr	r3, [pc, #648]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4aa1      	ldr	r2, [pc, #644]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b9f      	ldr	r3, [pc, #636]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b9b      	ldr	r3, [pc, #620]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a9a      	ldr	r2, [pc, #616]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b98      	ldr	r3, [pc, #608]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b94      	ldr	r3, [pc, #592]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a93      	ldr	r2, [pc, #588]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b91      	ldr	r3, [pc, #580]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b8d      	ldr	r3, [pc, #564]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a8c      	ldr	r2, [pc, #560]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b8a      	ldr	r3, [pc, #552]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b86      	ldr	r3, [pc, #536]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a85      	ldr	r2, [pc, #532]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b83      	ldr	r3, [pc, #524]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b7f      	ldr	r3, [pc, #508]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a7e      	ldr	r2, [pc, #504]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <MX_GPIO_Init+0x2a4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	4879      	ldr	r0, [pc, #484]	; (8000de4 <MX_GPIO_Init+0x2a8>)
 8000c00:	f000 ffb2 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2101      	movs	r1, #1
 8000c08:	4877      	ldr	r0, [pc, #476]	; (8000de8 <MX_GPIO_Init+0x2ac>)
 8000c0a:	f000 ffad 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c14:	4875      	ldr	r0, [pc, #468]	; (8000dec <MX_GPIO_Init+0x2b0>)
 8000c16:	f000 ffa7 	bl	8001b68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	486c      	ldr	r0, [pc, #432]	; (8000de4 <MX_GPIO_Init+0x2a8>)
 8000c32:	f000 fdfd 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4866      	ldr	r0, [pc, #408]	; (8000de8 <MX_GPIO_Init+0x2ac>)
 8000c4e:	f000 fdef 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c52:	2308      	movs	r3, #8
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c62:	2305      	movs	r3, #5
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	485e      	ldr	r0, [pc, #376]	; (8000de8 <MX_GPIO_Init+0x2ac>)
 8000c6e:	f000 fddf 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	485a      	ldr	r0, [pc, #360]	; (8000df0 <MX_GPIO_Init+0x2b4>)
 8000c88:	f000 fdd2 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4852      	ldr	r0, [pc, #328]	; (8000df0 <MX_GPIO_Init+0x2b4>)
 8000ca8:	f000 fdc2 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cac:	23e0      	movs	r3, #224	; 0xe0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	484a      	ldr	r0, [pc, #296]	; (8000df0 <MX_GPIO_Init+0x2b4>)
 8000cc8:	f000 fdb2 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4845      	ldr	r0, [pc, #276]	; (8000df4 <MX_GPIO_Init+0x2b8>)
 8000ce0:	f000 fda6 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483c      	ldr	r0, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x2b8>)
 8000d02:	f000 fd95 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d06:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d0a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4833      	ldr	r0, [pc, #204]	; (8000dec <MX_GPIO_Init+0x2b0>)
 8000d20:	f000 fd86 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d24:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4829      	ldr	r0, [pc, #164]	; (8000de8 <MX_GPIO_Init+0x2ac>)
 8000d42:	f000 fd75 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4825      	ldr	r0, [pc, #148]	; (8000df0 <MX_GPIO_Init+0x2b4>)
 8000d5c:	f000 fd68 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000d60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d72:	230a      	movs	r3, #10
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481c      	ldr	r0, [pc, #112]	; (8000df0 <MX_GPIO_Init+0x2b4>)
 8000d7e:	f000 fd57 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4815      	ldr	r0, [pc, #84]	; (8000dec <MX_GPIO_Init+0x2b0>)
 8000d96:	f000 fd4b 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dac:	2304      	movs	r3, #4
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	480f      	ldr	r0, [pc, #60]	; (8000df4 <MX_GPIO_Init+0x2b8>)
 8000db8:	f000 fd3a 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0x2a8>)
 8000dd2:	f000 fd2d 	bl	8001830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3730      	adds	r7, #48	; 0x30
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40020400 	.word	0x40020400

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 f9e8 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8c4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed2:	490e      	ldr	r1, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed4:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee8:	4c0b      	ldr	r4, [pc, #44]	; (8000f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef6:	f7ff ffd7 	bl	8000ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f001 fb89 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  bl_main
 8000efe:	f7ff fda8 	bl	8000a52 <bl_main>
  bx  lr    
 8000f02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f10:	08002690 	.word	0x08002690
  ldr r2, =_sbss
 8000f14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f18:	20002054 	.word	0x20002054

08000f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC_IRQHandler>
	...

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_Init+0x40>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_Init+0x40>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x40>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f965 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f83c 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff ff56 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f86:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_DeInit+0x54>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_DeInit+0x54>)
 8000fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_DeInit+0x54>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000fae:	f000 f805 	bl	8000fbc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f93b 	bl	8001266 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f911 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008
 8001024:	20000010 	.word	0x20000010
 8001028:	2000000c 	.word	0x2000000c

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000010 	.word	0x20000010
 8001050:	20002030 	.word	0x20002030

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20002030 	.word	0x20002030

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000010 	.word	0x20000010

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff47 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff5c 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb0 	bl	80011d4 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <HAL_FLASH_Program+0xa0>)
 8001294:	7e1b      	ldrb	r3, [r3, #24]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_FLASH_Program+0x1e>
 800129a:	2302      	movs	r3, #2
 800129c:	e03b      	b.n	8001316 <HAL_FLASH_Program+0x96>
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_FLASH_Program+0xa0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012a8:	f000 f870 	bl	800138c <FLASH_WaitForLastOperation>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d12b      	bne.n	800130e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012bc:	783b      	ldrb	r3, [r7, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	68b8      	ldr	r0, [r7, #8]
 80012c2:	f000 f91b 	bl	80014fc <FLASH_Program_Byte>
 80012c6:	e016      	b.n	80012f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012ce:	883b      	ldrh	r3, [r7, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f000 f8ee 	bl	80014b4 <FLASH_Program_HalfWord>
 80012d8:	e00d      	b.n	80012f6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d105      	bne.n	80012ec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f000 f8c3 	bl	8001470 <FLASH_Program_Word>
 80012ea:	e004      	b.n	80012f6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80012ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f000 f88b 	bl	800140c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012fa:	f000 f847 	bl	800138c <FLASH_WaitForLastOperation>
 80012fe:	4603      	mov	r3, r0
 8001300:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_FLASH_Program+0xa4>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_FLASH_Program+0xa4>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_FLASH_Program+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001314:	7dfb      	ldrb	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20002034 	.word	0x20002034
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_FLASH_Unlock+0x38>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	da0b      	bge.n	8001352 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_FLASH_Unlock+0x38>)
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_FLASH_Unlock+0x3c>)
 800133e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_FLASH_Unlock+0x38>)
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_FLASH_Unlock+0x40>)
 8001344:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_FLASH_Unlock+0x38>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	da01      	bge.n	8001352 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001352:	79fb      	ldrb	r3, [r7, #7]
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40023c00 	.word	0x40023c00
 8001364:	45670123 	.word	0x45670123
 8001368:	cdef89ab 	.word	0xcdef89ab

0800136c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_FLASH_Lock+0x1c>)
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_FLASH_Lock+0x1c>)
 8001376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800137a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40023c00 	.word	0x40023c00

0800138c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <FLASH_WaitForLastOperation+0x78>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800139e:	f7ff fe59 	bl	8001054 <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013a4:	e010      	b.n	80013c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d00c      	beq.n	80013c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <FLASH_WaitForLastOperation+0x38>
 80013b4:	f7ff fe4e 	bl	8001054 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d201      	bcs.n	80013c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e019      	b.n	80013fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <FLASH_WaitForLastOperation+0x7c>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <FLASH_WaitForLastOperation+0x7c>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <FLASH_WaitForLastOperation+0x7c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <FLASH_WaitForLastOperation+0x7c>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013f2:	f000 f8a5 	bl	8001540 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
  
}  
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20002034 	.word	0x20002034
 8001408:	40023c00 	.word	0x40023c00

0800140c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 800141e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 800142a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800142e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <FLASH_Program_DoubleWord+0x60>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001442:	f3bf 8f6f 	isb	sy
}
 8001446:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001448:	e9d7 0100 	ldrd	r0, r1, [r7]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	000a      	movs	r2, r1
 8001456:	2300      	movs	r3, #0
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	3104      	adds	r1, #4
 800145c:	4613      	mov	r3, r2
 800145e:	600b      	str	r3, [r1, #0]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40023c00 	.word	0x40023c00

08001470 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <FLASH_Program_Word+0x40>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <FLASH_Program_Word+0x40>)
 800148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001490:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_Program_Word+0x40>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <FLASH_Program_HalfWord+0x44>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	801a      	strh	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023c00 	.word	0x40023c00

080014fc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <FLASH_Program_Byte+0x40>)
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <FLASH_Program_Byte+0x40>)
 800150e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <FLASH_Program_Byte+0x40>)
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <FLASH_Program_Byte+0x40>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <FLASH_Program_Byte+0x40>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Program_Byte+0x40>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 800155a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800155e:	2210      	movs	r2, #16
 8001560:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800156e:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001578:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800157c:	2220      	movs	r2, #32
 800157e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 8001596:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 800159a:	2240      	movs	r2, #64	; 0x40
 800159c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <FLASH_SetErrorCode+0xa8>)
 80015d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <FLASH_SetErrorCode+0xa4>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	60da      	str	r2, [r3, #12]
  }
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40023c00 	.word	0x40023c00
 80015e8:	20002034 	.word	0x20002034

080015ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_FLASHEx_Erase+0xd8>)
 8001600:	7e1b      	ldrb	r3, [r3, #24]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_FLASHEx_Erase+0x1e>
 8001606:	2302      	movs	r3, #2
 8001608:	e058      	b.n	80016bc <HAL_FLASHEx_Erase+0xd0>
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_FLASHEx_Erase+0xd8>)
 800160c:	2201      	movs	r2, #1
 800160e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001614:	f7ff feba 	bl	800138c <FLASH_WaitForLastOperation>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d148      	bne.n	80016b4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d115      	bne.n	800165e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f000 f844 	bl	80016cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001648:	f7ff fea0 	bl	800138c <FLASH_WaitForLastOperation>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <HAL_FLASHEx_Erase+0xdc>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_FLASHEx_Erase+0xdc>)
 8001656:	f023 0304 	bic.w	r3, r3, #4
 800165a:	6113      	str	r3, [r2, #16]
 800165c:	e028      	b.n	80016b0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	e01c      	b.n	80016a0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f000 f850 	bl	8001714 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001678:	f7ff fe88 	bl	800138c <FLASH_WaitForLastOperation>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_FLASHEx_Erase+0xdc>)
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_FLASHEx_Erase+0xdc>)
 8001686:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800168a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	601a      	str	r2, [r3, #0]
          break;
 8001698:	e00a      	b.n	80016b0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3301      	adds	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3da      	bcc.n	8001666 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016b0:	f000 f878 	bl	80017a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_FLASHEx_Erase+0xd8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	761a      	strb	r2, [r3, #24]

  return status;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20002034 	.word	0x20002034
 80016c8:	40023c00 	.word	0x40023c00

080016cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <FLASH_MassErase+0x44>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <FLASH_MassErase+0x44>)
 80016de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <FLASH_MassErase+0x44>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <FLASH_MassErase+0x44>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <FLASH_MassErase+0x44>)
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <FLASH_MassErase+0x44>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6113      	str	r3, [r2, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023c00 	.word	0x40023c00

08001714 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e010      	b.n	8001752 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d103      	bne.n	800173e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e009      	b.n	8001752 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d103      	bne.n	800174c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e002      	b.n	8001752 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800174c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001750:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800175c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	490f      	ldr	r1, [pc, #60]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001770:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4313      	orrs	r3, r2
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <FLASH_Erase_Sector+0x8c>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001792:	6113      	str	r3, [r2, #16]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <FLASH_FlushCaches+0x88>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d017      	beq.n	80017e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <FLASH_FlushCaches+0x88>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <FLASH_FlushCaches+0x88>)
 80017ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <FLASH_FlushCaches+0x88>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <FLASH_FlushCaches+0x88>)
 80017c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <FLASH_FlushCaches+0x88>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <FLASH_FlushCaches+0x88>)
 80017d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <FLASH_FlushCaches+0x88>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <FLASH_FlushCaches+0x88>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <FLASH_FlushCaches+0x88>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d017      	beq.n	8001820 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <FLASH_FlushCaches+0x88>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <FLASH_FlushCaches+0x88>)
 80017f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <FLASH_FlushCaches+0x88>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <FLASH_FlushCaches+0x88>)
 8001802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <FLASH_FlushCaches+0x88>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <FLASH_FlushCaches+0x88>)
 800180e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001812:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <FLASH_FlushCaches+0x88>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <FLASH_FlushCaches+0x88>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181e:	6013      	str	r3, [r2, #0]
  }
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e16b      	b.n	8001b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 815a 	bne.w	8001b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d005      	beq.n	8001882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	2b02      	cmp	r3, #2
 8001880:	d130      	bne.n	80018e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80b4 	beq.w	8001b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b60      	ldr	r3, [pc, #384]	; (8001b3c <HAL_GPIO_Init+0x30c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a5f      	ldr	r2, [pc, #380]	; (8001b3c <HAL_GPIO_Init+0x30c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_GPIO_Init+0x30c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a5b      	ldr	r2, [pc, #364]	; (8001b40 <HAL_GPIO_Init+0x310>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x314>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x318>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x31c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x320>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x21a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_Init+0x324>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x216>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x328>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x212>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x32c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x330>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x20a>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00e      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	e00c      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e00a      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e008      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a56:	2300      	movs	r3, #0
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f002 0203 	and.w	r2, r2, #3
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	; (8001b40 <HAL_GPIO_Init+0x310>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aee:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_GPIO_Init+0x334>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	f67f ae90 	bls.w	800184c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40021c00 	.word	0x40021c00
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e267      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d075      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bba:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d00c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d112      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	4b7e      	ldr	r3, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d05b      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x108>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e242      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_OscConfig+0x74>
 8001c02:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e01d      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a6c      	ldr	r2, [pc, #432]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0xb0>
 8001c34:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a68      	ldr	r2, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a65      	ldr	r2, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d013      	beq.n	8001c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f9fe 	bl	8001054 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f9fa 	bl	8001054 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e207      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0xc0>
 8001c7a:	e014      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f9ea 	bl	8001054 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c84:	f7ff f9e6 	bl	8001054 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b64      	cmp	r3, #100	; 0x64
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1f3      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	4b51      	ldr	r3, [pc, #324]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0xe8>
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d063      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d11c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cca:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d116      	bne.n	8001d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e1c7      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4937      	ldr	r1, [pc, #220]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	e03a      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff f99f 	bl	8001054 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f99b 	bl	8001054 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1a8      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4925      	ldr	r1, [pc, #148]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	600b      	str	r3, [r1, #0]
 8001d4c:	e015      	b.n	8001d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <HAL_RCC_OscConfig+0x244>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff f97e 	bl	8001054 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d5c:	f7ff f97a 	bl	8001054 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e187      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d036      	beq.n	8001df4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f95e 	bl	8001054 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f95a 	bl	8001054 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e167      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x240>)
 8001db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x200>
 8001dba:	e01b      	b.n	8001df4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x248>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff f947 	bl	8001054 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	e00e      	b.n	8001de8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff f943 	bl	8001054 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d907      	bls.n	8001de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e150      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	42470000 	.word	0x42470000
 8001de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de8:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ea      	bne.n	8001dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 8097 	beq.w	8001f30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e06:	4b81      	ldr	r3, [pc, #516]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	4b7d      	ldr	r3, [pc, #500]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b7a      	ldr	r3, [pc, #488]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e32:	4b77      	ldr	r3, [pc, #476]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d118      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3e:	4b74      	ldr	r3, [pc, #464]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a73      	ldr	r2, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f903 	bl	8001054 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7ff f8ff 	bl	8001054 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e10c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x474>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2ea>
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	e01c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x30c>
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a5e      	ldr	r2, [pc, #376]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9a:	4b5c      	ldr	r3, [pc, #368]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x324>
 8001ea8:	4b58      	ldr	r3, [pc, #352]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eac:	4a57      	ldr	r2, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb8:	4a54      	ldr	r2, [pc, #336]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c4 	bl	8001054 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f8c0 	bl	8001054 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e0cb      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff f8ae 	bl	8001054 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff f8aa 	bl	8001054 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0b5      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ee      	bne.n	8001efc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80a1 	beq.w	800207c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d05c      	beq.n	8002000 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d141      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f87e 	bl	8001054 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f87a 	bl	8001054 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e087      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69da      	ldr	r2, [r3, #28]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	019b      	lsls	r3, r3, #6
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	3b01      	subs	r3, #1
 8001f94:	041b      	lsls	r3, r3, #16
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	491b      	ldr	r1, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff f853 	bl	8001054 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff f84f 	bl	8001054 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e05c      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x416>
 8001fd0:	e054      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_RCC_OscConfig+0x478>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f83c 	bl	8001054 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff f838 	bl	8001054 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e045      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_OscConfig+0x470>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
 8001ffe:	e03d      	b.n	800207c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e038      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
 800200c:	40023800 	.word	0x40023800
 8002010:	40007000 	.word	0x40007000
 8002014:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4ec>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d028      	beq.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d121      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d11a      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800204e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002050:	4293      	cmp	r3, r2
 8002052:	d111      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	3b01      	subs	r3, #1
 8002062:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0cc      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b68      	ldr	r3, [pc, #416]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d90c      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d044      	beq.n	80021ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d119      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e06f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e067      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216a:	4b37      	ldr	r3, [pc, #220]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0203 	bic.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4934      	ldr	r1, [pc, #208]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800217c:	f7fe ff6a 	bl	8001054 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	e00a      	b.n	800219a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002184:	f7fe ff66 	bl	8001054 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04f      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 020c 	and.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d1eb      	bne.n	8002184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d20c      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1c8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe feca 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00
 8002248:	40023800 	.word	0x40023800
 800224c:	08002670 	.word	0x08002670
 8002250:	20000008 	.word	0x20000008
 8002254:	2000000c 	.word	0x2000000c

08002258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225c:	b094      	sub	sp, #80	; 0x50
 800225e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
 8002264:	2300      	movs	r3, #0
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002268:	2300      	movs	r3, #0
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002270:	4b79      	ldr	r3, [pc, #484]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d00d      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 800227c:	2b08      	cmp	r3, #8
 800227e:	f200 80e1 	bhi.w	8002444 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x34>
 8002286:	2b04      	cmp	r3, #4
 8002288:	d003      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x3a>
 800228a:	e0db      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b73      	ldr	r3, [pc, #460]	; (800245c <HAL_RCC_GetSysClockFreq+0x204>)
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002290:	e0db      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_GetSysClockFreq+0x208>)
 8002294:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002296:	e0d8      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a2:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d063      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	2200      	movs	r2, #0
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
 80022c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ca:	4622      	mov	r2, r4
 80022cc:	462b      	mov	r3, r5
 80022ce:	f04f 0000 	mov.w	r0, #0
 80022d2:	f04f 0100 	mov.w	r1, #0
 80022d6:	0159      	lsls	r1, r3, #5
 80022d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022dc:	0150      	lsls	r0, r2, #5
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4621      	mov	r1, r4
 80022e4:	1a51      	subs	r1, r2, r1
 80022e6:	6139      	str	r1, [r7, #16]
 80022e8:	4629      	mov	r1, r5
 80022ea:	eb63 0301 	sbc.w	r3, r3, r1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022fc:	4659      	mov	r1, fp
 80022fe:	018b      	lsls	r3, r1, #6
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002306:	4651      	mov	r1, sl
 8002308:	018a      	lsls	r2, r1, #6
 800230a:	4651      	mov	r1, sl
 800230c:	ebb2 0801 	subs.w	r8, r2, r1
 8002310:	4659      	mov	r1, fp
 8002312:	eb63 0901 	sbc.w	r9, r3, r1
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232a:	4690      	mov	r8, r2
 800232c:	4699      	mov	r9, r3
 800232e:	4623      	mov	r3, r4
 8002330:	eb18 0303 	adds.w	r3, r8, r3
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	462b      	mov	r3, r5
 8002338:	eb49 0303 	adc.w	r3, r9, r3
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800234a:	4629      	mov	r1, r5
 800234c:	024b      	lsls	r3, r1, #9
 800234e:	4621      	mov	r1, r4
 8002350:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002354:	4621      	mov	r1, r4
 8002356:	024a      	lsls	r2, r1, #9
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235e:	2200      	movs	r2, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
 8002362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002368:	f7fd ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4613      	mov	r3, r2
 8002372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002374:	e058      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	2200      	movs	r2, #0
 800237e:	4618      	mov	r0, r3
 8002380:	4611      	mov	r1, r2
 8002382:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002390:	4642      	mov	r2, r8
 8002392:	464b      	mov	r3, r9
 8002394:	f04f 0000 	mov.w	r0, #0
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	0159      	lsls	r1, r3, #5
 800239e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a2:	0150      	lsls	r0, r2, #5
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4641      	mov	r1, r8
 80023aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80023ae:	4649      	mov	r1, r9
 80023b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023c8:	ebb2 040a 	subs.w	r4, r2, sl
 80023cc:	eb63 050b 	sbc.w	r5, r3, fp
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	00eb      	lsls	r3, r5, #3
 80023da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023de:	00e2      	lsls	r2, r4, #3
 80023e0:	4614      	mov	r4, r2
 80023e2:	461d      	mov	r5, r3
 80023e4:	4643      	mov	r3, r8
 80023e6:	18e3      	adds	r3, r4, r3
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	464b      	mov	r3, r9
 80023ec:	eb45 0303 	adc.w	r3, r5, r3
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023fe:	4629      	mov	r1, r5
 8002400:	028b      	lsls	r3, r1, #10
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002408:	4621      	mov	r1, r4
 800240a:	028a      	lsls	r2, r1, #10
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002412:	2200      	movs	r2, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	61fa      	str	r2, [r7, #28]
 8002418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800241c:	f7fd fed4 	bl	80001c8 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4613      	mov	r3, r2
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_GetSysClockFreq+0x200>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800243a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002442:	e002      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <HAL_RCC_GetSysClockFreq+0x204>)
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002448:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800244c:	4618      	mov	r0, r3
 800244e:	3750      	adds	r7, #80	; 0x50
 8002450:	46bd      	mov	sp, r7
 8002452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200

08002464 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800246a:	f7fe fdf3 	bl	8001054 <HAL_GetTick>
 800246e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002470:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a5c      	ldr	r2, [pc, #368]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247e:	f7fe fde9 	bl	8001054 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0a7      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002490:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800249c:	4b52      	ldr	r3, [pc, #328]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a51      	ldr	r2, [pc, #324]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80024a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024a8:	f7fe fdd4 	bl	8001054 <HAL_GetTick>
 80024ac:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80024ae:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7fe fdcd 	bl	8001054 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e089      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024d8:	f7fe fdbc 	bl	8001054 <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80024e4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80024e8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fdb2 	bl	8001054 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e070      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800250a:	f7fe fda3 	bl	8001054 <HAL_GetTick>
 800250e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800251a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fd99 	bl	8001054 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e057      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800253c:	f7fe fd8a 	bl	8001054 <HAL_GetTick>
 8002540:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002542:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800254c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002550:	f7fe fd80 	bl	8001054 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03e      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002570:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <HAL_RCC_DeInit+0x188>)
 8002572:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_RCC_DeInit+0x18c>)
 8002578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4a19      	ldr	r2, [pc, #100]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002582:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002586:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 800258e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002592:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 800259a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800259e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025aa:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_RCC_DeInit+0x184>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_DeInit+0x190>)
 80025c6:	4a0c      	ldr	r2, [pc, #48]	; (80025f8 <HAL_RCC_DeInit+0x194>)
 80025c8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_DeInit+0x198>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fcfc 	bl	8000fcc <HAL_InitTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80025de:	2300      	movs	r3, #0
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	04003010 	.word	0x04003010
 80025f0:	20003000 	.word	0x20003000
 80025f4:	20000008 	.word	0x20000008
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	2000000c 	.word	0x2000000c

08002600 <memset>:
 8002600:	4402      	add	r2, r0
 8002602:	4603      	mov	r3, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	d100      	bne.n	800260a <memset+0xa>
 8002608:	4770      	bx	lr
 800260a:	f803 1b01 	strb.w	r1, [r3], #1
 800260e:	e7f9      	b.n	8002604 <memset+0x4>

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4d0d      	ldr	r5, [pc, #52]	; (8002648 <__libc_init_array+0x38>)
 8002614:	4c0d      	ldr	r4, [pc, #52]	; (800264c <__libc_init_array+0x3c>)
 8002616:	1b64      	subs	r4, r4, r5
 8002618:	10a4      	asrs	r4, r4, #2
 800261a:	2600      	movs	r6, #0
 800261c:	42a6      	cmp	r6, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	4d0b      	ldr	r5, [pc, #44]	; (8002650 <__libc_init_array+0x40>)
 8002622:	4c0c      	ldr	r4, [pc, #48]	; (8002654 <__libc_init_array+0x44>)
 8002624:	f000 f818 	bl	8002658 <_init>
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	2600      	movs	r6, #0
 800262e:	42a6      	cmp	r6, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f855 3b04 	ldr.w	r3, [r5], #4
 8002638:	4798      	blx	r3
 800263a:	3601      	adds	r6, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002642:	4798      	blx	r3
 8002644:	3601      	adds	r6, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	08002688 	.word	0x08002688
 800264c:	08002688 	.word	0x08002688
 8002650:	08002688 	.word	0x08002688
 8002654:	0800268c 	.word	0x0800268c

08002658 <_init>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	bf00      	nop
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr

08002664 <_fini>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	bf00      	nop
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr
