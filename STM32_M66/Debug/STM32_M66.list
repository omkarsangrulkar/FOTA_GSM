
STM32_M66.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a974  08040190  08040190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0804ab08  0804ab08  0001ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804b31c  0804b31c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0804b31c  0804b31c  0001b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804b324  0804b324  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804b324  0804b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804b328  0804b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0804b32c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003704  200001f8  0804b524  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200038fc  0804b524  000238fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121e7  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da8  00000000  00000000  00032452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e87  00000000  00000000  00036428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fcd  00000000  00000000  000372af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152e5  00000000  00000000  0005a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc757  00000000  00000000  0006f561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006184  00000000  00000000  0013bcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00141e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040190 <__do_global_dtors_aux>:
 8040190:	b510      	push	{r4, lr}
 8040192:	4c05      	ldr	r4, [pc, #20]	; (80401a8 <__do_global_dtors_aux+0x18>)
 8040194:	7823      	ldrb	r3, [r4, #0]
 8040196:	b933      	cbnz	r3, 80401a6 <__do_global_dtors_aux+0x16>
 8040198:	4b04      	ldr	r3, [pc, #16]	; (80401ac <__do_global_dtors_aux+0x1c>)
 804019a:	b113      	cbz	r3, 80401a2 <__do_global_dtors_aux+0x12>
 804019c:	4804      	ldr	r0, [pc, #16]	; (80401b0 <__do_global_dtors_aux+0x20>)
 804019e:	f3af 8000 	nop.w
 80401a2:	2301      	movs	r3, #1
 80401a4:	7023      	strb	r3, [r4, #0]
 80401a6:	bd10      	pop	{r4, pc}
 80401a8:	200001f8 	.word	0x200001f8
 80401ac:	00000000 	.word	0x00000000
 80401b0:	0804aaec 	.word	0x0804aaec

080401b4 <frame_dummy>:
 80401b4:	b508      	push	{r3, lr}
 80401b6:	4b03      	ldr	r3, [pc, #12]	; (80401c4 <frame_dummy+0x10>)
 80401b8:	b11b      	cbz	r3, 80401c2 <frame_dummy+0xe>
 80401ba:	4903      	ldr	r1, [pc, #12]	; (80401c8 <frame_dummy+0x14>)
 80401bc:	4803      	ldr	r0, [pc, #12]	; (80401cc <frame_dummy+0x18>)
 80401be:	f3af 8000 	nop.w
 80401c2:	bd08      	pop	{r3, pc}
 80401c4:	00000000 	.word	0x00000000
 80401c8:	200001fc 	.word	0x200001fc
 80401cc:	0804aaec 	.word	0x0804aaec

080401d0 <strcmp>:
 80401d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80401d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80401d8:	2a01      	cmp	r2, #1
 80401da:	bf28      	it	cs
 80401dc:	429a      	cmpcs	r2, r3
 80401de:	d0f7      	beq.n	80401d0 <strcmp>
 80401e0:	1ad0      	subs	r0, r2, r3
 80401e2:	4770      	bx	lr
	...

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <strlen>:
 8040290:	4603      	mov	r3, r0
 8040292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040296:	2a00      	cmp	r2, #0
 8040298:	d1fb      	bne.n	8040292 <strlen+0x2>
 804029a:	1a18      	subs	r0, r3, r0
 804029c:	3801      	subs	r0, #1
 804029e:	4770      	bx	lr

080402a0 <__aeabi_drsub>:
 80402a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80402a4:	e002      	b.n	80402ac <__adddf3>
 80402a6:	bf00      	nop

080402a8 <__aeabi_dsub>:
 80402a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080402ac <__adddf3>:
 80402ac:	b530      	push	{r4, r5, lr}
 80402ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80402b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80402b6:	ea94 0f05 	teq	r4, r5
 80402ba:	bf08      	it	eq
 80402bc:	ea90 0f02 	teqeq	r0, r2
 80402c0:	bf1f      	itttt	ne
 80402c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80402c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80402ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80402ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80402d2:	f000 80e2 	beq.w	804049a <__adddf3+0x1ee>
 80402d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80402da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80402de:	bfb8      	it	lt
 80402e0:	426d      	neglt	r5, r5
 80402e2:	dd0c      	ble.n	80402fe <__adddf3+0x52>
 80402e4:	442c      	add	r4, r5
 80402e6:	ea80 0202 	eor.w	r2, r0, r2
 80402ea:	ea81 0303 	eor.w	r3, r1, r3
 80402ee:	ea82 0000 	eor.w	r0, r2, r0
 80402f2:	ea83 0101 	eor.w	r1, r3, r1
 80402f6:	ea80 0202 	eor.w	r2, r0, r2
 80402fa:	ea81 0303 	eor.w	r3, r1, r3
 80402fe:	2d36      	cmp	r5, #54	; 0x36
 8040300:	bf88      	it	hi
 8040302:	bd30      	pophi	{r4, r5, pc}
 8040304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8040310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8040314:	d002      	beq.n	804031c <__adddf3+0x70>
 8040316:	4240      	negs	r0, r0
 8040318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8040320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8040324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8040328:	d002      	beq.n	8040330 <__adddf3+0x84>
 804032a:	4252      	negs	r2, r2
 804032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8040330:	ea94 0f05 	teq	r4, r5
 8040334:	f000 80a7 	beq.w	8040486 <__adddf3+0x1da>
 8040338:	f1a4 0401 	sub.w	r4, r4, #1
 804033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8040340:	db0d      	blt.n	804035e <__adddf3+0xb2>
 8040342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8040346:	fa22 f205 	lsr.w	r2, r2, r5
 804034a:	1880      	adds	r0, r0, r2
 804034c:	f141 0100 	adc.w	r1, r1, #0
 8040350:	fa03 f20e 	lsl.w	r2, r3, lr
 8040354:	1880      	adds	r0, r0, r2
 8040356:	fa43 f305 	asr.w	r3, r3, r5
 804035a:	4159      	adcs	r1, r3
 804035c:	e00e      	b.n	804037c <__adddf3+0xd0>
 804035e:	f1a5 0520 	sub.w	r5, r5, #32
 8040362:	f10e 0e20 	add.w	lr, lr, #32
 8040366:	2a01      	cmp	r2, #1
 8040368:	fa03 fc0e 	lsl.w	ip, r3, lr
 804036c:	bf28      	it	cs
 804036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8040372:	fa43 f305 	asr.w	r3, r3, r5
 8040376:	18c0      	adds	r0, r0, r3
 8040378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 804037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040380:	d507      	bpl.n	8040392 <__adddf3+0xe6>
 8040382:	f04f 0e00 	mov.w	lr, #0
 8040386:	f1dc 0c00 	rsbs	ip, ip, #0
 804038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 804038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8040392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8040396:	d31b      	bcc.n	80403d0 <__adddf3+0x124>
 8040398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 804039c:	d30c      	bcc.n	80403b8 <__adddf3+0x10c>
 804039e:	0849      	lsrs	r1, r1, #1
 80403a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80403a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80403a8:	f104 0401 	add.w	r4, r4, #1
 80403ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80403b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80403b4:	f080 809a 	bcs.w	80404ec <__adddf3+0x240>
 80403b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80403bc:	bf08      	it	eq
 80403be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80403c2:	f150 0000 	adcs.w	r0, r0, #0
 80403c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80403ca:	ea41 0105 	orr.w	r1, r1, r5
 80403ce:	bd30      	pop	{r4, r5, pc}
 80403d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80403d4:	4140      	adcs	r0, r0
 80403d6:	eb41 0101 	adc.w	r1, r1, r1
 80403da:	3c01      	subs	r4, #1
 80403dc:	bf28      	it	cs
 80403de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80403e2:	d2e9      	bcs.n	80403b8 <__adddf3+0x10c>
 80403e4:	f091 0f00 	teq	r1, #0
 80403e8:	bf04      	itt	eq
 80403ea:	4601      	moveq	r1, r0
 80403ec:	2000      	moveq	r0, #0
 80403ee:	fab1 f381 	clz	r3, r1
 80403f2:	bf08      	it	eq
 80403f4:	3320      	addeq	r3, #32
 80403f6:	f1a3 030b 	sub.w	r3, r3, #11
 80403fa:	f1b3 0220 	subs.w	r2, r3, #32
 80403fe:	da0c      	bge.n	804041a <__adddf3+0x16e>
 8040400:	320c      	adds	r2, #12
 8040402:	dd08      	ble.n	8040416 <__adddf3+0x16a>
 8040404:	f102 0c14 	add.w	ip, r2, #20
 8040408:	f1c2 020c 	rsb	r2, r2, #12
 804040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8040410:	fa21 f102 	lsr.w	r1, r1, r2
 8040414:	e00c      	b.n	8040430 <__adddf3+0x184>
 8040416:	f102 0214 	add.w	r2, r2, #20
 804041a:	bfd8      	it	le
 804041c:	f1c2 0c20 	rsble	ip, r2, #32
 8040420:	fa01 f102 	lsl.w	r1, r1, r2
 8040424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8040428:	bfdc      	itt	le
 804042a:	ea41 010c 	orrle.w	r1, r1, ip
 804042e:	4090      	lslle	r0, r2
 8040430:	1ae4      	subs	r4, r4, r3
 8040432:	bfa2      	ittt	ge
 8040434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8040438:	4329      	orrge	r1, r5
 804043a:	bd30      	popge	{r4, r5, pc}
 804043c:	ea6f 0404 	mvn.w	r4, r4
 8040440:	3c1f      	subs	r4, #31
 8040442:	da1c      	bge.n	804047e <__adddf3+0x1d2>
 8040444:	340c      	adds	r4, #12
 8040446:	dc0e      	bgt.n	8040466 <__adddf3+0x1ba>
 8040448:	f104 0414 	add.w	r4, r4, #20
 804044c:	f1c4 0220 	rsb	r2, r4, #32
 8040450:	fa20 f004 	lsr.w	r0, r0, r4
 8040454:	fa01 f302 	lsl.w	r3, r1, r2
 8040458:	ea40 0003 	orr.w	r0, r0, r3
 804045c:	fa21 f304 	lsr.w	r3, r1, r4
 8040460:	ea45 0103 	orr.w	r1, r5, r3
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	f1c4 040c 	rsb	r4, r4, #12
 804046a:	f1c4 0220 	rsb	r2, r4, #32
 804046e:	fa20 f002 	lsr.w	r0, r0, r2
 8040472:	fa01 f304 	lsl.w	r3, r1, r4
 8040476:	ea40 0003 	orr.w	r0, r0, r3
 804047a:	4629      	mov	r1, r5
 804047c:	bd30      	pop	{r4, r5, pc}
 804047e:	fa21 f004 	lsr.w	r0, r1, r4
 8040482:	4629      	mov	r1, r5
 8040484:	bd30      	pop	{r4, r5, pc}
 8040486:	f094 0f00 	teq	r4, #0
 804048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 804048e:	bf06      	itte	eq
 8040490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8040494:	3401      	addeq	r4, #1
 8040496:	3d01      	subne	r5, #1
 8040498:	e74e      	b.n	8040338 <__adddf3+0x8c>
 804049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 804049e:	bf18      	it	ne
 80404a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80404a4:	d029      	beq.n	80404fa <__adddf3+0x24e>
 80404a6:	ea94 0f05 	teq	r4, r5
 80404aa:	bf08      	it	eq
 80404ac:	ea90 0f02 	teqeq	r0, r2
 80404b0:	d005      	beq.n	80404be <__adddf3+0x212>
 80404b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80404b6:	bf04      	itt	eq
 80404b8:	4619      	moveq	r1, r3
 80404ba:	4610      	moveq	r0, r2
 80404bc:	bd30      	pop	{r4, r5, pc}
 80404be:	ea91 0f03 	teq	r1, r3
 80404c2:	bf1e      	ittt	ne
 80404c4:	2100      	movne	r1, #0
 80404c6:	2000      	movne	r0, #0
 80404c8:	bd30      	popne	{r4, r5, pc}
 80404ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80404ce:	d105      	bne.n	80404dc <__adddf3+0x230>
 80404d0:	0040      	lsls	r0, r0, #1
 80404d2:	4149      	adcs	r1, r1
 80404d4:	bf28      	it	cs
 80404d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80404da:	bd30      	pop	{r4, r5, pc}
 80404dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80404e0:	bf3c      	itt	cc
 80404e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80404e6:	bd30      	popcc	{r4, r5, pc}
 80404e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80404ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80404f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80404f4:	f04f 0000 	mov.w	r0, #0
 80404f8:	bd30      	pop	{r4, r5, pc}
 80404fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404fe:	bf1a      	itte	ne
 8040500:	4619      	movne	r1, r3
 8040502:	4610      	movne	r0, r2
 8040504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8040508:	bf1c      	itt	ne
 804050a:	460b      	movne	r3, r1
 804050c:	4602      	movne	r2, r0
 804050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8040512:	bf06      	itte	eq
 8040514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8040518:	ea91 0f03 	teqeq	r1, r3
 804051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8040520:	bd30      	pop	{r4, r5, pc}
 8040522:	bf00      	nop

08040524 <__aeabi_ui2d>:
 8040524:	f090 0f00 	teq	r0, #0
 8040528:	bf04      	itt	eq
 804052a:	2100      	moveq	r1, #0
 804052c:	4770      	bxeq	lr
 804052e:	b530      	push	{r4, r5, lr}
 8040530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040538:	f04f 0500 	mov.w	r5, #0
 804053c:	f04f 0100 	mov.w	r1, #0
 8040540:	e750      	b.n	80403e4 <__adddf3+0x138>
 8040542:	bf00      	nop

08040544 <__aeabi_i2d>:
 8040544:	f090 0f00 	teq	r0, #0
 8040548:	bf04      	itt	eq
 804054a:	2100      	moveq	r1, #0
 804054c:	4770      	bxeq	lr
 804054e:	b530      	push	{r4, r5, lr}
 8040550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8040554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 804055c:	bf48      	it	mi
 804055e:	4240      	negmi	r0, r0
 8040560:	f04f 0100 	mov.w	r1, #0
 8040564:	e73e      	b.n	80403e4 <__adddf3+0x138>
 8040566:	bf00      	nop

08040568 <__aeabi_f2d>:
 8040568:	0042      	lsls	r2, r0, #1
 804056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 804056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8040572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8040576:	bf1f      	itttt	ne
 8040578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 804057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8040584:	4770      	bxne	lr
 8040586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 804058a:	bf08      	it	eq
 804058c:	4770      	bxeq	lr
 804058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8040592:	bf04      	itt	eq
 8040594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040598:	4770      	bxeq	lr
 804059a:	b530      	push	{r4, r5, lr}
 804059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80405a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80405a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80405a8:	e71c      	b.n	80403e4 <__adddf3+0x138>
 80405aa:	bf00      	nop

080405ac <__aeabi_ul2d>:
 80405ac:	ea50 0201 	orrs.w	r2, r0, r1
 80405b0:	bf08      	it	eq
 80405b2:	4770      	bxeq	lr
 80405b4:	b530      	push	{r4, r5, lr}
 80405b6:	f04f 0500 	mov.w	r5, #0
 80405ba:	e00a      	b.n	80405d2 <__aeabi_l2d+0x16>

080405bc <__aeabi_l2d>:
 80405bc:	ea50 0201 	orrs.w	r2, r0, r1
 80405c0:	bf08      	it	eq
 80405c2:	4770      	bxeq	lr
 80405c4:	b530      	push	{r4, r5, lr}
 80405c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80405ca:	d502      	bpl.n	80405d2 <__aeabi_l2d+0x16>
 80405cc:	4240      	negs	r0, r0
 80405ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80405d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80405d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80405da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80405de:	f43f aed8 	beq.w	8040392 <__adddf3+0xe6>
 80405e2:	f04f 0203 	mov.w	r2, #3
 80405e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405ea:	bf18      	it	ne
 80405ec:	3203      	addne	r2, #3
 80405ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80405f2:	bf18      	it	ne
 80405f4:	3203      	addne	r2, #3
 80405f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405fa:	f1c2 0320 	rsb	r3, r2, #32
 80405fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8040602:	fa20 f002 	lsr.w	r0, r0, r2
 8040606:	fa01 fe03 	lsl.w	lr, r1, r3
 804060a:	ea40 000e 	orr.w	r0, r0, lr
 804060e:	fa21 f102 	lsr.w	r1, r1, r2
 8040612:	4414      	add	r4, r2
 8040614:	e6bd      	b.n	8040392 <__adddf3+0xe6>
 8040616:	bf00      	nop

08040618 <__aeabi_dmul>:
 8040618:	b570      	push	{r4, r5, r6, lr}
 804061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040626:	bf1d      	ittte	ne
 8040628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 804062c:	ea94 0f0c 	teqne	r4, ip
 8040630:	ea95 0f0c 	teqne	r5, ip
 8040634:	f000 f8de 	bleq	80407f4 <__aeabi_dmul+0x1dc>
 8040638:	442c      	add	r4, r5
 804063a:	ea81 0603 	eor.w	r6, r1, r3
 804063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8040642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8040646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 804064a:	bf18      	it	ne
 804064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8040650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040658:	d038      	beq.n	80406cc <__aeabi_dmul+0xb4>
 804065a:	fba0 ce02 	umull	ip, lr, r0, r2
 804065e:	f04f 0500 	mov.w	r5, #0
 8040662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8040666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 804066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 804066e:	f04f 0600 	mov.w	r6, #0
 8040672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8040676:	f09c 0f00 	teq	ip, #0
 804067a:	bf18      	it	ne
 804067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8040680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8040684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 804068c:	d204      	bcs.n	8040698 <__aeabi_dmul+0x80>
 804068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8040692:	416d      	adcs	r5, r5
 8040694:	eb46 0606 	adc.w	r6, r6, r6
 8040698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 804069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80406a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80406a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80406a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80406ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80406b0:	bf88      	it	hi
 80406b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80406b6:	d81e      	bhi.n	80406f6 <__aeabi_dmul+0xde>
 80406b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80406bc:	bf08      	it	eq
 80406be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80406c2:	f150 0000 	adcs.w	r0, r0, #0
 80406c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80406ca:	bd70      	pop	{r4, r5, r6, pc}
 80406cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80406d0:	ea46 0101 	orr.w	r1, r6, r1
 80406d4:	ea40 0002 	orr.w	r0, r0, r2
 80406d8:	ea81 0103 	eor.w	r1, r1, r3
 80406dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80406e0:	bfc2      	ittt	gt
 80406e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80406e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80406ea:	bd70      	popgt	{r4, r5, r6, pc}
 80406ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80406f0:	f04f 0e00 	mov.w	lr, #0
 80406f4:	3c01      	subs	r4, #1
 80406f6:	f300 80ab 	bgt.w	8040850 <__aeabi_dmul+0x238>
 80406fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406fe:	bfde      	ittt	le
 8040700:	2000      	movle	r0, #0
 8040702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8040706:	bd70      	pople	{r4, r5, r6, pc}
 8040708:	f1c4 0400 	rsb	r4, r4, #0
 804070c:	3c20      	subs	r4, #32
 804070e:	da35      	bge.n	804077c <__aeabi_dmul+0x164>
 8040710:	340c      	adds	r4, #12
 8040712:	dc1b      	bgt.n	804074c <__aeabi_dmul+0x134>
 8040714:	f104 0414 	add.w	r4, r4, #20
 8040718:	f1c4 0520 	rsb	r5, r4, #32
 804071c:	fa00 f305 	lsl.w	r3, r0, r5
 8040720:	fa20 f004 	lsr.w	r0, r0, r4
 8040724:	fa01 f205 	lsl.w	r2, r1, r5
 8040728:	ea40 0002 	orr.w	r0, r0, r2
 804072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8040730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040738:	fa21 f604 	lsr.w	r6, r1, r4
 804073c:	eb42 0106 	adc.w	r1, r2, r6
 8040740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040744:	bf08      	it	eq
 8040746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804074a:	bd70      	pop	{r4, r5, r6, pc}
 804074c:	f1c4 040c 	rsb	r4, r4, #12
 8040750:	f1c4 0520 	rsb	r5, r4, #32
 8040754:	fa00 f304 	lsl.w	r3, r0, r4
 8040758:	fa20 f005 	lsr.w	r0, r0, r5
 804075c:	fa01 f204 	lsl.w	r2, r1, r4
 8040760:	ea40 0002 	orr.w	r0, r0, r2
 8040764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 804076c:	f141 0100 	adc.w	r1, r1, #0
 8040770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040774:	bf08      	it	eq
 8040776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804077a:	bd70      	pop	{r4, r5, r6, pc}
 804077c:	f1c4 0520 	rsb	r5, r4, #32
 8040780:	fa00 f205 	lsl.w	r2, r0, r5
 8040784:	ea4e 0e02 	orr.w	lr, lr, r2
 8040788:	fa20 f304 	lsr.w	r3, r0, r4
 804078c:	fa01 f205 	lsl.w	r2, r1, r5
 8040790:	ea43 0302 	orr.w	r3, r3, r2
 8040794:	fa21 f004 	lsr.w	r0, r1, r4
 8040798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 804079c:	fa21 f204 	lsr.w	r2, r1, r4
 80407a0:	ea20 0002 	bic.w	r0, r0, r2
 80407a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80407a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80407ac:	bf08      	it	eq
 80407ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80407b2:	bd70      	pop	{r4, r5, r6, pc}
 80407b4:	f094 0f00 	teq	r4, #0
 80407b8:	d10f      	bne.n	80407da <__aeabi_dmul+0x1c2>
 80407ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80407be:	0040      	lsls	r0, r0, #1
 80407c0:	eb41 0101 	adc.w	r1, r1, r1
 80407c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80407c8:	bf08      	it	eq
 80407ca:	3c01      	subeq	r4, #1
 80407cc:	d0f7      	beq.n	80407be <__aeabi_dmul+0x1a6>
 80407ce:	ea41 0106 	orr.w	r1, r1, r6
 80407d2:	f095 0f00 	teq	r5, #0
 80407d6:	bf18      	it	ne
 80407d8:	4770      	bxne	lr
 80407da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80407de:	0052      	lsls	r2, r2, #1
 80407e0:	eb43 0303 	adc.w	r3, r3, r3
 80407e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80407e8:	bf08      	it	eq
 80407ea:	3d01      	subeq	r5, #1
 80407ec:	d0f7      	beq.n	80407de <__aeabi_dmul+0x1c6>
 80407ee:	ea43 0306 	orr.w	r3, r3, r6
 80407f2:	4770      	bx	lr
 80407f4:	ea94 0f0c 	teq	r4, ip
 80407f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407fc:	bf18      	it	ne
 80407fe:	ea95 0f0c 	teqne	r5, ip
 8040802:	d00c      	beq.n	804081e <__aeabi_dmul+0x206>
 8040804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040808:	bf18      	it	ne
 804080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804080e:	d1d1      	bne.n	80407b4 <__aeabi_dmul+0x19c>
 8040810:	ea81 0103 	eor.w	r1, r1, r3
 8040814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040818:	f04f 0000 	mov.w	r0, #0
 804081c:	bd70      	pop	{r4, r5, r6, pc}
 804081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040822:	bf06      	itte	eq
 8040824:	4610      	moveq	r0, r2
 8040826:	4619      	moveq	r1, r3
 8040828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 804082c:	d019      	beq.n	8040862 <__aeabi_dmul+0x24a>
 804082e:	ea94 0f0c 	teq	r4, ip
 8040832:	d102      	bne.n	804083a <__aeabi_dmul+0x222>
 8040834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8040838:	d113      	bne.n	8040862 <__aeabi_dmul+0x24a>
 804083a:	ea95 0f0c 	teq	r5, ip
 804083e:	d105      	bne.n	804084c <__aeabi_dmul+0x234>
 8040840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8040844:	bf1c      	itt	ne
 8040846:	4610      	movne	r0, r2
 8040848:	4619      	movne	r1, r3
 804084a:	d10a      	bne.n	8040862 <__aeabi_dmul+0x24a>
 804084c:	ea81 0103 	eor.w	r1, r1, r3
 8040850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804085c:	f04f 0000 	mov.w	r0, #0
 8040860:	bd70      	pop	{r4, r5, r6, pc}
 8040862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 804086a:	bd70      	pop	{r4, r5, r6, pc}

0804086c <__aeabi_ddiv>:
 804086c:	b570      	push	{r4, r5, r6, lr}
 804086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8040872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8040876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 804087a:	bf1d      	ittte	ne
 804087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040880:	ea94 0f0c 	teqne	r4, ip
 8040884:	ea95 0f0c 	teqne	r5, ip
 8040888:	f000 f8a7 	bleq	80409da <__aeabi_ddiv+0x16e>
 804088c:	eba4 0405 	sub.w	r4, r4, r5
 8040890:	ea81 0e03 	eor.w	lr, r1, r3
 8040894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 804089c:	f000 8088 	beq.w	80409b0 <__aeabi_ddiv+0x144>
 80408a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80408a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80408a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80408ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80408b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80408b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80408b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80408bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80408c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80408c4:	429d      	cmp	r5, r3
 80408c6:	bf08      	it	eq
 80408c8:	4296      	cmpeq	r6, r2
 80408ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80408ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80408d2:	d202      	bcs.n	80408da <__aeabi_ddiv+0x6e>
 80408d4:	085b      	lsrs	r3, r3, #1
 80408d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80408da:	1ab6      	subs	r6, r6, r2
 80408dc:	eb65 0503 	sbc.w	r5, r5, r3
 80408e0:	085b      	lsrs	r3, r3, #1
 80408e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80408ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80408ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80408f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408f6:	bf22      	ittt	cs
 80408f8:	1ab6      	subcs	r6, r6, r2
 80408fa:	4675      	movcs	r5, lr
 80408fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8040900:	085b      	lsrs	r3, r3, #1
 8040902:	ea4f 0232 	mov.w	r2, r2, rrx
 8040906:	ebb6 0e02 	subs.w	lr, r6, r2
 804090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804090e:	bf22      	ittt	cs
 8040910:	1ab6      	subcs	r6, r6, r2
 8040912:	4675      	movcs	r5, lr
 8040914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8040918:	085b      	lsrs	r3, r3, #1
 804091a:	ea4f 0232 	mov.w	r2, r2, rrx
 804091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8040922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8040926:	bf22      	ittt	cs
 8040928:	1ab6      	subcs	r6, r6, r2
 804092a:	4675      	movcs	r5, lr
 804092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8040930:	085b      	lsrs	r3, r3, #1
 8040932:	ea4f 0232 	mov.w	r2, r2, rrx
 8040936:	ebb6 0e02 	subs.w	lr, r6, r2
 804093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804093e:	bf22      	ittt	cs
 8040940:	1ab6      	subcs	r6, r6, r2
 8040942:	4675      	movcs	r5, lr
 8040944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8040948:	ea55 0e06 	orrs.w	lr, r5, r6
 804094c:	d018      	beq.n	8040980 <__aeabi_ddiv+0x114>
 804094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8040952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8040956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 804095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 804095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8040962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8040966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 804096a:	d1c0      	bne.n	80408ee <__aeabi_ddiv+0x82>
 804096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040970:	d10b      	bne.n	804098a <__aeabi_ddiv+0x11e>
 8040972:	ea41 0100 	orr.w	r1, r1, r0
 8040976:	f04f 0000 	mov.w	r0, #0
 804097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 804097e:	e7b6      	b.n	80408ee <__aeabi_ddiv+0x82>
 8040980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040984:	bf04      	itt	eq
 8040986:	4301      	orreq	r1, r0
 8040988:	2000      	moveq	r0, #0
 804098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 804098e:	bf88      	it	hi
 8040990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8040994:	f63f aeaf 	bhi.w	80406f6 <__aeabi_dmul+0xde>
 8040998:	ebb5 0c03 	subs.w	ip, r5, r3
 804099c:	bf04      	itt	eq
 804099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80409a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80409a6:	f150 0000 	adcs.w	r0, r0, #0
 80409aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80409ae:	bd70      	pop	{r4, r5, r6, pc}
 80409b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80409b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80409b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80409bc:	bfc2      	ittt	gt
 80409be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80409c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80409c6:	bd70      	popgt	{r4, r5, r6, pc}
 80409c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80409cc:	f04f 0e00 	mov.w	lr, #0
 80409d0:	3c01      	subs	r4, #1
 80409d2:	e690      	b.n	80406f6 <__aeabi_dmul+0xde>
 80409d4:	ea45 0e06 	orr.w	lr, r5, r6
 80409d8:	e68d      	b.n	80406f6 <__aeabi_dmul+0xde>
 80409da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80409de:	ea94 0f0c 	teq	r4, ip
 80409e2:	bf08      	it	eq
 80409e4:	ea95 0f0c 	teqeq	r5, ip
 80409e8:	f43f af3b 	beq.w	8040862 <__aeabi_dmul+0x24a>
 80409ec:	ea94 0f0c 	teq	r4, ip
 80409f0:	d10a      	bne.n	8040a08 <__aeabi_ddiv+0x19c>
 80409f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80409f6:	f47f af34 	bne.w	8040862 <__aeabi_dmul+0x24a>
 80409fa:	ea95 0f0c 	teq	r5, ip
 80409fe:	f47f af25 	bne.w	804084c <__aeabi_dmul+0x234>
 8040a02:	4610      	mov	r0, r2
 8040a04:	4619      	mov	r1, r3
 8040a06:	e72c      	b.n	8040862 <__aeabi_dmul+0x24a>
 8040a08:	ea95 0f0c 	teq	r5, ip
 8040a0c:	d106      	bne.n	8040a1c <__aeabi_ddiv+0x1b0>
 8040a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040a12:	f43f aefd 	beq.w	8040810 <__aeabi_dmul+0x1f8>
 8040a16:	4610      	mov	r0, r2
 8040a18:	4619      	mov	r1, r3
 8040a1a:	e722      	b.n	8040862 <__aeabi_dmul+0x24a>
 8040a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8040a20:	bf18      	it	ne
 8040a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8040a26:	f47f aec5 	bne.w	80407b4 <__aeabi_dmul+0x19c>
 8040a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8040a2e:	f47f af0d 	bne.w	804084c <__aeabi_dmul+0x234>
 8040a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8040a36:	f47f aeeb 	bne.w	8040810 <__aeabi_dmul+0x1f8>
 8040a3a:	e712      	b.n	8040862 <__aeabi_dmul+0x24a>

08040a3c <__gedf2>:
 8040a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8040a40:	e006      	b.n	8040a50 <__cmpdf2+0x4>
 8040a42:	bf00      	nop

08040a44 <__ledf2>:
 8040a44:	f04f 0c01 	mov.w	ip, #1
 8040a48:	e002      	b.n	8040a50 <__cmpdf2+0x4>
 8040a4a:	bf00      	nop

08040a4c <__cmpdf2>:
 8040a4c:	f04f 0c01 	mov.w	ip, #1
 8040a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8040a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a60:	bf18      	it	ne
 8040a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a66:	d01b      	beq.n	8040aa0 <__cmpdf2+0x54>
 8040a68:	b001      	add	sp, #4
 8040a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a6e:	bf0c      	ite	eq
 8040a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a74:	ea91 0f03 	teqne	r1, r3
 8040a78:	bf02      	ittt	eq
 8040a7a:	ea90 0f02 	teqeq	r0, r2
 8040a7e:	2000      	moveq	r0, #0
 8040a80:	4770      	bxeq	lr
 8040a82:	f110 0f00 	cmn.w	r0, #0
 8040a86:	ea91 0f03 	teq	r1, r3
 8040a8a:	bf58      	it	pl
 8040a8c:	4299      	cmppl	r1, r3
 8040a8e:	bf08      	it	eq
 8040a90:	4290      	cmpeq	r0, r2
 8040a92:	bf2c      	ite	cs
 8040a94:	17d8      	asrcs	r0, r3, #31
 8040a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a9a:	f040 0001 	orr.w	r0, r0, #1
 8040a9e:	4770      	bx	lr
 8040aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040aa8:	d102      	bne.n	8040ab0 <__cmpdf2+0x64>
 8040aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040aae:	d107      	bne.n	8040ac0 <__cmpdf2+0x74>
 8040ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040ab8:	d1d6      	bne.n	8040a68 <__cmpdf2+0x1c>
 8040aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040abe:	d0d3      	beq.n	8040a68 <__cmpdf2+0x1c>
 8040ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040ac4:	4770      	bx	lr
 8040ac6:	bf00      	nop

08040ac8 <__aeabi_cdrcmple>:
 8040ac8:	4684      	mov	ip, r0
 8040aca:	4610      	mov	r0, r2
 8040acc:	4662      	mov	r2, ip
 8040ace:	468c      	mov	ip, r1
 8040ad0:	4619      	mov	r1, r3
 8040ad2:	4663      	mov	r3, ip
 8040ad4:	e000      	b.n	8040ad8 <__aeabi_cdcmpeq>
 8040ad6:	bf00      	nop

08040ad8 <__aeabi_cdcmpeq>:
 8040ad8:	b501      	push	{r0, lr}
 8040ada:	f7ff ffb7 	bl	8040a4c <__cmpdf2>
 8040ade:	2800      	cmp	r0, #0
 8040ae0:	bf48      	it	mi
 8040ae2:	f110 0f00 	cmnmi.w	r0, #0
 8040ae6:	bd01      	pop	{r0, pc}

08040ae8 <__aeabi_dcmpeq>:
 8040ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040aec:	f7ff fff4 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040af0:	bf0c      	ite	eq
 8040af2:	2001      	moveq	r0, #1
 8040af4:	2000      	movne	r0, #0
 8040af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040afa:	bf00      	nop

08040afc <__aeabi_dcmplt>:
 8040afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b00:	f7ff ffea 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040b04:	bf34      	ite	cc
 8040b06:	2001      	movcc	r0, #1
 8040b08:	2000      	movcs	r0, #0
 8040b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b0e:	bf00      	nop

08040b10 <__aeabi_dcmple>:
 8040b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b14:	f7ff ffe0 	bl	8040ad8 <__aeabi_cdcmpeq>
 8040b18:	bf94      	ite	ls
 8040b1a:	2001      	movls	r0, #1
 8040b1c:	2000      	movhi	r0, #0
 8040b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b22:	bf00      	nop

08040b24 <__aeabi_dcmpge>:
 8040b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b28:	f7ff ffce 	bl	8040ac8 <__aeabi_cdrcmple>
 8040b2c:	bf94      	ite	ls
 8040b2e:	2001      	movls	r0, #1
 8040b30:	2000      	movhi	r0, #0
 8040b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b36:	bf00      	nop

08040b38 <__aeabi_dcmpgt>:
 8040b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040b3c:	f7ff ffc4 	bl	8040ac8 <__aeabi_cdrcmple>
 8040b40:	bf34      	ite	cc
 8040b42:	2001      	movcc	r0, #1
 8040b44:	2000      	movcs	r0, #0
 8040b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8040b4a:	bf00      	nop

08040b4c <__aeabi_dcmpun>:
 8040b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b54:	d102      	bne.n	8040b5c <__aeabi_dcmpun+0x10>
 8040b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b5a:	d10a      	bne.n	8040b72 <__aeabi_dcmpun+0x26>
 8040b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b64:	d102      	bne.n	8040b6c <__aeabi_dcmpun+0x20>
 8040b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b6a:	d102      	bne.n	8040b72 <__aeabi_dcmpun+0x26>
 8040b6c:	f04f 0000 	mov.w	r0, #0
 8040b70:	4770      	bx	lr
 8040b72:	f04f 0001 	mov.w	r0, #1
 8040b76:	4770      	bx	lr

08040b78 <__aeabi_d2iz>:
 8040b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b80:	d215      	bcs.n	8040bae <__aeabi_d2iz+0x36>
 8040b82:	d511      	bpl.n	8040ba8 <__aeabi_d2iz+0x30>
 8040b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b8c:	d912      	bls.n	8040bb4 <__aeabi_d2iz+0x3c>
 8040b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8040ba2:	bf18      	it	ne
 8040ba4:	4240      	negne	r0, r0
 8040ba6:	4770      	bx	lr
 8040ba8:	f04f 0000 	mov.w	r0, #0
 8040bac:	4770      	bx	lr
 8040bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bb2:	d105      	bne.n	8040bc0 <__aeabi_d2iz+0x48>
 8040bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040bb8:	bf08      	it	eq
 8040bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040bbe:	4770      	bx	lr
 8040bc0:	f04f 0000 	mov.w	r0, #0
 8040bc4:	4770      	bx	lr
 8040bc6:	bf00      	nop

08040bc8 <__aeabi_d2uiz>:
 8040bc8:	004a      	lsls	r2, r1, #1
 8040bca:	d211      	bcs.n	8040bf0 <__aeabi_d2uiz+0x28>
 8040bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040bd0:	d211      	bcs.n	8040bf6 <__aeabi_d2uiz+0x2e>
 8040bd2:	d50d      	bpl.n	8040bf0 <__aeabi_d2uiz+0x28>
 8040bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040bdc:	d40e      	bmi.n	8040bfc <__aeabi_d2uiz+0x34>
 8040bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040bea:	fa23 f002 	lsr.w	r0, r3, r2
 8040bee:	4770      	bx	lr
 8040bf0:	f04f 0000 	mov.w	r0, #0
 8040bf4:	4770      	bx	lr
 8040bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040bfa:	d102      	bne.n	8040c02 <__aeabi_d2uiz+0x3a>
 8040bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8040c00:	4770      	bx	lr
 8040c02:	f04f 0000 	mov.w	r0, #0
 8040c06:	4770      	bx	lr

08040c08 <__aeabi_uldivmod>:
 8040c08:	b953      	cbnz	r3, 8040c20 <__aeabi_uldivmod+0x18>
 8040c0a:	b94a      	cbnz	r2, 8040c20 <__aeabi_uldivmod+0x18>
 8040c0c:	2900      	cmp	r1, #0
 8040c0e:	bf08      	it	eq
 8040c10:	2800      	cmpeq	r0, #0
 8040c12:	bf1c      	itt	ne
 8040c14:	f04f 31ff 	movne.w	r1, #4294967295
 8040c18:	f04f 30ff 	movne.w	r0, #4294967295
 8040c1c:	f000 b9a6 	b.w	8040f6c <__aeabi_idiv0>
 8040c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8040c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040c28:	f000 f83c 	bl	8040ca4 <__udivmoddi4>
 8040c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040c34:	b004      	add	sp, #16
 8040c36:	4770      	bx	lr

08040c38 <__aeabi_d2lz>:
 8040c38:	b538      	push	{r3, r4, r5, lr}
 8040c3a:	2200      	movs	r2, #0
 8040c3c:	2300      	movs	r3, #0
 8040c3e:	4604      	mov	r4, r0
 8040c40:	460d      	mov	r5, r1
 8040c42:	f7ff ff5b 	bl	8040afc <__aeabi_dcmplt>
 8040c46:	b928      	cbnz	r0, 8040c54 <__aeabi_d2lz+0x1c>
 8040c48:	4620      	mov	r0, r4
 8040c4a:	4629      	mov	r1, r5
 8040c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040c50:	f000 b80a 	b.w	8040c68 <__aeabi_d2ulz>
 8040c54:	4620      	mov	r0, r4
 8040c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040c5a:	f000 f805 	bl	8040c68 <__aeabi_d2ulz>
 8040c5e:	4240      	negs	r0, r0
 8040c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040c64:	bd38      	pop	{r3, r4, r5, pc}
 8040c66:	bf00      	nop

08040c68 <__aeabi_d2ulz>:
 8040c68:	b5d0      	push	{r4, r6, r7, lr}
 8040c6a:	4b0c      	ldr	r3, [pc, #48]	; (8040c9c <__aeabi_d2ulz+0x34>)
 8040c6c:	2200      	movs	r2, #0
 8040c6e:	4606      	mov	r6, r0
 8040c70:	460f      	mov	r7, r1
 8040c72:	f7ff fcd1 	bl	8040618 <__aeabi_dmul>
 8040c76:	f7ff ffa7 	bl	8040bc8 <__aeabi_d2uiz>
 8040c7a:	4604      	mov	r4, r0
 8040c7c:	f7ff fc52 	bl	8040524 <__aeabi_ui2d>
 8040c80:	4b07      	ldr	r3, [pc, #28]	; (8040ca0 <__aeabi_d2ulz+0x38>)
 8040c82:	2200      	movs	r2, #0
 8040c84:	f7ff fcc8 	bl	8040618 <__aeabi_dmul>
 8040c88:	4602      	mov	r2, r0
 8040c8a:	460b      	mov	r3, r1
 8040c8c:	4630      	mov	r0, r6
 8040c8e:	4639      	mov	r1, r7
 8040c90:	f7ff fb0a 	bl	80402a8 <__aeabi_dsub>
 8040c94:	f7ff ff98 	bl	8040bc8 <__aeabi_d2uiz>
 8040c98:	4621      	mov	r1, r4
 8040c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8040c9c:	3df00000 	.word	0x3df00000
 8040ca0:	41f00000 	.word	0x41f00000

08040ca4 <__udivmoddi4>:
 8040ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040ca8:	9e08      	ldr	r6, [sp, #32]
 8040caa:	460d      	mov	r5, r1
 8040cac:	4604      	mov	r4, r0
 8040cae:	460f      	mov	r7, r1
 8040cb0:	2b00      	cmp	r3, #0
 8040cb2:	d14a      	bne.n	8040d4a <__udivmoddi4+0xa6>
 8040cb4:	428a      	cmp	r2, r1
 8040cb6:	4694      	mov	ip, r2
 8040cb8:	d965      	bls.n	8040d86 <__udivmoddi4+0xe2>
 8040cba:	fab2 f382 	clz	r3, r2
 8040cbe:	b143      	cbz	r3, 8040cd2 <__udivmoddi4+0x2e>
 8040cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8040cc4:	f1c3 0220 	rsb	r2, r3, #32
 8040cc8:	409f      	lsls	r7, r3
 8040cca:	fa20 f202 	lsr.w	r2, r0, r2
 8040cce:	4317      	orrs	r7, r2
 8040cd0:	409c      	lsls	r4, r3
 8040cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8040cd6:	fa1f f58c 	uxth.w	r5, ip
 8040cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8040cde:	0c22      	lsrs	r2, r4, #16
 8040ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8040ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8040ce8:	fb01 f005 	mul.w	r0, r1, r5
 8040cec:	4290      	cmp	r0, r2
 8040cee:	d90a      	bls.n	8040d06 <__udivmoddi4+0x62>
 8040cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8040cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8040cf8:	f080 811c 	bcs.w	8040f34 <__udivmoddi4+0x290>
 8040cfc:	4290      	cmp	r0, r2
 8040cfe:	f240 8119 	bls.w	8040f34 <__udivmoddi4+0x290>
 8040d02:	3902      	subs	r1, #2
 8040d04:	4462      	add	r2, ip
 8040d06:	1a12      	subs	r2, r2, r0
 8040d08:	b2a4      	uxth	r4, r4
 8040d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8040d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8040d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8040d16:	fb00 f505 	mul.w	r5, r0, r5
 8040d1a:	42a5      	cmp	r5, r4
 8040d1c:	d90a      	bls.n	8040d34 <__udivmoddi4+0x90>
 8040d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8040d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8040d26:	f080 8107 	bcs.w	8040f38 <__udivmoddi4+0x294>
 8040d2a:	42a5      	cmp	r5, r4
 8040d2c:	f240 8104 	bls.w	8040f38 <__udivmoddi4+0x294>
 8040d30:	4464      	add	r4, ip
 8040d32:	3802      	subs	r0, #2
 8040d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8040d38:	1b64      	subs	r4, r4, r5
 8040d3a:	2100      	movs	r1, #0
 8040d3c:	b11e      	cbz	r6, 8040d46 <__udivmoddi4+0xa2>
 8040d3e:	40dc      	lsrs	r4, r3
 8040d40:	2300      	movs	r3, #0
 8040d42:	e9c6 4300 	strd	r4, r3, [r6]
 8040d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040d4a:	428b      	cmp	r3, r1
 8040d4c:	d908      	bls.n	8040d60 <__udivmoddi4+0xbc>
 8040d4e:	2e00      	cmp	r6, #0
 8040d50:	f000 80ed 	beq.w	8040f2e <__udivmoddi4+0x28a>
 8040d54:	2100      	movs	r1, #0
 8040d56:	e9c6 0500 	strd	r0, r5, [r6]
 8040d5a:	4608      	mov	r0, r1
 8040d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040d60:	fab3 f183 	clz	r1, r3
 8040d64:	2900      	cmp	r1, #0
 8040d66:	d149      	bne.n	8040dfc <__udivmoddi4+0x158>
 8040d68:	42ab      	cmp	r3, r5
 8040d6a:	d302      	bcc.n	8040d72 <__udivmoddi4+0xce>
 8040d6c:	4282      	cmp	r2, r0
 8040d6e:	f200 80f8 	bhi.w	8040f62 <__udivmoddi4+0x2be>
 8040d72:	1a84      	subs	r4, r0, r2
 8040d74:	eb65 0203 	sbc.w	r2, r5, r3
 8040d78:	2001      	movs	r0, #1
 8040d7a:	4617      	mov	r7, r2
 8040d7c:	2e00      	cmp	r6, #0
 8040d7e:	d0e2      	beq.n	8040d46 <__udivmoddi4+0xa2>
 8040d80:	e9c6 4700 	strd	r4, r7, [r6]
 8040d84:	e7df      	b.n	8040d46 <__udivmoddi4+0xa2>
 8040d86:	b902      	cbnz	r2, 8040d8a <__udivmoddi4+0xe6>
 8040d88:	deff      	udf	#255	; 0xff
 8040d8a:	fab2 f382 	clz	r3, r2
 8040d8e:	2b00      	cmp	r3, #0
 8040d90:	f040 8090 	bne.w	8040eb4 <__udivmoddi4+0x210>
 8040d94:	1a8a      	subs	r2, r1, r2
 8040d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040d9a:	fa1f fe8c 	uxth.w	lr, ip
 8040d9e:	2101      	movs	r1, #1
 8040da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8040da4:	fb07 2015 	mls	r0, r7, r5, r2
 8040da8:	0c22      	lsrs	r2, r4, #16
 8040daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8040dae:	fb0e f005 	mul.w	r0, lr, r5
 8040db2:	4290      	cmp	r0, r2
 8040db4:	d908      	bls.n	8040dc8 <__udivmoddi4+0x124>
 8040db6:	eb1c 0202 	adds.w	r2, ip, r2
 8040dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8040dbe:	d202      	bcs.n	8040dc6 <__udivmoddi4+0x122>
 8040dc0:	4290      	cmp	r0, r2
 8040dc2:	f200 80cb 	bhi.w	8040f5c <__udivmoddi4+0x2b8>
 8040dc6:	4645      	mov	r5, r8
 8040dc8:	1a12      	subs	r2, r2, r0
 8040dca:	b2a4      	uxth	r4, r4
 8040dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8040dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8040dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8040dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8040ddc:	45a6      	cmp	lr, r4
 8040dde:	d908      	bls.n	8040df2 <__udivmoddi4+0x14e>
 8040de0:	eb1c 0404 	adds.w	r4, ip, r4
 8040de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8040de8:	d202      	bcs.n	8040df0 <__udivmoddi4+0x14c>
 8040dea:	45a6      	cmp	lr, r4
 8040dec:	f200 80bb 	bhi.w	8040f66 <__udivmoddi4+0x2c2>
 8040df0:	4610      	mov	r0, r2
 8040df2:	eba4 040e 	sub.w	r4, r4, lr
 8040df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8040dfa:	e79f      	b.n	8040d3c <__udivmoddi4+0x98>
 8040dfc:	f1c1 0720 	rsb	r7, r1, #32
 8040e00:	408b      	lsls	r3, r1
 8040e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8040e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8040e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8040e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8040e12:	40fd      	lsrs	r5, r7
 8040e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040e18:	4323      	orrs	r3, r4
 8040e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8040e1e:	fa1f fe8c 	uxth.w	lr, ip
 8040e22:	fb09 5518 	mls	r5, r9, r8, r5
 8040e26:	0c1c      	lsrs	r4, r3, #16
 8040e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8040e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8040e30:	42a5      	cmp	r5, r4
 8040e32:	fa02 f201 	lsl.w	r2, r2, r1
 8040e36:	fa00 f001 	lsl.w	r0, r0, r1
 8040e3a:	d90b      	bls.n	8040e54 <__udivmoddi4+0x1b0>
 8040e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8040e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8040e44:	f080 8088 	bcs.w	8040f58 <__udivmoddi4+0x2b4>
 8040e48:	42a5      	cmp	r5, r4
 8040e4a:	f240 8085 	bls.w	8040f58 <__udivmoddi4+0x2b4>
 8040e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8040e52:	4464      	add	r4, ip
 8040e54:	1b64      	subs	r4, r4, r5
 8040e56:	b29d      	uxth	r5, r3
 8040e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8040e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8040e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8040e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8040e68:	45a6      	cmp	lr, r4
 8040e6a:	d908      	bls.n	8040e7e <__udivmoddi4+0x1da>
 8040e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8040e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8040e74:	d26c      	bcs.n	8040f50 <__udivmoddi4+0x2ac>
 8040e76:	45a6      	cmp	lr, r4
 8040e78:	d96a      	bls.n	8040f50 <__udivmoddi4+0x2ac>
 8040e7a:	3b02      	subs	r3, #2
 8040e7c:	4464      	add	r4, ip
 8040e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8040e82:	fba3 9502 	umull	r9, r5, r3, r2
 8040e86:	eba4 040e 	sub.w	r4, r4, lr
 8040e8a:	42ac      	cmp	r4, r5
 8040e8c:	46c8      	mov	r8, r9
 8040e8e:	46ae      	mov	lr, r5
 8040e90:	d356      	bcc.n	8040f40 <__udivmoddi4+0x29c>
 8040e92:	d053      	beq.n	8040f3c <__udivmoddi4+0x298>
 8040e94:	b156      	cbz	r6, 8040eac <__udivmoddi4+0x208>
 8040e96:	ebb0 0208 	subs.w	r2, r0, r8
 8040e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8040e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8040ea2:	40ca      	lsrs	r2, r1
 8040ea4:	40cc      	lsrs	r4, r1
 8040ea6:	4317      	orrs	r7, r2
 8040ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8040eac:	4618      	mov	r0, r3
 8040eae:	2100      	movs	r1, #0
 8040eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040eb4:	f1c3 0120 	rsb	r1, r3, #32
 8040eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8040ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8040ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8040ec4:	409d      	lsls	r5, r3
 8040ec6:	432a      	orrs	r2, r5
 8040ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040ecc:	fa1f fe8c 	uxth.w	lr, ip
 8040ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8040ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8040ed8:	0c11      	lsrs	r1, r2, #16
 8040eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8040ede:	fb00 f50e 	mul.w	r5, r0, lr
 8040ee2:	428d      	cmp	r5, r1
 8040ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8040ee8:	d908      	bls.n	8040efc <__udivmoddi4+0x258>
 8040eea:	eb1c 0101 	adds.w	r1, ip, r1
 8040eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8040ef2:	d22f      	bcs.n	8040f54 <__udivmoddi4+0x2b0>
 8040ef4:	428d      	cmp	r5, r1
 8040ef6:	d92d      	bls.n	8040f54 <__udivmoddi4+0x2b0>
 8040ef8:	3802      	subs	r0, #2
 8040efa:	4461      	add	r1, ip
 8040efc:	1b49      	subs	r1, r1, r5
 8040efe:	b292      	uxth	r2, r2
 8040f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8040f04:	fb07 1115 	mls	r1, r7, r5, r1
 8040f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8040f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8040f10:	4291      	cmp	r1, r2
 8040f12:	d908      	bls.n	8040f26 <__udivmoddi4+0x282>
 8040f14:	eb1c 0202 	adds.w	r2, ip, r2
 8040f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8040f1c:	d216      	bcs.n	8040f4c <__udivmoddi4+0x2a8>
 8040f1e:	4291      	cmp	r1, r2
 8040f20:	d914      	bls.n	8040f4c <__udivmoddi4+0x2a8>
 8040f22:	3d02      	subs	r5, #2
 8040f24:	4462      	add	r2, ip
 8040f26:	1a52      	subs	r2, r2, r1
 8040f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8040f2c:	e738      	b.n	8040da0 <__udivmoddi4+0xfc>
 8040f2e:	4631      	mov	r1, r6
 8040f30:	4630      	mov	r0, r6
 8040f32:	e708      	b.n	8040d46 <__udivmoddi4+0xa2>
 8040f34:	4639      	mov	r1, r7
 8040f36:	e6e6      	b.n	8040d06 <__udivmoddi4+0x62>
 8040f38:	4610      	mov	r0, r2
 8040f3a:	e6fb      	b.n	8040d34 <__udivmoddi4+0x90>
 8040f3c:	4548      	cmp	r0, r9
 8040f3e:	d2a9      	bcs.n	8040e94 <__udivmoddi4+0x1f0>
 8040f40:	ebb9 0802 	subs.w	r8, r9, r2
 8040f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8040f48:	3b01      	subs	r3, #1
 8040f4a:	e7a3      	b.n	8040e94 <__udivmoddi4+0x1f0>
 8040f4c:	4645      	mov	r5, r8
 8040f4e:	e7ea      	b.n	8040f26 <__udivmoddi4+0x282>
 8040f50:	462b      	mov	r3, r5
 8040f52:	e794      	b.n	8040e7e <__udivmoddi4+0x1da>
 8040f54:	4640      	mov	r0, r8
 8040f56:	e7d1      	b.n	8040efc <__udivmoddi4+0x258>
 8040f58:	46d0      	mov	r8, sl
 8040f5a:	e77b      	b.n	8040e54 <__udivmoddi4+0x1b0>
 8040f5c:	3d02      	subs	r5, #2
 8040f5e:	4462      	add	r2, ip
 8040f60:	e732      	b.n	8040dc8 <__udivmoddi4+0x124>
 8040f62:	4608      	mov	r0, r1
 8040f64:	e70a      	b.n	8040d7c <__udivmoddi4+0xd8>
 8040f66:	4464      	add	r4, ip
 8040f68:	3802      	subs	r0, #2
 8040f6a:	e742      	b.n	8040df2 <__udivmoddi4+0x14e>

08040f6c <__aeabi_idiv0>:
 8040f6c:	4770      	bx	lr
 8040f6e:	bf00      	nop

08040f70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8040f70:	b480      	push	{r7}
 8040f72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8040f74:	f3bf 8f4f 	dsb	sy
}
 8040f78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8040f7a:	4b06      	ldr	r3, [pc, #24]	; (8040f94 <__NVIC_SystemReset+0x24>)
 8040f7c:	68db      	ldr	r3, [r3, #12]
 8040f7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8040f82:	4904      	ldr	r1, [pc, #16]	; (8040f94 <__NVIC_SystemReset+0x24>)
 8040f84:	4b04      	ldr	r3, [pc, #16]	; (8040f98 <__NVIC_SystemReset+0x28>)
 8040f86:	4313      	orrs	r3, r2
 8040f88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8040f8a:	f3bf 8f4f 	dsb	sy
}
 8040f8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8040f90:	bf00      	nop
 8040f92:	e7fd      	b.n	8040f90 <__NVIC_SystemReset+0x20>
 8040f94:	e000ed00 	.word	0xe000ed00
 8040f98:	05fa0004 	.word	0x05fa0004

08040f9c <Delay>:
uint32_t buffer_index = 0;
volatile uint32_t current_flash_address = START_FLASH_ADDRESS;
uint32_t firmware_length_with_crc = 0;


void Delay(uint32_t milliseconds) {
 8040f9c:	b480      	push	{r7}
 8040f9e:	b085      	sub	sp, #20
 8040fa0:	af00      	add	r7, sp, #0
 8040fa2:	6078      	str	r0, [r7, #4]
    // Calculate the number of clock cycles required for the desired delay
    // The actual calculation may vary depending on your microcontroller and clock settings
    uint32_t delay_cycles = milliseconds * (SystemCoreClock / 1000) / 1000;
 8040fa4:	4b0f      	ldr	r3, [pc, #60]	; (8040fe4 <Delay+0x48>)
 8040fa6:	681b      	ldr	r3, [r3, #0]
 8040fa8:	4a0f      	ldr	r2, [pc, #60]	; (8040fe8 <Delay+0x4c>)
 8040faa:	fba2 2303 	umull	r2, r3, r2, r3
 8040fae:	099b      	lsrs	r3, r3, #6
 8040fb0:	687a      	ldr	r2, [r7, #4]
 8040fb2:	fb02 f303 	mul.w	r3, r2, r3
 8040fb6:	4a0c      	ldr	r2, [pc, #48]	; (8040fe8 <Delay+0x4c>)
 8040fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8040fbc:	099b      	lsrs	r3, r3, #6
 8040fbe:	60bb      	str	r3, [r7, #8]

    // Perform the delay using a simple loop
    for (uint32_t i = 0; i < delay_cycles; i++) {
 8040fc0:	2300      	movs	r3, #0
 8040fc2:	60fb      	str	r3, [r7, #12]
 8040fc4:	e002      	b.n	8040fcc <Delay+0x30>
 8040fc6:	68fb      	ldr	r3, [r7, #12]
 8040fc8:	3301      	adds	r3, #1
 8040fca:	60fb      	str	r3, [r7, #12]
 8040fcc:	68fa      	ldr	r2, [r7, #12]
 8040fce:	68bb      	ldr	r3, [r7, #8]
 8040fd0:	429a      	cmp	r2, r3
 8040fd2:	d3f8      	bcc.n	8040fc6 <Delay+0x2a>
        // This loop will take some time to execute, creating a delay
        // The exact duration of the delay depends on your microcontroller's clock frequency
        // Adjust the loop count or use a hardware timer for more precise delays
    }
}
 8040fd4:	bf00      	nop
 8040fd6:	bf00      	nop
 8040fd8:	3714      	adds	r7, #20
 8040fda:	46bd      	mov	sp, r7
 8040fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fe0:	4770      	bx	lr
 8040fe2:	bf00      	nop
 8040fe4:	20000024 	.word	0x20000024
 8040fe8:	10624dd3 	.word	0x10624dd3

08040fec <Initialize_Modem>:
void Initialize_Modem(void)
{
 8040fec:	b580      	push	{r7, lr}
 8040fee:	af00      	add	r7, sp, #0
    // Reset state
    at_state = AT_IDLE;
 8040ff0:	4b56      	ldr	r3, [pc, #344]	; (804114c <Initialize_Modem+0x160>)
 8040ff2:	2200      	movs	r2, #0
 8040ff4:	701a      	strb	r2, [r3, #0]

    // Proceed with other commands using the same pattern
    send_at_command("ATE0", "OK");
 8040ff6:	4956      	ldr	r1, [pc, #344]	; (8041150 <Initialize_Modem+0x164>)
 8040ff8:	4856      	ldr	r0, [pc, #344]	; (8041154 <Initialize_Modem+0x168>)
 8040ffa:	f000 ff89 	bl	8041f10 <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8040ffe:	bf00      	nop
 8041000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041004:	b29b      	uxth	r3, r3
 8041006:	4618      	mov	r0, r3
 8041008:	f000 ffac 	bl	8041f64 <check_at_command_response>
 804100c:	4603      	mov	r3, r0
 804100e:	2b01      	cmp	r3, #1
 8041010:	d0f6      	beq.n	8041000 <Initialize_Modem+0x14>
    if(at_state != AT_RESPONSE_RECEIVED)
 8041012:	4b4e      	ldr	r3, [pc, #312]	; (804114c <Initialize_Modem+0x160>)
 8041014:	781b      	ldrb	r3, [r3, #0]
 8041016:	2b02      	cmp	r3, #2
 8041018:	f040 8089 	bne.w	804112e <Initialize_Modem+0x142>
        return;
    }



    send_at_command("AT+CPIN?", "+CPIN: READY");
 804101c:	494e      	ldr	r1, [pc, #312]	; (8041158 <Initialize_Modem+0x16c>)
 804101e:	484f      	ldr	r0, [pc, #316]	; (804115c <Initialize_Modem+0x170>)
 8041020:	f000 ff76 	bl	8041f10 <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8041024:	bf00      	nop
 8041026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804102a:	b29b      	uxth	r3, r3
 804102c:	4618      	mov	r0, r3
 804102e:	f000 ff99 	bl	8041f64 <check_at_command_response>
 8041032:	4603      	mov	r3, r0
 8041034:	2b01      	cmp	r3, #1
 8041036:	d0f6      	beq.n	8041026 <Initialize_Modem+0x3a>
    if(at_state != AT_RESPONSE_RECEIVED)
 8041038:	4b44      	ldr	r3, [pc, #272]	; (804114c <Initialize_Modem+0x160>)
 804103a:	781b      	ldrb	r3, [r3, #0]
 804103c:	2b02      	cmp	r3, #2
 804103e:	d178      	bne.n	8041132 <Initialize_Modem+0x146>
        return;
    }



     send_at_command("AT+CREG?", "+CREG: 0,1");
 8041040:	4947      	ldr	r1, [pc, #284]	; (8041160 <Initialize_Modem+0x174>)
 8041042:	4848      	ldr	r0, [pc, #288]	; (8041164 <Initialize_Modem+0x178>)
 8041044:	f000 ff64 	bl	8041f10 <send_at_command>
     while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8041048:	bf00      	nop
 804104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804104e:	b29b      	uxth	r3, r3
 8041050:	4618      	mov	r0, r3
 8041052:	f000 ff87 	bl	8041f64 <check_at_command_response>
 8041056:	4603      	mov	r3, r0
 8041058:	2b01      	cmp	r3, #1
 804105a:	d0f6      	beq.n	804104a <Initialize_Modem+0x5e>
     if(at_state != AT_RESPONSE_RECEIVED)
 804105c:	4b3b      	ldr	r3, [pc, #236]	; (804114c <Initialize_Modem+0x160>)
 804105e:	781b      	ldrb	r3, [r3, #0]
 8041060:	2b02      	cmp	r3, #2
 8041062:	d168      	bne.n	8041136 <Initialize_Modem+0x14a>
     {
         return;
     }
     HAL_Delay(SHORT_DELAY);
 8041064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041068:	4618      	mov	r0, r3
 804106a:	f002 fe89 	bl	8043d80 <HAL_Delay>


      send_at_command("AT+QICSGP=1,\"airtelgprs.com\"", "OK");
 804106e:	4938      	ldr	r1, [pc, #224]	; (8041150 <Initialize_Modem+0x164>)
 8041070:	483d      	ldr	r0, [pc, #244]	; (8041168 <Initialize_Modem+0x17c>)
 8041072:	f000 ff4d 	bl	8041f10 <send_at_command>
      while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8041076:	bf00      	nop
 8041078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804107c:	b29b      	uxth	r3, r3
 804107e:	4618      	mov	r0, r3
 8041080:	f000 ff70 	bl	8041f64 <check_at_command_response>
 8041084:	4603      	mov	r3, r0
 8041086:	2b01      	cmp	r3, #1
 8041088:	d0f6      	beq.n	8041078 <Initialize_Modem+0x8c>
      if(at_state != AT_RESPONSE_RECEIVED)
 804108a:	4b30      	ldr	r3, [pc, #192]	; (804114c <Initialize_Modem+0x160>)
 804108c:	781b      	ldrb	r3, [r3, #0]
 804108e:	2b02      	cmp	r3, #2
 8041090:	d153      	bne.n	804113a <Initialize_Modem+0x14e>
          return;
      }



       send_at_command("AT+QICSGP?", "+QICSGP: 1");
 8041092:	4936      	ldr	r1, [pc, #216]	; (804116c <Initialize_Modem+0x180>)
 8041094:	4836      	ldr	r0, [pc, #216]	; (8041170 <Initialize_Modem+0x184>)
 8041096:	f000 ff3b 	bl	8041f10 <send_at_command>
       while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 804109a:	bf00      	nop
 804109c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410a0:	b29b      	uxth	r3, r3
 80410a2:	4618      	mov	r0, r3
 80410a4:	f000 ff5e 	bl	8041f64 <check_at_command_response>
 80410a8:	4603      	mov	r3, r0
 80410aa:	2b01      	cmp	r3, #1
 80410ac:	d0f6      	beq.n	804109c <Initialize_Modem+0xb0>
       if(at_state != AT_RESPONSE_RECEIVED)
 80410ae:	4b27      	ldr	r3, [pc, #156]	; (804114c <Initialize_Modem+0x160>)
 80410b0:	781b      	ldrb	r3, [r3, #0]
 80410b2:	2b02      	cmp	r3, #2
 80410b4:	d143      	bne.n	804113e <Initialize_Modem+0x152>
       {
           return;
       }

       HAL_Delay(SHORT_DELAY);
 80410b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410ba:	4618      	mov	r0, r3
 80410bc:	f002 fe60 	bl	8043d80 <HAL_Delay>

        send_at_command("AT+QIREGAPP", "OK");
 80410c0:	4923      	ldr	r1, [pc, #140]	; (8041150 <Initialize_Modem+0x164>)
 80410c2:	482c      	ldr	r0, [pc, #176]	; (8041174 <Initialize_Modem+0x188>)
 80410c4:	f000 ff24 	bl	8041f10 <send_at_command>
        while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 80410c8:	bf00      	nop
 80410ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410ce:	b29b      	uxth	r3, r3
 80410d0:	4618      	mov	r0, r3
 80410d2:	f000 ff47 	bl	8041f64 <check_at_command_response>
 80410d6:	4603      	mov	r3, r0
 80410d8:	2b01      	cmp	r3, #1
 80410da:	d0f6      	beq.n	80410ca <Initialize_Modem+0xde>
        if(at_state != AT_RESPONSE_RECEIVED)
 80410dc:	4b1b      	ldr	r3, [pc, #108]	; (804114c <Initialize_Modem+0x160>)
 80410de:	781b      	ldrb	r3, [r3, #0]
 80410e0:	2b02      	cmp	r3, #2
 80410e2:	d12e      	bne.n	8041142 <Initialize_Modem+0x156>
        {
            return;
        }
        HAL_Delay(SHORT_DELAY);
 80410e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410e8:	4618      	mov	r0, r3
 80410ea:	f002 fe49 	bl	8043d80 <HAL_Delay>


         send_at_command("AT+QIACT", "OK");
 80410ee:	4918      	ldr	r1, [pc, #96]	; (8041150 <Initialize_Modem+0x164>)
 80410f0:	4821      	ldr	r0, [pc, #132]	; (8041178 <Initialize_Modem+0x18c>)
 80410f2:	f000 ff0d 	bl	8041f10 <send_at_command>
         while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 80410f6:	bf00      	nop
 80410f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80410fc:	b29b      	uxth	r3, r3
 80410fe:	4618      	mov	r0, r3
 8041100:	f000 ff30 	bl	8041f64 <check_at_command_response>
 8041104:	4603      	mov	r3, r0
 8041106:	2b01      	cmp	r3, #1
 8041108:	d0f6      	beq.n	80410f8 <Initialize_Modem+0x10c>
         if(at_state != AT_RESPONSE_RECEIVED)
 804110a:	4b10      	ldr	r3, [pc, #64]	; (804114c <Initialize_Modem+0x160>)
 804110c:	781b      	ldrb	r3, [r3, #0]
 804110e:	2b02      	cmp	r3, #2
 8041110:	d119      	bne.n	8041146 <Initialize_Modem+0x15a>
         {
             return;
         }
         HAL_Delay(SHORT_DELAY);
 8041112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041116:	4618      	mov	r0, r3
 8041118:	f002 fe32 	bl	8043d80 <HAL_Delay>

//         HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QILOCIP\r\n", strlen("AT+QILOCIP\r\n"), 1000);
         UART_Send("AT+QILOCIP\r\n");
 804111c:	4817      	ldr	r0, [pc, #92]	; (804117c <Initialize_Modem+0x190>)
 804111e:	f000 ff5d 	bl	8041fdc <UART_Send>
         Delay(SHORT_DELAY);
 8041122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041126:	4618      	mov	r0, r3
 8041128:	f7ff ff38 	bl	8040f9c <Delay>
 804112c:	e00c      	b.n	8041148 <Initialize_Modem+0x15c>
        return;
 804112e:	bf00      	nop
 8041130:	e00a      	b.n	8041148 <Initialize_Modem+0x15c>
        return;
 8041132:	bf00      	nop
 8041134:	e008      	b.n	8041148 <Initialize_Modem+0x15c>
         return;
 8041136:	bf00      	nop
 8041138:	e006      	b.n	8041148 <Initialize_Modem+0x15c>
          return;
 804113a:	bf00      	nop
 804113c:	e004      	b.n	8041148 <Initialize_Modem+0x15c>
           return;
 804113e:	bf00      	nop
 8041140:	e002      	b.n	8041148 <Initialize_Modem+0x15c>
            return;
 8041142:	bf00      	nop
 8041144:	e000      	b.n	8041148 <Initialize_Modem+0x15c>
             return;
 8041146:	bf00      	nop




}
 8041148:	bd80      	pop	{r7, pc}
 804114a:	bf00      	nop
 804114c:	20003640 	.word	0x20003640
 8041150:	0804ab08 	.word	0x0804ab08
 8041154:	0804ab0c 	.word	0x0804ab0c
 8041158:	0804ab14 	.word	0x0804ab14
 804115c:	0804ab24 	.word	0x0804ab24
 8041160:	0804ab30 	.word	0x0804ab30
 8041164:	0804ab3c 	.word	0x0804ab3c
 8041168:	0804ab48 	.word	0x0804ab48
 804116c:	0804ab68 	.word	0x0804ab68
 8041170:	0804ab74 	.word	0x0804ab74
 8041174:	0804ab80 	.word	0x0804ab80
 8041178:	0804ab8c 	.word	0x0804ab8c
 804117c:	0804ab98 	.word	0x0804ab98

08041180 <SSL_Config>:


void SSL_Config(void){
 8041180:	b580      	push	{r7, lr}
 8041182:	af00      	add	r7, sp, #0
EiBeaDGu2GFxU3xMC4Pco1+qoetbHse8Sw5FF4dgWLoPvax2694XQG2nPk4kZ1go\n\
FSFcEE0C9x2LB5Busc2qSAEaxuZOmQ4NJZX40Sh/23Bx5j/uR4nP9eY=\n\
-----END RSA PRIVATE KEY-----\r\n";
#endif

	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTCFG=\"SSL\",0,1,2\r\n", strlen("AT+QMTCFG=\"SSL\",0,1,2\r\n"), 1000);
 8041184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041188:	2217      	movs	r2, #23
 804118a:	492b      	ldr	r1, [pc, #172]	; (8041238 <SSL_Config+0xb8>)
 804118c:	482b      	ldr	r0, [pc, #172]	; (804123c <SSL_Config+0xbc>)
 804118e:	f004 faff 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8041192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041196:	f002 fdf3 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSECWRITE=\"user_key.pem\",1679,100\r\n", strlen("AT+QSECWRITE=\"user_key.pem\",1679,100\r\n"), 1000);
	HAL_Delay(300);
	HAL_UART_Transmit(&huart2, (uint8_t *)Usr_KEY, strlen(Usr_KEY), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
#endif
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n", strlen("AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n"), 1000);
 804119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804119e:	2224      	movs	r2, #36	; 0x24
 80411a0:	4927      	ldr	r1, [pc, #156]	; (8041240 <SSL_Config+0xc0>)
 80411a2:	4826      	ldr	r0, [pc, #152]	; (804123c <SSL_Config+0xbc>)
 80411a4:	f004 faf4 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80411a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80411ac:	f002 fde8 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n", strlen("AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n"), 1000);
 80411b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80411b4:	2228      	movs	r2, #40	; 0x28
 80411b6:	4923      	ldr	r1, [pc, #140]	; (8041244 <SSL_Config+0xc4>)
 80411b8:	4820      	ldr	r0, [pc, #128]	; (804123c <SSL_Config+0xbc>)
 80411ba:	f004 fae9 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80411be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80411c2:	f002 fddd 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n", strlen("AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n"), 1000);
 80411c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80411ca:	2229      	movs	r2, #41	; 0x29
 80411cc:	491e      	ldr	r1, [pc, #120]	; (8041248 <SSL_Config+0xc8>)
 80411ce:	481b      	ldr	r0, [pc, #108]	; (804123c <SSL_Config+0xbc>)
 80411d0:	f004 fade 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80411d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80411d8:	f002 fdd2 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"seclevel\",2,2\r\n", strlen("AT+QSSLCFG=\"seclevel\",2,2\r\n"), 1000);
 80411dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80411e0:	221b      	movs	r2, #27
 80411e2:	491a      	ldr	r1, [pc, #104]	; (804124c <SSL_Config+0xcc>)
 80411e4:	4815      	ldr	r0, [pc, #84]	; (804123c <SSL_Config+0xbc>)
 80411e6:	f004 fad3 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80411ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80411ee:	f002 fdc7 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"sslversion\",2,4\r\n", strlen("AT+QSSLCFG=\"sslversion\",2,4\r\n"), 1000);
 80411f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80411f6:	221d      	movs	r2, #29
 80411f8:	4915      	ldr	r1, [pc, #84]	; (8041250 <SSL_Config+0xd0>)
 80411fa:	4810      	ldr	r0, [pc, #64]	; (804123c <SSL_Config+0xbc>)
 80411fc:	f004 fac8 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8041200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041204:	f002 fdbc 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n", strlen("AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n"), 1000);
 8041208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804120c:	2225      	movs	r2, #37	; 0x25
 804120e:	4911      	ldr	r1, [pc, #68]	; (8041254 <SSL_Config+0xd4>)
 8041210:	480a      	ldr	r0, [pc, #40]	; (804123c <SSL_Config+0xbc>)
 8041212:	f004 fabd 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8041216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804121a:	f002 fdb1 	bl	8043d80 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ignorertctime\",1\r\n", strlen("AT+QSSLCFG=\"ignorertctime\",1\r\n"), 1000);
 804121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041222:	221e      	movs	r2, #30
 8041224:	490c      	ldr	r1, [pc, #48]	; (8041258 <SSL_Config+0xd8>)
 8041226:	4805      	ldr	r0, [pc, #20]	; (804123c <SSL_Config+0xbc>)
 8041228:	f004 fab2 	bl	8045790 <HAL_UART_Transmit>
	HAL_Delay(1000);
 804122c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041230:	f002 fda6 	bl	8043d80 <HAL_Delay>

}
 8041234:	bf00      	nop
 8041236:	bd80      	pop	{r7, pc}
 8041238:	0804aba8 	.word	0x0804aba8
 804123c:	20003700 	.word	0x20003700
 8041240:	0804abc0 	.word	0x0804abc0
 8041244:	0804abe8 	.word	0x0804abe8
 8041248:	0804ac14 	.word	0x0804ac14
 804124c:	0804ac40 	.word	0x0804ac40
 8041250:	0804ac5c 	.word	0x0804ac5c
 8041254:	0804ac7c 	.word	0x0804ac7c
 8041258:	0804aca4 	.word	0x0804aca4

0804125c <AWS_MQTT>:

const char* mqtt_broker = "a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com";
const char* client_id = "M66";
const char* topic = "$aws/things/M66/shadow";
void AWS_MQTT(void){
 804125c:	b580      	push	{r7, lr}
 804125e:	b0e0      	sub	sp, #384	; 0x180
 8041260:	af00      	add	r7, sp, #0


//	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTOPEN=0,\"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com\",8883\r\n",74 , 1000);
	char mqtt_open_command[128];
	sprintf(mqtt_open_command, "AT+QMTOPEN=0,\"%s\",8883", mqtt_broker);
 8041262:	4b31      	ldr	r3, [pc, #196]	; (8041328 <AWS_MQTT+0xcc>)
 8041264:	681a      	ldr	r2, [r3, #0]
 8041266:	f507 7380 	add.w	r3, r7, #256	; 0x100
 804126a:	4930      	ldr	r1, [pc, #192]	; (804132c <AWS_MQTT+0xd0>)
 804126c:	4618      	mov	r0, r3
 804126e:	f006 fedd 	bl	804802c <siprintf>
	send_at_command(mqtt_open_command,"+QMTOPEN: 0,0");
 8041272:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8041276:	492e      	ldr	r1, [pc, #184]	; (8041330 <AWS_MQTT+0xd4>)
 8041278:	4618      	mov	r0, r3
 804127a:	f000 fe49 	bl	8041f10 <send_at_command>
    while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 804127e:	bf00      	nop
 8041280:	f644 6320 	movw	r3, #20000	; 0x4e20
 8041284:	b29b      	uxth	r3, r3
 8041286:	4618      	mov	r0, r3
 8041288:	f000 fe6c 	bl	8041f64 <check_at_command_response>
 804128c:	4603      	mov	r3, r0
 804128e:	2b01      	cmp	r3, #1
 8041290:	d0f6      	beq.n	8041280 <AWS_MQTT+0x24>
    if(at_state != AT_RESPONSE_RECEIVED)
 8041292:	4b28      	ldr	r3, [pc, #160]	; (8041334 <AWS_MQTT+0xd8>)
 8041294:	781b      	ldrb	r3, [r3, #0]
 8041296:	2b02      	cmp	r3, #2
 8041298:	d13c      	bne.n	8041314 <AWS_MQTT+0xb8>
    {
        return;
    }
	char mqtt_conn_command[128];
	sprintf(mqtt_conn_command, "AT+QMTCONN=0,\"%s\"", client_id);
 804129a:	4b27      	ldr	r3, [pc, #156]	; (8041338 <AWS_MQTT+0xdc>)
 804129c:	681a      	ldr	r2, [r3, #0]
 804129e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80412a2:	4926      	ldr	r1, [pc, #152]	; (804133c <AWS_MQTT+0xe0>)
 80412a4:	4618      	mov	r0, r3
 80412a6:	f006 fec1 	bl	804802c <siprintf>
	send_at_command(mqtt_conn_command, "+QMTCONN: 0,0,0");
 80412aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80412ae:	4924      	ldr	r1, [pc, #144]	; (8041340 <AWS_MQTT+0xe4>)
 80412b0:	4618      	mov	r0, r3
 80412b2:	f000 fe2d 	bl	8041f10 <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 80412b6:	bf00      	nop
 80412b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80412bc:	b29b      	uxth	r3, r3
 80412be:	4618      	mov	r0, r3
 80412c0:	f000 fe50 	bl	8041f64 <check_at_command_response>
 80412c4:	4603      	mov	r3, r0
 80412c6:	2b01      	cmp	r3, #1
 80412c8:	d0f6      	beq.n	80412b8 <AWS_MQTT+0x5c>
    if(at_state != AT_RESPONSE_RECEIVED)
 80412ca:	4b1a      	ldr	r3, [pc, #104]	; (8041334 <AWS_MQTT+0xd8>)
 80412cc:	781b      	ldrb	r3, [r3, #0]
 80412ce:	2b02      	cmp	r3, #2
 80412d0:	d122      	bne.n	8041318 <AWS_MQTT+0xbc>
    {
        return;
    }

    at_state = AT_IDLE;
 80412d2:	4b18      	ldr	r3, [pc, #96]	; (8041334 <AWS_MQTT+0xd8>)
 80412d4:	2200      	movs	r2, #0
 80412d6:	701a      	strb	r2, [r3, #0]
	char mqtt_sub_command[128];
	sprintf(mqtt_sub_command, "AT+QMTSUB=0,1,\"%s\",1", topic);
 80412d8:	4b1a      	ldr	r3, [pc, #104]	; (8041344 <AWS_MQTT+0xe8>)
 80412da:	681a      	ldr	r2, [r3, #0]
 80412dc:	463b      	mov	r3, r7
 80412de:	491a      	ldr	r1, [pc, #104]	; (8041348 <AWS_MQTT+0xec>)
 80412e0:	4618      	mov	r0, r3
 80412e2:	f006 fea3 	bl	804802c <siprintf>
	send_at_command(mqtt_sub_command, "+QMTSUB: 0,1,0,1");
 80412e6:	463b      	mov	r3, r7
 80412e8:	4918      	ldr	r1, [pc, #96]	; (804134c <AWS_MQTT+0xf0>)
 80412ea:	4618      	mov	r0, r3
 80412ec:	f000 fe10 	bl	8041f10 <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 80412f0:	bf00      	nop
 80412f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80412f6:	b29b      	uxth	r3, r3
 80412f8:	4618      	mov	r0, r3
 80412fa:	f000 fe33 	bl	8041f64 <check_at_command_response>
 80412fe:	4603      	mov	r3, r0
 8041300:	2b01      	cmp	r3, #1
 8041302:	d0f6      	beq.n	80412f2 <AWS_MQTT+0x96>
    if(at_state != AT_RESPONSE_RECEIVED)
 8041304:	4b0b      	ldr	r3, [pc, #44]	; (8041334 <AWS_MQTT+0xd8>)
 8041306:	781b      	ldrb	r3, [r3, #0]
 8041308:	2b02      	cmp	r3, #2
 804130a:	d107      	bne.n	804131c <AWS_MQTT+0xc0>
    {
        return;
    }
    current_mode = MODE_MQTT;
 804130c:	4b10      	ldr	r3, [pc, #64]	; (8041350 <AWS_MQTT+0xf4>)
 804130e:	2201      	movs	r2, #1
 8041310:	701a      	strb	r2, [r3, #0]
 8041312:	e004      	b.n	804131e <AWS_MQTT+0xc2>
        return;
 8041314:	bf00      	nop
 8041316:	e002      	b.n	804131e <AWS_MQTT+0xc2>
        return;
 8041318:	bf00      	nop
 804131a:	e000      	b.n	804131e <AWS_MQTT+0xc2>
        return;
 804131c:	bf00      	nop
}
 804131e:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8041322:	46bd      	mov	sp, r7
 8041324:	bd80      	pop	{r7, pc}
 8041326:	bf00      	nop
 8041328:	2000000c 	.word	0x2000000c
 804132c:	0804ad10 	.word	0x0804ad10
 8041330:	0804ad28 	.word	0x0804ad28
 8041334:	20003640 	.word	0x20003640
 8041338:	20000010 	.word	0x20000010
 804133c:	0804ad38 	.word	0x0804ad38
 8041340:	0804ad4c 	.word	0x0804ad4c
 8041344:	20000014 	.word	0x20000014
 8041348:	0804ad5c 	.word	0x0804ad5c
 804134c:	0804ad74 	.word	0x0804ad74
 8041350:	2000062c 	.word	0x2000062c

08041354 <receive_data>:


//AT+QMTOPEN=0,"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com",8883

uint32_t receive_data(uint8_t* buffer, uint32_t buffer_size) {
 8041354:	b580      	push	{r7, lr}
 8041356:	b084      	sub	sp, #16
 8041358:	af00      	add	r7, sp, #0
 804135a:	6078      	str	r0, [r7, #4]
 804135c:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 804135e:	2300      	movs	r3, #0
 8041360:	60fb      	str	r3, [r7, #12]
    uint32_t last_data_time = HAL_GetTick(); // Initialize with current tick
 8041362:	f002 fd01 	bl	8043d68 <HAL_GetTick>
 8041366:	60b8      	str	r0, [r7, #8]

//    DISABLE_UART_INTERRUPT(); If any other uart is used also add handlers of that uart

    while (bytes_read < buffer_size) {
 8041368:	e02e      	b.n	80413c8 <receive_data+0x74>
        if (uart_buffer.read_index != uart_buffer.write_index) {
 804136a:	4b1d      	ldr	r3, [pc, #116]	; (80413e0 <receive_data+0x8c>)
 804136c:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8041370:	4b1b      	ldr	r3, [pc, #108]	; (80413e0 <receive_data+0x8c>)
 8041372:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8041376:	429a      	cmp	r2, r3
 8041378:	d01d      	beq.n	80413b6 <receive_data+0x62>
            buffer[bytes_read++] = uart_buffer.data[uart_buffer.read_index++];
 804137a:	4b19      	ldr	r3, [pc, #100]	; (80413e0 <receive_data+0x8c>)
 804137c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8041380:	1c5a      	adds	r2, r3, #1
 8041382:	b291      	uxth	r1, r2
 8041384:	4a16      	ldr	r2, [pc, #88]	; (80413e0 <receive_data+0x8c>)
 8041386:	f8a2 1102 	strh.w	r1, [r2, #258]	; 0x102
 804138a:	4619      	mov	r1, r3
 804138c:	68fb      	ldr	r3, [r7, #12]
 804138e:	1c5a      	adds	r2, r3, #1
 8041390:	60fa      	str	r2, [r7, #12]
 8041392:	687a      	ldr	r2, [r7, #4]
 8041394:	4413      	add	r3, r2
 8041396:	4a12      	ldr	r2, [pc, #72]	; (80413e0 <receive_data+0x8c>)
 8041398:	5c52      	ldrb	r2, [r2, r1]
 804139a:	701a      	strb	r2, [r3, #0]

            // Update the last data time since new data is received
            last_data_time = HAL_GetTick();
 804139c:	f002 fce4 	bl	8043d68 <HAL_GetTick>
 80413a0:	60b8      	str	r0, [r7, #8]

            // Handle circular buffer wrapping
            if (uart_buffer.read_index >= UART_BUFFER_SIZE) {
 80413a2:	4b0f      	ldr	r3, [pc, #60]	; (80413e0 <receive_data+0x8c>)
 80413a4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80413a8:	2bff      	cmp	r3, #255	; 0xff
 80413aa:	d90d      	bls.n	80413c8 <receive_data+0x74>
                uart_buffer.read_index = 0;
 80413ac:	4b0c      	ldr	r3, [pc, #48]	; (80413e0 <receive_data+0x8c>)
 80413ae:	2200      	movs	r2, #0
 80413b0:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80413b4:	e008      	b.n	80413c8 <receive_data+0x74>
            }
        } else if ((HAL_GetTick() - last_data_time) > UART_TIMEOUT) {
 80413b6:	f002 fcd7 	bl	8043d68 <HAL_GetTick>
 80413ba:	4602      	mov	r2, r0
 80413bc:	68bb      	ldr	r3, [r7, #8]
 80413be:	1ad3      	subs	r3, r2, r3
 80413c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80413c4:	4293      	cmp	r3, r2
 80413c6:	d804      	bhi.n	80413d2 <receive_data+0x7e>
    while (bytes_read < buffer_size) {
 80413c8:	68fa      	ldr	r2, [r7, #12]
 80413ca:	683b      	ldr	r3, [r7, #0]
 80413cc:	429a      	cmp	r2, r3
 80413ce:	d3cc      	bcc.n	804136a <receive_data+0x16>
 80413d0:	e000      	b.n	80413d4 <receive_data+0x80>
            break;  // Timeout if no new data for a defined duration
 80413d2:	bf00      	nop
        }
    }

//    ENABLE_UART_INTERRUPT();

    return bytes_read;
 80413d4:	68fb      	ldr	r3, [r7, #12]
}
 80413d6:	4618      	mov	r0, r3
 80413d8:	3710      	adds	r7, #16
 80413da:	46bd      	mov	sp, r7
 80413dc:	bd80      	pop	{r7, pc}
 80413de:	bf00      	nop
 80413e0:	20000528 	.word	0x20000528

080413e4 <handle_default_byte>:

void handle_default_byte(uint8_t byte) {
 80413e4:	b580      	push	{r7, lr}
 80413e6:	b082      	sub	sp, #8
 80413e8:	af00      	add	r7, sp, #0
 80413ea:	4603      	mov	r3, r0
 80413ec:	71fb      	strb	r3, [r7, #7]
	receive_buffer[buffer_idx++] = byte;
 80413ee:	4b16      	ldr	r3, [pc, #88]	; (8041448 <handle_default_byte+0x64>)
 80413f0:	681b      	ldr	r3, [r3, #0]
 80413f2:	1c5a      	adds	r2, r3, #1
 80413f4:	4914      	ldr	r1, [pc, #80]	; (8041448 <handle_default_byte+0x64>)
 80413f6:	600a      	str	r2, [r1, #0]
 80413f8:	4914      	ldr	r1, [pc, #80]	; (804144c <handle_default_byte+0x68>)
 80413fa:	79fa      	ldrb	r2, [r7, #7]
 80413fc:	54ca      	strb	r2, [r1, r3]

	    // Null-terminate the buffer for string functions
	    if (buffer_idx < BUFFER_MAX_SIZE) {
 80413fe:	4b12      	ldr	r3, [pc, #72]	; (8041448 <handle_default_byte+0x64>)
 8041400:	681b      	ldr	r3, [r3, #0]
 8041402:	2bff      	cmp	r3, #255	; 0xff
 8041404:	d804      	bhi.n	8041410 <handle_default_byte+0x2c>
	        receive_buffer[buffer_idx] = '\0';
 8041406:	4b10      	ldr	r3, [pc, #64]	; (8041448 <handle_default_byte+0x64>)
 8041408:	681b      	ldr	r3, [r3, #0]
 804140a:	4a10      	ldr	r2, [pc, #64]	; (804144c <handle_default_byte+0x68>)
 804140c:	2100      	movs	r1, #0
 804140e:	54d1      	strb	r1, [r2, r3]
	    }

	    // Check for end of HTTP response or other markers
	    if (strstr((char*)receive_buffer, "\r\nOK\r\n") != NULL) {
 8041410:	490f      	ldr	r1, [pc, #60]	; (8041450 <handle_default_byte+0x6c>)
 8041412:	480e      	ldr	r0, [pc, #56]	; (804144c <handle_default_byte+0x68>)
 8041414:	f006 fed1 	bl	80481ba <strstr>
 8041418:	4603      	mov	r3, r0
 804141a:	2b00      	cmp	r3, #0
 804141c:	d002      	beq.n	8041424 <handle_default_byte+0x40>
	        firmware_download_complete = true;
 804141e:	4b0d      	ldr	r3, [pc, #52]	; (8041454 <handle_default_byte+0x70>)
 8041420:	2201      	movs	r2, #1
 8041422:	701a      	strb	r2, [r3, #0]
	    }

	    // If the buffer is almost full or some other condition arises, you can process or reset
	    if (buffer_idx >= BUFFER_MAX_SIZE - 1) {
 8041424:	4b08      	ldr	r3, [pc, #32]	; (8041448 <handle_default_byte+0x64>)
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	2bfe      	cmp	r3, #254	; 0xfe
 804142a:	d908      	bls.n	804143e <handle_default_byte+0x5a>
	        // TODO: Handle overflow or reset buffer_idx
	        buffer_idx = 0; // Reset as an example
 804142c:	4b06      	ldr	r3, [pc, #24]	; (8041448 <handle_default_byte+0x64>)
 804142e:	2200      	movs	r2, #0
 8041430:	601a      	str	r2, [r3, #0]
	        memset(receive_buffer, 0, BUFFER_MAX_SIZE); // Clear buffer (if needed)
 8041432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041436:	2100      	movs	r1, #0
 8041438:	4804      	ldr	r0, [pc, #16]	; (804144c <handle_default_byte+0x68>)
 804143a:	f006 fe84 	bl	8048146 <memset>
	    }
}
 804143e:	bf00      	nop
 8041440:	3708      	adds	r7, #8
 8041442:	46bd      	mov	sp, r7
 8041444:	bd80      	pop	{r7, pc}
 8041446:	bf00      	nop
 8041448:	2000051c 	.word	0x2000051c
 804144c:	20002638 	.word	0x20002638
 8041450:	0804ad88 	.word	0x0804ad88
 8041454:	20000520 	.word	0x20000520

08041458 <handle_mqtt_byte>:

void handle_mqtt_byte(uint8_t byte) {
 8041458:	b580      	push	{r7, lr}
 804145a:	b082      	sub	sp, #8
 804145c:	af00      	add	r7, sp, #0
 804145e:	4603      	mov	r3, r0
 8041460:	71fb      	strb	r3, [r7, #7]
    // Append the received byte to the MQTT buffer
    if (mqtt_buffer_idx < MQTT_BUFFER_SIZE - 1) {
 8041462:	4b14      	ldr	r3, [pc, #80]	; (80414b4 <handle_mqtt_byte+0x5c>)
 8041464:	681b      	ldr	r3, [r3, #0]
 8041466:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 804146a:	d810      	bhi.n	804148e <handle_mqtt_byte+0x36>
        mqtt_buffer[mqtt_buffer_idx++] = byte;
 804146c:	4b11      	ldr	r3, [pc, #68]	; (80414b4 <handle_mqtt_byte+0x5c>)
 804146e:	681b      	ldr	r3, [r3, #0]
 8041470:	1c5a      	adds	r2, r3, #1
 8041472:	4910      	ldr	r1, [pc, #64]	; (80414b4 <handle_mqtt_byte+0x5c>)
 8041474:	600a      	str	r2, [r1, #0]
 8041476:	4910      	ldr	r1, [pc, #64]	; (80414b8 <handle_mqtt_byte+0x60>)
 8041478:	79fa      	ldrb	r2, [r7, #7]
 804147a:	54ca      	strb	r2, [r1, r3]
        mqtt_buffer[mqtt_buffer_idx] = '\0'; // Null-terminate for string functions
 804147c:	4b0d      	ldr	r3, [pc, #52]	; (80414b4 <handle_mqtt_byte+0x5c>)
 804147e:	681b      	ldr	r3, [r3, #0]
 8041480:	4a0d      	ldr	r2, [pc, #52]	; (80414b8 <handle_mqtt_byte+0x60>)
 8041482:	2100      	movs	r1, #0
 8041484:	54d1      	strb	r1, [r2, r3]
        mqtt_buffer_idx = 0;
        return;
    }

    // Check if we have a complete MQTT message, e.g., by looking for }
    if (byte == '}') {
 8041486:	79fb      	ldrb	r3, [r7, #7]
 8041488:	2b7d      	cmp	r3, #125	; 0x7d
 804148a:	d10f      	bne.n	80414ac <handle_mqtt_byte+0x54>
 804148c:	e003      	b.n	8041496 <handle_mqtt_byte+0x3e>
        mqtt_buffer_idx = 0;
 804148e:	4b09      	ldr	r3, [pc, #36]	; (80414b4 <handle_mqtt_byte+0x5c>)
 8041490:	2200      	movs	r2, #0
 8041492:	601a      	str	r2, [r3, #0]
        return;
 8041494:	e00a      	b.n	80414ac <handle_mqtt_byte+0x54>
        // Null-terminate the message for safety
        mqtt_buffer[mqtt_buffer_idx] = '\0';
 8041496:	4b07      	ldr	r3, [pc, #28]	; (80414b4 <handle_mqtt_byte+0x5c>)
 8041498:	681b      	ldr	r3, [r3, #0]
 804149a:	4a07      	ldr	r2, [pc, #28]	; (80414b8 <handle_mqtt_byte+0x60>)
 804149c:	2100      	movs	r1, #0
 804149e:	54d1      	strb	r1, [r2, r3]

        // Handle the complete MQTT message
        handle_mqtt_message((const char*)mqtt_buffer);
 80414a0:	4805      	ldr	r0, [pc, #20]	; (80414b8 <handle_mqtt_byte+0x60>)
 80414a2:	f000 f80b 	bl	80414bc <handle_mqtt_message>

        // Reset the MQTT buffer for the next message
        mqtt_buffer_idx = 0;
 80414a6:	4b03      	ldr	r3, [pc, #12]	; (80414b4 <handle_mqtt_byte+0x5c>)
 80414a8:	2200      	movs	r2, #0
 80414aa:	601a      	str	r2, [r3, #0]
    }
}
 80414ac:	3708      	adds	r7, #8
 80414ae:	46bd      	mov	sp, r7
 80414b0:	bd80      	pop	{r7, pc}
 80414b2:	bf00      	nop
 80414b4:	20000514 	.word	0x20000514
 80414b8:	20000314 	.word	0x20000314

080414bc <handle_mqtt_message>:

void handle_mqtt_message(const char* message) {
 80414bc:	b580      	push	{r7, lr}
 80414be:	b088      	sub	sp, #32
 80414c0:	af00      	add	r7, sp, #0
 80414c2:	6078      	str	r0, [r7, #4]
    const char* json_start = strchr(message, '{'); // Find the first '{' character
 80414c4:	217b      	movs	r1, #123	; 0x7b
 80414c6:	6878      	ldr	r0, [r7, #4]
 80414c8:	f006 fe45 	bl	8048156 <strchr>
 80414cc:	61f8      	str	r0, [r7, #28]
    cJSON* root = cJSON_Parse(json_start);
 80414ce:	69f8      	ldr	r0, [r7, #28]
 80414d0:	f001 fafc 	bl	8042acc <cJSON_Parse>
 80414d4:	61b8      	str	r0, [r7, #24]

    if (root != NULL) {
 80414d6:	69bb      	ldr	r3, [r7, #24]
 80414d8:	2b00      	cmp	r3, #0
 80414da:	d02d      	beq.n	8041538 <handle_mqtt_message+0x7c>
        cJSON* messageTypeObj = cJSON_GetObjectItem(root, "message_type");
 80414dc:	4918      	ldr	r1, [pc, #96]	; (8041540 <handle_mqtt_message+0x84>)
 80414de:	69b8      	ldr	r0, [r7, #24]
 80414e0:	f001 fdf9 	bl	80430d6 <cJSON_GetObjectItem>
 80414e4:	6178      	str	r0, [r7, #20]
        cJSON* firmwareUrlObj = cJSON_GetObjectItem(root, "firmware_url");
 80414e6:	4917      	ldr	r1, [pc, #92]	; (8041544 <handle_mqtt_message+0x88>)
 80414e8:	69b8      	ldr	r0, [r7, #24]
 80414ea:	f001 fdf4 	bl	80430d6 <cJSON_GetObjectItem>
 80414ee:	6138      	str	r0, [r7, #16]

        if (messageTypeObj != NULL && firmwareUrlObj != NULL) {
 80414f0:	697b      	ldr	r3, [r7, #20]
 80414f2:	2b00      	cmp	r3, #0
 80414f4:	d01d      	beq.n	8041532 <handle_mqtt_message+0x76>
 80414f6:	693b      	ldr	r3, [r7, #16]
 80414f8:	2b00      	cmp	r3, #0
 80414fa:	d01a      	beq.n	8041532 <handle_mqtt_message+0x76>
            const char* message_type = messageTypeObj->valuestring;
 80414fc:	697b      	ldr	r3, [r7, #20]
 80414fe:	691b      	ldr	r3, [r3, #16]
 8041500:	60fb      	str	r3, [r7, #12]
            if (strcmp(message_type, "update_available") == 0) {
 8041502:	4911      	ldr	r1, [pc, #68]	; (8041548 <handle_mqtt_message+0x8c>)
 8041504:	68f8      	ldr	r0, [r7, #12]
 8041506:	f7fe fe63 	bl	80401d0 <strcmp>
 804150a:	4603      	mov	r3, r0
 804150c:	2b00      	cmp	r3, #0
 804150e:	d110      	bne.n	8041532 <handle_mqtt_message+0x76>
                // Copy firmware URL to global variable
                strncpy(firmware_url, firmwareUrlObj->valuestring, MAX_URL_LENGTH - 1);
 8041510:	693b      	ldr	r3, [r7, #16]
 8041512:	691b      	ldr	r3, [r3, #16]
 8041514:	22ff      	movs	r2, #255	; 0xff
 8041516:	4619      	mov	r1, r3
 8041518:	480c      	ldr	r0, [pc, #48]	; (804154c <handle_mqtt_message+0x90>)
 804151a:	f006 fe3b 	bl	8048194 <strncpy>
                firmware_url[MAX_URL_LENGTH - 1] = '\0'; // Null-terminate to ensure it's a valid string
 804151e:	4b0b      	ldr	r3, [pc, #44]	; (804154c <handle_mqtt_message+0x90>)
 8041520:	2200      	movs	r2, #0
 8041522:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

                // Set the state to begin downloading
                current_mode = MODE_DEFAULT;
 8041526:	4b0a      	ldr	r3, [pc, #40]	; (8041550 <handle_mqtt_message+0x94>)
 8041528:	2200      	movs	r2, #0
 804152a:	701a      	strb	r2, [r3, #0]
                fwUpdateState = DOWNLOAD_PENDING;
 804152c:	4b09      	ldr	r3, [pc, #36]	; (8041554 <handle_mqtt_message+0x98>)
 804152e:	2201      	movs	r2, #1
 8041530:	701a      	strb	r2, [r3, #0]
            }
        }
        cJSON_Delete(root);
 8041532:	69b8      	ldr	r0, [r7, #24]
 8041534:	f000 fdf2 	bl	804211c <cJSON_Delete>
    }
}
 8041538:	bf00      	nop
 804153a:	3720      	adds	r7, #32
 804153c:	46bd      	mov	sp, r7
 804153e:	bd80      	pop	{r7, pc}
 8041540:	0804ad90 	.word	0x0804ad90
 8041544:	0804ada0 	.word	0x0804ada0
 8041548:	0804adb0 	.word	0x0804adb0
 804154c:	20000214 	.word	0x20000214
 8041550:	2000062c 	.word	0x2000062c
 8041554:	20000634 	.word	0x20000634

08041558 <download_firmware>:

bool download_firmware(const char* firmware_url) {
 8041558:	b580      	push	{r7, lr}
 804155a:	b0a4      	sub	sp, #144	; 0x90
 804155c:	af00      	add	r7, sp, #0
 804155e:	6078      	str	r0, [r7, #4]
	bool result = false; // Default return value
 8041560:	2300      	movs	r3, #0
 8041562:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    switch (current_state) {
 8041566:	4b5e      	ldr	r3, [pc, #376]	; (80416e0 <download_firmware+0x188>)
 8041568:	781b      	ldrb	r3, [r3, #0]
 804156a:	2b05      	cmp	r3, #5
 804156c:	f200 80ad 	bhi.w	80416ca <download_firmware+0x172>
 8041570:	a201      	add	r2, pc, #4	; (adr r2, 8041578 <download_firmware+0x20>)
 8041572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041576:	bf00      	nop
 8041578:	08041591 	.word	0x08041591
 804157c:	080415ef 	.word	0x080415ef
 8041580:	08041655 	.word	0x08041655
 8041584:	0804169f 	.word	0x0804169f
 8041588:	080416b7 	.word	0x080416b7
 804158c:	080416cb 	.word	0x080416cb
        case INIT_HTTP:
            send_at_command("AT+QSSLCFG=\"https\",1", "OK");
 8041590:	4954      	ldr	r1, [pc, #336]	; (80416e4 <download_firmware+0x18c>)
 8041592:	4855      	ldr	r0, [pc, #340]	; (80416e8 <download_firmware+0x190>)
 8041594:	f000 fcbc 	bl	8041f10 <send_at_command>
            HAL_Delay(SHORT_DELAY);
 8041598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804159c:	4618      	mov	r0, r3
 804159e:	f002 fbef 	bl	8043d80 <HAL_Delay>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 80415a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80415a6:	b29b      	uxth	r3, r3
 80415a8:	4618      	mov	r0, r3
 80415aa:	f000 fcdb 	bl	8041f64 <check_at_command_response>
 80415ae:	4603      	mov	r3, r0
 80415b0:	2b02      	cmp	r3, #2
 80415b2:	d10f      	bne.n	80415d4 <download_firmware+0x7c>
            	send_at_command("AT+QSSLCFG=\"httpsctxi\",1", "OK");
 80415b4:	494b      	ldr	r1, [pc, #300]	; (80416e4 <download_firmware+0x18c>)
 80415b6:	484d      	ldr	r0, [pc, #308]	; (80416ec <download_firmware+0x194>)
 80415b8:	f000 fcaa 	bl	8041f10 <send_at_command>
//            	if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
            		HAL_Delay(SHORT_DELAY);
 80415bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80415c0:	4618      	mov	r0, r3
 80415c2:	f002 fbdd 	bl	8043d80 <HAL_Delay>
            		current_state = SET_HTTP_URL;
 80415c6:	4b46      	ldr	r3, [pc, #280]	; (80416e0 <download_firmware+0x188>)
 80415c8:	2201      	movs	r2, #1
 80415ca:	701a      	strb	r2, [r3, #0]
            		firmware_download_busy = false;
 80415cc:	4b48      	ldr	r3, [pc, #288]	; (80416f0 <download_firmware+0x198>)
 80415ce:	2200      	movs	r2, #0
 80415d0:	701a      	strb	r2, [r3, #0]
//            	}
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
//                firmware_download_busy = false;
            }
            break;
 80415d2:	e07c      	b.n	80416ce <download_firmware+0x176>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 80415d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80415d8:	b29b      	uxth	r3, r3
 80415da:	4618      	mov	r0, r3
 80415dc:	f000 fcc2 	bl	8041f64 <check_at_command_response>
 80415e0:	4603      	mov	r3, r0
 80415e2:	2b03      	cmp	r3, #3
 80415e4:	d173      	bne.n	80416ce <download_firmware+0x176>
                current_state = DOWNLOAD_ERROR;
 80415e6:	4b3e      	ldr	r3, [pc, #248]	; (80416e0 <download_firmware+0x188>)
 80415e8:	2205      	movs	r2, #5
 80415ea:	701a      	strb	r2, [r3, #0]
            break;
 80415ec:	e06f      	b.n	80416ce <download_firmware+0x176>

        case SET_HTTP_URL:
            char http_get_command[128];
            sprintf(http_get_command, "AT+QHTTPURL=%d,60", strlen(firmware_url));
 80415ee:	6878      	ldr	r0, [r7, #4]
 80415f0:	f7fe fe4e 	bl	8040290 <strlen>
 80415f4:	4602      	mov	r2, r0
 80415f6:	f107 030c 	add.w	r3, r7, #12
 80415fa:	493e      	ldr	r1, [pc, #248]	; (80416f4 <download_firmware+0x19c>)
 80415fc:	4618      	mov	r0, r3
 80415fe:	f006 fd15 	bl	804802c <siprintf>
            send_at_command(http_get_command, "CONNECT");
 8041602:	f107 030c 	add.w	r3, r7, #12
 8041606:	493c      	ldr	r1, [pc, #240]	; (80416f8 <download_firmware+0x1a0>)
 8041608:	4618      	mov	r0, r3
 804160a:	f000 fc81 	bl	8041f10 <send_at_command>
            while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 804160e:	bf00      	nop
 8041610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041614:	b29b      	uxth	r3, r3
 8041616:	4618      	mov	r0, r3
 8041618:	f000 fca4 	bl	8041f64 <check_at_command_response>
 804161c:	4603      	mov	r3, r0
 804161e:	2b01      	cmp	r3, #1
 8041620:	d0f6      	beq.n	8041610 <download_firmware+0xb8>
            if(at_state != AT_RESPONSE_RECEIVED)
 8041622:	4b36      	ldr	r3, [pc, #216]	; (80416fc <download_firmware+0x1a4>)
 8041624:	781b      	ldrb	r3, [r3, #0]
 8041626:	2b02      	cmp	r3, #2
 8041628:	d005      	beq.n	8041636 <download_firmware+0xde>
            {
            	current_state = DOWNLOAD_ERROR;
 804162a:	4b2d      	ldr	r3, [pc, #180]	; (80416e0 <download_firmware+0x188>)
 804162c:	2205      	movs	r2, #5
 804162e:	701a      	strb	r2, [r3, #0]
            	firmware_download_busy = false;
 8041630:	4b2f      	ldr	r3, [pc, #188]	; (80416f0 <download_firmware+0x198>)
 8041632:	2200      	movs	r2, #0
 8041634:	701a      	strb	r2, [r3, #0]
            }
//            send_at_command(firmware_url, "OK");
            UART_Send(firmware_url);
 8041636:	6878      	ldr	r0, [r7, #4]
 8041638:	f000 fcd0 	bl	8041fdc <UART_Send>
            HAL_Delay(DELAY);
 804163c:	f241 3388 	movw	r3, #5000	; 0x1388
 8041640:	4618      	mov	r0, r3
 8041642:	f002 fb9d 	bl	8043d80 <HAL_Delay>
            firmware_download_busy = false;
 8041646:	4b2a      	ldr	r3, [pc, #168]	; (80416f0 <download_firmware+0x198>)
 8041648:	2200      	movs	r2, #0
 804164a:	701a      	strb	r2, [r3, #0]
            current_state = INITIATE_HTTP_GET;
 804164c:	4b24      	ldr	r3, [pc, #144]	; (80416e0 <download_firmware+0x188>)
 804164e:	2202      	movs	r2, #2
 8041650:	701a      	strb	r2, [r3, #0]
            break;
 8041652:	e03f      	b.n	80416d4 <download_firmware+0x17c>
//            send_at_command(firmware_url, "OK");
//        	UART_Send("AT+QHTTPGET=60");
//        	Delay(1000);
//        	current_state = RECEIVE_HTTP_RESPONSE;

            send_at_command("AT+QHTTPGET=60", "OK");
 8041654:	4923      	ldr	r1, [pc, #140]	; (80416e4 <download_firmware+0x18c>)
 8041656:	482a      	ldr	r0, [pc, #168]	; (8041700 <download_firmware+0x1a8>)
 8041658:	f000 fc5a 	bl	8041f10 <send_at_command>
            while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 804165c:	bf00      	nop
 804165e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8041662:	b29b      	uxth	r3, r3
 8041664:	4618      	mov	r0, r3
 8041666:	f000 fc7d 	bl	8041f64 <check_at_command_response>
 804166a:	4603      	mov	r3, r0
 804166c:	2b01      	cmp	r3, #1
 804166e:	d0f6      	beq.n	804165e <download_firmware+0x106>
            if(at_state != AT_RESPONSE_RECEIVED)
 8041670:	4b22      	ldr	r3, [pc, #136]	; (80416fc <download_firmware+0x1a4>)
 8041672:	781b      	ldrb	r3, [r3, #0]
 8041674:	2b02      	cmp	r3, #2
 8041676:	d006      	beq.n	8041686 <download_firmware+0x12e>
            {
            	current_state = DOWNLOAD_ERROR;
 8041678:	4b19      	ldr	r3, [pc, #100]	; (80416e0 <download_firmware+0x188>)
 804167a:	2205      	movs	r2, #5
 804167c:	701a      	strb	r2, [r3, #0]
            	firmware_download_busy = false;
 804167e:	4b1c      	ldr	r3, [pc, #112]	; (80416f0 <download_firmware+0x198>)
 8041680:	2200      	movs	r2, #0
 8041682:	701a      	strb	r2, [r3, #0]
            }else{
            	HAL_Delay(LONG_DELAY);
            	current_state = RECEIVE_HTTP_RESPONSE;
            	firmware_download_busy = false;
            }
            break;
 8041684:	e026      	b.n	80416d4 <download_firmware+0x17c>
            	HAL_Delay(LONG_DELAY);
 8041686:	f644 6320 	movw	r3, #20000	; 0x4e20
 804168a:	4618      	mov	r0, r3
 804168c:	f002 fb78 	bl	8043d80 <HAL_Delay>
            	current_state = RECEIVE_HTTP_RESPONSE;
 8041690:	4b13      	ldr	r3, [pc, #76]	; (80416e0 <download_firmware+0x188>)
 8041692:	2203      	movs	r2, #3
 8041694:	701a      	strb	r2, [r3, #0]
            	firmware_download_busy = false;
 8041696:	4b16      	ldr	r3, [pc, #88]	; (80416f0 <download_firmware+0x198>)
 8041698:	2200      	movs	r2, #0
 804169a:	701a      	strb	r2, [r3, #0]
            break;
 804169c:	e01a      	b.n	80416d4 <download_firmware+0x17c>


        case RECEIVE_HTTP_RESPONSE:
        	if (firmware_update_process()){
 804169e:	f000 f96b 	bl	8041978 <firmware_update_process>
 80416a2:	4603      	mov	r3, r0
 80416a4:	2b00      	cmp	r3, #0
 80416a6:	d014      	beq.n	80416d2 <download_firmware+0x17a>
               	firmware_download_busy = false;
 80416a8:	4b11      	ldr	r3, [pc, #68]	; (80416f0 <download_firmware+0x198>)
 80416aa:	2200      	movs	r2, #0
 80416ac:	701a      	strb	r2, [r3, #0]
                current_state = DOWNLOAD_COMPLETE;
 80416ae:	4b0c      	ldr	r3, [pc, #48]	; (80416e0 <download_firmware+0x188>)
 80416b0:	2204      	movs	r2, #4
 80416b2:	701a      	strb	r2, [r3, #0]
        	}
            break;
 80416b4:	e00d      	b.n	80416d2 <download_firmware+0x17a>


        case DOWNLOAD_COMPLETE:
            current_state = INIT_HTTP;  // Reset state for next time
 80416b6:	4b0a      	ldr	r3, [pc, #40]	; (80416e0 <download_firmware+0x188>)
 80416b8:	2200      	movs	r2, #0
 80416ba:	701a      	strb	r2, [r3, #0]
            firmware_download_busy = false;
 80416bc:	4b0c      	ldr	r3, [pc, #48]	; (80416f0 <download_firmware+0x198>)
 80416be:	2200      	movs	r2, #0
 80416c0:	701a      	strb	r2, [r3, #0]
            result = true;
 80416c2:	2301      	movs	r3, #1
 80416c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            break;
 80416c8:	e004      	b.n	80416d4 <download_firmware+0x17c>
//            read_request = false;
//            firmware_download_busy = false;
            break;

        default:
            break;
 80416ca:	bf00      	nop
 80416cc:	e002      	b.n	80416d4 <download_firmware+0x17c>
            break;
 80416ce:	bf00      	nop
 80416d0:	e000      	b.n	80416d4 <download_firmware+0x17c>
            break;
 80416d2:	bf00      	nop
    }
    return result;
 80416d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80416d8:	4618      	mov	r0, r3
 80416da:	3790      	adds	r7, #144	; 0x90
 80416dc:	46bd      	mov	sp, r7
 80416de:	bd80      	pop	{r7, pc}
 80416e0:	20000635 	.word	0x20000635
 80416e4:	0804ab08 	.word	0x0804ab08
 80416e8:	0804adc4 	.word	0x0804adc4
 80416ec:	0804addc 	.word	0x0804addc
 80416f0:	20000521 	.word	0x20000521
 80416f4:	0804adf8 	.word	0x0804adf8
 80416f8:	0804ae0c 	.word	0x0804ae0c
 80416fc:	20003640 	.word	0x20003640
 8041700:	0804ae14 	.word	0x0804ae14

08041704 <verify_firmware_update>:

bool verify_firmware_update() {
 8041704:	b580      	push	{r7, lr}
 8041706:	b082      	sub	sp, #8
 8041708:	af00      	add	r7, sp, #0
    // Calculate the starting address of the firmware in flash
    uint8_t* firmware_data = (uint8_t*) START_FLASH_ADDRESS;
 804170a:	4b14      	ldr	r3, [pc, #80]	; (804175c <verify_firmware_update+0x58>)
 804170c:	607b      	str	r3, [r7, #4]

    // Calculate the length of the firmware data including the appended CRC
    firmware_length_with_crc = current_flash_address - START_FLASH_ADDRESS;
 804170e:	4b14      	ldr	r3, [pc, #80]	; (8041760 <verify_firmware_update+0x5c>)
 8041710:	681b      	ldr	r3, [r3, #0]
 8041712:	f103 4377 	add.w	r3, r3, #4143972352	; 0xf7000000
 8041716:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 804171a:	4a12      	ldr	r2, [pc, #72]	; (8041764 <verify_firmware_update+0x60>)
 804171c:	6013      	str	r3, [r2, #0]

    // Ensure that the firmware length is valid (this should also account for the CRC32 size)
    if (!is_firmware_size_valid(firmware_length_with_crc)) {
 804171e:	4b11      	ldr	r3, [pc, #68]	; (8041764 <verify_firmware_update+0x60>)
 8041720:	681b      	ldr	r3, [r3, #0]
 8041722:	4618      	mov	r0, r3
 8041724:	f000 f820 	bl	8041768 <is_firmware_size_valid>
 8041728:	4603      	mov	r3, r0
 804172a:	f083 0301 	eor.w	r3, r3, #1
 804172e:	b2db      	uxtb	r3, r3
 8041730:	2b00      	cmp	r3, #0
 8041732:	d001      	beq.n	8041738 <verify_firmware_update+0x34>
        return false;  // Firmware data length is invalid
 8041734:	2300      	movs	r3, #0
 8041736:	e00c      	b.n	8041752 <verify_firmware_update+0x4e>
    }

    // Calculate CRC for the stored firmware data (including the appended CRC)
    uint32_t calculated_crc = calculate_crc32(firmware_data, firmware_length_with_crc);
 8041738:	4b0a      	ldr	r3, [pc, #40]	; (8041764 <verify_firmware_update+0x60>)
 804173a:	681b      	ldr	r3, [r3, #0]
 804173c:	4619      	mov	r1, r3
 804173e:	6878      	ldr	r0, [r7, #4]
 8041740:	f000 f822 	bl	8041788 <calculate_crc32>
 8041744:	6038      	str	r0, [r7, #0]

    // If the calculation is correct, the CRC result should be 0
    return (calculated_crc == 0x0);
 8041746:	683b      	ldr	r3, [r7, #0]
 8041748:	2b00      	cmp	r3, #0
 804174a:	bf0c      	ite	eq
 804174c:	2301      	moveq	r3, #1
 804174e:	2300      	movne	r3, #0
 8041750:	b2db      	uxtb	r3, r3
}
 8041752:	4618      	mov	r0, r3
 8041754:	3708      	adds	r7, #8
 8041756:	46bd      	mov	sp, r7
 8041758:	bd80      	pop	{r7, pc}
 804175a:	bf00      	nop
 804175c:	080c0000 	.word	0x080c0000
 8041760:	20000008 	.word	0x20000008
 8041764:	2000363c 	.word	0x2000363c

08041768 <is_firmware_size_valid>:


bool is_firmware_size_valid(uint32_t firmware_length) {
 8041768:	b480      	push	{r7}
 804176a:	b083      	sub	sp, #12
 804176c:	af00      	add	r7, sp, #0
 804176e:	6078      	str	r0, [r7, #4]
    return firmware_length > sizeof(uint32_t);  // Ensure firmware_length is more than just the CRC size.
 8041770:	687b      	ldr	r3, [r7, #4]
 8041772:	2b04      	cmp	r3, #4
 8041774:	bf8c      	ite	hi
 8041776:	2301      	movhi	r3, #1
 8041778:	2300      	movls	r3, #0
 804177a:	b2db      	uxtb	r3, r3
}
 804177c:	4618      	mov	r0, r3
 804177e:	370c      	adds	r7, #12
 8041780:	46bd      	mov	sp, r7
 8041782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041786:	4770      	bx	lr

08041788 <calculate_crc32>:
    return *crc_ptr;
}


// Function to calculate CRC32 for a buffer
uint32_t calculate_crc32(uint8_t *data, uint32_t size) {
 8041788:	b480      	push	{r7}
 804178a:	b087      	sub	sp, #28
 804178c:	af00      	add	r7, sp, #0
 804178e:	6078      	str	r0, [r7, #4]
 8041790:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8041792:	f04f 33ff 	mov.w	r3, #4294967295
 8041796:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < size; i++) {
 8041798:	2300      	movs	r3, #0
 804179a:	613b      	str	r3, [r7, #16]
 804179c:	e01f      	b.n	80417de <calculate_crc32+0x56>
        crc ^= ((uint32_t)data[i]) << 24;
 804179e:	687a      	ldr	r2, [r7, #4]
 80417a0:	693b      	ldr	r3, [r7, #16]
 80417a2:	4413      	add	r3, r2
 80417a4:	781b      	ldrb	r3, [r3, #0]
 80417a6:	061b      	lsls	r3, r3, #24
 80417a8:	697a      	ldr	r2, [r7, #20]
 80417aa:	4053      	eors	r3, r2
 80417ac:	617b      	str	r3, [r7, #20]

        for (uint32_t j = 0; j < 8; j++) {
 80417ae:	2300      	movs	r3, #0
 80417b0:	60fb      	str	r3, [r7, #12]
 80417b2:	e00e      	b.n	80417d2 <calculate_crc32+0x4a>
            if (crc & 0x80000000) {
 80417b4:	697b      	ldr	r3, [r7, #20]
 80417b6:	2b00      	cmp	r3, #0
 80417b8:	da05      	bge.n	80417c6 <calculate_crc32+0x3e>
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
 80417ba:	697b      	ldr	r3, [r7, #20]
 80417bc:	005a      	lsls	r2, r3, #1
 80417be:	4b0d      	ldr	r3, [pc, #52]	; (80417f4 <calculate_crc32+0x6c>)
 80417c0:	4053      	eors	r3, r2
 80417c2:	617b      	str	r3, [r7, #20]
 80417c4:	e002      	b.n	80417cc <calculate_crc32+0x44>
            } else {
                crc = crc << 1;
 80417c6:	697b      	ldr	r3, [r7, #20]
 80417c8:	005b      	lsls	r3, r3, #1
 80417ca:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 8; j++) {
 80417cc:	68fb      	ldr	r3, [r7, #12]
 80417ce:	3301      	adds	r3, #1
 80417d0:	60fb      	str	r3, [r7, #12]
 80417d2:	68fb      	ldr	r3, [r7, #12]
 80417d4:	2b07      	cmp	r3, #7
 80417d6:	d9ed      	bls.n	80417b4 <calculate_crc32+0x2c>
    for (uint32_t i = 0; i < size; i++) {
 80417d8:	693b      	ldr	r3, [r7, #16]
 80417da:	3301      	adds	r3, #1
 80417dc:	613b      	str	r3, [r7, #16]
 80417de:	693a      	ldr	r2, [r7, #16]
 80417e0:	683b      	ldr	r3, [r7, #0]
 80417e2:	429a      	cmp	r2, r3
 80417e4:	d3db      	bcc.n	804179e <calculate_crc32+0x16>
            }
        }
    }

    return crc;
 80417e6:	697b      	ldr	r3, [r7, #20]
}
 80417e8:	4618      	mov	r0, r3
 80417ea:	371c      	adds	r7, #28
 80417ec:	46bd      	mov	sp, r7
 80417ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417f2:	4770      	bx	lr
 80417f4:	04c11db7 	.word	0x04c11db7

080417f8 <set_update_flag>:

bool set_update_flag(void) {
 80417f8:	b580      	push	{r7, lr}
 80417fa:	b082      	sub	sp, #8
 80417fc:	af00      	add	r7, sp, #0

    // Assuming you have a function to erase the necessary flash sector.
    // You should implement this if you don't have it.
    if (HAL_OK != erase_flash(CONFIG_START_ADDR, CONFIG_END_ADDR)) {
 80417fe:	4912      	ldr	r1, [pc, #72]	; (8041848 <set_update_flag+0x50>)
 8041800:	4812      	ldr	r0, [pc, #72]	; (804184c <set_update_flag+0x54>)
 8041802:	f000 fa23 	bl	8041c4c <erase_flash>
        // Handle error: Erasing flash failed

    }
    uint32_t updateFlag = UPDATE_FLAG_VALUE;
 8041806:	4b12      	ldr	r3, [pc, #72]	; (8041850 <set_update_flag+0x58>)
 8041808:	607b      	str	r3, [r7, #4]
    uint32_t firmwareSize = firmware_length_with_crc;
 804180a:	4b12      	ldr	r3, [pc, #72]	; (8041854 <set_update_flag+0x5c>)
 804180c:	681b      	ldr	r3, [r3, #0]
 804180e:	603b      	str	r3, [r7, #0]

    if (HAL_OK != write_to_flash(CONFIG_START_ADDR, (uint8_t *)&updateFlag, 4)) {
 8041810:	1d3b      	adds	r3, r7, #4
 8041812:	2204      	movs	r2, #4
 8041814:	4619      	mov	r1, r3
 8041816:	480d      	ldr	r0, [pc, #52]	; (804184c <set_update_flag+0x54>)
 8041818:	f000 fa66 	bl	8041ce8 <write_to_flash>
 804181c:	4603      	mov	r3, r0
 804181e:	2b00      	cmp	r3, #0
 8041820:	d001      	beq.n	8041826 <set_update_flag+0x2e>
        return false;
 8041822:	2300      	movs	r3, #0
 8041824:	e00b      	b.n	804183e <set_update_flag+0x46>
    }

    if (HAL_OK != write_to_flash(FIRMWARE_SIZE_ADDR, (uint8_t *)&firmwareSize, 4)) {
 8041826:	463b      	mov	r3, r7
 8041828:	2204      	movs	r2, #4
 804182a:	4619      	mov	r1, r3
 804182c:	480a      	ldr	r0, [pc, #40]	; (8041858 <set_update_flag+0x60>)
 804182e:	f000 fa5b 	bl	8041ce8 <write_to_flash>
 8041832:	4603      	mov	r3, r0
 8041834:	2b00      	cmp	r3, #0
 8041836:	d001      	beq.n	804183c <set_update_flag+0x44>
        return false;
 8041838:	2300      	movs	r3, #0
 804183a:	e000      	b.n	804183e <set_update_flag+0x46>
    }


    return true;
 804183c:	2301      	movs	r3, #1
}
 804183e:	4618      	mov	r0, r3
 8041840:	3708      	adds	r7, #8
 8041842:	46bd      	mov	sp, r7
 8041844:	bd80      	pop	{r7, pc}
 8041846:	bf00      	nop
 8041848:	08030000 	.word	0x08030000
 804184c:	08020000 	.word	0x08020000
 8041850:	deadbeef 	.word	0xdeadbeef
 8041854:	2000363c 	.word	0x2000363c
 8041858:	08020004 	.word	0x08020004

0804185c <firmware_update_handler>:



void firmware_update_handler(void)
{
 804185c:	b580      	push	{r7, lr}
 804185e:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 8041860:	4b38      	ldr	r3, [pc, #224]	; (8041944 <firmware_update_handler+0xe8>)
 8041862:	781b      	ldrb	r3, [r3, #0]
 8041864:	3b01      	subs	r3, #1
 8041866:	2b05      	cmp	r3, #5
 8041868:	d863      	bhi.n	8041932 <firmware_update_handler+0xd6>
 804186a:	a201      	add	r2, pc, #4	; (adr r2, 8041870 <firmware_update_handler+0x14>)
 804186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041870:	08041889 	.word	0x08041889
 8041874:	080418b5 	.word	0x080418b5
 8041878:	080418df 	.word	0x080418df
 804187c:	08041913 	.word	0x08041913
 8041880:	08041933 	.word	0x08041933
 8041884:	0804191f 	.word	0x0804191f
    {
        case DOWNLOAD_PENDING:
            if (!firmware_download_busy) {
 8041888:	4b2f      	ldr	r3, [pc, #188]	; (8041948 <firmware_update_handler+0xec>)
 804188a:	781b      	ldrb	r3, [r3, #0]
 804188c:	f083 0301 	eor.w	r3, r3, #1
 8041890:	b2db      	uxtb	r3, r3
 8041892:	2b00      	cmp	r3, #0
 8041894:	d04f      	beq.n	8041936 <firmware_update_handler+0xda>
                firmware_download_busy = true; // Set the flag as we're initiating the download
 8041896:	4b2c      	ldr	r3, [pc, #176]	; (8041948 <firmware_update_handler+0xec>)
 8041898:	2201      	movs	r2, #1
 804189a:	701a      	strb	r2, [r3, #0]
                if (download_firmware(firmware_url)) {
 804189c:	482b      	ldr	r0, [pc, #172]	; (804194c <firmware_update_handler+0xf0>)
 804189e:	f7ff fe5b 	bl	8041558 <download_firmware>
 80418a2:	4603      	mov	r3, r0
 80418a4:	2b00      	cmp	r3, #0
 80418a6:	d046      	beq.n	8041936 <firmware_update_handler+0xda>
                    fwUpdateState = VERIFY_PENDING;
 80418a8:	4b26      	ldr	r3, [pc, #152]	; (8041944 <firmware_update_handler+0xe8>)
 80418aa:	2202      	movs	r2, #2
 80418ac:	701a      	strb	r2, [r3, #0]
                    resetAction();
 80418ae:	f000 f857 	bl	8041960 <resetAction>
                } else {
//                    firmware_download_busy = false; // Reset the flag if download fails

                }
            }
            break;
 80418b2:	e040      	b.n	8041936 <firmware_update_handler+0xda>

        case VERIFY_PENDING:
            if (!firmware_verify_busy) {
 80418b4:	4b26      	ldr	r3, [pc, #152]	; (8041950 <firmware_update_handler+0xf4>)
 80418b6:	781b      	ldrb	r3, [r3, #0]
 80418b8:	f083 0301 	eor.w	r3, r3, #1
 80418bc:	b2db      	uxtb	r3, r3
 80418be:	2b00      	cmp	r3, #0
 80418c0:	d03b      	beq.n	804193a <firmware_update_handler+0xde>
                firmware_verify_busy = true;
 80418c2:	4b23      	ldr	r3, [pc, #140]	; (8041950 <firmware_update_handler+0xf4>)
 80418c4:	2201      	movs	r2, #1
 80418c6:	701a      	strb	r2, [r3, #0]
                if (verify_firmware_update()) {
 80418c8:	f7ff ff1c 	bl	8041704 <verify_firmware_update>
 80418cc:	4603      	mov	r3, r0
 80418ce:	2b00      	cmp	r3, #0
 80418d0:	d033      	beq.n	804193a <firmware_update_handler+0xde>
                    fwUpdateState = WRITE_PENDING;
 80418d2:	4b1c      	ldr	r3, [pc, #112]	; (8041944 <firmware_update_handler+0xe8>)
 80418d4:	2203      	movs	r2, #3
 80418d6:	701a      	strb	r2, [r3, #0]
                    resetAction();
 80418d8:	f000 f842 	bl	8041960 <resetAction>
                } else {
//                    firmware_verify_busy = false; // Reset the flag if verification fails
                }
            }
            break;
 80418dc:	e02d      	b.n	804193a <firmware_update_handler+0xde>

        case WRITE_PENDING:
            if (!firmware_write_busy) {
 80418de:	4b1d      	ldr	r3, [pc, #116]	; (8041954 <firmware_update_handler+0xf8>)
 80418e0:	781b      	ldrb	r3, [r3, #0]
 80418e2:	f083 0301 	eor.w	r3, r3, #1
 80418e6:	b2db      	uxtb	r3, r3
 80418e8:	2b00      	cmp	r3, #0
 80418ea:	d028      	beq.n	804193e <firmware_update_handler+0xe2>
                firmware_write_busy = true;
 80418ec:	4b19      	ldr	r3, [pc, #100]	; (8041954 <firmware_update_handler+0xf8>)
 80418ee:	2201      	movs	r2, #1
 80418f0:	701a      	strb	r2, [r3, #0]
                if (set_update_flag()) {
 80418f2:	f7ff ff81 	bl	80417f8 <set_update_flag>
 80418f6:	4603      	mov	r3, r0
 80418f8:	2b00      	cmp	r3, #0
 80418fa:	d020      	beq.n	804193e <firmware_update_handler+0xe2>
                	HAL_FLASH_Lock();
 80418fc:	f002 fc7e 	bl	80441fc <HAL_FLASH_Lock>
                    fwUpdateState = RESET_PENDING;
 8041900:	4b10      	ldr	r3, [pc, #64]	; (8041944 <firmware_update_handler+0xe8>)
 8041902:	2204      	movs	r2, #4
 8041904:	701a      	strb	r2, [r3, #0]
                    firmware_write_busy = false;
 8041906:	4b13      	ldr	r3, [pc, #76]	; (8041954 <firmware_update_handler+0xf8>)
 8041908:	2200      	movs	r2, #0
 804190a:	701a      	strb	r2, [r3, #0]
                    resetAction();
 804190c:	f000 f828 	bl	8041960 <resetAction>
                } else {
//                    firmware_write_busy = false; // Reset the flag if writing fails
                }
            }
            break;
 8041910:	e015      	b.n	804193e <firmware_update_handler+0xe2>

        case RESET_PENDING:
            send_at_command("AT+QMTDISC=0", "+QMTDISC: 0,0");
 8041912:	4911      	ldr	r1, [pc, #68]	; (8041958 <firmware_update_handler+0xfc>)
 8041914:	4811      	ldr	r0, [pc, #68]	; (804195c <firmware_update_handler+0x100>)
 8041916:	f000 fafb 	bl	8041f10 <send_at_command>
            NVIC_SystemReset();
 804191a:	f7ff fb29 	bl	8040f70 <__NVIC_SystemReset>
            break;

        case ERROR_STATE:
            // Handle error, etc.
            // Reset all flags as we're in an error state
            firmware_download_busy = false;
 804191e:	4b0a      	ldr	r3, [pc, #40]	; (8041948 <firmware_update_handler+0xec>)
 8041920:	2200      	movs	r2, #0
 8041922:	701a      	strb	r2, [r3, #0]
            firmware_verify_busy = false;
 8041924:	4b0a      	ldr	r3, [pc, #40]	; (8041950 <firmware_update_handler+0xf4>)
 8041926:	2200      	movs	r2, #0
 8041928:	701a      	strb	r2, [r3, #0]
            firmware_write_busy = false;
 804192a:	4b0a      	ldr	r3, [pc, #40]	; (8041954 <firmware_update_handler+0xf8>)
 804192c:	2200      	movs	r2, #0
 804192e:	701a      	strb	r2, [r3, #0]
            break;
 8041930:	e006      	b.n	8041940 <firmware_update_handler+0xe4>

        default:
            /* IDLE, ACTION_IN_PROGRESS, or other states. No operation. */
            break;
 8041932:	bf00      	nop
 8041934:	e004      	b.n	8041940 <firmware_update_handler+0xe4>
            break;
 8041936:	bf00      	nop
 8041938:	e002      	b.n	8041940 <firmware_update_handler+0xe4>
            break;
 804193a:	bf00      	nop
 804193c:	e000      	b.n	8041940 <firmware_update_handler+0xe4>
            break;
 804193e:	bf00      	nop
    }
}
 8041940:	bf00      	nop
 8041942:	bd80      	pop	{r7, pc}
 8041944:	20000634 	.word	0x20000634
 8041948:	20000521 	.word	0x20000521
 804194c:	20000214 	.word	0x20000214
 8041950:	20000522 	.word	0x20000522
 8041954:	20000523 	.word	0x20000523
 8041958:	0804ae24 	.word	0x0804ae24
 804195c:	0804ae34 	.word	0x0804ae34

08041960 <resetAction>:

void resetAction() {
 8041960:	b480      	push	{r7}
 8041962:	af00      	add	r7, sp, #0
    retry_count = 0;
 8041964:	4b03      	ldr	r3, [pc, #12]	; (8041974 <resetAction+0x14>)
 8041966:	2200      	movs	r2, #0
 8041968:	601a      	str	r2, [r3, #0]
}
 804196a:	bf00      	nop
 804196c:	46bd      	mov	sp, r7
 804196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041972:	4770      	bx	lr
 8041974:	20000630 	.word	0x20000630

08041978 <firmware_update_process>:

bool firmware_update_process() {
 8041978:	b580      	push	{r7, lr}
 804197a:	b08a      	sub	sp, #40	; 0x28
 804197c:	af00      	add	r7, sp, #0
    bool success = false;
 804197e:	2300      	movs	r3, #0
 8041980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    const uint8_t max_retries = 3; // Define max retries as per your requirements
 8041984:	2303      	movs	r3, #3
 8041986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t retry_count = 0;
 804198a:	2300      	movs	r3, #0
 804198c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (!success && retry_count < max_retries) {
 8041990:	e104      	b.n	8041b9c <firmware_update_process+0x224>
    // Attempt to erase flash
    if (HAL_OK != erase_flash(START_FLASH_ADDRESS, END_FLASH_ADDRESS)) {
 8041992:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 8041996:	4891      	ldr	r0, [pc, #580]	; (8041bdc <firmware_update_process+0x264>)
 8041998:	f000 f958 	bl	8041c4c <erase_flash>
 804199c:	4603      	mov	r3, r0
 804199e:	2b00      	cmp	r3, #0
 80419a0:	d005      	beq.n	80419ae <firmware_update_process+0x36>
        // Handle error: Erasing flash failed
        retry_count++;
 80419a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80419a6:	3301      	adds	r3, #1
 80419a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        continue; // Go to next iteration to retry
 80419ac:	e0f6      	b.n	8041b9c <firmware_update_process+0x224>
    }

    bool end_marker_found = false;
 80419ae:	2300      	movs	r3, #0
 80419b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    bool first_marker_skipped = false;
 80419b4:	2300      	movs	r3, #0
 80419b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    do {
        if (!read_request) {
 80419ba:	4b89      	ldr	r3, [pc, #548]	; (8041be0 <firmware_update_process+0x268>)
 80419bc:	781b      	ldrb	r3, [r3, #0]
 80419be:	f083 0301 	eor.w	r3, r3, #1
 80419c2:	b2db      	uxtb	r3, r3
 80419c4:	2b00      	cmp	r3, #0
 80419c6:	f000 8089 	beq.w	8041adc <firmware_update_process+0x164>
            send_at_command("AT+QHTTPREAD=30\r\n", "CONNECT\r\n");
 80419ca:	4986      	ldr	r1, [pc, #536]	; (8041be4 <firmware_update_process+0x26c>)
 80419cc:	4886      	ldr	r0, [pc, #536]	; (8041be8 <firmware_update_process+0x270>)
 80419ce:	f000 fa9f 	bl	8041f10 <send_at_command>
            while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 80419d2:	bf00      	nop
 80419d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80419d8:	b29b      	uxth	r3, r3
 80419da:	4618      	mov	r0, r3
 80419dc:	f000 fac2 	bl	8041f64 <check_at_command_response>
 80419e0:	4603      	mov	r3, r0
 80419e2:	2b01      	cmp	r3, #1
 80419e4:	d0f6      	beq.n	80419d4 <firmware_update_process+0x5c>

            if (at_state != AT_RESPONSE_RECEIVED) {
 80419e6:	4b81      	ldr	r3, [pc, #516]	; (8041bec <firmware_update_process+0x274>)
 80419e8:	781b      	ldrb	r3, [r3, #0]
 80419ea:	2b02      	cmp	r3, #2
 80419ec:	d004      	beq.n	80419f8 <firmware_update_process+0x80>
                current_state = DOWNLOAD_ERROR;
 80419ee:	4b80      	ldr	r3, [pc, #512]	; (8041bf0 <firmware_update_process+0x278>)
 80419f0:	2205      	movs	r2, #5
 80419f2:	701a      	strb	r2, [r3, #0]
                return false;
 80419f4:	2300      	movs	r3, #0
 80419f6:	e0ec      	b.n	8041bd2 <firmware_update_process+0x25a>
            }
            clear_uart_buffer();
 80419f8:	f000 fa40 	bl	8041e7c <clear_uart_buffer>
            read_request = true;
 80419fc:	4b78      	ldr	r3, [pc, #480]	; (8041be0 <firmware_update_process+0x268>)
 80419fe:	2201      	movs	r2, #1
 8041a00:	701a      	strb	r2, [r3, #0]
        }

        // Read data until active buffer is full or END_MARKER is detected
        while (buffer_index < BUFFER_SIZE) {
 8041a02:	e06b      	b.n	8041adc <firmware_update_process+0x164>
            uint32_t bytes_received = receive_data(&active_buffer[buffer_index], BUFFER_SIZE - buffer_index);
 8041a04:	4b7b      	ldr	r3, [pc, #492]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a06:	681a      	ldr	r2, [r3, #0]
 8041a08:	4b7b      	ldr	r3, [pc, #492]	; (8041bf8 <firmware_update_process+0x280>)
 8041a0a:	681b      	ldr	r3, [r3, #0]
 8041a0c:	441a      	add	r2, r3
 8041a0e:	4b7a      	ldr	r3, [pc, #488]	; (8041bf8 <firmware_update_process+0x280>)
 8041a10:	681b      	ldr	r3, [r3, #0]
 8041a12:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8041a16:	4619      	mov	r1, r3
 8041a18:	4610      	mov	r0, r2
 8041a1a:	f7ff fc9b 	bl	8041354 <receive_data>
 8041a1e:	61f8      	str	r0, [r7, #28]

            if (bytes_received == 0) {
 8041a20:	69fb      	ldr	r3, [r7, #28]
 8041a22:	2b00      	cmp	r3, #0
 8041a24:	d060      	beq.n	8041ae8 <firmware_update_process+0x170>
                break;
            }

            buffer_index += bytes_received;
 8041a26:	4b74      	ldr	r3, [pc, #464]	; (8041bf8 <firmware_update_process+0x280>)
 8041a28:	681a      	ldr	r2, [r3, #0]
 8041a2a:	69fb      	ldr	r3, [r7, #28]
 8041a2c:	4413      	add	r3, r2
 8041a2e:	4a72      	ldr	r2, [pc, #456]	; (8041bf8 <firmware_update_process+0x280>)
 8041a30:	6013      	str	r3, [r2, #0]
            if (check_for_uart_error()) {
 8041a32:	f000 fa5b 	bl	8041eec <check_for_uart_error>
 8041a36:	4603      	mov	r3, r0
 8041a38:	2b00      	cmp	r3, #0
 8041a3a:	d157      	bne.n	8041aec <firmware_update_process+0x174>
            	break; // If an error is detected, break out of the loop to restart the process
            }

            if (find_end_marker(active_buffer, buffer_index)) {
 8041a3c:	4b6d      	ldr	r3, [pc, #436]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a3e:	681b      	ldr	r3, [r3, #0]
 8041a40:	4a6d      	ldr	r2, [pc, #436]	; (8041bf8 <firmware_update_process+0x280>)
 8041a42:	6812      	ldr	r2, [r2, #0]
 8041a44:	4611      	mov	r1, r2
 8041a46:	4618      	mov	r0, r3
 8041a48:	f000 f8dc 	bl	8041c04 <find_end_marker>
 8041a4c:	4603      	mov	r3, r0
 8041a4e:	2b00      	cmp	r3, #0
 8041a50:	d044      	beq.n	8041adc <firmware_update_process+0x164>
                if (first_marker_skipped){
 8041a52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8041a56:	2b00      	cmp	r3, #0
 8041a58:	d03c      	beq.n	8041ad4 <firmware_update_process+0x15c>
                	end_marker_found = true;
 8041a5a:	2301      	movs	r3, #1
 8041a5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                	buffer_index = (uint32_t)(find_end_marker_position(active_buffer, buffer_index) - active_buffer);
 8041a60:	4b64      	ldr	r3, [pc, #400]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a62:	681b      	ldr	r3, [r3, #0]
 8041a64:	4a64      	ldr	r2, [pc, #400]	; (8041bf8 <firmware_update_process+0x280>)
 8041a66:	6812      	ldr	r2, [r2, #0]
 8041a68:	4611      	mov	r1, r2
 8041a6a:	4618      	mov	r0, r3
 8041a6c:	f000 fa18 	bl	8041ea0 <find_end_marker_position>
 8041a70:	4602      	mov	r2, r0
 8041a72:	4b60      	ldr	r3, [pc, #384]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	1ad3      	subs	r3, r2, r3
 8041a78:	461a      	mov	r2, r3
 8041a7a:	4b5f      	ldr	r3, [pc, #380]	; (8041bf8 <firmware_update_process+0x280>)
 8041a7c:	601a      	str	r2, [r3, #0]
                	// Subtract the length of the END_MARKER to exclude it from the write.
//                	buffer_index -= strlen(END_MARKER);

                	// Switch buffers immediately
                	uint8_t *temp = active_buffer;
 8041a7e:	4b5d      	ldr	r3, [pc, #372]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a80:	681b      	ldr	r3, [r3, #0]
 8041a82:	61bb      	str	r3, [r7, #24]
                	active_buffer = write_buffer;
 8041a84:	4b5d      	ldr	r3, [pc, #372]	; (8041bfc <firmware_update_process+0x284>)
 8041a86:	681b      	ldr	r3, [r3, #0]
 8041a88:	4a5a      	ldr	r2, [pc, #360]	; (8041bf4 <firmware_update_process+0x27c>)
 8041a8a:	6013      	str	r3, [r2, #0]
                	write_buffer = temp;
 8041a8c:	4a5b      	ldr	r2, [pc, #364]	; (8041bfc <firmware_update_process+0x284>)
 8041a8e:	69bb      	ldr	r3, [r7, #24]
 8041a90:	6013      	str	r3, [r2, #0]

                	// Write data to flash
                	uint32_t residue = buffer_index % 4;
 8041a92:	4b59      	ldr	r3, [pc, #356]	; (8041bf8 <firmware_update_process+0x280>)
 8041a94:	681b      	ldr	r3, [r3, #0]
 8041a96:	f003 0303 	and.w	r3, r3, #3
 8041a9a:	617b      	str	r3, [r7, #20]
                	uint32_t write_size = buffer_index - residue;
 8041a9c:	4b56      	ldr	r3, [pc, #344]	; (8041bf8 <firmware_update_process+0x280>)
 8041a9e:	681a      	ldr	r2, [r3, #0]
 8041aa0:	697b      	ldr	r3, [r7, #20]
 8041aa2:	1ad3      	subs	r3, r2, r3
 8041aa4:	613b      	str	r3, [r7, #16]
                	if (HAL_OK != write_to_flash(current_flash_address, write_buffer, write_size)) {
 8041aa6:	4b56      	ldr	r3, [pc, #344]	; (8041c00 <firmware_update_process+0x288>)
 8041aa8:	681b      	ldr	r3, [r3, #0]
 8041aaa:	4a54      	ldr	r2, [pc, #336]	; (8041bfc <firmware_update_process+0x284>)
 8041aac:	6811      	ldr	r1, [r2, #0]
 8041aae:	693a      	ldr	r2, [r7, #16]
 8041ab0:	4618      	mov	r0, r3
 8041ab2:	f000 f919 	bl	8041ce8 <write_to_flash>
 8041ab6:	4603      	mov	r3, r0
 8041ab8:	2b00      	cmp	r3, #0
 8041aba:	d001      	beq.n	8041ac0 <firmware_update_process+0x148>
                	    return false;
 8041abc:	2300      	movs	r3, #0
 8041abe:	e088      	b.n	8041bd2 <firmware_update_process+0x25a>
                	}
                	current_flash_address += write_size;
 8041ac0:	4b4f      	ldr	r3, [pc, #316]	; (8041c00 <firmware_update_process+0x288>)
 8041ac2:	681a      	ldr	r2, [r3, #0]
 8041ac4:	693b      	ldr	r3, [r7, #16]
 8041ac6:	4413      	add	r3, r2
 8041ac8:	4a4d      	ldr	r2, [pc, #308]	; (8041c00 <firmware_update_process+0x288>)
 8041aca:	6013      	str	r3, [r2, #0]
                	buffer_index = residue;
 8041acc:	4a4a      	ldr	r2, [pc, #296]	; (8041bf8 <firmware_update_process+0x280>)
 8041ace:	697b      	ldr	r3, [r7, #20]
 8041ad0:	6013      	str	r3, [r2, #0]
                }else{
                	first_marker_skipped = true;
                }


                break;
 8041ad2:	e00c      	b.n	8041aee <firmware_update_process+0x176>
                	first_marker_skipped = true;
 8041ad4:	2301      	movs	r3, #1
 8041ad6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                break;
 8041ada:	e008      	b.n	8041aee <firmware_update_process+0x176>
        while (buffer_index < BUFFER_SIZE) {
 8041adc:	4b46      	ldr	r3, [pc, #280]	; (8041bf8 <firmware_update_process+0x280>)
 8041ade:	681b      	ldr	r3, [r3, #0]
 8041ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041ae4:	d38e      	bcc.n	8041a04 <firmware_update_process+0x8c>
 8041ae6:	e002      	b.n	8041aee <firmware_update_process+0x176>
                break;
 8041ae8:	bf00      	nop
 8041aea:	e000      	b.n	8041aee <firmware_update_process+0x176>
            	break; // If an error is detected, break out of the loop to restart the process
 8041aec:	bf00      	nop
            }

        }

        // Switch buffers
        uint8_t *temp = active_buffer;
 8041aee:	4b41      	ldr	r3, [pc, #260]	; (8041bf4 <firmware_update_process+0x27c>)
 8041af0:	681b      	ldr	r3, [r3, #0]
 8041af2:	60fb      	str	r3, [r7, #12]
        active_buffer = write_buffer;
 8041af4:	4b41      	ldr	r3, [pc, #260]	; (8041bfc <firmware_update_process+0x284>)
 8041af6:	681b      	ldr	r3, [r3, #0]
 8041af8:	4a3e      	ldr	r2, [pc, #248]	; (8041bf4 <firmware_update_process+0x27c>)
 8041afa:	6013      	str	r3, [r2, #0]
        write_buffer = temp;
 8041afc:	4a3f      	ldr	r2, [pc, #252]	; (8041bfc <firmware_update_process+0x284>)
 8041afe:	68fb      	ldr	r3, [r7, #12]
 8041b00:	6013      	str	r3, [r2, #0]

        // At this point, the write_buffer is full (or has END_MARKER), so write it to flash
        uint32_t residue = buffer_index % 4;
 8041b02:	4b3d      	ldr	r3, [pc, #244]	; (8041bf8 <firmware_update_process+0x280>)
 8041b04:	681b      	ldr	r3, [r3, #0]
 8041b06:	f003 0303 	and.w	r3, r3, #3
 8041b0a:	60bb      	str	r3, [r7, #8]
        uint32_t write_size = buffer_index - residue;
 8041b0c:	4b3a      	ldr	r3, [pc, #232]	; (8041bf8 <firmware_update_process+0x280>)
 8041b0e:	681a      	ldr	r2, [r3, #0]
 8041b10:	68bb      	ldr	r3, [r7, #8]
 8041b12:	1ad3      	subs	r3, r2, r3
 8041b14:	607b      	str	r3, [r7, #4]
        if (HAL_OK != write_to_flash(current_flash_address, write_buffer, write_size)) {
 8041b16:	4b3a      	ldr	r3, [pc, #232]	; (8041c00 <firmware_update_process+0x288>)
 8041b18:	681b      	ldr	r3, [r3, #0]
 8041b1a:	4a38      	ldr	r2, [pc, #224]	; (8041bfc <firmware_update_process+0x284>)
 8041b1c:	6811      	ldr	r1, [r2, #0]
 8041b1e:	687a      	ldr	r2, [r7, #4]
 8041b20:	4618      	mov	r0, r3
 8041b22:	f000 f8e1 	bl	8041ce8 <write_to_flash>
 8041b26:	4603      	mov	r3, r0
 8041b28:	2b00      	cmp	r3, #0
 8041b2a:	d001      	beq.n	8041b30 <firmware_update_process+0x1b8>
            return false;
 8041b2c:	2300      	movs	r3, #0
 8041b2e:	e050      	b.n	8041bd2 <firmware_update_process+0x25a>
        }
        current_flash_address += write_size;
 8041b30:	4b33      	ldr	r3, [pc, #204]	; (8041c00 <firmware_update_process+0x288>)
 8041b32:	681a      	ldr	r2, [r3, #0]
 8041b34:	687b      	ldr	r3, [r7, #4]
 8041b36:	4413      	add	r3, r2
 8041b38:	4a31      	ldr	r2, [pc, #196]	; (8041c00 <firmware_update_process+0x288>)
 8041b3a:	6013      	str	r3, [r2, #0]

        if (residue) {
 8041b3c:	68bb      	ldr	r3, [r7, #8]
 8041b3e:	2b00      	cmp	r3, #0
 8041b40:	d009      	beq.n	8041b56 <firmware_update_process+0x1de>
            memmove(write_buffer, &write_buffer[write_size], residue);
 8041b42:	4b2e      	ldr	r3, [pc, #184]	; (8041bfc <firmware_update_process+0x284>)
 8041b44:	6818      	ldr	r0, [r3, #0]
 8041b46:	4b2d      	ldr	r3, [pc, #180]	; (8041bfc <firmware_update_process+0x284>)
 8041b48:	681a      	ldr	r2, [r3, #0]
 8041b4a:	687b      	ldr	r3, [r7, #4]
 8041b4c:	4413      	add	r3, r2
 8041b4e:	68ba      	ldr	r2, [r7, #8]
 8041b50:	4619      	mov	r1, r3
 8041b52:	f006 fade 	bl	8048112 <memmove>
        }

        buffer_index = residue;
 8041b56:	4a28      	ldr	r2, [pc, #160]	; (8041bf8 <firmware_update_process+0x280>)
 8041b58:	68bb      	ldr	r3, [r7, #8]
 8041b5a:	6013      	str	r3, [r2, #0]

    } while (!end_marker_found);
 8041b5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8041b60:	f083 0301 	eor.w	r3, r3, #1
 8041b64:	b2db      	uxtb	r3, r3
 8041b66:	2b00      	cmp	r3, #0
 8041b68:	f47f af27 	bne.w	80419ba <firmware_update_process+0x42>
    if (end_marker_found && !check_for_uart_error()) {
 8041b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8041b70:	2b00      	cmp	r3, #0
 8041b72:	d00b      	beq.n	8041b8c <firmware_update_process+0x214>
 8041b74:	f000 f9ba 	bl	8041eec <check_for_uart_error>
 8041b78:	4603      	mov	r3, r0
 8041b7a:	f083 0301 	eor.w	r3, r3, #1
 8041b7e:	b2db      	uxtb	r3, r3
 8041b80:	2b00      	cmp	r3, #0
 8041b82:	d003      	beq.n	8041b8c <firmware_update_process+0x214>
        success = true; // If the end marker was found and no error occurred, the process was successful
 8041b84:	2301      	movs	r3, #1
 8041b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8041b8a:	e007      	b.n	8041b9c <firmware_update_process+0x224>
    } else {
    	read_request = false;
 8041b8c:	4b14      	ldr	r3, [pc, #80]	; (8041be0 <firmware_update_process+0x268>)
 8041b8e:	2200      	movs	r2, #0
 8041b90:	701a      	strb	r2, [r3, #0]
        retry_count++;
 8041b92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8041b96:	3301      	adds	r3, #1
 8041b98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (!success && retry_count < max_retries) {
 8041b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041ba0:	f083 0301 	eor.w	r3, r3, #1
 8041ba4:	b2db      	uxtb	r3, r3
 8041ba6:	2b00      	cmp	r3, #0
 8041ba8:	d006      	beq.n	8041bb8 <firmware_update_process+0x240>
 8041baa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8041bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8041bb2:	429a      	cmp	r2, r3
 8041bb4:	f4ff aeed 	bcc.w	8041992 <firmware_update_process+0x1a>
    }
}
    if (success) {
 8041bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d004      	beq.n	8041bca <firmware_update_process+0x252>
        current_state = DOWNLOAD_COMPLETE;
 8041bc0:	4b0b      	ldr	r3, [pc, #44]	; (8041bf0 <firmware_update_process+0x278>)
 8041bc2:	2204      	movs	r2, #4
 8041bc4:	701a      	strb	r2, [r3, #0]
        return true;
 8041bc6:	2301      	movs	r3, #1
 8041bc8:	e003      	b.n	8041bd2 <firmware_update_process+0x25a>
    } else {
        current_state = DOWNLOAD_ERROR;
 8041bca:	4b09      	ldr	r3, [pc, #36]	; (8041bf0 <firmware_update_process+0x278>)
 8041bcc:	2205      	movs	r2, #5
 8041bce:	701a      	strb	r2, [r3, #0]
        return false; // Firmware update was unsuccessful after max retries
 8041bd0:	2300      	movs	r3, #0
    }
//    current_state = DOWNLOAD_COMPLETE;
//    return true; // Firmware update was successful
}
 8041bd2:	4618      	mov	r0, r3
 8041bd4:	3728      	adds	r7, #40	; 0x28
 8041bd6:	46bd      	mov	sp, r7
 8041bd8:	bd80      	pop	{r7, pc}
 8041bda:	bf00      	nop
 8041bdc:	080c0000 	.word	0x080c0000
 8041be0:	20000524 	.word	0x20000524
 8041be4:	0804ae44 	.word	0x0804ae44
 8041be8:	0804ae50 	.word	0x0804ae50
 8041bec:	20003640 	.word	0x20003640
 8041bf0:	20000635 	.word	0x20000635
 8041bf4:	20000000 	.word	0x20000000
 8041bf8:	20003638 	.word	0x20003638
 8041bfc:	20000004 	.word	0x20000004
 8041c00:	20000008 	.word	0x20000008

08041c04 <find_end_marker>:
	bool find_end_marker(uint8_t *buffer, uint32_t size) {
 8041c04:	b580      	push	{r7, lr}
 8041c06:	b084      	sub	sp, #16
 8041c08:	af00      	add	r7, sp, #0
 8041c0a:	6078      	str	r0, [r7, #4]
 8041c0c:	6039      	str	r1, [r7, #0]
		for (uint32_t i = 0; i < size + 1; i++) {
 8041c0e:	2300      	movs	r3, #0
 8041c10:	60fb      	str	r3, [r7, #12]
 8041c12:	e00f      	b.n	8041c34 <find_end_marker+0x30>
			if (memcmp(&buffer[i], END_MARKER, strlen(END_MARKER)) == 0) {
 8041c14:	687a      	ldr	r2, [r7, #4]
 8041c16:	68fb      	ldr	r3, [r7, #12]
 8041c18:	4413      	add	r3, r2
 8041c1a:	2206      	movs	r2, #6
 8041c1c:	490a      	ldr	r1, [pc, #40]	; (8041c48 <find_end_marker+0x44>)
 8041c1e:	4618      	mov	r0, r3
 8041c20:	f006 fa67 	bl	80480f2 <memcmp>
 8041c24:	4603      	mov	r3, r0
 8041c26:	2b00      	cmp	r3, #0
 8041c28:	d101      	bne.n	8041c2e <find_end_marker+0x2a>
				return true;
 8041c2a:	2301      	movs	r3, #1
 8041c2c:	e008      	b.n	8041c40 <find_end_marker+0x3c>
		for (uint32_t i = 0; i < size + 1; i++) {
 8041c2e:	68fb      	ldr	r3, [r7, #12]
 8041c30:	3301      	adds	r3, #1
 8041c32:	60fb      	str	r3, [r7, #12]
 8041c34:	683b      	ldr	r3, [r7, #0]
 8041c36:	3301      	adds	r3, #1
 8041c38:	68fa      	ldr	r2, [r7, #12]
 8041c3a:	429a      	cmp	r2, r3
 8041c3c:	d3ea      	bcc.n	8041c14 <find_end_marker+0x10>
			}
		}
		return false;
 8041c3e:	2300      	movs	r3, #0
	}
 8041c40:	4618      	mov	r0, r3
 8041c42:	3710      	adds	r7, #16
 8041c44:	46bd      	mov	sp, r7
 8041c46:	bd80      	pop	{r7, pc}
 8041c48:	0804ad88 	.word	0x0804ad88

08041c4c <erase_flash>:

HAL_StatusTypeDef erase_flash(uint32_t start_address, uint32_t end_address) {
 8041c4c:	b580      	push	{r7, lr}
 8041c4e:	b08a      	sub	sp, #40	; 0x28
 8041c50:	af00      	add	r7, sp, #0
 8041c52:	6078      	str	r0, [r7, #4]
 8041c54:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase;
    uint32_t error;

    // Unlock the flash
   status = HAL_FLASH_Unlock();
 8041c56:	f002 faaf 	bl	80441b8 <HAL_FLASH_Unlock>
 8041c5a:	4603      	mov	r3, r0
 8041c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (status != HAL_OK) {
 8041c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041c64:	2b00      	cmp	r3, #0
 8041c66:	d005      	beq.n	8041c74 <erase_flash+0x28>
       // Handle flash unlock error
   	firmware_write_busy = false;
 8041c68:	4b1e      	ldr	r3, [pc, #120]	; (8041ce4 <erase_flash+0x98>)
 8041c6a:	2200      	movs	r2, #0
 8041c6c:	701a      	strb	r2, [r3, #0]
       return status;
 8041c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041c72:	e033      	b.n	8041cdc <erase_flash+0x90>
   }

    // Define the erase parameters
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8041c74:	2300      	movs	r3, #0
 8041c76:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Adjust according to your needs
 8041c78:	2302      	movs	r3, #2
 8041c7a:	623b      	str	r3, [r7, #32]
    erase.Sector = get_flash_sector(start_address); // You need to implement the get_flash_sector function
 8041c7c:	6878      	ldr	r0, [r7, #4]
 8041c7e:	f000 f88d 	bl	8041d9c <get_flash_sector>
 8041c82:	4603      	mov	r3, r0
 8041c84:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = get_flash_sector(end_address) - erase.Sector + 1;
 8041c86:	6838      	ldr	r0, [r7, #0]
 8041c88:	f000 f888 	bl	8041d9c <get_flash_sector>
 8041c8c:	4602      	mov	r2, r0
 8041c8e:	69bb      	ldr	r3, [r7, #24]
 8041c90:	1ad3      	subs	r3, r2, r3
 8041c92:	3301      	adds	r3, #1
 8041c94:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&erase, &error);
 8041c96:	f107 020c 	add.w	r2, r7, #12
 8041c9a:	f107 0310 	add.w	r3, r7, #16
 8041c9e:	4611      	mov	r1, r2
 8041ca0:	4618      	mov	r0, r3
 8041ca2:	f002 fbeb 	bl	804447c <HAL_FLASHEx_Erase>
 8041ca6:	4603      	mov	r3, r0
 8041ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 8041cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041cb0:	2b00      	cmp	r3, #0
 8041cb2:	d005      	beq.n	8041cc0 <erase_flash+0x74>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8041cb4:	4b0b      	ldr	r3, [pc, #44]	; (8041ce4 <erase_flash+0x98>)
 8041cb6:	2200      	movs	r2, #0
 8041cb8:	701a      	strb	r2, [r3, #0]
        return status;
 8041cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041cbe:	e00d      	b.n	8041cdc <erase_flash+0x90>
    }

    // Lock the flash
    HAL_FLASH_Lock();
 8041cc0:	f002 fa9c 	bl	80441fc <HAL_FLASH_Lock>
    if (status != HAL_OK) {
 8041cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041cc8:	2b00      	cmp	r3, #0
 8041cca:	d005      	beq.n	8041cd8 <erase_flash+0x8c>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8041ccc:	4b05      	ldr	r3, [pc, #20]	; (8041ce4 <erase_flash+0x98>)
 8041cce:	2200      	movs	r2, #0
 8041cd0:	701a      	strb	r2, [r3, #0]
        return status;
 8041cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8041cd6:	e001      	b.n	8041cdc <erase_flash+0x90>
    }

    return status;
 8041cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8041cdc:	4618      	mov	r0, r3
 8041cde:	3728      	adds	r7, #40	; 0x28
 8041ce0:	46bd      	mov	sp, r7
 8041ce2:	bd80      	pop	{r7, pc}
 8041ce4:	20000523 	.word	0x20000523

08041ce8 <write_to_flash>:

HAL_StatusTypeDef write_to_flash(uint32_t address, uint8_t *data, uint32_t length) {
 8041ce8:	b5b0      	push	{r4, r5, r7, lr}
 8041cea:	b086      	sub	sp, #24
 8041cec:	af00      	add	r7, sp, #0
 8041cee:	60f8      	str	r0, [r7, #12]
 8041cf0:	60b9      	str	r1, [r7, #8]
 8041cf2:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    // Unlock the flash
    status = HAL_FLASH_Unlock();
 8041cf4:	f002 fa60 	bl	80441b8 <HAL_FLASH_Unlock>
 8041cf8:	4603      	mov	r3, r0
 8041cfa:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8041cfc:	7dfb      	ldrb	r3, [r7, #23]
 8041cfe:	2b00      	cmp	r3, #0
 8041d00:	d004      	beq.n	8041d0c <write_to_flash+0x24>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8041d02:	4b25      	ldr	r3, [pc, #148]	; (8041d98 <write_to_flash+0xb0>)
 8041d04:	2200      	movs	r2, #0
 8041d06:	701a      	strb	r2, [r3, #0]
        return status;
 8041d08:	7dfb      	ldrb	r3, [r7, #23]
 8041d0a:	e040      	b.n	8041d8e <write_to_flash+0xa6>
    }

    for (uint32_t i = 0; i < length; i += 4) {
 8041d0c:	2300      	movs	r3, #0
 8041d0e:	613b      	str	r3, [r7, #16]
 8041d10:	e02c      	b.n	8041d6c <write_to_flash+0x84>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, *(uint32_t*)(data + i));
 8041d12:	68fa      	ldr	r2, [r7, #12]
 8041d14:	693b      	ldr	r3, [r7, #16]
 8041d16:	18d1      	adds	r1, r2, r3
 8041d18:	68ba      	ldr	r2, [r7, #8]
 8041d1a:	693b      	ldr	r3, [r7, #16]
 8041d1c:	4413      	add	r3, r2
 8041d1e:	681b      	ldr	r3, [r3, #0]
 8041d20:	2200      	movs	r2, #0
 8041d22:	461c      	mov	r4, r3
 8041d24:	4615      	mov	r5, r2
 8041d26:	4622      	mov	r2, r4
 8041d28:	462b      	mov	r3, r5
 8041d2a:	2002      	movs	r0, #2
 8041d2c:	f002 f9f0 	bl	8044110 <HAL_FLASH_Program>
 8041d30:	4603      	mov	r3, r0
 8041d32:	75fb      	strb	r3, [r7, #23]
        if(*(uint32_t*)(address + i) != *(uint32_t*)(data + i)) {
 8041d34:	68fa      	ldr	r2, [r7, #12]
 8041d36:	693b      	ldr	r3, [r7, #16]
 8041d38:	4413      	add	r3, r2
 8041d3a:	681a      	ldr	r2, [r3, #0]
 8041d3c:	68b9      	ldr	r1, [r7, #8]
 8041d3e:	693b      	ldr	r3, [r7, #16]
 8041d40:	440b      	add	r3, r1
 8041d42:	681b      	ldr	r3, [r3, #0]
 8041d44:	429a      	cmp	r2, r3
 8041d46:	d006      	beq.n	8041d56 <write_to_flash+0x6e>
            // Handle data mismatch error
            firmware_write_busy = false;
 8041d48:	4b13      	ldr	r3, [pc, #76]	; (8041d98 <write_to_flash+0xb0>)
 8041d4a:	2200      	movs	r2, #0
 8041d4c:	701a      	strb	r2, [r3, #0]
            HAL_FLASH_Lock();
 8041d4e:	f002 fa55 	bl	80441fc <HAL_FLASH_Lock>
            status = HAL_ERROR;
 8041d52:	2301      	movs	r3, #1
 8041d54:	75fb      	strb	r3, [r7, #23]
        }
        if (status != HAL_OK) {
 8041d56:	7dfb      	ldrb	r3, [r7, #23]
 8041d58:	2b00      	cmp	r3, #0
 8041d5a:	d004      	beq.n	8041d66 <write_to_flash+0x7e>
        	firmware_write_busy = false;
 8041d5c:	4b0e      	ldr	r3, [pc, #56]	; (8041d98 <write_to_flash+0xb0>)
 8041d5e:	2200      	movs	r2, #0
 8041d60:	701a      	strb	r2, [r3, #0]
            return status;
 8041d62:	7dfb      	ldrb	r3, [r7, #23]
 8041d64:	e013      	b.n	8041d8e <write_to_flash+0xa6>
    for (uint32_t i = 0; i < length; i += 4) {
 8041d66:	693b      	ldr	r3, [r7, #16]
 8041d68:	3304      	adds	r3, #4
 8041d6a:	613b      	str	r3, [r7, #16]
 8041d6c:	693a      	ldr	r2, [r7, #16]
 8041d6e:	687b      	ldr	r3, [r7, #4]
 8041d70:	429a      	cmp	r2, r3
 8041d72:	d3ce      	bcc.n	8041d12 <write_to_flash+0x2a>
        }
    }

    // Lock the flash
    status = HAL_FLASH_Lock();
 8041d74:	f002 fa42 	bl	80441fc <HAL_FLASH_Lock>
 8041d78:	4603      	mov	r3, r0
 8041d7a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8041d7c:	7dfb      	ldrb	r3, [r7, #23]
 8041d7e:	2b00      	cmp	r3, #0
 8041d80:	d004      	beq.n	8041d8c <write_to_flash+0xa4>
    	firmware_write_busy = false;
 8041d82:	4b05      	ldr	r3, [pc, #20]	; (8041d98 <write_to_flash+0xb0>)
 8041d84:	2200      	movs	r2, #0
 8041d86:	701a      	strb	r2, [r3, #0]
    	return status;
 8041d88:	7dfb      	ldrb	r3, [r7, #23]
 8041d8a:	e000      	b.n	8041d8e <write_to_flash+0xa6>
    }

    return status;
 8041d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8041d8e:	4618      	mov	r0, r3
 8041d90:	3718      	adds	r7, #24
 8041d92:	46bd      	mov	sp, r7
 8041d94:	bdb0      	pop	{r4, r5, r7, pc}
 8041d96:	bf00      	nop
 8041d98:	20000523 	.word	0x20000523

08041d9c <get_flash_sector>:

uint32_t get_flash_sector(uint32_t address) {
 8041d9c:	b480      	push	{r7}
 8041d9e:	b085      	sub	sp, #20
 8041da0:	af00      	add	r7, sp, #0
 8041da2:	6078      	str	r0, [r7, #4]
    uint32_t sector;

    // STM32F407VG flash sectors
    if (address < 0x08004000) sector = FLASH_SECTOR_0;
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	4a2a      	ldr	r2, [pc, #168]	; (8041e50 <get_flash_sector+0xb4>)
 8041da8:	4293      	cmp	r3, r2
 8041daa:	d202      	bcs.n	8041db2 <get_flash_sector+0x16>
 8041dac:	2300      	movs	r3, #0
 8041dae:	60fb      	str	r3, [r7, #12]
 8041db0:	e047      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08008000) sector = FLASH_SECTOR_1;
 8041db2:	687b      	ldr	r3, [r7, #4]
 8041db4:	4a27      	ldr	r2, [pc, #156]	; (8041e54 <get_flash_sector+0xb8>)
 8041db6:	4293      	cmp	r3, r2
 8041db8:	d202      	bcs.n	8041dc0 <get_flash_sector+0x24>
 8041dba:	2301      	movs	r3, #1
 8041dbc:	60fb      	str	r3, [r7, #12]
 8041dbe:	e040      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x0800C000) sector = FLASH_SECTOR_2;
 8041dc0:	687b      	ldr	r3, [r7, #4]
 8041dc2:	4a25      	ldr	r2, [pc, #148]	; (8041e58 <get_flash_sector+0xbc>)
 8041dc4:	4293      	cmp	r3, r2
 8041dc6:	d202      	bcs.n	8041dce <get_flash_sector+0x32>
 8041dc8:	2302      	movs	r3, #2
 8041dca:	60fb      	str	r3, [r7, #12]
 8041dcc:	e039      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08010000) sector = FLASH_SECTOR_3;
 8041dce:	687b      	ldr	r3, [r7, #4]
 8041dd0:	4a22      	ldr	r2, [pc, #136]	; (8041e5c <get_flash_sector+0xc0>)
 8041dd2:	4293      	cmp	r3, r2
 8041dd4:	d802      	bhi.n	8041ddc <get_flash_sector+0x40>
 8041dd6:	2303      	movs	r3, #3
 8041dd8:	60fb      	str	r3, [r7, #12]
 8041dda:	e032      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08020000) sector = FLASH_SECTOR_4;
 8041ddc:	687b      	ldr	r3, [r7, #4]
 8041dde:	4a20      	ldr	r2, [pc, #128]	; (8041e60 <get_flash_sector+0xc4>)
 8041de0:	4293      	cmp	r3, r2
 8041de2:	d802      	bhi.n	8041dea <get_flash_sector+0x4e>
 8041de4:	2304      	movs	r3, #4
 8041de6:	60fb      	str	r3, [r7, #12]
 8041de8:	e02b      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08040000) sector = FLASH_SECTOR_5;
 8041dea:	687b      	ldr	r3, [r7, #4]
 8041dec:	4a1d      	ldr	r2, [pc, #116]	; (8041e64 <get_flash_sector+0xc8>)
 8041dee:	4293      	cmp	r3, r2
 8041df0:	d802      	bhi.n	8041df8 <get_flash_sector+0x5c>
 8041df2:	2305      	movs	r3, #5
 8041df4:	60fb      	str	r3, [r7, #12]
 8041df6:	e024      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08060000) sector = FLASH_SECTOR_6;
 8041df8:	687b      	ldr	r3, [r7, #4]
 8041dfa:	4a1b      	ldr	r2, [pc, #108]	; (8041e68 <get_flash_sector+0xcc>)
 8041dfc:	4293      	cmp	r3, r2
 8041dfe:	d802      	bhi.n	8041e06 <get_flash_sector+0x6a>
 8041e00:	2306      	movs	r3, #6
 8041e02:	60fb      	str	r3, [r7, #12]
 8041e04:	e01d      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x08080000) sector = FLASH_SECTOR_7;
 8041e06:	687b      	ldr	r3, [r7, #4]
 8041e08:	4a18      	ldr	r2, [pc, #96]	; (8041e6c <get_flash_sector+0xd0>)
 8041e0a:	4293      	cmp	r3, r2
 8041e0c:	d802      	bhi.n	8041e14 <get_flash_sector+0x78>
 8041e0e:	2307      	movs	r3, #7
 8041e10:	60fb      	str	r3, [r7, #12]
 8041e12:	e016      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x080A0000) sector = FLASH_SECTOR_8;
 8041e14:	687b      	ldr	r3, [r7, #4]
 8041e16:	4a16      	ldr	r2, [pc, #88]	; (8041e70 <get_flash_sector+0xd4>)
 8041e18:	4293      	cmp	r3, r2
 8041e1a:	d802      	bhi.n	8041e22 <get_flash_sector+0x86>
 8041e1c:	2308      	movs	r3, #8
 8041e1e:	60fb      	str	r3, [r7, #12]
 8041e20:	e00f      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x080C0000) sector = FLASH_SECTOR_9;
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	4a13      	ldr	r2, [pc, #76]	; (8041e74 <get_flash_sector+0xd8>)
 8041e26:	4293      	cmp	r3, r2
 8041e28:	d802      	bhi.n	8041e30 <get_flash_sector+0x94>
 8041e2a:	2309      	movs	r3, #9
 8041e2c:	60fb      	str	r3, [r7, #12]
 8041e2e:	e008      	b.n	8041e42 <get_flash_sector+0xa6>
    else if (address < 0x080E0000) sector = FLASH_SECTOR_10;
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	4a11      	ldr	r2, [pc, #68]	; (8041e78 <get_flash_sector+0xdc>)
 8041e34:	4293      	cmp	r3, r2
 8041e36:	d802      	bhi.n	8041e3e <get_flash_sector+0xa2>
 8041e38:	230a      	movs	r3, #10
 8041e3a:	60fb      	str	r3, [r7, #12]
 8041e3c:	e001      	b.n	8041e42 <get_flash_sector+0xa6>
    else sector = FLASH_SECTOR_11;  // covers up to 0x08100000
 8041e3e:	230b      	movs	r3, #11
 8041e40:	60fb      	str	r3, [r7, #12]

    return sector;
 8041e42:	68fb      	ldr	r3, [r7, #12]
}
 8041e44:	4618      	mov	r0, r3
 8041e46:	3714      	adds	r7, #20
 8041e48:	46bd      	mov	sp, r7
 8041e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e4e:	4770      	bx	lr
 8041e50:	08004000 	.word	0x08004000
 8041e54:	08008000 	.word	0x08008000
 8041e58:	0800c000 	.word	0x0800c000
 8041e5c:	0800ffff 	.word	0x0800ffff
 8041e60:	0801ffff 	.word	0x0801ffff
 8041e64:	0803ffff 	.word	0x0803ffff
 8041e68:	0805ffff 	.word	0x0805ffff
 8041e6c:	0807ffff 	.word	0x0807ffff
 8041e70:	0809ffff 	.word	0x0809ffff
 8041e74:	080bffff 	.word	0x080bffff
 8041e78:	080dffff 	.word	0x080dffff

08041e7c <clear_uart_buffer>:

void clear_uart_buffer() {
 8041e7c:	b480      	push	{r7}
 8041e7e:	af00      	add	r7, sp, #0
    uart_buffer.write_index = 0;
 8041e80:	4b06      	ldr	r3, [pc, #24]	; (8041e9c <clear_uart_buffer+0x20>)
 8041e82:	2200      	movs	r2, #0
 8041e84:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    uart_buffer.read_index = 0;
 8041e88:	4b04      	ldr	r3, [pc, #16]	; (8041e9c <clear_uart_buffer+0x20>)
 8041e8a:	2200      	movs	r2, #0
 8041e8c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 8041e90:	bf00      	nop
 8041e92:	46bd      	mov	sp, r7
 8041e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e98:	4770      	bx	lr
 8041e9a:	bf00      	nop
 8041e9c:	20000528 	.word	0x20000528

08041ea0 <find_end_marker_position>:

uint8_t* find_end_marker_position(uint8_t *buffer, uint32_t size) {
 8041ea0:	b580      	push	{r7, lr}
 8041ea2:	b084      	sub	sp, #16
 8041ea4:	af00      	add	r7, sp, #0
 8041ea6:	6078      	str	r0, [r7, #4]
 8041ea8:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8041eaa:	2300      	movs	r3, #0
 8041eac:	60fb      	str	r3, [r7, #12]
 8041eae:	e011      	b.n	8041ed4 <find_end_marker_position+0x34>
        if (memcmp(&buffer[i], END_MARKER, strlen(END_MARKER)) == 0) {
 8041eb0:	687a      	ldr	r2, [r7, #4]
 8041eb2:	68fb      	ldr	r3, [r7, #12]
 8041eb4:	4413      	add	r3, r2
 8041eb6:	2206      	movs	r2, #6
 8041eb8:	490b      	ldr	r1, [pc, #44]	; (8041ee8 <find_end_marker_position+0x48>)
 8041eba:	4618      	mov	r0, r3
 8041ebc:	f006 f919 	bl	80480f2 <memcmp>
 8041ec0:	4603      	mov	r3, r0
 8041ec2:	2b00      	cmp	r3, #0
 8041ec4:	d103      	bne.n	8041ece <find_end_marker_position+0x2e>
            return &buffer[i]; // Return pointer to the starting position of END_MARKER
 8041ec6:	687a      	ldr	r2, [r7, #4]
 8041ec8:	68fb      	ldr	r3, [r7, #12]
 8041eca:	4413      	add	r3, r2
 8041ecc:	e008      	b.n	8041ee0 <find_end_marker_position+0x40>
    for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8041ece:	68fb      	ldr	r3, [r7, #12]
 8041ed0:	3301      	adds	r3, #1
 8041ed2:	60fb      	str	r3, [r7, #12]
 8041ed4:	683b      	ldr	r3, [r7, #0]
 8041ed6:	3b05      	subs	r3, #5
 8041ed8:	68fa      	ldr	r2, [r7, #12]
 8041eda:	429a      	cmp	r2, r3
 8041edc:	d3e8      	bcc.n	8041eb0 <find_end_marker_position+0x10>
        }
    }
    return NULL; // END_MARKER not found in the buffer
 8041ede:	2300      	movs	r3, #0
}
 8041ee0:	4618      	mov	r0, r3
 8041ee2:	3710      	adds	r7, #16
 8041ee4:	46bd      	mov	sp, r7
 8041ee6:	bd80      	pop	{r7, pc}
 8041ee8:	0804ad88 	.word	0x0804ad88

08041eec <check_for_uart_error>:

bool check_for_uart_error() {
 8041eec:	b580      	push	{r7, lr}
 8041eee:	af00      	add	r7, sp, #0
    // Check if the UART buffer contains the error message
    // Return true if found, otherwise return false
    // ... (this depends on how you handle your UART data)
    if (strstr((char *)uart_buffer.data, "\r\n+CME ERROR: http socket read error\r\n") != NULL){
 8041ef0:	4905      	ldr	r1, [pc, #20]	; (8041f08 <check_for_uart_error+0x1c>)
 8041ef2:	4806      	ldr	r0, [pc, #24]	; (8041f0c <check_for_uart_error+0x20>)
 8041ef4:	f006 f961 	bl	80481ba <strstr>
 8041ef8:	4603      	mov	r3, r0
 8041efa:	2b00      	cmp	r3, #0
 8041efc:	d001      	beq.n	8041f02 <check_for_uart_error+0x16>
    	return true;
 8041efe:	2301      	movs	r3, #1
 8041f00:	e000      	b.n	8041f04 <check_for_uart_error+0x18>
    }
    else {
    	return false;
 8041f02:	2300      	movs	r3, #0
    }
}
 8041f04:	4618      	mov	r0, r3
 8041f06:	bd80      	pop	{r7, pc}
 8041f08:	0804ae64 	.word	0x0804ae64
 8041f0c:	20000528 	.word	0x20000528

08041f10 <send_at_command>:
// Assuming extern definitions



// Function to send AT command to Quectel M66
void send_at_command(const char* command, const char* expected_resp) {
 8041f10:	b580      	push	{r7, lr}
 8041f12:	b082      	sub	sp, #8
 8041f14:	af00      	add	r7, sp, #0
 8041f16:	6078      	str	r0, [r7, #4]
 8041f18:	6039      	str	r1, [r7, #0]
	if (at_state == AT_IDLE || AT_RESPONSE_RECEIVED) {
	        // Clear UART buffer
	        memset(uart_buffer.data, 0, UART_BUFFER_SIZE);
 8041f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041f1e:	2100      	movs	r1, #0
 8041f20:	480b      	ldr	r0, [pc, #44]	; (8041f50 <send_at_command+0x40>)
 8041f22:	f006 f910 	bl	8048146 <memset>

	        // Send the AT command
	        UART_Send(command);
 8041f26:	6878      	ldr	r0, [r7, #4]
 8041f28:	f000 f858 	bl	8041fdc <UART_Send>
	        UART_Send("\r\n");
 8041f2c:	4809      	ldr	r0, [pc, #36]	; (8041f54 <send_at_command+0x44>)
 8041f2e:	f000 f855 	bl	8041fdc <UART_Send>

	        // Set the state to waiting for a response
	        at_state = AT_WAITING_RESPONSE;
 8041f32:	4b09      	ldr	r3, [pc, #36]	; (8041f58 <send_at_command+0x48>)
 8041f34:	2201      	movs	r2, #1
 8041f36:	701a      	strb	r2, [r3, #0]
	        expected_at_response = expected_resp;
 8041f38:	4a08      	ldr	r2, [pc, #32]	; (8041f5c <send_at_command+0x4c>)
 8041f3a:	683b      	ldr	r3, [r7, #0]
 8041f3c:	6013      	str	r3, [r2, #0]

	        // Capture the current time (however you measure time in your system)
	        at_command_start_time = get_system_time();  // This function needs to be implemented based on your system
 8041f3e:	f000 f863 	bl	8042008 <get_system_time>
 8041f42:	4603      	mov	r3, r0
 8041f44:	4a06      	ldr	r2, [pc, #24]	; (8041f60 <send_at_command+0x50>)
 8041f46:	6013      	str	r3, [r2, #0]
	    }

}
 8041f48:	bf00      	nop
 8041f4a:	3708      	adds	r7, #8
 8041f4c:	46bd      	mov	sp, r7
 8041f4e:	bd80      	pop	{r7, pc}
 8041f50:	20000528 	.word	0x20000528
 8041f54:	0804ae8c 	.word	0x0804ae8c
 8041f58:	20003640 	.word	0x20003640
 8041f5c:	20003644 	.word	0x20003644
 8041f60:	20003648 	.word	0x20003648

08041f64 <check_at_command_response>:
at_command_state_t check_at_command_response(uint16_t timeout) {
 8041f64:	b580      	push	{r7, lr}
 8041f66:	b084      	sub	sp, #16
 8041f68:	af00      	add	r7, sp, #0
 8041f6a:	4603      	mov	r3, r0
 8041f6c:	80fb      	strh	r3, [r7, #6]
    if (at_state == AT_WAITING_RESPONSE) {
 8041f6e:	4b16      	ldr	r3, [pc, #88]	; (8041fc8 <check_at_command_response+0x64>)
 8041f70:	781b      	ldrb	r3, [r3, #0]
 8041f72:	2b01      	cmp	r3, #1
 8041f74:	d121      	bne.n	8041fba <check_at_command_response+0x56>
        if (data_received_flag) {
 8041f76:	4b15      	ldr	r3, [pc, #84]	; (8041fcc <check_at_command_response+0x68>)
 8041f78:	781b      	ldrb	r3, [r3, #0]
 8041f7a:	b2db      	uxtb	r3, r3
 8041f7c:	2b00      	cmp	r3, #0
 8041f7e:	d00f      	beq.n	8041fa0 <check_at_command_response+0x3c>
            if (strstr((char*)receive_buffer, expected_at_response) != NULL) {
 8041f80:	4b13      	ldr	r3, [pc, #76]	; (8041fd0 <check_at_command_response+0x6c>)
 8041f82:	681b      	ldr	r3, [r3, #0]
 8041f84:	4619      	mov	r1, r3
 8041f86:	4813      	ldr	r0, [pc, #76]	; (8041fd4 <check_at_command_response+0x70>)
 8041f88:	f006 f917 	bl	80481ba <strstr>
 8041f8c:	4603      	mov	r3, r0
 8041f8e:	2b00      	cmp	r3, #0
 8041f90:	d002      	beq.n	8041f98 <check_at_command_response+0x34>
                at_state = AT_RESPONSE_RECEIVED;
 8041f92:	4b0d      	ldr	r3, [pc, #52]	; (8041fc8 <check_at_command_response+0x64>)
 8041f94:	2202      	movs	r2, #2
 8041f96:	701a      	strb	r2, [r3, #0]

            }

            // Reset the flag after processing
            data_received_flag = false;
 8041f98:	4b0c      	ldr	r3, [pc, #48]	; (8041fcc <check_at_command_response+0x68>)
 8041f9a:	2200      	movs	r2, #0
 8041f9c:	701a      	strb	r2, [r3, #0]
 8041f9e:	e00c      	b.n	8041fba <check_at_command_response+0x56>
        } else {
            uint32_t current_time = get_system_time();
 8041fa0:	f000 f832 	bl	8042008 <get_system_time>
 8041fa4:	60f8      	str	r0, [r7, #12]
            if ((current_time - at_command_start_time) >= timeout) {
 8041fa6:	4b0c      	ldr	r3, [pc, #48]	; (8041fd8 <check_at_command_response+0x74>)
 8041fa8:	681b      	ldr	r3, [r3, #0]
 8041faa:	68fa      	ldr	r2, [r7, #12]
 8041fac:	1ad2      	subs	r2, r2, r3
 8041fae:	88fb      	ldrh	r3, [r7, #6]
 8041fb0:	429a      	cmp	r2, r3
 8041fb2:	d302      	bcc.n	8041fba <check_at_command_response+0x56>
                at_state = AT_RESPONSE_TIMEOUT;
 8041fb4:	4b04      	ldr	r3, [pc, #16]	; (8041fc8 <check_at_command_response+0x64>)
 8041fb6:	2203      	movs	r2, #3
 8041fb8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return at_state;
 8041fba:	4b03      	ldr	r3, [pc, #12]	; (8041fc8 <check_at_command_response+0x64>)
 8041fbc:	781b      	ldrb	r3, [r3, #0]
}
 8041fbe:	4618      	mov	r0, r3
 8041fc0:	3710      	adds	r7, #16
 8041fc2:	46bd      	mov	sp, r7
 8041fc4:	bd80      	pop	{r7, pc}
 8041fc6:	bf00      	nop
 8041fc8:	20003640 	.word	0x20003640
 8041fcc:	20000518 	.word	0x20000518
 8041fd0:	20003644 	.word	0x20003644
 8041fd4:	20002638 	.word	0x20002638
 8041fd8:	20003648 	.word	0x20003648

08041fdc <UART_Send>:
//        }
//    }
//    return at_state;
//}

void UART_Send(const char* str) {
 8041fdc:	b580      	push	{r7, lr}
 8041fde:	b082      	sub	sp, #8
 8041fe0:	af00      	add	r7, sp, #0
 8041fe2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);  // Transmitting via UART2 in this example
 8041fe4:	6878      	ldr	r0, [r7, #4]
 8041fe6:	f7fe f953 	bl	8040290 <strlen>
 8041fea:	4603      	mov	r3, r0
 8041fec:	b29a      	uxth	r2, r3
 8041fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8041ff2:	6879      	ldr	r1, [r7, #4]
 8041ff4:	4803      	ldr	r0, [pc, #12]	; (8042004 <UART_Send+0x28>)
 8041ff6:	f003 fbcb 	bl	8045790 <HAL_UART_Transmit>
}
 8041ffa:	bf00      	nop
 8041ffc:	3708      	adds	r7, #8
 8041ffe:	46bd      	mov	sp, r7
 8042000:	bd80      	pop	{r7, pc}
 8042002:	bf00      	nop
 8042004:	20003700 	.word	0x20003700

08042008 <get_system_time>:

uint32_t get_system_time(void) {
 8042008:	b580      	push	{r7, lr}
 804200a:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // Returns the system tick count since start-up
 804200c:	f001 feac 	bl	8043d68 <HAL_GetTick>
 8042010:	4603      	mov	r3, r0
}
 8042012:	4618      	mov	r0, r3
 8042014:	bd80      	pop	{r7, pc}
	...

08042018 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8042018:	b480      	push	{r7}
 804201a:	b085      	sub	sp, #20
 804201c:	af00      	add	r7, sp, #0
 804201e:	6078      	str	r0, [r7, #4]
 8042020:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8042022:	687b      	ldr	r3, [r7, #4]
 8042024:	2b00      	cmp	r3, #0
 8042026:	d002      	beq.n	804202e <case_insensitive_strcmp+0x16>
 8042028:	683b      	ldr	r3, [r7, #0]
 804202a:	2b00      	cmp	r3, #0
 804202c:	d101      	bne.n	8042032 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 804202e:	2301      	movs	r3, #1
 8042030:	e056      	b.n	80420e0 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8042032:	687a      	ldr	r2, [r7, #4]
 8042034:	683b      	ldr	r3, [r7, #0]
 8042036:	429a      	cmp	r2, r3
 8042038:	d10d      	bne.n	8042056 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 804203a:	2300      	movs	r3, #0
 804203c:	e050      	b.n	80420e0 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 804203e:	687b      	ldr	r3, [r7, #4]
 8042040:	781b      	ldrb	r3, [r3, #0]
 8042042:	2b00      	cmp	r3, #0
 8042044:	d101      	bne.n	804204a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8042046:	2300      	movs	r3, #0
 8042048:	e04a      	b.n	80420e0 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 804204a:	687b      	ldr	r3, [r7, #4]
 804204c:	3301      	adds	r3, #1
 804204e:	607b      	str	r3, [r7, #4]
 8042050:	683b      	ldr	r3, [r7, #0]
 8042052:	3301      	adds	r3, #1
 8042054:	603b      	str	r3, [r7, #0]
 8042056:	687b      	ldr	r3, [r7, #4]
 8042058:	781b      	ldrb	r3, [r3, #0]
 804205a:	73fb      	strb	r3, [r7, #15]
 804205c:	7bfb      	ldrb	r3, [r7, #15]
 804205e:	3301      	adds	r3, #1
 8042060:	4a22      	ldr	r2, [pc, #136]	; (80420ec <case_insensitive_strcmp+0xd4>)
 8042062:	4413      	add	r3, r2
 8042064:	781b      	ldrb	r3, [r3, #0]
 8042066:	f003 0303 	and.w	r3, r3, #3
 804206a:	2b01      	cmp	r3, #1
 804206c:	d103      	bne.n	8042076 <case_insensitive_strcmp+0x5e>
 804206e:	7bfb      	ldrb	r3, [r7, #15]
 8042070:	f103 0220 	add.w	r2, r3, #32
 8042074:	e000      	b.n	8042078 <case_insensitive_strcmp+0x60>
 8042076:	7bfa      	ldrb	r2, [r7, #15]
 8042078:	683b      	ldr	r3, [r7, #0]
 804207a:	781b      	ldrb	r3, [r3, #0]
 804207c:	73bb      	strb	r3, [r7, #14]
 804207e:	7bbb      	ldrb	r3, [r7, #14]
 8042080:	3301      	adds	r3, #1
 8042082:	491a      	ldr	r1, [pc, #104]	; (80420ec <case_insensitive_strcmp+0xd4>)
 8042084:	440b      	add	r3, r1
 8042086:	781b      	ldrb	r3, [r3, #0]
 8042088:	f003 0303 	and.w	r3, r3, #3
 804208c:	2b01      	cmp	r3, #1
 804208e:	d102      	bne.n	8042096 <case_insensitive_strcmp+0x7e>
 8042090:	7bbb      	ldrb	r3, [r7, #14]
 8042092:	3320      	adds	r3, #32
 8042094:	e000      	b.n	8042098 <case_insensitive_strcmp+0x80>
 8042096:	7bbb      	ldrb	r3, [r7, #14]
 8042098:	429a      	cmp	r2, r3
 804209a:	d0d0      	beq.n	804203e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 804209c:	687b      	ldr	r3, [r7, #4]
 804209e:	781b      	ldrb	r3, [r3, #0]
 80420a0:	737b      	strb	r3, [r7, #13]
 80420a2:	7b7b      	ldrb	r3, [r7, #13]
 80420a4:	3301      	adds	r3, #1
 80420a6:	4a11      	ldr	r2, [pc, #68]	; (80420ec <case_insensitive_strcmp+0xd4>)
 80420a8:	4413      	add	r3, r2
 80420aa:	781b      	ldrb	r3, [r3, #0]
 80420ac:	f003 0303 	and.w	r3, r3, #3
 80420b0:	2b01      	cmp	r3, #1
 80420b2:	d103      	bne.n	80420bc <case_insensitive_strcmp+0xa4>
 80420b4:	7b7b      	ldrb	r3, [r7, #13]
 80420b6:	f103 0220 	add.w	r2, r3, #32
 80420ba:	e000      	b.n	80420be <case_insensitive_strcmp+0xa6>
 80420bc:	7b7a      	ldrb	r2, [r7, #13]
 80420be:	683b      	ldr	r3, [r7, #0]
 80420c0:	781b      	ldrb	r3, [r3, #0]
 80420c2:	733b      	strb	r3, [r7, #12]
 80420c4:	7b3b      	ldrb	r3, [r7, #12]
 80420c6:	3301      	adds	r3, #1
 80420c8:	4908      	ldr	r1, [pc, #32]	; (80420ec <case_insensitive_strcmp+0xd4>)
 80420ca:	440b      	add	r3, r1
 80420cc:	781b      	ldrb	r3, [r3, #0]
 80420ce:	f003 0303 	and.w	r3, r3, #3
 80420d2:	2b01      	cmp	r3, #1
 80420d4:	d102      	bne.n	80420dc <case_insensitive_strcmp+0xc4>
 80420d6:	7b3b      	ldrb	r3, [r7, #12]
 80420d8:	3320      	adds	r3, #32
 80420da:	e000      	b.n	80420de <case_insensitive_strcmp+0xc6>
 80420dc:	7b3b      	ldrb	r3, [r7, #12]
 80420de:	1ad3      	subs	r3, r2, r3
}
 80420e0:	4618      	mov	r0, r3
 80420e2:	3714      	adds	r7, #20
 80420e4:	46bd      	mov	sp, r7
 80420e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420ea:	4770      	bx	lr
 80420ec:	0804af48 	.word	0x0804af48

080420f0 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 80420f0:	b580      	push	{r7, lr}
 80420f2:	b084      	sub	sp, #16
 80420f4:	af00      	add	r7, sp, #0
 80420f6:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 80420f8:	687b      	ldr	r3, [r7, #4]
 80420fa:	681b      	ldr	r3, [r3, #0]
 80420fc:	2028      	movs	r0, #40	; 0x28
 80420fe:	4798      	blx	r3
 8042100:	60f8      	str	r0, [r7, #12]
    if (node)
 8042102:	68fb      	ldr	r3, [r7, #12]
 8042104:	2b00      	cmp	r3, #0
 8042106:	d004      	beq.n	8042112 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8042108:	2228      	movs	r2, #40	; 0x28
 804210a:	2100      	movs	r1, #0
 804210c:	68f8      	ldr	r0, [r7, #12]
 804210e:	f006 f81a 	bl	8048146 <memset>
    }

    return node;
 8042112:	68fb      	ldr	r3, [r7, #12]
}
 8042114:	4618      	mov	r0, r3
 8042116:	3710      	adds	r7, #16
 8042118:	46bd      	mov	sp, r7
 804211a:	bd80      	pop	{r7, pc}

0804211c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 804211c:	b580      	push	{r7, lr}
 804211e:	b084      	sub	sp, #16
 8042120:	af00      	add	r7, sp, #0
 8042122:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8042124:	2300      	movs	r3, #0
 8042126:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8042128:	e037      	b.n	804219a <cJSON_Delete+0x7e>
    {
        next = item->next;
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	681b      	ldr	r3, [r3, #0]
 804212e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	68db      	ldr	r3, [r3, #12]
 8042134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042138:	2b00      	cmp	r3, #0
 804213a:	d108      	bne.n	804214e <cJSON_Delete+0x32>
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	689b      	ldr	r3, [r3, #8]
 8042140:	2b00      	cmp	r3, #0
 8042142:	d004      	beq.n	804214e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	689b      	ldr	r3, [r3, #8]
 8042148:	4618      	mov	r0, r3
 804214a:	f7ff ffe7 	bl	804211c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	68db      	ldr	r3, [r3, #12]
 8042152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042156:	2b00      	cmp	r3, #0
 8042158:	d109      	bne.n	804216e <cJSON_Delete+0x52>
 804215a:	687b      	ldr	r3, [r7, #4]
 804215c:	691b      	ldr	r3, [r3, #16]
 804215e:	2b00      	cmp	r3, #0
 8042160:	d005      	beq.n	804216e <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8042162:	4b12      	ldr	r3, [pc, #72]	; (80421ac <cJSON_Delete+0x90>)
 8042164:	685b      	ldr	r3, [r3, #4]
 8042166:	687a      	ldr	r2, [r7, #4]
 8042168:	6912      	ldr	r2, [r2, #16]
 804216a:	4610      	mov	r0, r2
 804216c:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 804216e:	687b      	ldr	r3, [r7, #4]
 8042170:	68db      	ldr	r3, [r3, #12]
 8042172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042176:	2b00      	cmp	r3, #0
 8042178:	d109      	bne.n	804218e <cJSON_Delete+0x72>
 804217a:	687b      	ldr	r3, [r7, #4]
 804217c:	6a1b      	ldr	r3, [r3, #32]
 804217e:	2b00      	cmp	r3, #0
 8042180:	d005      	beq.n	804218e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8042182:	4b0a      	ldr	r3, [pc, #40]	; (80421ac <cJSON_Delete+0x90>)
 8042184:	685b      	ldr	r3, [r3, #4]
 8042186:	687a      	ldr	r2, [r7, #4]
 8042188:	6a12      	ldr	r2, [r2, #32]
 804218a:	4610      	mov	r0, r2
 804218c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 804218e:	4b07      	ldr	r3, [pc, #28]	; (80421ac <cJSON_Delete+0x90>)
 8042190:	685b      	ldr	r3, [r3, #4]
 8042192:	6878      	ldr	r0, [r7, #4]
 8042194:	4798      	blx	r3
        item = next;
 8042196:	68fb      	ldr	r3, [r7, #12]
 8042198:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 804219a:	687b      	ldr	r3, [r7, #4]
 804219c:	2b00      	cmp	r3, #0
 804219e:	d1c4      	bne.n	804212a <cJSON_Delete+0xe>
    }
}
 80421a0:	bf00      	nop
 80421a2:	bf00      	nop
 80421a4:	3710      	adds	r7, #16
 80421a6:	46bd      	mov	sp, r7
 80421a8:	bd80      	pop	{r7, pc}
 80421aa:	bf00      	nop
 80421ac:	20000018 	.word	0x20000018

080421b0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80421b0:	b480      	push	{r7}
 80421b2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80421b4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80421b6:	4618      	mov	r0, r3
 80421b8:	46bd      	mov	sp, r7
 80421ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421be:	4770      	bx	lr

080421c0 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80421c0:	b580      	push	{r7, lr}
 80421c2:	b098      	sub	sp, #96	; 0x60
 80421c4:	af00      	add	r7, sp, #0
 80421c6:	6078      	str	r0, [r7, #4]
 80421c8:	6039      	str	r1, [r7, #0]
    double number = 0;
 80421ca:	f04f 0200 	mov.w	r2, #0
 80421ce:	f04f 0300 	mov.w	r3, #0
 80421d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80421d6:	2300      	movs	r3, #0
 80421d8:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80421da:	f7ff ffe9 	bl	80421b0 <get_decimal_point>
 80421de:	4603      	mov	r3, r0
 80421e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 80421e4:	2300      	movs	r3, #0
 80421e6:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80421e8:	683b      	ldr	r3, [r7, #0]
 80421ea:	2b00      	cmp	r3, #0
 80421ec:	d003      	beq.n	80421f6 <parse_number+0x36>
 80421ee:	683b      	ldr	r3, [r7, #0]
 80421f0:	681b      	ldr	r3, [r3, #0]
 80421f2:	2b00      	cmp	r3, #0
 80421f4:	d101      	bne.n	80421fa <parse_number+0x3a>
    {
        return false;
 80421f6:	2300      	movs	r3, #0
 80421f8:	e0a0      	b.n	804233c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80421fa:	2300      	movs	r3, #0
 80421fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80421fe:	e03d      	b.n	804227c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8042200:	683b      	ldr	r3, [r7, #0]
 8042202:	681a      	ldr	r2, [r3, #0]
 8042204:	683b      	ldr	r3, [r7, #0]
 8042206:	6899      	ldr	r1, [r3, #8]
 8042208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804220a:	440b      	add	r3, r1
 804220c:	4413      	add	r3, r2
 804220e:	781b      	ldrb	r3, [r3, #0]
 8042210:	2b45      	cmp	r3, #69	; 0x45
 8042212:	dc17      	bgt.n	8042244 <parse_number+0x84>
 8042214:	2b2b      	cmp	r3, #43	; 0x2b
 8042216:	db40      	blt.n	804229a <parse_number+0xda>
 8042218:	3b2b      	subs	r3, #43	; 0x2b
 804221a:	2201      	movs	r2, #1
 804221c:	409a      	lsls	r2, r3
 804221e:	4b4c      	ldr	r3, [pc, #304]	; (8042350 <parse_number+0x190>)
 8042220:	4013      	ands	r3, r2
 8042222:	2b00      	cmp	r3, #0
 8042224:	bf14      	ite	ne
 8042226:	2301      	movne	r3, #1
 8042228:	2300      	moveq	r3, #0
 804222a:	b2db      	uxtb	r3, r3
 804222c:	2b00      	cmp	r3, #0
 804222e:	d10b      	bne.n	8042248 <parse_number+0x88>
 8042230:	f002 0308 	and.w	r3, r2, #8
 8042234:	2b00      	cmp	r3, #0
 8042236:	bf14      	ite	ne
 8042238:	2301      	movne	r3, #1
 804223a:	2300      	moveq	r3, #0
 804223c:	b2db      	uxtb	r3, r3
 804223e:	2b00      	cmp	r3, #0
 8042240:	d111      	bne.n	8042266 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8042242:	e02a      	b.n	804229a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8042244:	2b65      	cmp	r3, #101	; 0x65
 8042246:	d128      	bne.n	804229a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8042248:	683b      	ldr	r3, [r7, #0]
 804224a:	681a      	ldr	r2, [r3, #0]
 804224c:	683b      	ldr	r3, [r7, #0]
 804224e:	6899      	ldr	r1, [r3, #8]
 8042250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8042252:	440b      	add	r3, r1
 8042254:	4413      	add	r3, r2
 8042256:	7819      	ldrb	r1, [r3, #0]
 8042258:	f107 0208 	add.w	r2, r7, #8
 804225c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804225e:	4413      	add	r3, r2
 8042260:	460a      	mov	r2, r1
 8042262:	701a      	strb	r2, [r3, #0]
                break;
 8042264:	e007      	b.n	8042276 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8042266:	f107 0208 	add.w	r2, r7, #8
 804226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804226c:	4413      	add	r3, r2
 804226e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8042272:	701a      	strb	r2, [r3, #0]
                break;
 8042274:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8042276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8042278:	3301      	adds	r3, #1
 804227a:	65fb      	str	r3, [r7, #92]	; 0x5c
 804227c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804227e:	2b3e      	cmp	r3, #62	; 0x3e
 8042280:	d80d      	bhi.n	804229e <parse_number+0xde>
 8042282:	683b      	ldr	r3, [r7, #0]
 8042284:	2b00      	cmp	r3, #0
 8042286:	d00a      	beq.n	804229e <parse_number+0xde>
 8042288:	683b      	ldr	r3, [r7, #0]
 804228a:	689a      	ldr	r2, [r3, #8]
 804228c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804228e:	441a      	add	r2, r3
 8042290:	683b      	ldr	r3, [r7, #0]
 8042292:	685b      	ldr	r3, [r3, #4]
 8042294:	429a      	cmp	r2, r3
 8042296:	d3b3      	bcc.n	8042200 <parse_number+0x40>
        }
    }
loop_end:
 8042298:	e001      	b.n	804229e <parse_number+0xde>
                goto loop_end;
 804229a:	bf00      	nop
 804229c:	e000      	b.n	80422a0 <parse_number+0xe0>
loop_end:
 804229e:	bf00      	nop
    number_c_string[i] = '\0';
 80422a0:	f107 0208 	add.w	r2, r7, #8
 80422a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80422a6:	4413      	add	r3, r2
 80422a8:	2200      	movs	r2, #0
 80422aa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80422ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80422b0:	f107 0308 	add.w	r3, r7, #8
 80422b4:	4611      	mov	r1, r2
 80422b6:	4618      	mov	r0, r3
 80422b8:	f005 f996 	bl	80475e8 <strtod>
 80422bc:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80422c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80422c2:	f107 0308 	add.w	r3, r7, #8
 80422c6:	429a      	cmp	r2, r3
 80422c8:	d101      	bne.n	80422ce <parse_number+0x10e>
    {
        return false; /* parse_error */
 80422ca:	2300      	movs	r3, #0
 80422cc:	e036      	b.n	804233c <parse_number+0x17c>
    }

    item->valuedouble = number;
 80422ce:	6879      	ldr	r1, [r7, #4]
 80422d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80422d4:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80422d8:	a31b      	add	r3, pc, #108	; (adr r3, 8042348 <parse_number+0x188>)
 80422da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80422de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80422e2:	f7fe fc1f 	bl	8040b24 <__aeabi_dcmpge>
 80422e6:	4603      	mov	r3, r0
 80422e8:	2b00      	cmp	r3, #0
 80422ea:	d004      	beq.n	80422f6 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 80422ec:	687b      	ldr	r3, [r7, #4]
 80422ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80422f2:	615a      	str	r2, [r3, #20]
 80422f4:	e015      	b.n	8042322 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 80422f6:	f04f 0200 	mov.w	r2, #0
 80422fa:	4b16      	ldr	r3, [pc, #88]	; (8042354 <parse_number+0x194>)
 80422fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8042300:	f7fe fc06 	bl	8040b10 <__aeabi_dcmple>
 8042304:	4603      	mov	r3, r0
 8042306:	2b00      	cmp	r3, #0
 8042308:	d004      	beq.n	8042314 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8042310:	615a      	str	r2, [r3, #20]
 8042312:	e006      	b.n	8042322 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8042314:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8042318:	f7fe fc2e 	bl	8040b78 <__aeabi_d2iz>
 804231c:	4602      	mov	r2, r0
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8042322:	687b      	ldr	r3, [r7, #4]
 8042324:	2208      	movs	r2, #8
 8042326:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8042328:	683b      	ldr	r3, [r7, #0]
 804232a:	689b      	ldr	r3, [r3, #8]
 804232c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 804232e:	f107 0208 	add.w	r2, r7, #8
 8042332:	1a8a      	subs	r2, r1, r2
 8042334:	441a      	add	r2, r3
 8042336:	683b      	ldr	r3, [r7, #0]
 8042338:	609a      	str	r2, [r3, #8]
    return true;
 804233a:	2301      	movs	r3, #1
}
 804233c:	4618      	mov	r0, r3
 804233e:	3760      	adds	r7, #96	; 0x60
 8042340:	46bd      	mov	sp, r7
 8042342:	bd80      	pop	{r7, pc}
 8042344:	f3af 8000 	nop.w
 8042348:	ffc00000 	.word	0xffc00000
 804234c:	41dfffff 	.word	0x41dfffff
 8042350:	04007fe5 	.word	0x04007fe5
 8042354:	c1e00000 	.word	0xc1e00000

08042358 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8042358:	b480      	push	{r7}
 804235a:	b085      	sub	sp, #20
 804235c:	af00      	add	r7, sp, #0
 804235e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8042360:	2300      	movs	r3, #0
 8042362:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8042364:	2300      	movs	r3, #0
 8042366:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8042368:	2300      	movs	r3, #0
 804236a:	60bb      	str	r3, [r7, #8]
 804236c:	e04c      	b.n	8042408 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 804236e:	687a      	ldr	r2, [r7, #4]
 8042370:	68bb      	ldr	r3, [r7, #8]
 8042372:	4413      	add	r3, r2
 8042374:	781b      	ldrb	r3, [r3, #0]
 8042376:	2b2f      	cmp	r3, #47	; 0x2f
 8042378:	d90f      	bls.n	804239a <parse_hex4+0x42>
 804237a:	687a      	ldr	r2, [r7, #4]
 804237c:	68bb      	ldr	r3, [r7, #8]
 804237e:	4413      	add	r3, r2
 8042380:	781b      	ldrb	r3, [r3, #0]
 8042382:	2b39      	cmp	r3, #57	; 0x39
 8042384:	d809      	bhi.n	804239a <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8042386:	687a      	ldr	r2, [r7, #4]
 8042388:	68bb      	ldr	r3, [r7, #8]
 804238a:	4413      	add	r3, r2
 804238c:	781b      	ldrb	r3, [r3, #0]
 804238e:	461a      	mov	r2, r3
 8042390:	68fb      	ldr	r3, [r7, #12]
 8042392:	4413      	add	r3, r2
 8042394:	3b30      	subs	r3, #48	; 0x30
 8042396:	60fb      	str	r3, [r7, #12]
 8042398:	e02d      	b.n	80423f6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 804239a:	687a      	ldr	r2, [r7, #4]
 804239c:	68bb      	ldr	r3, [r7, #8]
 804239e:	4413      	add	r3, r2
 80423a0:	781b      	ldrb	r3, [r3, #0]
 80423a2:	2b40      	cmp	r3, #64	; 0x40
 80423a4:	d90f      	bls.n	80423c6 <parse_hex4+0x6e>
 80423a6:	687a      	ldr	r2, [r7, #4]
 80423a8:	68bb      	ldr	r3, [r7, #8]
 80423aa:	4413      	add	r3, r2
 80423ac:	781b      	ldrb	r3, [r3, #0]
 80423ae:	2b46      	cmp	r3, #70	; 0x46
 80423b0:	d809      	bhi.n	80423c6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80423b2:	687a      	ldr	r2, [r7, #4]
 80423b4:	68bb      	ldr	r3, [r7, #8]
 80423b6:	4413      	add	r3, r2
 80423b8:	781b      	ldrb	r3, [r3, #0]
 80423ba:	461a      	mov	r2, r3
 80423bc:	68fb      	ldr	r3, [r7, #12]
 80423be:	4413      	add	r3, r2
 80423c0:	3b37      	subs	r3, #55	; 0x37
 80423c2:	60fb      	str	r3, [r7, #12]
 80423c4:	e017      	b.n	80423f6 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80423c6:	687a      	ldr	r2, [r7, #4]
 80423c8:	68bb      	ldr	r3, [r7, #8]
 80423ca:	4413      	add	r3, r2
 80423cc:	781b      	ldrb	r3, [r3, #0]
 80423ce:	2b60      	cmp	r3, #96	; 0x60
 80423d0:	d90f      	bls.n	80423f2 <parse_hex4+0x9a>
 80423d2:	687a      	ldr	r2, [r7, #4]
 80423d4:	68bb      	ldr	r3, [r7, #8]
 80423d6:	4413      	add	r3, r2
 80423d8:	781b      	ldrb	r3, [r3, #0]
 80423da:	2b66      	cmp	r3, #102	; 0x66
 80423dc:	d809      	bhi.n	80423f2 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80423de:	687a      	ldr	r2, [r7, #4]
 80423e0:	68bb      	ldr	r3, [r7, #8]
 80423e2:	4413      	add	r3, r2
 80423e4:	781b      	ldrb	r3, [r3, #0]
 80423e6:	461a      	mov	r2, r3
 80423e8:	68fb      	ldr	r3, [r7, #12]
 80423ea:	4413      	add	r3, r2
 80423ec:	3b57      	subs	r3, #87	; 0x57
 80423ee:	60fb      	str	r3, [r7, #12]
 80423f0:	e001      	b.n	80423f6 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80423f2:	2300      	movs	r3, #0
 80423f4:	e00c      	b.n	8042410 <parse_hex4+0xb8>
        }

        if (i < 3)
 80423f6:	68bb      	ldr	r3, [r7, #8]
 80423f8:	2b02      	cmp	r3, #2
 80423fa:	d802      	bhi.n	8042402 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80423fc:	68fb      	ldr	r3, [r7, #12]
 80423fe:	011b      	lsls	r3, r3, #4
 8042400:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8042402:	68bb      	ldr	r3, [r7, #8]
 8042404:	3301      	adds	r3, #1
 8042406:	60bb      	str	r3, [r7, #8]
 8042408:	68bb      	ldr	r3, [r7, #8]
 804240a:	2b03      	cmp	r3, #3
 804240c:	d9af      	bls.n	804236e <parse_hex4+0x16>
        }
    }

    return h;
 804240e:	68fb      	ldr	r3, [r7, #12]
}
 8042410:	4618      	mov	r0, r3
 8042412:	3714      	adds	r7, #20
 8042414:	46bd      	mov	sp, r7
 8042416:	f85d 7b04 	ldr.w	r7, [sp], #4
 804241a:	4770      	bx	lr

0804241c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 804241c:	b580      	push	{r7, lr}
 804241e:	b08a      	sub	sp, #40	; 0x28
 8042420:	af00      	add	r7, sp, #0
 8042422:	60f8      	str	r0, [r7, #12]
 8042424:	60b9      	str	r1, [r7, #8]
 8042426:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8042428:	2300      	movs	r3, #0
 804242a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 804242c:	2300      	movs	r3, #0
 804242e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8042430:	68fb      	ldr	r3, [r7, #12]
 8042432:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8042434:	2300      	movs	r3, #0
 8042436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 804243a:	2300      	movs	r3, #0
 804243c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8042440:	2300      	movs	r3, #0
 8042442:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8042446:	2300      	movs	r3, #0
 8042448:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 804244c:	68ba      	ldr	r2, [r7, #8]
 804244e:	69bb      	ldr	r3, [r7, #24]
 8042450:	1ad3      	subs	r3, r2, r3
 8042452:	2b05      	cmp	r3, #5
 8042454:	f340 80b7 	ble.w	80425c6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8042458:	69bb      	ldr	r3, [r7, #24]
 804245a:	3302      	adds	r3, #2
 804245c:	4618      	mov	r0, r3
 804245e:	f7ff ff7b 	bl	8042358 <parse_hex4>
 8042462:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8042464:	69fb      	ldr	r3, [r7, #28]
 8042466:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 804246a:	d304      	bcc.n	8042476 <utf16_literal_to_utf8+0x5a>
 804246c:	69fb      	ldr	r3, [r7, #28]
 804246e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8042472:	f0c0 80aa 	bcc.w	80425ca <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8042476:	69fb      	ldr	r3, [r7, #28]
 8042478:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 804247c:	d337      	bcc.n	80424ee <utf16_literal_to_utf8+0xd2>
 804247e:	69fb      	ldr	r3, [r7, #28]
 8042480:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8042484:	d233      	bcs.n	80424ee <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8042486:	69bb      	ldr	r3, [r7, #24]
 8042488:	3306      	adds	r3, #6
 804248a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 804248c:	2300      	movs	r3, #0
 804248e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8042490:	230c      	movs	r3, #12
 8042492:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8042496:	68ba      	ldr	r2, [r7, #8]
 8042498:	697b      	ldr	r3, [r7, #20]
 804249a:	1ad3      	subs	r3, r2, r3
 804249c:	2b05      	cmp	r3, #5
 804249e:	f340 8096 	ble.w	80425ce <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80424a2:	697b      	ldr	r3, [r7, #20]
 80424a4:	781b      	ldrb	r3, [r3, #0]
 80424a6:	2b5c      	cmp	r3, #92	; 0x5c
 80424a8:	f040 8093 	bne.w	80425d2 <utf16_literal_to_utf8+0x1b6>
 80424ac:	697b      	ldr	r3, [r7, #20]
 80424ae:	3301      	adds	r3, #1
 80424b0:	781b      	ldrb	r3, [r3, #0]
 80424b2:	2b75      	cmp	r3, #117	; 0x75
 80424b4:	f040 808d 	bne.w	80425d2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80424b8:	697b      	ldr	r3, [r7, #20]
 80424ba:	3302      	adds	r3, #2
 80424bc:	4618      	mov	r0, r3
 80424be:	f7ff ff4b 	bl	8042358 <parse_hex4>
 80424c2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80424c4:	693b      	ldr	r3, [r7, #16]
 80424c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80424ca:	f0c0 8084 	bcc.w	80425d6 <utf16_literal_to_utf8+0x1ba>
 80424ce:	693b      	ldr	r3, [r7, #16]
 80424d0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80424d4:	d27f      	bcs.n	80425d6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80424d6:	69fb      	ldr	r3, [r7, #28]
 80424d8:	029a      	lsls	r2, r3, #10
 80424da:	4b43      	ldr	r3, [pc, #268]	; (80425e8 <utf16_literal_to_utf8+0x1cc>)
 80424dc:	4013      	ands	r3, r2
 80424de:	693a      	ldr	r2, [r7, #16]
 80424e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80424e4:	4313      	orrs	r3, r2
 80424e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80424ea:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80424ec:	e004      	b.n	80424f8 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80424ee:	2306      	movs	r3, #6
 80424f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80424f4:	69fb      	ldr	r3, [r7, #28]
 80424f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80424f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80424fa:	2b7f      	cmp	r3, #127	; 0x7f
 80424fc:	d803      	bhi.n	8042506 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80424fe:	2301      	movs	r3, #1
 8042500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8042504:	e01f      	b.n	8042546 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8042506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804250c:	d206      	bcs.n	804251c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 804250e:	2302      	movs	r3, #2
 8042510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8042514:	23c0      	movs	r3, #192	; 0xc0
 8042516:	f887 3020 	strb.w	r3, [r7, #32]
 804251a:	e014      	b.n	8042546 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 804251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042522:	d206      	bcs.n	8042532 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8042524:	2303      	movs	r3, #3
 8042526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 804252a:	23e0      	movs	r3, #224	; 0xe0
 804252c:	f887 3020 	strb.w	r3, [r7, #32]
 8042530:	e009      	b.n	8042546 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8042532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042534:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8042538:	d24f      	bcs.n	80425da <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 804253a:	2304      	movs	r3, #4
 804253c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8042540:	23f0      	movs	r3, #240	; 0xf0
 8042542:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8042546:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 804254a:	3b01      	subs	r3, #1
 804254c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8042550:	e015      	b.n	804257e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8042552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042554:	b2db      	uxtb	r3, r3
 8042556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804255a:	b2da      	uxtb	r2, r3
 804255c:	687b      	ldr	r3, [r7, #4]
 804255e:	6819      	ldr	r1, [r3, #0]
 8042560:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8042564:	440b      	add	r3, r1
 8042566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 804256a:	b2d2      	uxtb	r2, r2
 804256c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 804256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042570:	099b      	lsrs	r3, r3, #6
 8042572:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8042574:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8042578:	3b01      	subs	r3, #1
 804257a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 804257e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8042582:	2b00      	cmp	r3, #0
 8042584:	d1e5      	bne.n	8042552 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8042586:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 804258a:	2b01      	cmp	r3, #1
 804258c:	d909      	bls.n	80425a2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 804258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042590:	b2d9      	uxtb	r1, r3
 8042592:	687b      	ldr	r3, [r7, #4]
 8042594:	681b      	ldr	r3, [r3, #0]
 8042596:	f897 2020 	ldrb.w	r2, [r7, #32]
 804259a:	430a      	orrs	r2, r1
 804259c:	b2d2      	uxtb	r2, r2
 804259e:	701a      	strb	r2, [r3, #0]
 80425a0:	e007      	b.n	80425b2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80425a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80425a4:	b2da      	uxtb	r2, r3
 80425a6:	687b      	ldr	r3, [r7, #4]
 80425a8:	681b      	ldr	r3, [r3, #0]
 80425aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80425ae:	b2d2      	uxtb	r2, r2
 80425b0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80425b2:	687b      	ldr	r3, [r7, #4]
 80425b4:	681a      	ldr	r2, [r3, #0]
 80425b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80425ba:	441a      	add	r2, r3
 80425bc:	687b      	ldr	r3, [r7, #4]
 80425be:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80425c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80425c4:	e00b      	b.n	80425de <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80425c6:	bf00      	nop
 80425c8:	e008      	b.n	80425dc <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80425ca:	bf00      	nop
 80425cc:	e006      	b.n	80425dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80425ce:	bf00      	nop
 80425d0:	e004      	b.n	80425dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80425d2:	bf00      	nop
 80425d4:	e002      	b.n	80425dc <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80425d6:	bf00      	nop
 80425d8:	e000      	b.n	80425dc <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80425da:	bf00      	nop

fail:
    return 0;
 80425dc:	2300      	movs	r3, #0
}
 80425de:	4618      	mov	r0, r3
 80425e0:	3728      	adds	r7, #40	; 0x28
 80425e2:	46bd      	mov	sp, r7
 80425e4:	bd80      	pop	{r7, pc}
 80425e6:	bf00      	nop
 80425e8:	000ffc00 	.word	0x000ffc00

080425ec <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80425ec:	b580      	push	{r7, lr}
 80425ee:	b08a      	sub	sp, #40	; 0x28
 80425f0:	af00      	add	r7, sp, #0
 80425f2:	6078      	str	r0, [r7, #4]
 80425f4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80425f6:	683b      	ldr	r3, [r7, #0]
 80425f8:	681a      	ldr	r2, [r3, #0]
 80425fa:	683b      	ldr	r3, [r7, #0]
 80425fc:	689b      	ldr	r3, [r3, #8]
 80425fe:	3301      	adds	r3, #1
 8042600:	4413      	add	r3, r2
 8042602:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8042604:	683b      	ldr	r3, [r7, #0]
 8042606:	681a      	ldr	r2, [r3, #0]
 8042608:	683b      	ldr	r3, [r7, #0]
 804260a:	689b      	ldr	r3, [r3, #8]
 804260c:	3301      	adds	r3, #1
 804260e:	4413      	add	r3, r2
 8042610:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8042612:	2300      	movs	r3, #0
 8042614:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8042616:	2300      	movs	r3, #0
 8042618:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 804261a:	683b      	ldr	r3, [r7, #0]
 804261c:	681a      	ldr	r2, [r3, #0]
 804261e:	683b      	ldr	r3, [r7, #0]
 8042620:	689b      	ldr	r3, [r3, #8]
 8042622:	4413      	add	r3, r2
 8042624:	781b      	ldrb	r3, [r3, #0]
 8042626:	2b22      	cmp	r3, #34	; 0x22
 8042628:	f040 8103 	bne.w	8042832 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 804262c:	2300      	movs	r3, #0
 804262e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8042630:	2300      	movs	r3, #0
 8042632:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8042634:	e017      	b.n	8042666 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8042636:	6a3b      	ldr	r3, [r7, #32]
 8042638:	781b      	ldrb	r3, [r3, #0]
 804263a:	2b5c      	cmp	r3, #92	; 0x5c
 804263c:	d110      	bne.n	8042660 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 804263e:	6a3b      	ldr	r3, [r7, #32]
 8042640:	1c5a      	adds	r2, r3, #1
 8042642:	683b      	ldr	r3, [r7, #0]
 8042644:	681b      	ldr	r3, [r3, #0]
 8042646:	1ad3      	subs	r3, r2, r3
 8042648:	461a      	mov	r2, r3
 804264a:	683b      	ldr	r3, [r7, #0]
 804264c:	685b      	ldr	r3, [r3, #4]
 804264e:	429a      	cmp	r2, r3
 8042650:	f080 80f1 	bcs.w	8042836 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8042654:	69bb      	ldr	r3, [r7, #24]
 8042656:	3301      	adds	r3, #1
 8042658:	61bb      	str	r3, [r7, #24]
                input_end++;
 804265a:	6a3b      	ldr	r3, [r7, #32]
 804265c:	3301      	adds	r3, #1
 804265e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8042660:	6a3b      	ldr	r3, [r7, #32]
 8042662:	3301      	adds	r3, #1
 8042664:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8042666:	683b      	ldr	r3, [r7, #0]
 8042668:	681b      	ldr	r3, [r3, #0]
 804266a:	6a3a      	ldr	r2, [r7, #32]
 804266c:	1ad3      	subs	r3, r2, r3
 804266e:	461a      	mov	r2, r3
 8042670:	683b      	ldr	r3, [r7, #0]
 8042672:	685b      	ldr	r3, [r3, #4]
 8042674:	429a      	cmp	r2, r3
 8042676:	d203      	bcs.n	8042680 <parse_string+0x94>
 8042678:	6a3b      	ldr	r3, [r7, #32]
 804267a:	781b      	ldrb	r3, [r3, #0]
 804267c:	2b22      	cmp	r3, #34	; 0x22
 804267e:	d1da      	bne.n	8042636 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8042680:	683b      	ldr	r3, [r7, #0]
 8042682:	681b      	ldr	r3, [r3, #0]
 8042684:	6a3a      	ldr	r2, [r7, #32]
 8042686:	1ad3      	subs	r3, r2, r3
 8042688:	461a      	mov	r2, r3
 804268a:	683b      	ldr	r3, [r7, #0]
 804268c:	685b      	ldr	r3, [r3, #4]
 804268e:	429a      	cmp	r2, r3
 8042690:	f080 80d3 	bcs.w	804283a <parse_string+0x24e>
 8042694:	6a3b      	ldr	r3, [r7, #32]
 8042696:	781b      	ldrb	r3, [r3, #0]
 8042698:	2b22      	cmp	r3, #34	; 0x22
 804269a:	f040 80ce 	bne.w	804283a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 804269e:	683b      	ldr	r3, [r7, #0]
 80426a0:	681a      	ldr	r2, [r3, #0]
 80426a2:	683b      	ldr	r3, [r7, #0]
 80426a4:	689b      	ldr	r3, [r3, #8]
 80426a6:	4413      	add	r3, r2
 80426a8:	6a3a      	ldr	r2, [r7, #32]
 80426aa:	1ad3      	subs	r3, r2, r3
 80426ac:	461a      	mov	r2, r3
 80426ae:	69bb      	ldr	r3, [r7, #24]
 80426b0:	1ad3      	subs	r3, r2, r3
 80426b2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80426b4:	683b      	ldr	r3, [r7, #0]
 80426b6:	691b      	ldr	r3, [r3, #16]
 80426b8:	693a      	ldr	r2, [r7, #16]
 80426ba:	3201      	adds	r2, #1
 80426bc:	4610      	mov	r0, r2
 80426be:	4798      	blx	r3
 80426c0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80426c2:	69fb      	ldr	r3, [r7, #28]
 80426c4:	2b00      	cmp	r3, #0
 80426c6:	f000 80ba 	beq.w	804283e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80426ca:	69fb      	ldr	r3, [r7, #28]
 80426cc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80426ce:	e094      	b.n	80427fa <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80426d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80426d2:	781b      	ldrb	r3, [r3, #0]
 80426d4:	2b5c      	cmp	r3, #92	; 0x5c
 80426d6:	d008      	beq.n	80426ea <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80426d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80426da:	1c53      	adds	r3, r2, #1
 80426dc:	627b      	str	r3, [r7, #36]	; 0x24
 80426de:	68fb      	ldr	r3, [r7, #12]
 80426e0:	1c59      	adds	r1, r3, #1
 80426e2:	60f9      	str	r1, [r7, #12]
 80426e4:	7812      	ldrb	r2, [r2, #0]
 80426e6:	701a      	strb	r2, [r3, #0]
 80426e8:	e087      	b.n	80427fa <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80426ea:	2302      	movs	r3, #2
 80426ec:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80426ee:	6a3a      	ldr	r2, [r7, #32]
 80426f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80426f2:	1ad3      	subs	r3, r2, r3
 80426f4:	2b00      	cmp	r3, #0
 80426f6:	f340 80a4 	ble.w	8042842 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80426fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80426fc:	3301      	adds	r3, #1
 80426fe:	781b      	ldrb	r3, [r3, #0]
 8042700:	2b75      	cmp	r3, #117	; 0x75
 8042702:	f300 80a0 	bgt.w	8042846 <parse_string+0x25a>
 8042706:	2b5c      	cmp	r3, #92	; 0x5c
 8042708:	da04      	bge.n	8042714 <parse_string+0x128>
 804270a:	2b22      	cmp	r3, #34	; 0x22
 804270c:	d05c      	beq.n	80427c8 <parse_string+0x1dc>
 804270e:	2b2f      	cmp	r3, #47	; 0x2f
 8042710:	d05a      	beq.n	80427c8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8042712:	e098      	b.n	8042846 <parse_string+0x25a>
            switch (input_pointer[1])
 8042714:	3b5c      	subs	r3, #92	; 0x5c
 8042716:	2b19      	cmp	r3, #25
 8042718:	f200 8095 	bhi.w	8042846 <parse_string+0x25a>
 804271c:	a201      	add	r2, pc, #4	; (adr r2, 8042724 <parse_string+0x138>)
 804271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042722:	bf00      	nop
 8042724:	080427c9 	.word	0x080427c9
 8042728:	08042847 	.word	0x08042847
 804272c:	08042847 	.word	0x08042847
 8042730:	08042847 	.word	0x08042847
 8042734:	08042847 	.word	0x08042847
 8042738:	08042847 	.word	0x08042847
 804273c:	0804278d 	.word	0x0804278d
 8042740:	08042847 	.word	0x08042847
 8042744:	08042847 	.word	0x08042847
 8042748:	08042847 	.word	0x08042847
 804274c:	08042799 	.word	0x08042799
 8042750:	08042847 	.word	0x08042847
 8042754:	08042847 	.word	0x08042847
 8042758:	08042847 	.word	0x08042847
 804275c:	08042847 	.word	0x08042847
 8042760:	08042847 	.word	0x08042847
 8042764:	08042847 	.word	0x08042847
 8042768:	08042847 	.word	0x08042847
 804276c:	080427a5 	.word	0x080427a5
 8042770:	08042847 	.word	0x08042847
 8042774:	08042847 	.word	0x08042847
 8042778:	08042847 	.word	0x08042847
 804277c:	080427b1 	.word	0x080427b1
 8042780:	08042847 	.word	0x08042847
 8042784:	080427bd 	.word	0x080427bd
 8042788:	080427d9 	.word	0x080427d9
                    *output_pointer++ = '\b';
 804278c:	68fb      	ldr	r3, [r7, #12]
 804278e:	1c5a      	adds	r2, r3, #1
 8042790:	60fa      	str	r2, [r7, #12]
 8042792:	2208      	movs	r2, #8
 8042794:	701a      	strb	r2, [r3, #0]
                    break;
 8042796:	e02c      	b.n	80427f2 <parse_string+0x206>
                    *output_pointer++ = '\f';
 8042798:	68fb      	ldr	r3, [r7, #12]
 804279a:	1c5a      	adds	r2, r3, #1
 804279c:	60fa      	str	r2, [r7, #12]
 804279e:	220c      	movs	r2, #12
 80427a0:	701a      	strb	r2, [r3, #0]
                    break;
 80427a2:	e026      	b.n	80427f2 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80427a4:	68fb      	ldr	r3, [r7, #12]
 80427a6:	1c5a      	adds	r2, r3, #1
 80427a8:	60fa      	str	r2, [r7, #12]
 80427aa:	220a      	movs	r2, #10
 80427ac:	701a      	strb	r2, [r3, #0]
                    break;
 80427ae:	e020      	b.n	80427f2 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80427b0:	68fb      	ldr	r3, [r7, #12]
 80427b2:	1c5a      	adds	r2, r3, #1
 80427b4:	60fa      	str	r2, [r7, #12]
 80427b6:	220d      	movs	r2, #13
 80427b8:	701a      	strb	r2, [r3, #0]
                    break;
 80427ba:	e01a      	b.n	80427f2 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80427bc:	68fb      	ldr	r3, [r7, #12]
 80427be:	1c5a      	adds	r2, r3, #1
 80427c0:	60fa      	str	r2, [r7, #12]
 80427c2:	2209      	movs	r2, #9
 80427c4:	701a      	strb	r2, [r3, #0]
                    break;
 80427c6:	e014      	b.n	80427f2 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80427c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80427ca:	1c5a      	adds	r2, r3, #1
 80427cc:	68fb      	ldr	r3, [r7, #12]
 80427ce:	1c59      	adds	r1, r3, #1
 80427d0:	60f9      	str	r1, [r7, #12]
 80427d2:	7812      	ldrb	r2, [r2, #0]
 80427d4:	701a      	strb	r2, [r3, #0]
                    break;
 80427d6:	e00c      	b.n	80427f2 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80427d8:	f107 030c 	add.w	r3, r7, #12
 80427dc:	461a      	mov	r2, r3
 80427de:	6a39      	ldr	r1, [r7, #32]
 80427e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80427e2:	f7ff fe1b 	bl	804241c <utf16_literal_to_utf8>
 80427e6:	4603      	mov	r3, r0
 80427e8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80427ea:	7dfb      	ldrb	r3, [r7, #23]
 80427ec:	2b00      	cmp	r3, #0
 80427ee:	d02c      	beq.n	804284a <parse_string+0x25e>
                    break;
 80427f0:	bf00      	nop
            }
            input_pointer += sequence_length;
 80427f2:	7dfb      	ldrb	r3, [r7, #23]
 80427f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80427f6:	4413      	add	r3, r2
 80427f8:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80427fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80427fc:	6a3b      	ldr	r3, [r7, #32]
 80427fe:	429a      	cmp	r2, r3
 8042800:	f4ff af66 	bcc.w	80426d0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8042804:	68fb      	ldr	r3, [r7, #12]
 8042806:	2200      	movs	r2, #0
 8042808:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 804280a:	687b      	ldr	r3, [r7, #4]
 804280c:	2210      	movs	r2, #16
 804280e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8042810:	687b      	ldr	r3, [r7, #4]
 8042812:	69fa      	ldr	r2, [r7, #28]
 8042814:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8042816:	683b      	ldr	r3, [r7, #0]
 8042818:	681b      	ldr	r3, [r3, #0]
 804281a:	6a3a      	ldr	r2, [r7, #32]
 804281c:	1ad3      	subs	r3, r2, r3
 804281e:	461a      	mov	r2, r3
 8042820:	683b      	ldr	r3, [r7, #0]
 8042822:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8042824:	683b      	ldr	r3, [r7, #0]
 8042826:	689b      	ldr	r3, [r3, #8]
 8042828:	1c5a      	adds	r2, r3, #1
 804282a:	683b      	ldr	r3, [r7, #0]
 804282c:	609a      	str	r2, [r3, #8]

    return true;
 804282e:	2301      	movs	r3, #1
 8042830:	e01e      	b.n	8042870 <parse_string+0x284>
        goto fail;
 8042832:	bf00      	nop
 8042834:	e00a      	b.n	804284c <parse_string+0x260>
                    goto fail;
 8042836:	bf00      	nop
 8042838:	e008      	b.n	804284c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 804283a:	bf00      	nop
 804283c:	e006      	b.n	804284c <parse_string+0x260>
            goto fail; /* allocation failure */
 804283e:	bf00      	nop
 8042840:	e004      	b.n	804284c <parse_string+0x260>
                goto fail;
 8042842:	bf00      	nop
 8042844:	e002      	b.n	804284c <parse_string+0x260>
                    goto fail;
 8042846:	bf00      	nop
 8042848:	e000      	b.n	804284c <parse_string+0x260>
                        goto fail;
 804284a:	bf00      	nop

fail:
    if (output != NULL)
 804284c:	69fb      	ldr	r3, [r7, #28]
 804284e:	2b00      	cmp	r3, #0
 8042850:	d003      	beq.n	804285a <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 8042852:	683b      	ldr	r3, [r7, #0]
 8042854:	695b      	ldr	r3, [r3, #20]
 8042856:	69f8      	ldr	r0, [r7, #28]
 8042858:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 804285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804285c:	2b00      	cmp	r3, #0
 804285e:	d006      	beq.n	804286e <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8042860:	683b      	ldr	r3, [r7, #0]
 8042862:	681b      	ldr	r3, [r3, #0]
 8042864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042866:	1ad3      	subs	r3, r2, r3
 8042868:	461a      	mov	r2, r3
 804286a:	683b      	ldr	r3, [r7, #0]
 804286c:	609a      	str	r2, [r3, #8]
    }

    return false;
 804286e:	2300      	movs	r3, #0
}
 8042870:	4618      	mov	r0, r3
 8042872:	3728      	adds	r7, #40	; 0x28
 8042874:	46bd      	mov	sp, r7
 8042876:	bd80      	pop	{r7, pc}

08042878 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8042878:	b480      	push	{r7}
 804287a:	b083      	sub	sp, #12
 804287c:	af00      	add	r7, sp, #0
 804287e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8042880:	687b      	ldr	r3, [r7, #4]
 8042882:	2b00      	cmp	r3, #0
 8042884:	d003      	beq.n	804288e <buffer_skip_whitespace+0x16>
 8042886:	687b      	ldr	r3, [r7, #4]
 8042888:	681b      	ldr	r3, [r3, #0]
 804288a:	2b00      	cmp	r3, #0
 804288c:	d101      	bne.n	8042892 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 804288e:	2300      	movs	r3, #0
 8042890:	e02c      	b.n	80428ec <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8042892:	687b      	ldr	r3, [r7, #4]
 8042894:	2b00      	cmp	r3, #0
 8042896:	d005      	beq.n	80428a4 <buffer_skip_whitespace+0x2c>
 8042898:	687b      	ldr	r3, [r7, #4]
 804289a:	689a      	ldr	r2, [r3, #8]
 804289c:	687b      	ldr	r3, [r7, #4]
 804289e:	685b      	ldr	r3, [r3, #4]
 80428a0:	429a      	cmp	r2, r3
 80428a2:	d306      	bcc.n	80428b2 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80428a4:	687b      	ldr	r3, [r7, #4]
 80428a6:	e021      	b.n	80428ec <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80428a8:	687b      	ldr	r3, [r7, #4]
 80428aa:	689b      	ldr	r3, [r3, #8]
 80428ac:	1c5a      	adds	r2, r3, #1
 80428ae:	687b      	ldr	r3, [r7, #4]
 80428b0:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80428b2:	687b      	ldr	r3, [r7, #4]
 80428b4:	2b00      	cmp	r3, #0
 80428b6:	d00d      	beq.n	80428d4 <buffer_skip_whitespace+0x5c>
 80428b8:	687b      	ldr	r3, [r7, #4]
 80428ba:	689a      	ldr	r2, [r3, #8]
 80428bc:	687b      	ldr	r3, [r7, #4]
 80428be:	685b      	ldr	r3, [r3, #4]
 80428c0:	429a      	cmp	r2, r3
 80428c2:	d207      	bcs.n	80428d4 <buffer_skip_whitespace+0x5c>
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	681a      	ldr	r2, [r3, #0]
 80428c8:	687b      	ldr	r3, [r7, #4]
 80428ca:	689b      	ldr	r3, [r3, #8]
 80428cc:	4413      	add	r3, r2
 80428ce:	781b      	ldrb	r3, [r3, #0]
 80428d0:	2b20      	cmp	r3, #32
 80428d2:	d9e9      	bls.n	80428a8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80428d4:	687b      	ldr	r3, [r7, #4]
 80428d6:	689a      	ldr	r2, [r3, #8]
 80428d8:	687b      	ldr	r3, [r7, #4]
 80428da:	685b      	ldr	r3, [r3, #4]
 80428dc:	429a      	cmp	r2, r3
 80428de:	d104      	bne.n	80428ea <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80428e0:	687b      	ldr	r3, [r7, #4]
 80428e2:	689b      	ldr	r3, [r3, #8]
 80428e4:	1e5a      	subs	r2, r3, #1
 80428e6:	687b      	ldr	r3, [r7, #4]
 80428e8:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80428ea:	687b      	ldr	r3, [r7, #4]
}
 80428ec:	4618      	mov	r0, r3
 80428ee:	370c      	adds	r7, #12
 80428f0:	46bd      	mov	sp, r7
 80428f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428f6:	4770      	bx	lr

080428f8 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80428f8:	b580      	push	{r7, lr}
 80428fa:	b082      	sub	sp, #8
 80428fc:	af00      	add	r7, sp, #0
 80428fe:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8042900:	687b      	ldr	r3, [r7, #4]
 8042902:	2b00      	cmp	r3, #0
 8042904:	d007      	beq.n	8042916 <skip_utf8_bom+0x1e>
 8042906:	687b      	ldr	r3, [r7, #4]
 8042908:	681b      	ldr	r3, [r3, #0]
 804290a:	2b00      	cmp	r3, #0
 804290c:	d003      	beq.n	8042916 <skip_utf8_bom+0x1e>
 804290e:	687b      	ldr	r3, [r7, #4]
 8042910:	689b      	ldr	r3, [r3, #8]
 8042912:	2b00      	cmp	r3, #0
 8042914:	d001      	beq.n	804291a <skip_utf8_bom+0x22>
    {
        return NULL;
 8042916:	2300      	movs	r3, #0
 8042918:	e01c      	b.n	8042954 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 804291a:	687b      	ldr	r3, [r7, #4]
 804291c:	2b00      	cmp	r3, #0
 804291e:	d018      	beq.n	8042952 <skip_utf8_bom+0x5a>
 8042920:	687b      	ldr	r3, [r7, #4]
 8042922:	689b      	ldr	r3, [r3, #8]
 8042924:	1d1a      	adds	r2, r3, #4
 8042926:	687b      	ldr	r3, [r7, #4]
 8042928:	685b      	ldr	r3, [r3, #4]
 804292a:	429a      	cmp	r2, r3
 804292c:	d211      	bcs.n	8042952 <skip_utf8_bom+0x5a>
 804292e:	687b      	ldr	r3, [r7, #4]
 8042930:	681a      	ldr	r2, [r3, #0]
 8042932:	687b      	ldr	r3, [r7, #4]
 8042934:	689b      	ldr	r3, [r3, #8]
 8042936:	4413      	add	r3, r2
 8042938:	2203      	movs	r2, #3
 804293a:	4908      	ldr	r1, [pc, #32]	; (804295c <skip_utf8_bom+0x64>)
 804293c:	4618      	mov	r0, r3
 804293e:	f005 fc17 	bl	8048170 <strncmp>
 8042942:	4603      	mov	r3, r0
 8042944:	2b00      	cmp	r3, #0
 8042946:	d104      	bne.n	8042952 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8042948:	687b      	ldr	r3, [r7, #4]
 804294a:	689b      	ldr	r3, [r3, #8]
 804294c:	1cda      	adds	r2, r3, #3
 804294e:	687b      	ldr	r3, [r7, #4]
 8042950:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8042952:	687b      	ldr	r3, [r7, #4]
}
 8042954:	4618      	mov	r0, r3
 8042956:	3708      	adds	r7, #8
 8042958:	46bd      	mov	sp, r7
 804295a:	bd80      	pop	{r7, pc}
 804295c:	0804aec8 	.word	0x0804aec8

08042960 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8042960:	b580      	push	{r7, lr}
 8042962:	b086      	sub	sp, #24
 8042964:	af00      	add	r7, sp, #0
 8042966:	60f8      	str	r0, [r7, #12]
 8042968:	60b9      	str	r1, [r7, #8]
 804296a:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 804296c:	68fb      	ldr	r3, [r7, #12]
 804296e:	2b00      	cmp	r3, #0
 8042970:	d101      	bne.n	8042976 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8042972:	2300      	movs	r3, #0
 8042974:	e00c      	b.n	8042990 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8042976:	68f8      	ldr	r0, [r7, #12]
 8042978:	f7fd fc8a 	bl	8040290 <strlen>
 804297c:	4603      	mov	r3, r0
 804297e:	3301      	adds	r3, #1
 8042980:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8042982:	687b      	ldr	r3, [r7, #4]
 8042984:	68ba      	ldr	r2, [r7, #8]
 8042986:	6979      	ldr	r1, [r7, #20]
 8042988:	68f8      	ldr	r0, [r7, #12]
 804298a:	f000 f805 	bl	8042998 <cJSON_ParseWithLengthOpts>
 804298e:	4603      	mov	r3, r0
}
 8042990:	4618      	mov	r0, r3
 8042992:	3718      	adds	r7, #24
 8042994:	46bd      	mov	sp, r7
 8042996:	bd80      	pop	{r7, pc}

08042998 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8042998:	b580      	push	{r7, lr}
 804299a:	b08e      	sub	sp, #56	; 0x38
 804299c:	af00      	add	r7, sp, #0
 804299e:	60f8      	str	r0, [r7, #12]
 80429a0:	60b9      	str	r1, [r7, #8]
 80429a2:	607a      	str	r2, [r7, #4]
 80429a4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80429a6:	f107 0318 	add.w	r3, r7, #24
 80429aa:	2200      	movs	r2, #0
 80429ac:	601a      	str	r2, [r3, #0]
 80429ae:	605a      	str	r2, [r3, #4]
 80429b0:	609a      	str	r2, [r3, #8]
 80429b2:	60da      	str	r2, [r3, #12]
 80429b4:	611a      	str	r2, [r3, #16]
 80429b6:	615a      	str	r2, [r3, #20]
 80429b8:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80429ba:	2300      	movs	r3, #0
 80429bc:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80429be:	4b41      	ldr	r3, [pc, #260]	; (8042ac4 <cJSON_ParseWithLengthOpts+0x12c>)
 80429c0:	2200      	movs	r2, #0
 80429c2:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80429c4:	4b3f      	ldr	r3, [pc, #252]	; (8042ac4 <cJSON_ParseWithLengthOpts+0x12c>)
 80429c6:	2200      	movs	r2, #0
 80429c8:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80429ca:	68fb      	ldr	r3, [r7, #12]
 80429cc:	2b00      	cmp	r3, #0
 80429ce:	d042      	beq.n	8042a56 <cJSON_ParseWithLengthOpts+0xbe>
 80429d0:	68bb      	ldr	r3, [r7, #8]
 80429d2:	2b00      	cmp	r3, #0
 80429d4:	d03f      	beq.n	8042a56 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80429d6:	68fb      	ldr	r3, [r7, #12]
 80429d8:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80429da:	68bb      	ldr	r3, [r7, #8]
 80429dc:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80429de:	2300      	movs	r3, #0
 80429e0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80429e2:	4a39      	ldr	r2, [pc, #228]	; (8042ac8 <cJSON_ParseWithLengthOpts+0x130>)
 80429e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80429e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80429ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80429ee:	4836      	ldr	r0, [pc, #216]	; (8042ac8 <cJSON_ParseWithLengthOpts+0x130>)
 80429f0:	f7ff fb7e 	bl	80420f0 <cJSON_New_Item>
 80429f4:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80429f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80429f8:	2b00      	cmp	r3, #0
 80429fa:	d02e      	beq.n	8042a5a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80429fc:	f107 0318 	add.w	r3, r7, #24
 8042a00:	4618      	mov	r0, r3
 8042a02:	f7ff ff79 	bl	80428f8 <skip_utf8_bom>
 8042a06:	4603      	mov	r3, r0
 8042a08:	4618      	mov	r0, r3
 8042a0a:	f7ff ff35 	bl	8042878 <buffer_skip_whitespace>
 8042a0e:	4603      	mov	r3, r0
 8042a10:	4619      	mov	r1, r3
 8042a12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8042a14:	f000 f868 	bl	8042ae8 <parse_value>
 8042a18:	4603      	mov	r3, r0
 8042a1a:	2b00      	cmp	r3, #0
 8042a1c:	d01f      	beq.n	8042a5e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8042a1e:	683b      	ldr	r3, [r7, #0]
 8042a20:	2b00      	cmp	r3, #0
 8042a22:	d00e      	beq.n	8042a42 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8042a24:	f107 0318 	add.w	r3, r7, #24
 8042a28:	4618      	mov	r0, r3
 8042a2a:	f7ff ff25 	bl	8042878 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8042a2e:	6a3a      	ldr	r2, [r7, #32]
 8042a30:	69fb      	ldr	r3, [r7, #28]
 8042a32:	429a      	cmp	r2, r3
 8042a34:	d215      	bcs.n	8042a62 <cJSON_ParseWithLengthOpts+0xca>
 8042a36:	69ba      	ldr	r2, [r7, #24]
 8042a38:	6a3b      	ldr	r3, [r7, #32]
 8042a3a:	4413      	add	r3, r2
 8042a3c:	781b      	ldrb	r3, [r3, #0]
 8042a3e:	2b00      	cmp	r3, #0
 8042a40:	d10f      	bne.n	8042a62 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8042a42:	687b      	ldr	r3, [r7, #4]
 8042a44:	2b00      	cmp	r3, #0
 8042a46:	d004      	beq.n	8042a52 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8042a48:	69ba      	ldr	r2, [r7, #24]
 8042a4a:	6a3b      	ldr	r3, [r7, #32]
 8042a4c:	441a      	add	r2, r3
 8042a4e:	687b      	ldr	r3, [r7, #4]
 8042a50:	601a      	str	r2, [r3, #0]
    }

    return item;
 8042a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042a54:	e031      	b.n	8042aba <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8042a56:	bf00      	nop
 8042a58:	e004      	b.n	8042a64 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8042a5a:	bf00      	nop
 8042a5c:	e002      	b.n	8042a64 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8042a5e:	bf00      	nop
 8042a60:	e000      	b.n	8042a64 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8042a62:	bf00      	nop

fail:
    if (item != NULL)
 8042a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042a66:	2b00      	cmp	r3, #0
 8042a68:	d002      	beq.n	8042a70 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8042a6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8042a6c:	f7ff fb56 	bl	804211c <cJSON_Delete>
    }

    if (value != NULL)
 8042a70:	68fb      	ldr	r3, [r7, #12]
 8042a72:	2b00      	cmp	r3, #0
 8042a74:	d020      	beq.n	8042ab8 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8042a76:	68fb      	ldr	r3, [r7, #12]
 8042a78:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8042a7a:	2300      	movs	r3, #0
 8042a7c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8042a7e:	6a3a      	ldr	r2, [r7, #32]
 8042a80:	69fb      	ldr	r3, [r7, #28]
 8042a82:	429a      	cmp	r2, r3
 8042a84:	d202      	bcs.n	8042a8c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8042a86:	6a3b      	ldr	r3, [r7, #32]
 8042a88:	617b      	str	r3, [r7, #20]
 8042a8a:	e005      	b.n	8042a98 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8042a8c:	69fb      	ldr	r3, [r7, #28]
 8042a8e:	2b00      	cmp	r3, #0
 8042a90:	d002      	beq.n	8042a98 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8042a92:	69fb      	ldr	r3, [r7, #28]
 8042a94:	3b01      	subs	r3, #1
 8042a96:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8042a98:	687b      	ldr	r3, [r7, #4]
 8042a9a:	2b00      	cmp	r3, #0
 8042a9c:	d004      	beq.n	8042aa8 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8042a9e:	693a      	ldr	r2, [r7, #16]
 8042aa0:	697b      	ldr	r3, [r7, #20]
 8042aa2:	441a      	add	r2, r3
 8042aa4:	687b      	ldr	r3, [r7, #4]
 8042aa6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8042aa8:	4b06      	ldr	r3, [pc, #24]	; (8042ac4 <cJSON_ParseWithLengthOpts+0x12c>)
 8042aaa:	461a      	mov	r2, r3
 8042aac:	f107 0310 	add.w	r3, r7, #16
 8042ab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8042ab4:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8042ab8:	2300      	movs	r3, #0
}
 8042aba:	4618      	mov	r0, r3
 8042abc:	3738      	adds	r7, #56	; 0x38
 8042abe:	46bd      	mov	sp, r7
 8042ac0:	bd80      	pop	{r7, pc}
 8042ac2:	bf00      	nop
 8042ac4:	2000364c 	.word	0x2000364c
 8042ac8:	20000018 	.word	0x20000018

08042acc <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8042acc:	b580      	push	{r7, lr}
 8042ace:	b082      	sub	sp, #8
 8042ad0:	af00      	add	r7, sp, #0
 8042ad2:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8042ad4:	2200      	movs	r2, #0
 8042ad6:	2100      	movs	r1, #0
 8042ad8:	6878      	ldr	r0, [r7, #4]
 8042ada:	f7ff ff41 	bl	8042960 <cJSON_ParseWithOpts>
 8042ade:	4603      	mov	r3, r0
}
 8042ae0:	4618      	mov	r0, r3
 8042ae2:	3708      	adds	r7, #8
 8042ae4:	46bd      	mov	sp, r7
 8042ae6:	bd80      	pop	{r7, pc}

08042ae8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8042ae8:	b580      	push	{r7, lr}
 8042aea:	b082      	sub	sp, #8
 8042aec:	af00      	add	r7, sp, #0
 8042aee:	6078      	str	r0, [r7, #4]
 8042af0:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8042af2:	683b      	ldr	r3, [r7, #0]
 8042af4:	2b00      	cmp	r3, #0
 8042af6:	d003      	beq.n	8042b00 <parse_value+0x18>
 8042af8:	683b      	ldr	r3, [r7, #0]
 8042afa:	681b      	ldr	r3, [r3, #0]
 8042afc:	2b00      	cmp	r3, #0
 8042afe:	d101      	bne.n	8042b04 <parse_value+0x1c>
    {
        return false; /* no input */
 8042b00:	2300      	movs	r3, #0
 8042b02:	e0d2      	b.n	8042caa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8042b04:	683b      	ldr	r3, [r7, #0]
 8042b06:	2b00      	cmp	r3, #0
 8042b08:	d01d      	beq.n	8042b46 <parse_value+0x5e>
 8042b0a:	683b      	ldr	r3, [r7, #0]
 8042b0c:	689b      	ldr	r3, [r3, #8]
 8042b0e:	1d1a      	adds	r2, r3, #4
 8042b10:	683b      	ldr	r3, [r7, #0]
 8042b12:	685b      	ldr	r3, [r3, #4]
 8042b14:	429a      	cmp	r2, r3
 8042b16:	d816      	bhi.n	8042b46 <parse_value+0x5e>
 8042b18:	683b      	ldr	r3, [r7, #0]
 8042b1a:	681a      	ldr	r2, [r3, #0]
 8042b1c:	683b      	ldr	r3, [r7, #0]
 8042b1e:	689b      	ldr	r3, [r3, #8]
 8042b20:	4413      	add	r3, r2
 8042b22:	2204      	movs	r2, #4
 8042b24:	4963      	ldr	r1, [pc, #396]	; (8042cb4 <parse_value+0x1cc>)
 8042b26:	4618      	mov	r0, r3
 8042b28:	f005 fb22 	bl	8048170 <strncmp>
 8042b2c:	4603      	mov	r3, r0
 8042b2e:	2b00      	cmp	r3, #0
 8042b30:	d109      	bne.n	8042b46 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8042b32:	687b      	ldr	r3, [r7, #4]
 8042b34:	2204      	movs	r2, #4
 8042b36:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8042b38:	683b      	ldr	r3, [r7, #0]
 8042b3a:	689b      	ldr	r3, [r3, #8]
 8042b3c:	1d1a      	adds	r2, r3, #4
 8042b3e:	683b      	ldr	r3, [r7, #0]
 8042b40:	609a      	str	r2, [r3, #8]
        return true;
 8042b42:	2301      	movs	r3, #1
 8042b44:	e0b1      	b.n	8042caa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8042b46:	683b      	ldr	r3, [r7, #0]
 8042b48:	2b00      	cmp	r3, #0
 8042b4a:	d01d      	beq.n	8042b88 <parse_value+0xa0>
 8042b4c:	683b      	ldr	r3, [r7, #0]
 8042b4e:	689b      	ldr	r3, [r3, #8]
 8042b50:	1d5a      	adds	r2, r3, #5
 8042b52:	683b      	ldr	r3, [r7, #0]
 8042b54:	685b      	ldr	r3, [r3, #4]
 8042b56:	429a      	cmp	r2, r3
 8042b58:	d816      	bhi.n	8042b88 <parse_value+0xa0>
 8042b5a:	683b      	ldr	r3, [r7, #0]
 8042b5c:	681a      	ldr	r2, [r3, #0]
 8042b5e:	683b      	ldr	r3, [r7, #0]
 8042b60:	689b      	ldr	r3, [r3, #8]
 8042b62:	4413      	add	r3, r2
 8042b64:	2205      	movs	r2, #5
 8042b66:	4954      	ldr	r1, [pc, #336]	; (8042cb8 <parse_value+0x1d0>)
 8042b68:	4618      	mov	r0, r3
 8042b6a:	f005 fb01 	bl	8048170 <strncmp>
 8042b6e:	4603      	mov	r3, r0
 8042b70:	2b00      	cmp	r3, #0
 8042b72:	d109      	bne.n	8042b88 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8042b74:	687b      	ldr	r3, [r7, #4]
 8042b76:	2201      	movs	r2, #1
 8042b78:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8042b7a:	683b      	ldr	r3, [r7, #0]
 8042b7c:	689b      	ldr	r3, [r3, #8]
 8042b7e:	1d5a      	adds	r2, r3, #5
 8042b80:	683b      	ldr	r3, [r7, #0]
 8042b82:	609a      	str	r2, [r3, #8]
        return true;
 8042b84:	2301      	movs	r3, #1
 8042b86:	e090      	b.n	8042caa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8042b88:	683b      	ldr	r3, [r7, #0]
 8042b8a:	2b00      	cmp	r3, #0
 8042b8c:	d020      	beq.n	8042bd0 <parse_value+0xe8>
 8042b8e:	683b      	ldr	r3, [r7, #0]
 8042b90:	689b      	ldr	r3, [r3, #8]
 8042b92:	1d1a      	adds	r2, r3, #4
 8042b94:	683b      	ldr	r3, [r7, #0]
 8042b96:	685b      	ldr	r3, [r3, #4]
 8042b98:	429a      	cmp	r2, r3
 8042b9a:	d819      	bhi.n	8042bd0 <parse_value+0xe8>
 8042b9c:	683b      	ldr	r3, [r7, #0]
 8042b9e:	681a      	ldr	r2, [r3, #0]
 8042ba0:	683b      	ldr	r3, [r7, #0]
 8042ba2:	689b      	ldr	r3, [r3, #8]
 8042ba4:	4413      	add	r3, r2
 8042ba6:	2204      	movs	r2, #4
 8042ba8:	4944      	ldr	r1, [pc, #272]	; (8042cbc <parse_value+0x1d4>)
 8042baa:	4618      	mov	r0, r3
 8042bac:	f005 fae0 	bl	8048170 <strncmp>
 8042bb0:	4603      	mov	r3, r0
 8042bb2:	2b00      	cmp	r3, #0
 8042bb4:	d10c      	bne.n	8042bd0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8042bb6:	687b      	ldr	r3, [r7, #4]
 8042bb8:	2202      	movs	r2, #2
 8042bba:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	2201      	movs	r2, #1
 8042bc0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8042bc2:	683b      	ldr	r3, [r7, #0]
 8042bc4:	689b      	ldr	r3, [r3, #8]
 8042bc6:	1d1a      	adds	r2, r3, #4
 8042bc8:	683b      	ldr	r3, [r7, #0]
 8042bca:	609a      	str	r2, [r3, #8]
        return true;
 8042bcc:	2301      	movs	r3, #1
 8042bce:	e06c      	b.n	8042caa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8042bd0:	683b      	ldr	r3, [r7, #0]
 8042bd2:	2b00      	cmp	r3, #0
 8042bd4:	d013      	beq.n	8042bfe <parse_value+0x116>
 8042bd6:	683b      	ldr	r3, [r7, #0]
 8042bd8:	689a      	ldr	r2, [r3, #8]
 8042bda:	683b      	ldr	r3, [r7, #0]
 8042bdc:	685b      	ldr	r3, [r3, #4]
 8042bde:	429a      	cmp	r2, r3
 8042be0:	d20d      	bcs.n	8042bfe <parse_value+0x116>
 8042be2:	683b      	ldr	r3, [r7, #0]
 8042be4:	681a      	ldr	r2, [r3, #0]
 8042be6:	683b      	ldr	r3, [r7, #0]
 8042be8:	689b      	ldr	r3, [r3, #8]
 8042bea:	4413      	add	r3, r2
 8042bec:	781b      	ldrb	r3, [r3, #0]
 8042bee:	2b22      	cmp	r3, #34	; 0x22
 8042bf0:	d105      	bne.n	8042bfe <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8042bf2:	6839      	ldr	r1, [r7, #0]
 8042bf4:	6878      	ldr	r0, [r7, #4]
 8042bf6:	f7ff fcf9 	bl	80425ec <parse_string>
 8042bfa:	4603      	mov	r3, r0
 8042bfc:	e055      	b.n	8042caa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8042bfe:	683b      	ldr	r3, [r7, #0]
 8042c00:	2b00      	cmp	r3, #0
 8042c02:	d023      	beq.n	8042c4c <parse_value+0x164>
 8042c04:	683b      	ldr	r3, [r7, #0]
 8042c06:	689a      	ldr	r2, [r3, #8]
 8042c08:	683b      	ldr	r3, [r7, #0]
 8042c0a:	685b      	ldr	r3, [r3, #4]
 8042c0c:	429a      	cmp	r2, r3
 8042c0e:	d21d      	bcs.n	8042c4c <parse_value+0x164>
 8042c10:	683b      	ldr	r3, [r7, #0]
 8042c12:	681a      	ldr	r2, [r3, #0]
 8042c14:	683b      	ldr	r3, [r7, #0]
 8042c16:	689b      	ldr	r3, [r3, #8]
 8042c18:	4413      	add	r3, r2
 8042c1a:	781b      	ldrb	r3, [r3, #0]
 8042c1c:	2b2d      	cmp	r3, #45	; 0x2d
 8042c1e:	d00f      	beq.n	8042c40 <parse_value+0x158>
 8042c20:	683b      	ldr	r3, [r7, #0]
 8042c22:	681a      	ldr	r2, [r3, #0]
 8042c24:	683b      	ldr	r3, [r7, #0]
 8042c26:	689b      	ldr	r3, [r3, #8]
 8042c28:	4413      	add	r3, r2
 8042c2a:	781b      	ldrb	r3, [r3, #0]
 8042c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8042c2e:	d90d      	bls.n	8042c4c <parse_value+0x164>
 8042c30:	683b      	ldr	r3, [r7, #0]
 8042c32:	681a      	ldr	r2, [r3, #0]
 8042c34:	683b      	ldr	r3, [r7, #0]
 8042c36:	689b      	ldr	r3, [r3, #8]
 8042c38:	4413      	add	r3, r2
 8042c3a:	781b      	ldrb	r3, [r3, #0]
 8042c3c:	2b39      	cmp	r3, #57	; 0x39
 8042c3e:	d805      	bhi.n	8042c4c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8042c40:	6839      	ldr	r1, [r7, #0]
 8042c42:	6878      	ldr	r0, [r7, #4]
 8042c44:	f7ff fabc 	bl	80421c0 <parse_number>
 8042c48:	4603      	mov	r3, r0
 8042c4a:	e02e      	b.n	8042caa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8042c4c:	683b      	ldr	r3, [r7, #0]
 8042c4e:	2b00      	cmp	r3, #0
 8042c50:	d013      	beq.n	8042c7a <parse_value+0x192>
 8042c52:	683b      	ldr	r3, [r7, #0]
 8042c54:	689a      	ldr	r2, [r3, #8]
 8042c56:	683b      	ldr	r3, [r7, #0]
 8042c58:	685b      	ldr	r3, [r3, #4]
 8042c5a:	429a      	cmp	r2, r3
 8042c5c:	d20d      	bcs.n	8042c7a <parse_value+0x192>
 8042c5e:	683b      	ldr	r3, [r7, #0]
 8042c60:	681a      	ldr	r2, [r3, #0]
 8042c62:	683b      	ldr	r3, [r7, #0]
 8042c64:	689b      	ldr	r3, [r3, #8]
 8042c66:	4413      	add	r3, r2
 8042c68:	781b      	ldrb	r3, [r3, #0]
 8042c6a:	2b5b      	cmp	r3, #91	; 0x5b
 8042c6c:	d105      	bne.n	8042c7a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8042c6e:	6839      	ldr	r1, [r7, #0]
 8042c70:	6878      	ldr	r0, [r7, #4]
 8042c72:	f000 f825 	bl	8042cc0 <parse_array>
 8042c76:	4603      	mov	r3, r0
 8042c78:	e017      	b.n	8042caa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8042c7a:	683b      	ldr	r3, [r7, #0]
 8042c7c:	2b00      	cmp	r3, #0
 8042c7e:	d013      	beq.n	8042ca8 <parse_value+0x1c0>
 8042c80:	683b      	ldr	r3, [r7, #0]
 8042c82:	689a      	ldr	r2, [r3, #8]
 8042c84:	683b      	ldr	r3, [r7, #0]
 8042c86:	685b      	ldr	r3, [r3, #4]
 8042c88:	429a      	cmp	r2, r3
 8042c8a:	d20d      	bcs.n	8042ca8 <parse_value+0x1c0>
 8042c8c:	683b      	ldr	r3, [r7, #0]
 8042c8e:	681a      	ldr	r2, [r3, #0]
 8042c90:	683b      	ldr	r3, [r7, #0]
 8042c92:	689b      	ldr	r3, [r3, #8]
 8042c94:	4413      	add	r3, r2
 8042c96:	781b      	ldrb	r3, [r3, #0]
 8042c98:	2b7b      	cmp	r3, #123	; 0x7b
 8042c9a:	d105      	bne.n	8042ca8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8042c9c:	6839      	ldr	r1, [r7, #0]
 8042c9e:	6878      	ldr	r0, [r7, #4]
 8042ca0:	f000 f8d2 	bl	8042e48 <parse_object>
 8042ca4:	4603      	mov	r3, r0
 8042ca6:	e000      	b.n	8042caa <parse_value+0x1c2>
    }

    return false;
 8042ca8:	2300      	movs	r3, #0
}
 8042caa:	4618      	mov	r0, r3
 8042cac:	3708      	adds	r7, #8
 8042cae:	46bd      	mov	sp, r7
 8042cb0:	bd80      	pop	{r7, pc}
 8042cb2:	bf00      	nop
 8042cb4:	0804ae9c 	.word	0x0804ae9c
 8042cb8:	0804aecc 	.word	0x0804aecc
 8042cbc:	0804aed4 	.word	0x0804aed4

08042cc0 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8042cc0:	b580      	push	{r7, lr}
 8042cc2:	b086      	sub	sp, #24
 8042cc4:	af00      	add	r7, sp, #0
 8042cc6:	6078      	str	r0, [r7, #4]
 8042cc8:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8042cca:	2300      	movs	r3, #0
 8042ccc:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8042cce:	2300      	movs	r3, #0
 8042cd0:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8042cd2:	683b      	ldr	r3, [r7, #0]
 8042cd4:	68db      	ldr	r3, [r3, #12]
 8042cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8042cda:	d301      	bcc.n	8042ce0 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8042cdc:	2300      	movs	r3, #0
 8042cde:	e0af      	b.n	8042e40 <parse_array+0x180>
    }
    input_buffer->depth++;
 8042ce0:	683b      	ldr	r3, [r7, #0]
 8042ce2:	68db      	ldr	r3, [r3, #12]
 8042ce4:	1c5a      	adds	r2, r3, #1
 8042ce6:	683b      	ldr	r3, [r7, #0]
 8042ce8:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8042cea:	683b      	ldr	r3, [r7, #0]
 8042cec:	681a      	ldr	r2, [r3, #0]
 8042cee:	683b      	ldr	r3, [r7, #0]
 8042cf0:	689b      	ldr	r3, [r3, #8]
 8042cf2:	4413      	add	r3, r2
 8042cf4:	781b      	ldrb	r3, [r3, #0]
 8042cf6:	2b5b      	cmp	r3, #91	; 0x5b
 8042cf8:	f040 8094 	bne.w	8042e24 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8042cfc:	683b      	ldr	r3, [r7, #0]
 8042cfe:	689b      	ldr	r3, [r3, #8]
 8042d00:	1c5a      	adds	r2, r3, #1
 8042d02:	683b      	ldr	r3, [r7, #0]
 8042d04:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8042d06:	6838      	ldr	r0, [r7, #0]
 8042d08:	f7ff fdb6 	bl	8042878 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8042d0c:	683b      	ldr	r3, [r7, #0]
 8042d0e:	2b00      	cmp	r3, #0
 8042d10:	d00d      	beq.n	8042d2e <parse_array+0x6e>
 8042d12:	683b      	ldr	r3, [r7, #0]
 8042d14:	689a      	ldr	r2, [r3, #8]
 8042d16:	683b      	ldr	r3, [r7, #0]
 8042d18:	685b      	ldr	r3, [r3, #4]
 8042d1a:	429a      	cmp	r2, r3
 8042d1c:	d207      	bcs.n	8042d2e <parse_array+0x6e>
 8042d1e:	683b      	ldr	r3, [r7, #0]
 8042d20:	681a      	ldr	r2, [r3, #0]
 8042d22:	683b      	ldr	r3, [r7, #0]
 8042d24:	689b      	ldr	r3, [r3, #8]
 8042d26:	4413      	add	r3, r2
 8042d28:	781b      	ldrb	r3, [r3, #0]
 8042d2a:	2b5d      	cmp	r3, #93	; 0x5d
 8042d2c:	d061      	beq.n	8042df2 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8042d2e:	683b      	ldr	r3, [r7, #0]
 8042d30:	2b00      	cmp	r3, #0
 8042d32:	d005      	beq.n	8042d40 <parse_array+0x80>
 8042d34:	683b      	ldr	r3, [r7, #0]
 8042d36:	689a      	ldr	r2, [r3, #8]
 8042d38:	683b      	ldr	r3, [r7, #0]
 8042d3a:	685b      	ldr	r3, [r3, #4]
 8042d3c:	429a      	cmp	r2, r3
 8042d3e:	d305      	bcc.n	8042d4c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8042d40:	683b      	ldr	r3, [r7, #0]
 8042d42:	689b      	ldr	r3, [r3, #8]
 8042d44:	1e5a      	subs	r2, r3, #1
 8042d46:	683b      	ldr	r3, [r7, #0]
 8042d48:	609a      	str	r2, [r3, #8]
        goto fail;
 8042d4a:	e072      	b.n	8042e32 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8042d4c:	683b      	ldr	r3, [r7, #0]
 8042d4e:	689b      	ldr	r3, [r3, #8]
 8042d50:	1e5a      	subs	r2, r3, #1
 8042d52:	683b      	ldr	r3, [r7, #0]
 8042d54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8042d56:	683b      	ldr	r3, [r7, #0]
 8042d58:	3310      	adds	r3, #16
 8042d5a:	4618      	mov	r0, r3
 8042d5c:	f7ff f9c8 	bl	80420f0 <cJSON_New_Item>
 8042d60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8042d62:	68fb      	ldr	r3, [r7, #12]
 8042d64:	2b00      	cmp	r3, #0
 8042d66:	d05f      	beq.n	8042e28 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8042d68:	697b      	ldr	r3, [r7, #20]
 8042d6a:	2b00      	cmp	r3, #0
 8042d6c:	d104      	bne.n	8042d78 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8042d6e:	68fb      	ldr	r3, [r7, #12]
 8042d70:	617b      	str	r3, [r7, #20]
 8042d72:	697b      	ldr	r3, [r7, #20]
 8042d74:	613b      	str	r3, [r7, #16]
 8042d76:	e007      	b.n	8042d88 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8042d78:	693b      	ldr	r3, [r7, #16]
 8042d7a:	68fa      	ldr	r2, [r7, #12]
 8042d7c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8042d7e:	68fb      	ldr	r3, [r7, #12]
 8042d80:	693a      	ldr	r2, [r7, #16]
 8042d82:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8042d84:	68fb      	ldr	r3, [r7, #12]
 8042d86:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8042d88:	683b      	ldr	r3, [r7, #0]
 8042d8a:	689b      	ldr	r3, [r3, #8]
 8042d8c:	1c5a      	adds	r2, r3, #1
 8042d8e:	683b      	ldr	r3, [r7, #0]
 8042d90:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8042d92:	6838      	ldr	r0, [r7, #0]
 8042d94:	f7ff fd70 	bl	8042878 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8042d98:	6839      	ldr	r1, [r7, #0]
 8042d9a:	6938      	ldr	r0, [r7, #16]
 8042d9c:	f7ff fea4 	bl	8042ae8 <parse_value>
 8042da0:	4603      	mov	r3, r0
 8042da2:	2b00      	cmp	r3, #0
 8042da4:	d042      	beq.n	8042e2c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8042da6:	6838      	ldr	r0, [r7, #0]
 8042da8:	f7ff fd66 	bl	8042878 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8042dac:	683b      	ldr	r3, [r7, #0]
 8042dae:	2b00      	cmp	r3, #0
 8042db0:	d00d      	beq.n	8042dce <parse_array+0x10e>
 8042db2:	683b      	ldr	r3, [r7, #0]
 8042db4:	689a      	ldr	r2, [r3, #8]
 8042db6:	683b      	ldr	r3, [r7, #0]
 8042db8:	685b      	ldr	r3, [r3, #4]
 8042dba:	429a      	cmp	r2, r3
 8042dbc:	d207      	bcs.n	8042dce <parse_array+0x10e>
 8042dbe:	683b      	ldr	r3, [r7, #0]
 8042dc0:	681a      	ldr	r2, [r3, #0]
 8042dc2:	683b      	ldr	r3, [r7, #0]
 8042dc4:	689b      	ldr	r3, [r3, #8]
 8042dc6:	4413      	add	r3, r2
 8042dc8:	781b      	ldrb	r3, [r3, #0]
 8042dca:	2b2c      	cmp	r3, #44	; 0x2c
 8042dcc:	d0c3      	beq.n	8042d56 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8042dce:	683b      	ldr	r3, [r7, #0]
 8042dd0:	2b00      	cmp	r3, #0
 8042dd2:	d02d      	beq.n	8042e30 <parse_array+0x170>
 8042dd4:	683b      	ldr	r3, [r7, #0]
 8042dd6:	689a      	ldr	r2, [r3, #8]
 8042dd8:	683b      	ldr	r3, [r7, #0]
 8042dda:	685b      	ldr	r3, [r3, #4]
 8042ddc:	429a      	cmp	r2, r3
 8042dde:	d227      	bcs.n	8042e30 <parse_array+0x170>
 8042de0:	683b      	ldr	r3, [r7, #0]
 8042de2:	681a      	ldr	r2, [r3, #0]
 8042de4:	683b      	ldr	r3, [r7, #0]
 8042de6:	689b      	ldr	r3, [r3, #8]
 8042de8:	4413      	add	r3, r2
 8042dea:	781b      	ldrb	r3, [r3, #0]
 8042dec:	2b5d      	cmp	r3, #93	; 0x5d
 8042dee:	d11f      	bne.n	8042e30 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8042df0:	e000      	b.n	8042df4 <parse_array+0x134>
        goto success;
 8042df2:	bf00      	nop
    input_buffer->depth--;
 8042df4:	683b      	ldr	r3, [r7, #0]
 8042df6:	68db      	ldr	r3, [r3, #12]
 8042df8:	1e5a      	subs	r2, r3, #1
 8042dfa:	683b      	ldr	r3, [r7, #0]
 8042dfc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8042dfe:	697b      	ldr	r3, [r7, #20]
 8042e00:	2b00      	cmp	r3, #0
 8042e02:	d002      	beq.n	8042e0a <parse_array+0x14a>
        head->prev = current_item;
 8042e04:	697b      	ldr	r3, [r7, #20]
 8042e06:	693a      	ldr	r2, [r7, #16]
 8042e08:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8042e0a:	687b      	ldr	r3, [r7, #4]
 8042e0c:	2220      	movs	r2, #32
 8042e0e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8042e10:	687b      	ldr	r3, [r7, #4]
 8042e12:	697a      	ldr	r2, [r7, #20]
 8042e14:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8042e16:	683b      	ldr	r3, [r7, #0]
 8042e18:	689b      	ldr	r3, [r3, #8]
 8042e1a:	1c5a      	adds	r2, r3, #1
 8042e1c:	683b      	ldr	r3, [r7, #0]
 8042e1e:	609a      	str	r2, [r3, #8]

    return true;
 8042e20:	2301      	movs	r3, #1
 8042e22:	e00d      	b.n	8042e40 <parse_array+0x180>
        goto fail;
 8042e24:	bf00      	nop
 8042e26:	e004      	b.n	8042e32 <parse_array+0x172>
            goto fail; /* allocation failure */
 8042e28:	bf00      	nop
 8042e2a:	e002      	b.n	8042e32 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8042e2c:	bf00      	nop
 8042e2e:	e000      	b.n	8042e32 <parse_array+0x172>
        goto fail; /* expected end of array */
 8042e30:	bf00      	nop

fail:
    if (head != NULL)
 8042e32:	697b      	ldr	r3, [r7, #20]
 8042e34:	2b00      	cmp	r3, #0
 8042e36:	d002      	beq.n	8042e3e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8042e38:	6978      	ldr	r0, [r7, #20]
 8042e3a:	f7ff f96f 	bl	804211c <cJSON_Delete>
    }

    return false;
 8042e3e:	2300      	movs	r3, #0
}
 8042e40:	4618      	mov	r0, r3
 8042e42:	3718      	adds	r7, #24
 8042e44:	46bd      	mov	sp, r7
 8042e46:	bd80      	pop	{r7, pc}

08042e48 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8042e48:	b580      	push	{r7, lr}
 8042e4a:	b086      	sub	sp, #24
 8042e4c:	af00      	add	r7, sp, #0
 8042e4e:	6078      	str	r0, [r7, #4]
 8042e50:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8042e52:	2300      	movs	r3, #0
 8042e54:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8042e56:	2300      	movs	r3, #0
 8042e58:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8042e5a:	683b      	ldr	r3, [r7, #0]
 8042e5c:	68db      	ldr	r3, [r3, #12]
 8042e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8042e62:	d301      	bcc.n	8042e68 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8042e64:	2300      	movs	r3, #0
 8042e66:	e0ea      	b.n	804303e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8042e68:	683b      	ldr	r3, [r7, #0]
 8042e6a:	68db      	ldr	r3, [r3, #12]
 8042e6c:	1c5a      	adds	r2, r3, #1
 8042e6e:	683b      	ldr	r3, [r7, #0]
 8042e70:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8042e72:	683b      	ldr	r3, [r7, #0]
 8042e74:	2b00      	cmp	r3, #0
 8042e76:	f000 80d0 	beq.w	804301a <parse_object+0x1d2>
 8042e7a:	683b      	ldr	r3, [r7, #0]
 8042e7c:	689a      	ldr	r2, [r3, #8]
 8042e7e:	683b      	ldr	r3, [r7, #0]
 8042e80:	685b      	ldr	r3, [r3, #4]
 8042e82:	429a      	cmp	r2, r3
 8042e84:	f080 80c9 	bcs.w	804301a <parse_object+0x1d2>
 8042e88:	683b      	ldr	r3, [r7, #0]
 8042e8a:	681a      	ldr	r2, [r3, #0]
 8042e8c:	683b      	ldr	r3, [r7, #0]
 8042e8e:	689b      	ldr	r3, [r3, #8]
 8042e90:	4413      	add	r3, r2
 8042e92:	781b      	ldrb	r3, [r3, #0]
 8042e94:	2b7b      	cmp	r3, #123	; 0x7b
 8042e96:	f040 80c0 	bne.w	804301a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8042e9a:	683b      	ldr	r3, [r7, #0]
 8042e9c:	689b      	ldr	r3, [r3, #8]
 8042e9e:	1c5a      	adds	r2, r3, #1
 8042ea0:	683b      	ldr	r3, [r7, #0]
 8042ea2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8042ea4:	6838      	ldr	r0, [r7, #0]
 8042ea6:	f7ff fce7 	bl	8042878 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8042eaa:	683b      	ldr	r3, [r7, #0]
 8042eac:	2b00      	cmp	r3, #0
 8042eae:	d00e      	beq.n	8042ece <parse_object+0x86>
 8042eb0:	683b      	ldr	r3, [r7, #0]
 8042eb2:	689a      	ldr	r2, [r3, #8]
 8042eb4:	683b      	ldr	r3, [r7, #0]
 8042eb6:	685b      	ldr	r3, [r3, #4]
 8042eb8:	429a      	cmp	r2, r3
 8042eba:	d208      	bcs.n	8042ece <parse_object+0x86>
 8042ebc:	683b      	ldr	r3, [r7, #0]
 8042ebe:	681a      	ldr	r2, [r3, #0]
 8042ec0:	683b      	ldr	r3, [r7, #0]
 8042ec2:	689b      	ldr	r3, [r3, #8]
 8042ec4:	4413      	add	r3, r2
 8042ec6:	781b      	ldrb	r3, [r3, #0]
 8042ec8:	2b7d      	cmp	r3, #125	; 0x7d
 8042eca:	f000 808d 	beq.w	8042fe8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8042ece:	683b      	ldr	r3, [r7, #0]
 8042ed0:	2b00      	cmp	r3, #0
 8042ed2:	d005      	beq.n	8042ee0 <parse_object+0x98>
 8042ed4:	683b      	ldr	r3, [r7, #0]
 8042ed6:	689a      	ldr	r2, [r3, #8]
 8042ed8:	683b      	ldr	r3, [r7, #0]
 8042eda:	685b      	ldr	r3, [r3, #4]
 8042edc:	429a      	cmp	r2, r3
 8042ede:	d305      	bcc.n	8042eec <parse_object+0xa4>
    {
        input_buffer->offset--;
 8042ee0:	683b      	ldr	r3, [r7, #0]
 8042ee2:	689b      	ldr	r3, [r3, #8]
 8042ee4:	1e5a      	subs	r2, r3, #1
 8042ee6:	683b      	ldr	r3, [r7, #0]
 8042ee8:	609a      	str	r2, [r3, #8]
        goto fail;
 8042eea:	e0a1      	b.n	8043030 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8042eec:	683b      	ldr	r3, [r7, #0]
 8042eee:	689b      	ldr	r3, [r3, #8]
 8042ef0:	1e5a      	subs	r2, r3, #1
 8042ef2:	683b      	ldr	r3, [r7, #0]
 8042ef4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8042ef6:	683b      	ldr	r3, [r7, #0]
 8042ef8:	3310      	adds	r3, #16
 8042efa:	4618      	mov	r0, r3
 8042efc:	f7ff f8f8 	bl	80420f0 <cJSON_New_Item>
 8042f00:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8042f02:	68fb      	ldr	r3, [r7, #12]
 8042f04:	2b00      	cmp	r3, #0
 8042f06:	f000 808a 	beq.w	804301e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8042f0a:	697b      	ldr	r3, [r7, #20]
 8042f0c:	2b00      	cmp	r3, #0
 8042f0e:	d104      	bne.n	8042f1a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8042f10:	68fb      	ldr	r3, [r7, #12]
 8042f12:	617b      	str	r3, [r7, #20]
 8042f14:	697b      	ldr	r3, [r7, #20]
 8042f16:	613b      	str	r3, [r7, #16]
 8042f18:	e007      	b.n	8042f2a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8042f1a:	693b      	ldr	r3, [r7, #16]
 8042f1c:	68fa      	ldr	r2, [r7, #12]
 8042f1e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8042f20:	68fb      	ldr	r3, [r7, #12]
 8042f22:	693a      	ldr	r2, [r7, #16]
 8042f24:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8042f26:	68fb      	ldr	r3, [r7, #12]
 8042f28:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8042f2a:	683b      	ldr	r3, [r7, #0]
 8042f2c:	689b      	ldr	r3, [r3, #8]
 8042f2e:	1c5a      	adds	r2, r3, #1
 8042f30:	683b      	ldr	r3, [r7, #0]
 8042f32:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8042f34:	6838      	ldr	r0, [r7, #0]
 8042f36:	f7ff fc9f 	bl	8042878 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8042f3a:	6839      	ldr	r1, [r7, #0]
 8042f3c:	6938      	ldr	r0, [r7, #16]
 8042f3e:	f7ff fb55 	bl	80425ec <parse_string>
 8042f42:	4603      	mov	r3, r0
 8042f44:	2b00      	cmp	r3, #0
 8042f46:	d06c      	beq.n	8043022 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8042f48:	6838      	ldr	r0, [r7, #0]
 8042f4a:	f7ff fc95 	bl	8042878 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8042f4e:	693b      	ldr	r3, [r7, #16]
 8042f50:	691a      	ldr	r2, [r3, #16]
 8042f52:	693b      	ldr	r3, [r7, #16]
 8042f54:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8042f56:	693b      	ldr	r3, [r7, #16]
 8042f58:	2200      	movs	r2, #0
 8042f5a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8042f5c:	683b      	ldr	r3, [r7, #0]
 8042f5e:	2b00      	cmp	r3, #0
 8042f60:	d061      	beq.n	8043026 <parse_object+0x1de>
 8042f62:	683b      	ldr	r3, [r7, #0]
 8042f64:	689a      	ldr	r2, [r3, #8]
 8042f66:	683b      	ldr	r3, [r7, #0]
 8042f68:	685b      	ldr	r3, [r3, #4]
 8042f6a:	429a      	cmp	r2, r3
 8042f6c:	d25b      	bcs.n	8043026 <parse_object+0x1de>
 8042f6e:	683b      	ldr	r3, [r7, #0]
 8042f70:	681a      	ldr	r2, [r3, #0]
 8042f72:	683b      	ldr	r3, [r7, #0]
 8042f74:	689b      	ldr	r3, [r3, #8]
 8042f76:	4413      	add	r3, r2
 8042f78:	781b      	ldrb	r3, [r3, #0]
 8042f7a:	2b3a      	cmp	r3, #58	; 0x3a
 8042f7c:	d153      	bne.n	8043026 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8042f7e:	683b      	ldr	r3, [r7, #0]
 8042f80:	689b      	ldr	r3, [r3, #8]
 8042f82:	1c5a      	adds	r2, r3, #1
 8042f84:	683b      	ldr	r3, [r7, #0]
 8042f86:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8042f88:	6838      	ldr	r0, [r7, #0]
 8042f8a:	f7ff fc75 	bl	8042878 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8042f8e:	6839      	ldr	r1, [r7, #0]
 8042f90:	6938      	ldr	r0, [r7, #16]
 8042f92:	f7ff fda9 	bl	8042ae8 <parse_value>
 8042f96:	4603      	mov	r3, r0
 8042f98:	2b00      	cmp	r3, #0
 8042f9a:	d046      	beq.n	804302a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8042f9c:	6838      	ldr	r0, [r7, #0]
 8042f9e:	f7ff fc6b 	bl	8042878 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8042fa2:	683b      	ldr	r3, [r7, #0]
 8042fa4:	2b00      	cmp	r3, #0
 8042fa6:	d00d      	beq.n	8042fc4 <parse_object+0x17c>
 8042fa8:	683b      	ldr	r3, [r7, #0]
 8042faa:	689a      	ldr	r2, [r3, #8]
 8042fac:	683b      	ldr	r3, [r7, #0]
 8042fae:	685b      	ldr	r3, [r3, #4]
 8042fb0:	429a      	cmp	r2, r3
 8042fb2:	d207      	bcs.n	8042fc4 <parse_object+0x17c>
 8042fb4:	683b      	ldr	r3, [r7, #0]
 8042fb6:	681a      	ldr	r2, [r3, #0]
 8042fb8:	683b      	ldr	r3, [r7, #0]
 8042fba:	689b      	ldr	r3, [r3, #8]
 8042fbc:	4413      	add	r3, r2
 8042fbe:	781b      	ldrb	r3, [r3, #0]
 8042fc0:	2b2c      	cmp	r3, #44	; 0x2c
 8042fc2:	d098      	beq.n	8042ef6 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8042fc4:	683b      	ldr	r3, [r7, #0]
 8042fc6:	2b00      	cmp	r3, #0
 8042fc8:	d031      	beq.n	804302e <parse_object+0x1e6>
 8042fca:	683b      	ldr	r3, [r7, #0]
 8042fcc:	689a      	ldr	r2, [r3, #8]
 8042fce:	683b      	ldr	r3, [r7, #0]
 8042fd0:	685b      	ldr	r3, [r3, #4]
 8042fd2:	429a      	cmp	r2, r3
 8042fd4:	d22b      	bcs.n	804302e <parse_object+0x1e6>
 8042fd6:	683b      	ldr	r3, [r7, #0]
 8042fd8:	681a      	ldr	r2, [r3, #0]
 8042fda:	683b      	ldr	r3, [r7, #0]
 8042fdc:	689b      	ldr	r3, [r3, #8]
 8042fde:	4413      	add	r3, r2
 8042fe0:	781b      	ldrb	r3, [r3, #0]
 8042fe2:	2b7d      	cmp	r3, #125	; 0x7d
 8042fe4:	d123      	bne.n	804302e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8042fe6:	e000      	b.n	8042fea <parse_object+0x1a2>
        goto success; /* empty object */
 8042fe8:	bf00      	nop
    input_buffer->depth--;
 8042fea:	683b      	ldr	r3, [r7, #0]
 8042fec:	68db      	ldr	r3, [r3, #12]
 8042fee:	1e5a      	subs	r2, r3, #1
 8042ff0:	683b      	ldr	r3, [r7, #0]
 8042ff2:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8042ff4:	697b      	ldr	r3, [r7, #20]
 8042ff6:	2b00      	cmp	r3, #0
 8042ff8:	d002      	beq.n	8043000 <parse_object+0x1b8>
        head->prev = current_item;
 8042ffa:	697b      	ldr	r3, [r7, #20]
 8042ffc:	693a      	ldr	r2, [r7, #16]
 8042ffe:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8043000:	687b      	ldr	r3, [r7, #4]
 8043002:	2240      	movs	r2, #64	; 0x40
 8043004:	60da      	str	r2, [r3, #12]
    item->child = head;
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	697a      	ldr	r2, [r7, #20]
 804300a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 804300c:	683b      	ldr	r3, [r7, #0]
 804300e:	689b      	ldr	r3, [r3, #8]
 8043010:	1c5a      	adds	r2, r3, #1
 8043012:	683b      	ldr	r3, [r7, #0]
 8043014:	609a      	str	r2, [r3, #8]
    return true;
 8043016:	2301      	movs	r3, #1
 8043018:	e011      	b.n	804303e <parse_object+0x1f6>
        goto fail; /* not an object */
 804301a:	bf00      	nop
 804301c:	e008      	b.n	8043030 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 804301e:	bf00      	nop
 8043020:	e006      	b.n	8043030 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8043022:	bf00      	nop
 8043024:	e004      	b.n	8043030 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8043026:	bf00      	nop
 8043028:	e002      	b.n	8043030 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 804302a:	bf00      	nop
 804302c:	e000      	b.n	8043030 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 804302e:	bf00      	nop

fail:
    if (head != NULL)
 8043030:	697b      	ldr	r3, [r7, #20]
 8043032:	2b00      	cmp	r3, #0
 8043034:	d002      	beq.n	804303c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8043036:	6978      	ldr	r0, [r7, #20]
 8043038:	f7ff f870 	bl	804211c <cJSON_Delete>
    }

    return false;
 804303c:	2300      	movs	r3, #0
}
 804303e:	4618      	mov	r0, r3
 8043040:	3718      	adds	r7, #24
 8043042:	46bd      	mov	sp, r7
 8043044:	bd80      	pop	{r7, pc}

08043046 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8043046:	b580      	push	{r7, lr}
 8043048:	b086      	sub	sp, #24
 804304a:	af00      	add	r7, sp, #0
 804304c:	60f8      	str	r0, [r7, #12]
 804304e:	60b9      	str	r1, [r7, #8]
 8043050:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8043052:	2300      	movs	r3, #0
 8043054:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8043056:	68fb      	ldr	r3, [r7, #12]
 8043058:	2b00      	cmp	r3, #0
 804305a:	d002      	beq.n	8043062 <get_object_item+0x1c>
 804305c:	68bb      	ldr	r3, [r7, #8]
 804305e:	2b00      	cmp	r3, #0
 8043060:	d101      	bne.n	8043066 <get_object_item+0x20>
    {
        return NULL;
 8043062:	2300      	movs	r3, #0
 8043064:	e033      	b.n	80430ce <get_object_item+0x88>
    }

    current_element = object->child;
 8043066:	68fb      	ldr	r3, [r7, #12]
 8043068:	689b      	ldr	r3, [r3, #8]
 804306a:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	2b00      	cmp	r3, #0
 8043070:	d017      	beq.n	80430a2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8043072:	e002      	b.n	804307a <get_object_item+0x34>
        {
            current_element = current_element->next;
 8043074:	697b      	ldr	r3, [r7, #20]
 8043076:	681b      	ldr	r3, [r3, #0]
 8043078:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 804307a:	697b      	ldr	r3, [r7, #20]
 804307c:	2b00      	cmp	r3, #0
 804307e:	d01c      	beq.n	80430ba <get_object_item+0x74>
 8043080:	697b      	ldr	r3, [r7, #20]
 8043082:	6a1b      	ldr	r3, [r3, #32]
 8043084:	2b00      	cmp	r3, #0
 8043086:	d018      	beq.n	80430ba <get_object_item+0x74>
 8043088:	697b      	ldr	r3, [r7, #20]
 804308a:	6a1b      	ldr	r3, [r3, #32]
 804308c:	4619      	mov	r1, r3
 804308e:	68b8      	ldr	r0, [r7, #8]
 8043090:	f7fd f89e 	bl	80401d0 <strcmp>
 8043094:	4603      	mov	r3, r0
 8043096:	2b00      	cmp	r3, #0
 8043098:	d1ec      	bne.n	8043074 <get_object_item+0x2e>
 804309a:	e00e      	b.n	80430ba <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 804309c:	697b      	ldr	r3, [r7, #20]
 804309e:	681b      	ldr	r3, [r3, #0]
 80430a0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80430a2:	697b      	ldr	r3, [r7, #20]
 80430a4:	2b00      	cmp	r3, #0
 80430a6:	d008      	beq.n	80430ba <get_object_item+0x74>
 80430a8:	697b      	ldr	r3, [r7, #20]
 80430aa:	6a1b      	ldr	r3, [r3, #32]
 80430ac:	4619      	mov	r1, r3
 80430ae:	68b8      	ldr	r0, [r7, #8]
 80430b0:	f7fe ffb2 	bl	8042018 <case_insensitive_strcmp>
 80430b4:	4603      	mov	r3, r0
 80430b6:	2b00      	cmp	r3, #0
 80430b8:	d1f0      	bne.n	804309c <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80430ba:	697b      	ldr	r3, [r7, #20]
 80430bc:	2b00      	cmp	r3, #0
 80430be:	d003      	beq.n	80430c8 <get_object_item+0x82>
 80430c0:	697b      	ldr	r3, [r7, #20]
 80430c2:	6a1b      	ldr	r3, [r3, #32]
 80430c4:	2b00      	cmp	r3, #0
 80430c6:	d101      	bne.n	80430cc <get_object_item+0x86>
        return NULL;
 80430c8:	2300      	movs	r3, #0
 80430ca:	e000      	b.n	80430ce <get_object_item+0x88>
    }

    return current_element;
 80430cc:	697b      	ldr	r3, [r7, #20]
}
 80430ce:	4618      	mov	r0, r3
 80430d0:	3718      	adds	r7, #24
 80430d2:	46bd      	mov	sp, r7
 80430d4:	bd80      	pop	{r7, pc}

080430d6 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80430d6:	b580      	push	{r7, lr}
 80430d8:	b082      	sub	sp, #8
 80430da:	af00      	add	r7, sp, #0
 80430dc:	6078      	str	r0, [r7, #4]
 80430de:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80430e0:	2200      	movs	r2, #0
 80430e2:	6839      	ldr	r1, [r7, #0]
 80430e4:	6878      	ldr	r0, [r7, #4]
 80430e6:	f7ff ffae 	bl	8043046 <get_object_item>
 80430ea:	4603      	mov	r3, r0
}
 80430ec:	4618      	mov	r0, r3
 80430ee:	3708      	adds	r7, #8
 80430f0:	46bd      	mov	sp, r7
 80430f2:	bd80      	pop	{r7, pc}

080430f4 <LED_Init>:
void modem_setup(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED_Init(void) {
 80430f4:	b480      	push	{r7}
 80430f6:	af00      	add	r7, sp, #0
    // Enable the GPIOD clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80430f8:	4b0b      	ldr	r3, [pc, #44]	; (8043128 <LED_Init+0x34>)
 80430fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430fc:	4a0a      	ldr	r2, [pc, #40]	; (8043128 <LED_Init+0x34>)
 80430fe:	f043 0308 	orr.w	r3, r3, #8
 8043102:	6313      	str	r3, [r2, #48]	; 0x30

    // Initialize PD12 as an output
    GPIOD->MODER &= ~GPIO_MODER_MODER12;   // Clear the mode bits for PD12
 8043104:	4b09      	ldr	r3, [pc, #36]	; (804312c <LED_Init+0x38>)
 8043106:	681b      	ldr	r3, [r3, #0]
 8043108:	4a08      	ldr	r2, [pc, #32]	; (804312c <LED_Init+0x38>)
 804310a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 804310e:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= GPIO_MODER_MODER12_0;  // Set PD12 as output
 8043110:	4b06      	ldr	r3, [pc, #24]	; (804312c <LED_Init+0x38>)
 8043112:	681b      	ldr	r3, [r3, #0]
 8043114:	4a05      	ldr	r2, [pc, #20]	; (804312c <LED_Init+0x38>)
 8043116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804311a:	6013      	str	r3, [r2, #0]
}
 804311c:	bf00      	nop
 804311e:	46bd      	mov	sp, r7
 8043120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043124:	4770      	bx	lr
 8043126:	bf00      	nop
 8043128:	40023800 	.word	0x40023800
 804312c:	40020c00 	.word	0x40020c00

08043130 <LED_Toggle>:

void LED_Toggle(void) {
 8043130:	b480      	push	{r7}
 8043132:	af00      	add	r7, sp, #0
    GPIOD->ODR ^= GPIO_ODR_OD12;  // Toggle the output on PD12
 8043134:	4b05      	ldr	r3, [pc, #20]	; (804314c <LED_Toggle+0x1c>)
 8043136:	695b      	ldr	r3, [r3, #20]
 8043138:	4a04      	ldr	r2, [pc, #16]	; (804314c <LED_Toggle+0x1c>)
 804313a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 804313e:	6153      	str	r3, [r2, #20]
}
 8043140:	bf00      	nop
 8043142:	46bd      	mov	sp, r7
 8043144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043148:	4770      	bx	lr
 804314a:	bf00      	nop
 804314c:	40020c00 	.word	0x40020c00

08043150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8043150:	b580      	push	{r7, lr}
 8043152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Set the VTOR to the application's start address
  SCB->VTOR = APP_START_ADDR;
 8043154:	4b0e      	ldr	r3, [pc, #56]	; (8043190 <main+0x40>)
 8043156:	4a0f      	ldr	r2, [pc, #60]	; (8043194 <main+0x44>)
 8043158:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804315a:	f000 fd9f 	bl	8043c9c <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_Init();
 804315e:	f7ff ffc9 	bl	80430f4 <LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8043162:	f000 f819 	bl	8043198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8043166:	f000 f939 	bl	80433dc <MX_GPIO_Init>
  MX_I2C1_Init();
 804316a:	f000 f87f 	bl	804326c <MX_I2C1_Init>
  MX_SPI1_Init();
 804316e:	f000 f8ab 	bl	80432c8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8043172:	f000 f8df 	bl	8043334 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8043176:	f000 f907 	bl	8043388 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  modem_setup();
 804317a:	f000 fa6b 	bl	8043654 <modem_setup>
    /* USER CODE END WHILE */
//	  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx_buffer, 170);

    /* USER CODE BEGIN 3 */

    firmware_update_handler();
 804317e:	f7fe fb6d 	bl	804185c <firmware_update_handler>
//     Toggle the LED
    LED_Toggle();
 8043182:	f7ff ffd5 	bl	8043130 <LED_Toggle>

    // Simple delay
    HAL_Delay(1000);
 8043186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804318a:	f000 fdf9 	bl	8043d80 <HAL_Delay>
    firmware_update_handler();
 804318e:	e7f6      	b.n	804317e <main+0x2e>
 8043190:	e000ed00 	.word	0xe000ed00
 8043194:	08040000 	.word	0x08040000

08043198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8043198:	b580      	push	{r7, lr}
 804319a:	b094      	sub	sp, #80	; 0x50
 804319c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804319e:	f107 0320 	add.w	r3, r7, #32
 80431a2:	2230      	movs	r2, #48	; 0x30
 80431a4:	2100      	movs	r1, #0
 80431a6:	4618      	mov	r0, r3
 80431a8:	f004 ffcd 	bl	8048146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80431ac:	f107 030c 	add.w	r3, r7, #12
 80431b0:	2200      	movs	r2, #0
 80431b2:	601a      	str	r2, [r3, #0]
 80431b4:	605a      	str	r2, [r3, #4]
 80431b6:	609a      	str	r2, [r3, #8]
 80431b8:	60da      	str	r2, [r3, #12]
 80431ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80431bc:	2300      	movs	r3, #0
 80431be:	60bb      	str	r3, [r7, #8]
 80431c0:	4b28      	ldr	r3, [pc, #160]	; (8043264 <SystemClock_Config+0xcc>)
 80431c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80431c4:	4a27      	ldr	r2, [pc, #156]	; (8043264 <SystemClock_Config+0xcc>)
 80431c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80431ca:	6413      	str	r3, [r2, #64]	; 0x40
 80431cc:	4b25      	ldr	r3, [pc, #148]	; (8043264 <SystemClock_Config+0xcc>)
 80431ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80431d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80431d4:	60bb      	str	r3, [r7, #8]
 80431d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80431d8:	2300      	movs	r3, #0
 80431da:	607b      	str	r3, [r7, #4]
 80431dc:	4b22      	ldr	r3, [pc, #136]	; (8043268 <SystemClock_Config+0xd0>)
 80431de:	681b      	ldr	r3, [r3, #0]
 80431e0:	4a21      	ldr	r2, [pc, #132]	; (8043268 <SystemClock_Config+0xd0>)
 80431e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80431e6:	6013      	str	r3, [r2, #0]
 80431e8:	4b1f      	ldr	r3, [pc, #124]	; (8043268 <SystemClock_Config+0xd0>)
 80431ea:	681b      	ldr	r3, [r3, #0]
 80431ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80431f0:	607b      	str	r3, [r7, #4]
 80431f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80431f4:	2301      	movs	r3, #1
 80431f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80431f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80431fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80431fe:	2302      	movs	r3, #2
 8043200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8043202:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8043208:	2308      	movs	r3, #8
 804320a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 804320c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8043210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8043212:	2302      	movs	r3, #2
 8043214:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8043216:	2307      	movs	r3, #7
 8043218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804321a:	f107 0320 	add.w	r3, r7, #32
 804321e:	4618      	mov	r0, r3
 8043220:	f001 fd48 	bl	8044cb4 <HAL_RCC_OscConfig>
 8043224:	4603      	mov	r3, r0
 8043226:	2b00      	cmp	r3, #0
 8043228:	d001      	beq.n	804322e <SystemClock_Config+0x96>
  {
    Error_Handler();
 804322a:	f000 fa27 	bl	804367c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804322e:	230f      	movs	r3, #15
 8043230:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8043232:	2302      	movs	r3, #2
 8043234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8043236:	2300      	movs	r3, #0
 8043238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 804323a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 804323e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8043240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8043244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8043246:	f107 030c 	add.w	r3, r7, #12
 804324a:	2105      	movs	r1, #5
 804324c:	4618      	mov	r0, r3
 804324e:	f001 ffa9 	bl	80451a4 <HAL_RCC_ClockConfig>
 8043252:	4603      	mov	r3, r0
 8043254:	2b00      	cmp	r3, #0
 8043256:	d001      	beq.n	804325c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8043258:	f000 fa10 	bl	804367c <Error_Handler>
  }
}
 804325c:	bf00      	nop
 804325e:	3750      	adds	r7, #80	; 0x50
 8043260:	46bd      	mov	sp, r7
 8043262:	bd80      	pop	{r7, pc}
 8043264:	40023800 	.word	0x40023800
 8043268:	40007000 	.word	0x40007000

0804326c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 804326c:	b580      	push	{r7, lr}
 804326e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8043270:	4b12      	ldr	r3, [pc, #72]	; (80432bc <MX_I2C1_Init+0x50>)
 8043272:	4a13      	ldr	r2, [pc, #76]	; (80432c0 <MX_I2C1_Init+0x54>)
 8043274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8043276:	4b11      	ldr	r3, [pc, #68]	; (80432bc <MX_I2C1_Init+0x50>)
 8043278:	4a12      	ldr	r2, [pc, #72]	; (80432c4 <MX_I2C1_Init+0x58>)
 804327a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 804327c:	4b0f      	ldr	r3, [pc, #60]	; (80432bc <MX_I2C1_Init+0x50>)
 804327e:	2200      	movs	r2, #0
 8043280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8043282:	4b0e      	ldr	r3, [pc, #56]	; (80432bc <MX_I2C1_Init+0x50>)
 8043284:	2200      	movs	r2, #0
 8043286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8043288:	4b0c      	ldr	r3, [pc, #48]	; (80432bc <MX_I2C1_Init+0x50>)
 804328a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 804328e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8043290:	4b0a      	ldr	r3, [pc, #40]	; (80432bc <MX_I2C1_Init+0x50>)
 8043292:	2200      	movs	r2, #0
 8043294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8043296:	4b09      	ldr	r3, [pc, #36]	; (80432bc <MX_I2C1_Init+0x50>)
 8043298:	2200      	movs	r2, #0
 804329a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 804329c:	4b07      	ldr	r3, [pc, #28]	; (80432bc <MX_I2C1_Init+0x50>)
 804329e:	2200      	movs	r2, #0
 80432a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80432a2:	4b06      	ldr	r3, [pc, #24]	; (80432bc <MX_I2C1_Init+0x50>)
 80432a4:	2200      	movs	r2, #0
 80432a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80432a8:	4804      	ldr	r0, [pc, #16]	; (80432bc <MX_I2C1_Init+0x50>)
 80432aa:	f001 fbbf 	bl	8044a2c <HAL_I2C_Init>
 80432ae:	4603      	mov	r3, r0
 80432b0:	2b00      	cmp	r3, #0
 80432b2:	d001      	beq.n	80432b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80432b4:	f000 f9e2 	bl	804367c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80432b8:	bf00      	nop
 80432ba:	bd80      	pop	{r7, pc}
 80432bc:	20003654 	.word	0x20003654
 80432c0:	40005400 	.word	0x40005400
 80432c4:	000186a0 	.word	0x000186a0

080432c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
	static void MX_SPI1_Init(void)
	{
 80432c8:	b580      	push	{r7, lr}
 80432ca:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN SPI1_Init 1 */

	  /* USER CODE END SPI1_Init 1 */
	  /* SPI1 parameter configuration*/
	  hspi1.Instance = SPI1;
 80432cc:	4b17      	ldr	r3, [pc, #92]	; (804332c <MX_SPI1_Init+0x64>)
 80432ce:	4a18      	ldr	r2, [pc, #96]	; (8043330 <MX_SPI1_Init+0x68>)
 80432d0:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80432d2:	4b16      	ldr	r3, [pc, #88]	; (804332c <MX_SPI1_Init+0x64>)
 80432d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80432d8:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80432da:	4b14      	ldr	r3, [pc, #80]	; (804332c <MX_SPI1_Init+0x64>)
 80432dc:	2200      	movs	r2, #0
 80432de:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80432e0:	4b12      	ldr	r3, [pc, #72]	; (804332c <MX_SPI1_Init+0x64>)
 80432e2:	2200      	movs	r2, #0
 80432e4:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80432e6:	4b11      	ldr	r3, [pc, #68]	; (804332c <MX_SPI1_Init+0x64>)
 80432e8:	2200      	movs	r2, #0
 80432ea:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80432ec:	4b0f      	ldr	r3, [pc, #60]	; (804332c <MX_SPI1_Init+0x64>)
 80432ee:	2200      	movs	r2, #0
 80432f0:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80432f2:	4b0e      	ldr	r3, [pc, #56]	; (804332c <MX_SPI1_Init+0x64>)
 80432f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80432f8:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80432fa:	4b0c      	ldr	r3, [pc, #48]	; (804332c <MX_SPI1_Init+0x64>)
 80432fc:	2200      	movs	r2, #0
 80432fe:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8043300:	4b0a      	ldr	r3, [pc, #40]	; (804332c <MX_SPI1_Init+0x64>)
 8043302:	2200      	movs	r2, #0
 8043304:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8043306:	4b09      	ldr	r3, [pc, #36]	; (804332c <MX_SPI1_Init+0x64>)
 8043308:	2200      	movs	r2, #0
 804330a:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804330c:	4b07      	ldr	r3, [pc, #28]	; (804332c <MX_SPI1_Init+0x64>)
 804330e:	2200      	movs	r2, #0
 8043310:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8043312:	4b06      	ldr	r3, [pc, #24]	; (804332c <MX_SPI1_Init+0x64>)
 8043314:	220a      	movs	r2, #10
 8043316:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8043318:	4804      	ldr	r0, [pc, #16]	; (804332c <MX_SPI1_Init+0x64>)
 804331a:	f002 f963 	bl	80455e4 <HAL_SPI_Init>
 804331e:	4603      	mov	r3, r0
 8043320:	2b00      	cmp	r3, #0
 8043322:	d001      	beq.n	8043328 <MX_SPI1_Init+0x60>
	  {
		Error_Handler();
 8043324:	f000 f9aa 	bl	804367c <Error_Handler>
	  }
	  /* USER CODE BEGIN SPI1_Init 2 */

	  /* USER CODE END SPI1_Init 2 */

	}
 8043328:	bf00      	nop
 804332a:	bd80      	pop	{r7, pc}
 804332c:	200036a8 	.word	0x200036a8
 8043330:	40013000 	.word	0x40013000

08043334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8043334:	b580      	push	{r7, lr}
 8043336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8043338:	4b11      	ldr	r3, [pc, #68]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 804333a:	4a12      	ldr	r2, [pc, #72]	; (8043384 <MX_USART2_UART_Init+0x50>)
 804333c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 804333e:	4b10      	ldr	r3, [pc, #64]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 8043340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8043344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8043346:	4b0e      	ldr	r3, [pc, #56]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 8043348:	2200      	movs	r2, #0
 804334a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 804334c:	4b0c      	ldr	r3, [pc, #48]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 804334e:	2200      	movs	r2, #0
 8043350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8043352:	4b0b      	ldr	r3, [pc, #44]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 8043354:	2200      	movs	r2, #0
 8043356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8043358:	4b09      	ldr	r3, [pc, #36]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 804335a:	220c      	movs	r2, #12
 804335c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804335e:	4b08      	ldr	r3, [pc, #32]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 8043360:	2200      	movs	r2, #0
 8043362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8043364:	4b06      	ldr	r3, [pc, #24]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 8043366:	2200      	movs	r2, #0
 8043368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 804336a:	4805      	ldr	r0, [pc, #20]	; (8043380 <MX_USART2_UART_Init+0x4c>)
 804336c:	f002 f9c3 	bl	80456f6 <HAL_UART_Init>
 8043370:	4603      	mov	r3, r0
 8043372:	2b00      	cmp	r3, #0
 8043374:	d001      	beq.n	804337a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8043376:	f000 f981 	bl	804367c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 804337a:	bf00      	nop
 804337c:	bd80      	pop	{r7, pc}
 804337e:	bf00      	nop
 8043380:	20003700 	.word	0x20003700
 8043384:	40004400 	.word	0x40004400

08043388 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8043388:	b580      	push	{r7, lr}
 804338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 804338c:	4b11      	ldr	r3, [pc, #68]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 804338e:	4a12      	ldr	r2, [pc, #72]	; (80433d8 <MX_USART3_UART_Init+0x50>)
 8043390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8043392:	4b10      	ldr	r3, [pc, #64]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 8043394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8043398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 804339a:	4b0e      	ldr	r3, [pc, #56]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 804339c:	2200      	movs	r2, #0
 804339e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80433a0:	4b0c      	ldr	r3, [pc, #48]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433a2:	2200      	movs	r2, #0
 80433a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80433a6:	4b0b      	ldr	r3, [pc, #44]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433a8:	2200      	movs	r2, #0
 80433aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80433ac:	4b09      	ldr	r3, [pc, #36]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433ae:	220c      	movs	r2, #12
 80433b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80433b2:	4b08      	ldr	r3, [pc, #32]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433b4:	2200      	movs	r2, #0
 80433b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80433b8:	4b06      	ldr	r3, [pc, #24]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433ba:	2200      	movs	r2, #0
 80433bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80433be:	4805      	ldr	r0, [pc, #20]	; (80433d4 <MX_USART3_UART_Init+0x4c>)
 80433c0:	f002 f999 	bl	80456f6 <HAL_UART_Init>
 80433c4:	4603      	mov	r3, r0
 80433c6:	2b00      	cmp	r3, #0
 80433c8:	d001      	beq.n	80433ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80433ca:	f000 f957 	bl	804367c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80433ce:	bf00      	nop
 80433d0:	bd80      	pop	{r7, pc}
 80433d2:	bf00      	nop
 80433d4:	20003744 	.word	0x20003744
 80433d8:	40004800 	.word	0x40004800

080433dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80433dc:	b580      	push	{r7, lr}
 80433de:	b08c      	sub	sp, #48	; 0x30
 80433e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80433e2:	f107 031c 	add.w	r3, r7, #28
 80433e6:	2200      	movs	r2, #0
 80433e8:	601a      	str	r2, [r3, #0]
 80433ea:	605a      	str	r2, [r3, #4]
 80433ec:	609a      	str	r2, [r3, #8]
 80433ee:	60da      	str	r2, [r3, #12]
 80433f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80433f2:	2300      	movs	r3, #0
 80433f4:	61bb      	str	r3, [r7, #24]
 80433f6:	4b91      	ldr	r3, [pc, #580]	; (804363c <MX_GPIO_Init+0x260>)
 80433f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80433fa:	4a90      	ldr	r2, [pc, #576]	; (804363c <MX_GPIO_Init+0x260>)
 80433fc:	f043 0310 	orr.w	r3, r3, #16
 8043400:	6313      	str	r3, [r2, #48]	; 0x30
 8043402:	4b8e      	ldr	r3, [pc, #568]	; (804363c <MX_GPIO_Init+0x260>)
 8043404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043406:	f003 0310 	and.w	r3, r3, #16
 804340a:	61bb      	str	r3, [r7, #24]
 804340c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804340e:	2300      	movs	r3, #0
 8043410:	617b      	str	r3, [r7, #20]
 8043412:	4b8a      	ldr	r3, [pc, #552]	; (804363c <MX_GPIO_Init+0x260>)
 8043414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043416:	4a89      	ldr	r2, [pc, #548]	; (804363c <MX_GPIO_Init+0x260>)
 8043418:	f043 0304 	orr.w	r3, r3, #4
 804341c:	6313      	str	r3, [r2, #48]	; 0x30
 804341e:	4b87      	ldr	r3, [pc, #540]	; (804363c <MX_GPIO_Init+0x260>)
 8043420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043422:	f003 0304 	and.w	r3, r3, #4
 8043426:	617b      	str	r3, [r7, #20]
 8043428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804342a:	2300      	movs	r3, #0
 804342c:	613b      	str	r3, [r7, #16]
 804342e:	4b83      	ldr	r3, [pc, #524]	; (804363c <MX_GPIO_Init+0x260>)
 8043430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043432:	4a82      	ldr	r2, [pc, #520]	; (804363c <MX_GPIO_Init+0x260>)
 8043434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043438:	6313      	str	r3, [r2, #48]	; 0x30
 804343a:	4b80      	ldr	r3, [pc, #512]	; (804363c <MX_GPIO_Init+0x260>)
 804343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043442:	613b      	str	r3, [r7, #16]
 8043444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8043446:	2300      	movs	r3, #0
 8043448:	60fb      	str	r3, [r7, #12]
 804344a:	4b7c      	ldr	r3, [pc, #496]	; (804363c <MX_GPIO_Init+0x260>)
 804344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804344e:	4a7b      	ldr	r2, [pc, #492]	; (804363c <MX_GPIO_Init+0x260>)
 8043450:	f043 0301 	orr.w	r3, r3, #1
 8043454:	6313      	str	r3, [r2, #48]	; 0x30
 8043456:	4b79      	ldr	r3, [pc, #484]	; (804363c <MX_GPIO_Init+0x260>)
 8043458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804345a:	f003 0301 	and.w	r3, r3, #1
 804345e:	60fb      	str	r3, [r7, #12]
 8043460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8043462:	2300      	movs	r3, #0
 8043464:	60bb      	str	r3, [r7, #8]
 8043466:	4b75      	ldr	r3, [pc, #468]	; (804363c <MX_GPIO_Init+0x260>)
 8043468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804346a:	4a74      	ldr	r2, [pc, #464]	; (804363c <MX_GPIO_Init+0x260>)
 804346c:	f043 0302 	orr.w	r3, r3, #2
 8043470:	6313      	str	r3, [r2, #48]	; 0x30
 8043472:	4b72      	ldr	r3, [pc, #456]	; (804363c <MX_GPIO_Init+0x260>)
 8043474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043476:	f003 0302 	and.w	r3, r3, #2
 804347a:	60bb      	str	r3, [r7, #8]
 804347c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804347e:	2300      	movs	r3, #0
 8043480:	607b      	str	r3, [r7, #4]
 8043482:	4b6e      	ldr	r3, [pc, #440]	; (804363c <MX_GPIO_Init+0x260>)
 8043484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043486:	4a6d      	ldr	r2, [pc, #436]	; (804363c <MX_GPIO_Init+0x260>)
 8043488:	f043 0308 	orr.w	r3, r3, #8
 804348c:	6313      	str	r3, [r2, #48]	; 0x30
 804348e:	4b6b      	ldr	r3, [pc, #428]	; (804363c <MX_GPIO_Init+0x260>)
 8043490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043492:	f003 0308 	and.w	r3, r3, #8
 8043496:	607b      	str	r3, [r7, #4]
 8043498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 804349a:	2200      	movs	r2, #0
 804349c:	2108      	movs	r1, #8
 804349e:	4868      	ldr	r0, [pc, #416]	; (8043640 <MX_GPIO_Init+0x264>)
 80434a0:	f001 faaa 	bl	80449f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80434a4:	2201      	movs	r2, #1
 80434a6:	2101      	movs	r1, #1
 80434a8:	4866      	ldr	r0, [pc, #408]	; (8043644 <MX_GPIO_Init+0x268>)
 80434aa:	f001 faa5 	bl	80449f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80434ae:	2200      	movs	r2, #0
 80434b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80434b4:	4864      	ldr	r0, [pc, #400]	; (8043648 <MX_GPIO_Init+0x26c>)
 80434b6:	f001 fa9f 	bl	80449f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80434ba:	2308      	movs	r3, #8
 80434bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80434be:	2301      	movs	r3, #1
 80434c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80434c2:	2300      	movs	r3, #0
 80434c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80434c6:	2300      	movs	r3, #0
 80434c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80434ca:	f107 031c 	add.w	r3, r7, #28
 80434ce:	4619      	mov	r1, r3
 80434d0:	485b      	ldr	r0, [pc, #364]	; (8043640 <MX_GPIO_Init+0x264>)
 80434d2:	f001 f8f5 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80434d6:	2301      	movs	r3, #1
 80434d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80434da:	2301      	movs	r3, #1
 80434dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80434de:	2300      	movs	r3, #0
 80434e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80434e2:	2300      	movs	r3, #0
 80434e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80434e6:	f107 031c 	add.w	r3, r7, #28
 80434ea:	4619      	mov	r1, r3
 80434ec:	4855      	ldr	r0, [pc, #340]	; (8043644 <MX_GPIO_Init+0x268>)
 80434ee:	f001 f8e7 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80434f2:	2308      	movs	r3, #8
 80434f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80434f6:	2302      	movs	r3, #2
 80434f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80434fa:	2300      	movs	r3, #0
 80434fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80434fe:	2300      	movs	r3, #0
 8043500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8043502:	2305      	movs	r3, #5
 8043504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8043506:	f107 031c 	add.w	r3, r7, #28
 804350a:	4619      	mov	r1, r3
 804350c:	484d      	ldr	r0, [pc, #308]	; (8043644 <MX_GPIO_Init+0x268>)
 804350e:	f001 f8d7 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8043512:	2301      	movs	r3, #1
 8043514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8043516:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 804351a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804351c:	2300      	movs	r3, #0
 804351e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8043520:	f107 031c 	add.w	r3, r7, #28
 8043524:	4619      	mov	r1, r3
 8043526:	4849      	ldr	r0, [pc, #292]	; (804364c <MX_GPIO_Init+0x270>)
 8043528:	f001 f8ca 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 804352c:	2310      	movs	r3, #16
 804352e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043530:	2302      	movs	r3, #2
 8043532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043534:	2300      	movs	r3, #0
 8043536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043538:	2300      	movs	r3, #0
 804353a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 804353c:	2306      	movs	r3, #6
 804353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8043540:	f107 031c 	add.w	r3, r7, #28
 8043544:	4619      	mov	r1, r3
 8043546:	4841      	ldr	r0, [pc, #260]	; (804364c <MX_GPIO_Init+0x270>)
 8043548:	f001 f8ba 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 804354c:	2304      	movs	r3, #4
 804354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8043550:	2300      	movs	r3, #0
 8043552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043554:	2300      	movs	r3, #0
 8043556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8043558:	f107 031c 	add.w	r3, r7, #28
 804355c:	4619      	mov	r1, r3
 804355e:	483c      	ldr	r0, [pc, #240]	; (8043650 <MX_GPIO_Init+0x274>)
 8043560:	f001 f8ae 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8043564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8043568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804356a:	2302      	movs	r3, #2
 804356c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804356e:	2300      	movs	r3, #0
 8043570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043572:	2300      	movs	r3, #0
 8043574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8043576:	2305      	movs	r3, #5
 8043578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 804357a:	f107 031c 	add.w	r3, r7, #28
 804357e:	4619      	mov	r1, r3
 8043580:	4833      	ldr	r0, [pc, #204]	; (8043650 <MX_GPIO_Init+0x274>)
 8043582:	f001 f89d 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8043586:	f24f 0310 	movw	r3, #61456	; 0xf010
 804358a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804358c:	2301      	movs	r3, #1
 804358e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043590:	2300      	movs	r3, #0
 8043592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043594:	2300      	movs	r3, #0
 8043596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8043598:	f107 031c 	add.w	r3, r7, #28
 804359c:	4619      	mov	r1, r3
 804359e:	482a      	ldr	r0, [pc, #168]	; (8043648 <MX_GPIO_Init+0x26c>)
 80435a0:	f001 f88e 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80435a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80435a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80435aa:	2302      	movs	r3, #2
 80435ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80435ae:	2300      	movs	r3, #0
 80435b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80435b2:	2300      	movs	r3, #0
 80435b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80435b6:	2306      	movs	r3, #6
 80435b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80435ba:	f107 031c 	add.w	r3, r7, #28
 80435be:	4619      	mov	r1, r3
 80435c0:	4820      	ldr	r0, [pc, #128]	; (8043644 <MX_GPIO_Init+0x268>)
 80435c2:	f001 f87d 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80435c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80435ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80435cc:	2300      	movs	r3, #0
 80435ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80435d0:	2300      	movs	r3, #0
 80435d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80435d4:	f107 031c 	add.w	r3, r7, #28
 80435d8:	4619      	mov	r1, r3
 80435da:	481c      	ldr	r0, [pc, #112]	; (804364c <MX_GPIO_Init+0x270>)
 80435dc:	f001 f870 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80435e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80435e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80435e6:	2302      	movs	r3, #2
 80435e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80435ea:	2300      	movs	r3, #0
 80435ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80435ee:	2300      	movs	r3, #0
 80435f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80435f2:	230a      	movs	r3, #10
 80435f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80435f6:	f107 031c 	add.w	r3, r7, #28
 80435fa:	4619      	mov	r1, r3
 80435fc:	4813      	ldr	r0, [pc, #76]	; (804364c <MX_GPIO_Init+0x270>)
 80435fe:	f001 f85f 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8043602:	2320      	movs	r3, #32
 8043604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8043606:	2300      	movs	r3, #0
 8043608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804360a:	2300      	movs	r3, #0
 804360c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 804360e:	f107 031c 	add.w	r3, r7, #28
 8043612:	4619      	mov	r1, r3
 8043614:	480c      	ldr	r0, [pc, #48]	; (8043648 <MX_GPIO_Init+0x26c>)
 8043616:	f001 f853 	bl	80446c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 804361a:	2302      	movs	r3, #2
 804361c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 804361e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8043622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043624:	2300      	movs	r3, #0
 8043626:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8043628:	f107 031c 	add.w	r3, r7, #28
 804362c:	4619      	mov	r1, r3
 804362e:	4804      	ldr	r0, [pc, #16]	; (8043640 <MX_GPIO_Init+0x264>)
 8043630:	f001 f846 	bl	80446c0 <HAL_GPIO_Init>

}
 8043634:	bf00      	nop
 8043636:	3730      	adds	r7, #48	; 0x30
 8043638:	46bd      	mov	sp, r7
 804363a:	bd80      	pop	{r7, pc}
 804363c:	40023800 	.word	0x40023800
 8043640:	40021000 	.word	0x40021000
 8043644:	40020800 	.word	0x40020800
 8043648:	40020c00 	.word	0x40020c00
 804364c:	40020000 	.word	0x40020000
 8043650:	40020400 	.word	0x40020400

08043654 <modem_setup>:

/* USER CODE BEGIN 4 */

void modem_setup(void)
{
 8043654:	b580      	push	{r7, lr}
 8043656:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8043658:	2201      	movs	r2, #1
 804365a:	4906      	ldr	r1, [pc, #24]	; (8043674 <modem_setup+0x20>)
 804365c:	4806      	ldr	r0, [pc, #24]	; (8043678 <modem_setup+0x24>)
 804365e:	f002 f929 	bl	80458b4 <HAL_UART_Receive_IT>
    Initialize_Modem();
 8043662:	f7fd fcc3 	bl	8040fec <Initialize_Modem>
    SSL_Config();
 8043666:	f7fd fd8b 	bl	8041180 <SSL_Config>
    AWS_MQTT();
 804366a:	f7fd fdf7 	bl	804125c <AWS_MQTT>
}
 804366e:	bf00      	nop
 8043670:	bd80      	pop	{r7, pc}
 8043672:	bf00      	nop
 8043674:	20000519 	.word	0x20000519
 8043678:	20003700 	.word	0x20003700

0804367c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 804367c:	b480      	push	{r7}
 804367e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8043680:	b672      	cpsid	i
}
 8043682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8043684:	e7fe      	b.n	8043684 <Error_Handler+0x8>
	...

08043688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8043688:	b580      	push	{r7, lr}
 804368a:	b082      	sub	sp, #8
 804368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804368e:	2300      	movs	r3, #0
 8043690:	607b      	str	r3, [r7, #4]
 8043692:	4b10      	ldr	r3, [pc, #64]	; (80436d4 <HAL_MspInit+0x4c>)
 8043694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043696:	4a0f      	ldr	r2, [pc, #60]	; (80436d4 <HAL_MspInit+0x4c>)
 8043698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804369c:	6453      	str	r3, [r2, #68]	; 0x44
 804369e:	4b0d      	ldr	r3, [pc, #52]	; (80436d4 <HAL_MspInit+0x4c>)
 80436a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80436a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80436a6:	607b      	str	r3, [r7, #4]
 80436a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80436aa:	2300      	movs	r3, #0
 80436ac:	603b      	str	r3, [r7, #0]
 80436ae:	4b09      	ldr	r3, [pc, #36]	; (80436d4 <HAL_MspInit+0x4c>)
 80436b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80436b2:	4a08      	ldr	r2, [pc, #32]	; (80436d4 <HAL_MspInit+0x4c>)
 80436b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80436b8:	6413      	str	r3, [r2, #64]	; 0x40
 80436ba:	4b06      	ldr	r3, [pc, #24]	; (80436d4 <HAL_MspInit+0x4c>)
 80436bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80436be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80436c2:	603b      	str	r3, [r7, #0]
 80436c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80436c6:	2007      	movs	r0, #7
 80436c8:	f000 fc4e 	bl	8043f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80436cc:	bf00      	nop
 80436ce:	3708      	adds	r7, #8
 80436d0:	46bd      	mov	sp, r7
 80436d2:	bd80      	pop	{r7, pc}
 80436d4:	40023800 	.word	0x40023800

080436d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80436d8:	b580      	push	{r7, lr}
 80436da:	b08a      	sub	sp, #40	; 0x28
 80436dc:	af00      	add	r7, sp, #0
 80436de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80436e0:	f107 0314 	add.w	r3, r7, #20
 80436e4:	2200      	movs	r2, #0
 80436e6:	601a      	str	r2, [r3, #0]
 80436e8:	605a      	str	r2, [r3, #4]
 80436ea:	609a      	str	r2, [r3, #8]
 80436ec:	60da      	str	r2, [r3, #12]
 80436ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80436f0:	687b      	ldr	r3, [r7, #4]
 80436f2:	681b      	ldr	r3, [r3, #0]
 80436f4:	4a19      	ldr	r2, [pc, #100]	; (804375c <HAL_I2C_MspInit+0x84>)
 80436f6:	4293      	cmp	r3, r2
 80436f8:	d12c      	bne.n	8043754 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80436fa:	2300      	movs	r3, #0
 80436fc:	613b      	str	r3, [r7, #16]
 80436fe:	4b18      	ldr	r3, [pc, #96]	; (8043760 <HAL_I2C_MspInit+0x88>)
 8043700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043702:	4a17      	ldr	r2, [pc, #92]	; (8043760 <HAL_I2C_MspInit+0x88>)
 8043704:	f043 0302 	orr.w	r3, r3, #2
 8043708:	6313      	str	r3, [r2, #48]	; 0x30
 804370a:	4b15      	ldr	r3, [pc, #84]	; (8043760 <HAL_I2C_MspInit+0x88>)
 804370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804370e:	f003 0302 	and.w	r3, r3, #2
 8043712:	613b      	str	r3, [r7, #16]
 8043714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8043716:	f44f 7310 	mov.w	r3, #576	; 0x240
 804371a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 804371c:	2312      	movs	r3, #18
 804371e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8043720:	2301      	movs	r3, #1
 8043722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043724:	2300      	movs	r3, #0
 8043726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8043728:	2304      	movs	r3, #4
 804372a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804372c:	f107 0314 	add.w	r3, r7, #20
 8043730:	4619      	mov	r1, r3
 8043732:	480c      	ldr	r0, [pc, #48]	; (8043764 <HAL_I2C_MspInit+0x8c>)
 8043734:	f000 ffc4 	bl	80446c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8043738:	2300      	movs	r3, #0
 804373a:	60fb      	str	r3, [r7, #12]
 804373c:	4b08      	ldr	r3, [pc, #32]	; (8043760 <HAL_I2C_MspInit+0x88>)
 804373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043740:	4a07      	ldr	r2, [pc, #28]	; (8043760 <HAL_I2C_MspInit+0x88>)
 8043742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8043746:	6413      	str	r3, [r2, #64]	; 0x40
 8043748:	4b05      	ldr	r3, [pc, #20]	; (8043760 <HAL_I2C_MspInit+0x88>)
 804374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8043750:	60fb      	str	r3, [r7, #12]
 8043752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8043754:	bf00      	nop
 8043756:	3728      	adds	r7, #40	; 0x28
 8043758:	46bd      	mov	sp, r7
 804375a:	bd80      	pop	{r7, pc}
 804375c:	40005400 	.word	0x40005400
 8043760:	40023800 	.word	0x40023800
 8043764:	40020400 	.word	0x40020400

08043768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8043768:	b580      	push	{r7, lr}
 804376a:	b08a      	sub	sp, #40	; 0x28
 804376c:	af00      	add	r7, sp, #0
 804376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043770:	f107 0314 	add.w	r3, r7, #20
 8043774:	2200      	movs	r2, #0
 8043776:	601a      	str	r2, [r3, #0]
 8043778:	605a      	str	r2, [r3, #4]
 804377a:	609a      	str	r2, [r3, #8]
 804377c:	60da      	str	r2, [r3, #12]
 804377e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8043780:	687b      	ldr	r3, [r7, #4]
 8043782:	681b      	ldr	r3, [r3, #0]
 8043784:	4a19      	ldr	r2, [pc, #100]	; (80437ec <HAL_SPI_MspInit+0x84>)
 8043786:	4293      	cmp	r3, r2
 8043788:	d12b      	bne.n	80437e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804378a:	2300      	movs	r3, #0
 804378c:	613b      	str	r3, [r7, #16]
 804378e:	4b18      	ldr	r3, [pc, #96]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 8043790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043792:	4a17      	ldr	r2, [pc, #92]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 8043794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8043798:	6453      	str	r3, [r2, #68]	; 0x44
 804379a:	4b15      	ldr	r3, [pc, #84]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 804379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804379e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80437a2:	613b      	str	r3, [r7, #16]
 80437a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80437a6:	2300      	movs	r3, #0
 80437a8:	60fb      	str	r3, [r7, #12]
 80437aa:	4b11      	ldr	r3, [pc, #68]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 80437ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80437ae:	4a10      	ldr	r2, [pc, #64]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 80437b0:	f043 0301 	orr.w	r3, r3, #1
 80437b4:	6313      	str	r3, [r2, #48]	; 0x30
 80437b6:	4b0e      	ldr	r3, [pc, #56]	; (80437f0 <HAL_SPI_MspInit+0x88>)
 80437b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80437ba:	f003 0301 	and.w	r3, r3, #1
 80437be:	60fb      	str	r3, [r7, #12]
 80437c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80437c2:	23e0      	movs	r3, #224	; 0xe0
 80437c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80437c6:	2302      	movs	r3, #2
 80437c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80437ca:	2300      	movs	r3, #0
 80437cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80437ce:	2300      	movs	r3, #0
 80437d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80437d2:	2305      	movs	r3, #5
 80437d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80437d6:	f107 0314 	add.w	r3, r7, #20
 80437da:	4619      	mov	r1, r3
 80437dc:	4805      	ldr	r0, [pc, #20]	; (80437f4 <HAL_SPI_MspInit+0x8c>)
 80437de:	f000 ff6f 	bl	80446c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80437e2:	bf00      	nop
 80437e4:	3728      	adds	r7, #40	; 0x28
 80437e6:	46bd      	mov	sp, r7
 80437e8:	bd80      	pop	{r7, pc}
 80437ea:	bf00      	nop
 80437ec:	40013000 	.word	0x40013000
 80437f0:	40023800 	.word	0x40023800
 80437f4:	40020000 	.word	0x40020000

080437f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80437f8:	b580      	push	{r7, lr}
 80437fa:	b08c      	sub	sp, #48	; 0x30
 80437fc:	af00      	add	r7, sp, #0
 80437fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043800:	f107 031c 	add.w	r3, r7, #28
 8043804:	2200      	movs	r2, #0
 8043806:	601a      	str	r2, [r3, #0]
 8043808:	605a      	str	r2, [r3, #4]
 804380a:	609a      	str	r2, [r3, #8]
 804380c:	60da      	str	r2, [r3, #12]
 804380e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8043810:	687b      	ldr	r3, [r7, #4]
 8043812:	681b      	ldr	r3, [r3, #0]
 8043814:	4a4a      	ldr	r2, [pc, #296]	; (8043940 <HAL_UART_MspInit+0x148>)
 8043816:	4293      	cmp	r3, r2
 8043818:	d134      	bne.n	8043884 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 804381a:	2300      	movs	r3, #0
 804381c:	61bb      	str	r3, [r7, #24]
 804381e:	4b49      	ldr	r3, [pc, #292]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043822:	4a48      	ldr	r2, [pc, #288]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043828:	6413      	str	r3, [r2, #64]	; 0x40
 804382a:	4b46      	ldr	r3, [pc, #280]	; (8043944 <HAL_UART_MspInit+0x14c>)
 804382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043832:	61bb      	str	r3, [r7, #24]
 8043834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8043836:	2300      	movs	r3, #0
 8043838:	617b      	str	r3, [r7, #20]
 804383a:	4b42      	ldr	r3, [pc, #264]	; (8043944 <HAL_UART_MspInit+0x14c>)
 804383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804383e:	4a41      	ldr	r2, [pc, #260]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043840:	f043 0301 	orr.w	r3, r3, #1
 8043844:	6313      	str	r3, [r2, #48]	; 0x30
 8043846:	4b3f      	ldr	r3, [pc, #252]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804384a:	f003 0301 	and.w	r3, r3, #1
 804384e:	617b      	str	r3, [r7, #20]
 8043850:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8043852:	230c      	movs	r3, #12
 8043854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043856:	2302      	movs	r3, #2
 8043858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804385a:	2300      	movs	r3, #0
 804385c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804385e:	2303      	movs	r3, #3
 8043860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8043862:	2307      	movs	r3, #7
 8043864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8043866:	f107 031c 	add.w	r3, r7, #28
 804386a:	4619      	mov	r1, r3
 804386c:	4836      	ldr	r0, [pc, #216]	; (8043948 <HAL_UART_MspInit+0x150>)
 804386e:	f000 ff27 	bl	80446c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8043872:	2200      	movs	r2, #0
 8043874:	2100      	movs	r1, #0
 8043876:	2026      	movs	r0, #38	; 0x26
 8043878:	f000 fb81 	bl	8043f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 804387c:	2026      	movs	r0, #38	; 0x26
 804387e:	f000 fb9a 	bl	8043fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8043882:	e058      	b.n	8043936 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8043884:	687b      	ldr	r3, [r7, #4]
 8043886:	681b      	ldr	r3, [r3, #0]
 8043888:	4a30      	ldr	r2, [pc, #192]	; (804394c <HAL_UART_MspInit+0x154>)
 804388a:	4293      	cmp	r3, r2
 804388c:	d153      	bne.n	8043936 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 804388e:	2300      	movs	r3, #0
 8043890:	613b      	str	r3, [r7, #16]
 8043892:	4b2c      	ldr	r3, [pc, #176]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043896:	4a2b      	ldr	r2, [pc, #172]	; (8043944 <HAL_UART_MspInit+0x14c>)
 8043898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804389c:	6413      	str	r3, [r2, #64]	; 0x40
 804389e:	4b29      	ldr	r3, [pc, #164]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80438a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80438a6:	613b      	str	r3, [r7, #16]
 80438a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80438aa:	2300      	movs	r3, #0
 80438ac:	60fb      	str	r3, [r7, #12]
 80438ae:	4b25      	ldr	r3, [pc, #148]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80438b2:	4a24      	ldr	r2, [pc, #144]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438b4:	f043 0302 	orr.w	r3, r3, #2
 80438b8:	6313      	str	r3, [r2, #48]	; 0x30
 80438ba:	4b22      	ldr	r3, [pc, #136]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80438be:	f003 0302 	and.w	r3, r3, #2
 80438c2:	60fb      	str	r3, [r7, #12]
 80438c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80438c6:	2300      	movs	r3, #0
 80438c8:	60bb      	str	r3, [r7, #8]
 80438ca:	4b1e      	ldr	r3, [pc, #120]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80438ce:	4a1d      	ldr	r2, [pc, #116]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438d0:	f043 0308 	orr.w	r3, r3, #8
 80438d4:	6313      	str	r3, [r2, #48]	; 0x30
 80438d6:	4b1b      	ldr	r3, [pc, #108]	; (8043944 <HAL_UART_MspInit+0x14c>)
 80438d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80438da:	f003 0308 	and.w	r3, r3, #8
 80438de:	60bb      	str	r3, [r7, #8]
 80438e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80438e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80438e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80438e8:	2302      	movs	r3, #2
 80438ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80438ec:	2300      	movs	r3, #0
 80438ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80438f0:	2303      	movs	r3, #3
 80438f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80438f4:	2307      	movs	r3, #7
 80438f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80438f8:	f107 031c 	add.w	r3, r7, #28
 80438fc:	4619      	mov	r1, r3
 80438fe:	4814      	ldr	r0, [pc, #80]	; (8043950 <HAL_UART_MspInit+0x158>)
 8043900:	f000 fede 	bl	80446c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8043904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8043908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804390a:	2302      	movs	r3, #2
 804390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804390e:	2300      	movs	r3, #0
 8043910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8043912:	2303      	movs	r3, #3
 8043914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8043916:	2307      	movs	r3, #7
 8043918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 804391a:	f107 031c 	add.w	r3, r7, #28
 804391e:	4619      	mov	r1, r3
 8043920:	480c      	ldr	r0, [pc, #48]	; (8043954 <HAL_UART_MspInit+0x15c>)
 8043922:	f000 fecd 	bl	80446c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8043926:	2200      	movs	r2, #0
 8043928:	2100      	movs	r1, #0
 804392a:	2027      	movs	r0, #39	; 0x27
 804392c:	f000 fb27 	bl	8043f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8043930:	2027      	movs	r0, #39	; 0x27
 8043932:	f000 fb40 	bl	8043fb6 <HAL_NVIC_EnableIRQ>
}
 8043936:	bf00      	nop
 8043938:	3730      	adds	r7, #48	; 0x30
 804393a:	46bd      	mov	sp, r7
 804393c:	bd80      	pop	{r7, pc}
 804393e:	bf00      	nop
 8043940:	40004400 	.word	0x40004400
 8043944:	40023800 	.word	0x40023800
 8043948:	40020000 	.word	0x40020000
 804394c:	40004800 	.word	0x40004800
 8043950:	40020400 	.word	0x40020400
 8043954:	40020c00 	.word	0x40020c00

08043958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8043958:	b480      	push	{r7}
 804395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 804395c:	e7fe      	b.n	804395c <NMI_Handler+0x4>

0804395e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804395e:	b480      	push	{r7}
 8043960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8043962:	e7fe      	b.n	8043962 <HardFault_Handler+0x4>

08043964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8043964:	b480      	push	{r7}
 8043966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8043968:	e7fe      	b.n	8043968 <MemManage_Handler+0x4>

0804396a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 804396a:	b480      	push	{r7}
 804396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804396e:	e7fe      	b.n	804396e <BusFault_Handler+0x4>

08043970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8043970:	b480      	push	{r7}
 8043972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8043974:	e7fe      	b.n	8043974 <UsageFault_Handler+0x4>

08043976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8043976:	b480      	push	{r7}
 8043978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804397a:	bf00      	nop
 804397c:	46bd      	mov	sp, r7
 804397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043982:	4770      	bx	lr

08043984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8043984:	b480      	push	{r7}
 8043986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8043988:	bf00      	nop
 804398a:	46bd      	mov	sp, r7
 804398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043990:	4770      	bx	lr

08043992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8043992:	b480      	push	{r7}
 8043994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8043996:	bf00      	nop
 8043998:	46bd      	mov	sp, r7
 804399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804399e:	4770      	bx	lr

080439a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80439a0:	b580      	push	{r7, lr}
 80439a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80439a4:	f000 f9cc 	bl	8043d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80439a8:	bf00      	nop
 80439aa:	bd80      	pop	{r7, pc}

080439ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80439ac:	b580      	push	{r7, lr}
 80439ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80439b0:	4802      	ldr	r0, [pc, #8]	; (80439bc <USART2_IRQHandler+0x10>)
 80439b2:	f001 ffaf 	bl	8045914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80439b6:	bf00      	nop
 80439b8:	bd80      	pop	{r7, pc}
 80439ba:	bf00      	nop
 80439bc:	20003700 	.word	0x20003700

080439c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80439c0:	b580      	push	{r7, lr}
 80439c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80439c4:	4802      	ldr	r0, [pc, #8]	; (80439d0 <USART3_IRQHandler+0x10>)
 80439c6:	f001 ffa5 	bl	8045914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80439ca:	bf00      	nop
 80439cc:	bd80      	pop	{r7, pc}
 80439ce:	bf00      	nop
 80439d0:	20003744 	.word	0x20003744

080439d4 <HAL_UART_RxCpltCallback>:
//
//        // Indicate that new data has been received
//        data_received_flag = true;
//    }
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80439d4:	b580      	push	{r7, lr}
 80439d6:	b082      	sub	sp, #8
 80439d8:	af00      	add	r7, sp, #0
 80439da:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80439dc:	687b      	ldr	r3, [r7, #4]
 80439de:	681b      	ldr	r3, [r3, #0]
 80439e0:	4a27      	ldr	r2, [pc, #156]	; (8043a80 <HAL_UART_RxCpltCallback+0xac>)
 80439e2:	4293      	cmp	r3, r2
 80439e4:	d148      	bne.n	8043a78 <HAL_UART_RxCpltCallback+0xa4>
        // Insert the received byte into your UART buffer
        uart_buffer.data[uart_buffer.write_index] = received_byte;
 80439e6:	4b27      	ldr	r3, [pc, #156]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 80439e8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80439ec:	461a      	mov	r2, r3
 80439ee:	4b26      	ldr	r3, [pc, #152]	; (8043a88 <HAL_UART_RxCpltCallback+0xb4>)
 80439f0:	7819      	ldrb	r1, [r3, #0]
 80439f2:	4b24      	ldr	r3, [pc, #144]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 80439f4:	5499      	strb	r1, [r3, r2]
        uart_buffer.write_index++;
 80439f6:	4b23      	ldr	r3, [pc, #140]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 80439f8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80439fc:	3301      	adds	r3, #1
 80439fe:	b29a      	uxth	r2, r3
 8043a00:	4b20      	ldr	r3, [pc, #128]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a02:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100

        if (uart_buffer.write_index >= UART_BUFFER_SIZE) {
 8043a06:	4b1f      	ldr	r3, [pc, #124]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a08:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8043a0c:	2bff      	cmp	r3, #255	; 0xff
 8043a0e:	d903      	bls.n	8043a18 <HAL_UART_RxCpltCallback+0x44>
            uart_buffer.write_index = 0; // Wrap around
 8043a10:	4b1c      	ldr	r3, [pc, #112]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a12:	2200      	movs	r2, #0
 8043a14:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
        }

        // Handle buffer overflow (optional, but recommended)
        if (uart_buffer.write_index == uart_buffer.read_index) {
 8043a18:	4b1a      	ldr	r3, [pc, #104]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a1a:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 8043a1e:	4b19      	ldr	r3, [pc, #100]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a20:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8043a24:	429a      	cmp	r2, r3
 8043a26:	d110      	bne.n	8043a4a <HAL_UART_RxCpltCallback+0x76>
            // Buffer is full; handle the overflow. For now, let's reset the read index.
            uart_buffer.read_index++;
 8043a28:	4b16      	ldr	r3, [pc, #88]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a2a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8043a2e:	3301      	adds	r3, #1
 8043a30:	b29a      	uxth	r2, r3
 8043a32:	4b14      	ldr	r3, [pc, #80]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a34:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            if (uart_buffer.read_index >= UART_BUFFER_SIZE) {
 8043a38:	4b12      	ldr	r3, [pc, #72]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a3a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8043a3e:	2bff      	cmp	r3, #255	; 0xff
 8043a40:	d903      	bls.n	8043a4a <HAL_UART_RxCpltCallback+0x76>
                uart_buffer.read_index = 0;
 8043a42:	4b10      	ldr	r3, [pc, #64]	; (8043a84 <HAL_UART_RxCpltCallback+0xb0>)
 8043a44:	2200      	movs	r2, #0
 8043a46:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            }
        }

        // Process the received byte
        if (current_mode == MODE_MQTT) {
 8043a4a:	4b10      	ldr	r3, [pc, #64]	; (8043a8c <HAL_UART_RxCpltCallback+0xb8>)
 8043a4c:	781b      	ldrb	r3, [r3, #0]
 8043a4e:	2b01      	cmp	r3, #1
 8043a50:	d105      	bne.n	8043a5e <HAL_UART_RxCpltCallback+0x8a>
            handle_mqtt_byte(received_byte);
 8043a52:	4b0d      	ldr	r3, [pc, #52]	; (8043a88 <HAL_UART_RxCpltCallback+0xb4>)
 8043a54:	781b      	ldrb	r3, [r3, #0]
 8043a56:	4618      	mov	r0, r3
 8043a58:	f7fd fcfe 	bl	8041458 <handle_mqtt_byte>
 8043a5c:	e004      	b.n	8043a68 <HAL_UART_RxCpltCallback+0x94>
        } else {
            handle_default_byte(received_byte);
 8043a5e:	4b0a      	ldr	r3, [pc, #40]	; (8043a88 <HAL_UART_RxCpltCallback+0xb4>)
 8043a60:	781b      	ldrb	r3, [r3, #0]
 8043a62:	4618      	mov	r0, r3
 8043a64:	f7fd fcbe 	bl	80413e4 <handle_default_byte>
        }

        // Reactivate the UART receive interrupt
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8043a68:	2201      	movs	r2, #1
 8043a6a:	4907      	ldr	r1, [pc, #28]	; (8043a88 <HAL_UART_RxCpltCallback+0xb4>)
 8043a6c:	4808      	ldr	r0, [pc, #32]	; (8043a90 <HAL_UART_RxCpltCallback+0xbc>)
 8043a6e:	f001 ff21 	bl	80458b4 <HAL_UART_Receive_IT>

        // Indicate that new data has been received
        data_received_flag = true;
 8043a72:	4b08      	ldr	r3, [pc, #32]	; (8043a94 <HAL_UART_RxCpltCallback+0xc0>)
 8043a74:	2201      	movs	r2, #1
 8043a76:	701a      	strb	r2, [r3, #0]
    }
}
 8043a78:	bf00      	nop
 8043a7a:	3708      	adds	r7, #8
 8043a7c:	46bd      	mov	sp, r7
 8043a7e:	bd80      	pop	{r7, pc}
 8043a80:	40004400 	.word	0x40004400
 8043a84:	20000528 	.word	0x20000528
 8043a88:	20000519 	.word	0x20000519
 8043a8c:	2000062c 	.word	0x2000062c
 8043a90:	20003700 	.word	0x20003700
 8043a94:	20000518 	.word	0x20000518

08043a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8043a98:	b480      	push	{r7}
 8043a9a:	af00      	add	r7, sp, #0
  return 1;
 8043a9c:	2301      	movs	r3, #1
}
 8043a9e:	4618      	mov	r0, r3
 8043aa0:	46bd      	mov	sp, r7
 8043aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043aa6:	4770      	bx	lr

08043aa8 <_kill>:

int _kill(int pid, int sig)
{
 8043aa8:	b580      	push	{r7, lr}
 8043aaa:	b082      	sub	sp, #8
 8043aac:	af00      	add	r7, sp, #0
 8043aae:	6078      	str	r0, [r7, #4]
 8043ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8043ab2:	f004 fbf3 	bl	804829c <__errno>
 8043ab6:	4603      	mov	r3, r0
 8043ab8:	2216      	movs	r2, #22
 8043aba:	601a      	str	r2, [r3, #0]
  return -1;
 8043abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8043ac0:	4618      	mov	r0, r3
 8043ac2:	3708      	adds	r7, #8
 8043ac4:	46bd      	mov	sp, r7
 8043ac6:	bd80      	pop	{r7, pc}

08043ac8 <_exit>:

void _exit (int status)
{
 8043ac8:	b580      	push	{r7, lr}
 8043aca:	b082      	sub	sp, #8
 8043acc:	af00      	add	r7, sp, #0
 8043ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8043ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8043ad4:	6878      	ldr	r0, [r7, #4]
 8043ad6:	f7ff ffe7 	bl	8043aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8043ada:	e7fe      	b.n	8043ada <_exit+0x12>

08043adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8043adc:	b580      	push	{r7, lr}
 8043ade:	b086      	sub	sp, #24
 8043ae0:	af00      	add	r7, sp, #0
 8043ae2:	60f8      	str	r0, [r7, #12]
 8043ae4:	60b9      	str	r1, [r7, #8]
 8043ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043ae8:	2300      	movs	r3, #0
 8043aea:	617b      	str	r3, [r7, #20]
 8043aec:	e00a      	b.n	8043b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8043aee:	f3af 8000 	nop.w
 8043af2:	4601      	mov	r1, r0
 8043af4:	68bb      	ldr	r3, [r7, #8]
 8043af6:	1c5a      	adds	r2, r3, #1
 8043af8:	60ba      	str	r2, [r7, #8]
 8043afa:	b2ca      	uxtb	r2, r1
 8043afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043afe:	697b      	ldr	r3, [r7, #20]
 8043b00:	3301      	adds	r3, #1
 8043b02:	617b      	str	r3, [r7, #20]
 8043b04:	697a      	ldr	r2, [r7, #20]
 8043b06:	687b      	ldr	r3, [r7, #4]
 8043b08:	429a      	cmp	r2, r3
 8043b0a:	dbf0      	blt.n	8043aee <_read+0x12>
  }

  return len;
 8043b0c:	687b      	ldr	r3, [r7, #4]
}
 8043b0e:	4618      	mov	r0, r3
 8043b10:	3718      	adds	r7, #24
 8043b12:	46bd      	mov	sp, r7
 8043b14:	bd80      	pop	{r7, pc}

08043b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8043b16:	b580      	push	{r7, lr}
 8043b18:	b086      	sub	sp, #24
 8043b1a:	af00      	add	r7, sp, #0
 8043b1c:	60f8      	str	r0, [r7, #12]
 8043b1e:	60b9      	str	r1, [r7, #8]
 8043b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043b22:	2300      	movs	r3, #0
 8043b24:	617b      	str	r3, [r7, #20]
 8043b26:	e009      	b.n	8043b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8043b28:	68bb      	ldr	r3, [r7, #8]
 8043b2a:	1c5a      	adds	r2, r3, #1
 8043b2c:	60ba      	str	r2, [r7, #8]
 8043b2e:	781b      	ldrb	r3, [r3, #0]
 8043b30:	4618      	mov	r0, r3
 8043b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8043b36:	697b      	ldr	r3, [r7, #20]
 8043b38:	3301      	adds	r3, #1
 8043b3a:	617b      	str	r3, [r7, #20]
 8043b3c:	697a      	ldr	r2, [r7, #20]
 8043b3e:	687b      	ldr	r3, [r7, #4]
 8043b40:	429a      	cmp	r2, r3
 8043b42:	dbf1      	blt.n	8043b28 <_write+0x12>
  }
  return len;
 8043b44:	687b      	ldr	r3, [r7, #4]
}
 8043b46:	4618      	mov	r0, r3
 8043b48:	3718      	adds	r7, #24
 8043b4a:	46bd      	mov	sp, r7
 8043b4c:	bd80      	pop	{r7, pc}

08043b4e <_close>:

int _close(int file)
{
 8043b4e:	b480      	push	{r7}
 8043b50:	b083      	sub	sp, #12
 8043b52:	af00      	add	r7, sp, #0
 8043b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8043b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8043b5a:	4618      	mov	r0, r3
 8043b5c:	370c      	adds	r7, #12
 8043b5e:	46bd      	mov	sp, r7
 8043b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b64:	4770      	bx	lr

08043b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8043b66:	b480      	push	{r7}
 8043b68:	b083      	sub	sp, #12
 8043b6a:	af00      	add	r7, sp, #0
 8043b6c:	6078      	str	r0, [r7, #4]
 8043b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8043b70:	683b      	ldr	r3, [r7, #0]
 8043b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8043b76:	605a      	str	r2, [r3, #4]
  return 0;
 8043b78:	2300      	movs	r3, #0
}
 8043b7a:	4618      	mov	r0, r3
 8043b7c:	370c      	adds	r7, #12
 8043b7e:	46bd      	mov	sp, r7
 8043b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b84:	4770      	bx	lr

08043b86 <_isatty>:

int _isatty(int file)
{
 8043b86:	b480      	push	{r7}
 8043b88:	b083      	sub	sp, #12
 8043b8a:	af00      	add	r7, sp, #0
 8043b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8043b8e:	2301      	movs	r3, #1
}
 8043b90:	4618      	mov	r0, r3
 8043b92:	370c      	adds	r7, #12
 8043b94:	46bd      	mov	sp, r7
 8043b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b9a:	4770      	bx	lr

08043b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8043b9c:	b480      	push	{r7}
 8043b9e:	b085      	sub	sp, #20
 8043ba0:	af00      	add	r7, sp, #0
 8043ba2:	60f8      	str	r0, [r7, #12]
 8043ba4:	60b9      	str	r1, [r7, #8]
 8043ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8043ba8:	2300      	movs	r3, #0
}
 8043baa:	4618      	mov	r0, r3
 8043bac:	3714      	adds	r7, #20
 8043bae:	46bd      	mov	sp, r7
 8043bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043bb4:	4770      	bx	lr
	...

08043bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8043bb8:	b580      	push	{r7, lr}
 8043bba:	b086      	sub	sp, #24
 8043bbc:	af00      	add	r7, sp, #0
 8043bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8043bc0:	4a14      	ldr	r2, [pc, #80]	; (8043c14 <_sbrk+0x5c>)
 8043bc2:	4b15      	ldr	r3, [pc, #84]	; (8043c18 <_sbrk+0x60>)
 8043bc4:	1ad3      	subs	r3, r2, r3
 8043bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8043bc8:	697b      	ldr	r3, [r7, #20]
 8043bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8043bcc:	4b13      	ldr	r3, [pc, #76]	; (8043c1c <_sbrk+0x64>)
 8043bce:	681b      	ldr	r3, [r3, #0]
 8043bd0:	2b00      	cmp	r3, #0
 8043bd2:	d102      	bne.n	8043bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8043bd4:	4b11      	ldr	r3, [pc, #68]	; (8043c1c <_sbrk+0x64>)
 8043bd6:	4a12      	ldr	r2, [pc, #72]	; (8043c20 <_sbrk+0x68>)
 8043bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8043bda:	4b10      	ldr	r3, [pc, #64]	; (8043c1c <_sbrk+0x64>)
 8043bdc:	681a      	ldr	r2, [r3, #0]
 8043bde:	687b      	ldr	r3, [r7, #4]
 8043be0:	4413      	add	r3, r2
 8043be2:	693a      	ldr	r2, [r7, #16]
 8043be4:	429a      	cmp	r2, r3
 8043be6:	d207      	bcs.n	8043bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8043be8:	f004 fb58 	bl	804829c <__errno>
 8043bec:	4603      	mov	r3, r0
 8043bee:	220c      	movs	r2, #12
 8043bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8043bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8043bf6:	e009      	b.n	8043c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8043bf8:	4b08      	ldr	r3, [pc, #32]	; (8043c1c <_sbrk+0x64>)
 8043bfa:	681b      	ldr	r3, [r3, #0]
 8043bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8043bfe:	4b07      	ldr	r3, [pc, #28]	; (8043c1c <_sbrk+0x64>)
 8043c00:	681a      	ldr	r2, [r3, #0]
 8043c02:	687b      	ldr	r3, [r7, #4]
 8043c04:	4413      	add	r3, r2
 8043c06:	4a05      	ldr	r2, [pc, #20]	; (8043c1c <_sbrk+0x64>)
 8043c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8043c0a:	68fb      	ldr	r3, [r7, #12]
}
 8043c0c:	4618      	mov	r0, r3
 8043c0e:	3718      	adds	r7, #24
 8043c10:	46bd      	mov	sp, r7
 8043c12:	bd80      	pop	{r7, pc}
 8043c14:	20020000 	.word	0x20020000
 8043c18:	00000400 	.word	0x00000400
 8043c1c:	20003788 	.word	0x20003788
 8043c20:	20003900 	.word	0x20003900

08043c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8043c24:	b480      	push	{r7}
 8043c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8043c28:	4b06      	ldr	r3, [pc, #24]	; (8043c44 <SystemInit+0x20>)
 8043c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043c2e:	4a05      	ldr	r2, [pc, #20]	; (8043c44 <SystemInit+0x20>)
 8043c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8043c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8043c38:	bf00      	nop
 8043c3a:	46bd      	mov	sp, r7
 8043c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c40:	4770      	bx	lr
 8043c42:	bf00      	nop
 8043c44:	e000ed00 	.word	0xe000ed00

08043c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8043c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8043c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8043c4c:	480d      	ldr	r0, [pc, #52]	; (8043c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8043c4e:	490e      	ldr	r1, [pc, #56]	; (8043c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8043c50:	4a0e      	ldr	r2, [pc, #56]	; (8043c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8043c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8043c54:	e002      	b.n	8043c5c <LoopCopyDataInit>

08043c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8043c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8043c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8043c5a:	3304      	adds	r3, #4

08043c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8043c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8043c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8043c60:	d3f9      	bcc.n	8043c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8043c62:	4a0b      	ldr	r2, [pc, #44]	; (8043c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8043c64:	4c0b      	ldr	r4, [pc, #44]	; (8043c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8043c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8043c68:	e001      	b.n	8043c6e <LoopFillZerobss>

08043c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8043c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8043c6c:	3204      	adds	r2, #4

08043c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8043c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8043c70:	d3fb      	bcc.n	8043c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8043c72:	f7ff ffd7 	bl	8043c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8043c76:	f004 fb17 	bl	80482a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8043c7a:	f7ff fa69 	bl	8043150 <main>
  bx  lr    
 8043c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8043c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8043c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8043c88:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8043c8c:	0804b32c 	.word	0x0804b32c
  ldr r2, =_sbss
 8043c90:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8043c94:	200038fc 	.word	0x200038fc

08043c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8043c98:	e7fe      	b.n	8043c98 <ADC_IRQHandler>
	...

08043c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8043c9c:	b580      	push	{r7, lr}
 8043c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8043ca0:	4b0e      	ldr	r3, [pc, #56]	; (8043cdc <HAL_Init+0x40>)
 8043ca2:	681b      	ldr	r3, [r3, #0]
 8043ca4:	4a0d      	ldr	r2, [pc, #52]	; (8043cdc <HAL_Init+0x40>)
 8043ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8043caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8043cac:	4b0b      	ldr	r3, [pc, #44]	; (8043cdc <HAL_Init+0x40>)
 8043cae:	681b      	ldr	r3, [r3, #0]
 8043cb0:	4a0a      	ldr	r2, [pc, #40]	; (8043cdc <HAL_Init+0x40>)
 8043cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8043cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8043cb8:	4b08      	ldr	r3, [pc, #32]	; (8043cdc <HAL_Init+0x40>)
 8043cba:	681b      	ldr	r3, [r3, #0]
 8043cbc:	4a07      	ldr	r2, [pc, #28]	; (8043cdc <HAL_Init+0x40>)
 8043cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8043cc4:	2003      	movs	r0, #3
 8043cc6:	f000 f94f 	bl	8043f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8043cca:	2000      	movs	r0, #0
 8043ccc:	f000 f808 	bl	8043ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8043cd0:	f7ff fcda 	bl	8043688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8043cd4:	2300      	movs	r3, #0
}
 8043cd6:	4618      	mov	r0, r3
 8043cd8:	bd80      	pop	{r7, pc}
 8043cda:	bf00      	nop
 8043cdc:	40023c00 	.word	0x40023c00

08043ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8043ce0:	b580      	push	{r7, lr}
 8043ce2:	b082      	sub	sp, #8
 8043ce4:	af00      	add	r7, sp, #0
 8043ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8043ce8:	4b12      	ldr	r3, [pc, #72]	; (8043d34 <HAL_InitTick+0x54>)
 8043cea:	681a      	ldr	r2, [r3, #0]
 8043cec:	4b12      	ldr	r3, [pc, #72]	; (8043d38 <HAL_InitTick+0x58>)
 8043cee:	781b      	ldrb	r3, [r3, #0]
 8043cf0:	4619      	mov	r1, r3
 8043cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8043cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8043cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8043cfe:	4618      	mov	r0, r3
 8043d00:	f000 f967 	bl	8043fd2 <HAL_SYSTICK_Config>
 8043d04:	4603      	mov	r3, r0
 8043d06:	2b00      	cmp	r3, #0
 8043d08:	d001      	beq.n	8043d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8043d0a:	2301      	movs	r3, #1
 8043d0c:	e00e      	b.n	8043d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8043d0e:	687b      	ldr	r3, [r7, #4]
 8043d10:	2b0f      	cmp	r3, #15
 8043d12:	d80a      	bhi.n	8043d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8043d14:	2200      	movs	r2, #0
 8043d16:	6879      	ldr	r1, [r7, #4]
 8043d18:	f04f 30ff 	mov.w	r0, #4294967295
 8043d1c:	f000 f92f 	bl	8043f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8043d20:	4a06      	ldr	r2, [pc, #24]	; (8043d3c <HAL_InitTick+0x5c>)
 8043d22:	687b      	ldr	r3, [r7, #4]
 8043d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8043d26:	2300      	movs	r3, #0
 8043d28:	e000      	b.n	8043d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8043d2a:	2301      	movs	r3, #1
}
 8043d2c:	4618      	mov	r0, r3
 8043d2e:	3708      	adds	r7, #8
 8043d30:	46bd      	mov	sp, r7
 8043d32:	bd80      	pop	{r7, pc}
 8043d34:	20000024 	.word	0x20000024
 8043d38:	2000002c 	.word	0x2000002c
 8043d3c:	20000028 	.word	0x20000028

08043d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8043d40:	b480      	push	{r7}
 8043d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8043d44:	4b06      	ldr	r3, [pc, #24]	; (8043d60 <HAL_IncTick+0x20>)
 8043d46:	781b      	ldrb	r3, [r3, #0]
 8043d48:	461a      	mov	r2, r3
 8043d4a:	4b06      	ldr	r3, [pc, #24]	; (8043d64 <HAL_IncTick+0x24>)
 8043d4c:	681b      	ldr	r3, [r3, #0]
 8043d4e:	4413      	add	r3, r2
 8043d50:	4a04      	ldr	r2, [pc, #16]	; (8043d64 <HAL_IncTick+0x24>)
 8043d52:	6013      	str	r3, [r2, #0]
}
 8043d54:	bf00      	nop
 8043d56:	46bd      	mov	sp, r7
 8043d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d5c:	4770      	bx	lr
 8043d5e:	bf00      	nop
 8043d60:	2000002c 	.word	0x2000002c
 8043d64:	2000378c 	.word	0x2000378c

08043d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8043d68:	b480      	push	{r7}
 8043d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8043d6c:	4b03      	ldr	r3, [pc, #12]	; (8043d7c <HAL_GetTick+0x14>)
 8043d6e:	681b      	ldr	r3, [r3, #0]
}
 8043d70:	4618      	mov	r0, r3
 8043d72:	46bd      	mov	sp, r7
 8043d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d78:	4770      	bx	lr
 8043d7a:	bf00      	nop
 8043d7c:	2000378c 	.word	0x2000378c

08043d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8043d80:	b580      	push	{r7, lr}
 8043d82:	b084      	sub	sp, #16
 8043d84:	af00      	add	r7, sp, #0
 8043d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8043d88:	f7ff ffee 	bl	8043d68 <HAL_GetTick>
 8043d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8043d8e:	687b      	ldr	r3, [r7, #4]
 8043d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8043d92:	68fb      	ldr	r3, [r7, #12]
 8043d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043d98:	d005      	beq.n	8043da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8043d9a:	4b0a      	ldr	r3, [pc, #40]	; (8043dc4 <HAL_Delay+0x44>)
 8043d9c:	781b      	ldrb	r3, [r3, #0]
 8043d9e:	461a      	mov	r2, r3
 8043da0:	68fb      	ldr	r3, [r7, #12]
 8043da2:	4413      	add	r3, r2
 8043da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8043da6:	bf00      	nop
 8043da8:	f7ff ffde 	bl	8043d68 <HAL_GetTick>
 8043dac:	4602      	mov	r2, r0
 8043dae:	68bb      	ldr	r3, [r7, #8]
 8043db0:	1ad3      	subs	r3, r2, r3
 8043db2:	68fa      	ldr	r2, [r7, #12]
 8043db4:	429a      	cmp	r2, r3
 8043db6:	d8f7      	bhi.n	8043da8 <HAL_Delay+0x28>
  {
  }
}
 8043db8:	bf00      	nop
 8043dba:	bf00      	nop
 8043dbc:	3710      	adds	r7, #16
 8043dbe:	46bd      	mov	sp, r7
 8043dc0:	bd80      	pop	{r7, pc}
 8043dc2:	bf00      	nop
 8043dc4:	2000002c 	.word	0x2000002c

08043dc8 <__NVIC_SetPriorityGrouping>:
{
 8043dc8:	b480      	push	{r7}
 8043dca:	b085      	sub	sp, #20
 8043dcc:	af00      	add	r7, sp, #0
 8043dce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8043dd0:	687b      	ldr	r3, [r7, #4]
 8043dd2:	f003 0307 	and.w	r3, r3, #7
 8043dd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043dd8:	4b0c      	ldr	r3, [pc, #48]	; (8043e0c <__NVIC_SetPriorityGrouping+0x44>)
 8043dda:	68db      	ldr	r3, [r3, #12]
 8043ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8043dde:	68ba      	ldr	r2, [r7, #8]
 8043de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8043de4:	4013      	ands	r3, r2
 8043de6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043de8:	68fb      	ldr	r3, [r7, #12]
 8043dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8043dec:	68bb      	ldr	r3, [r7, #8]
 8043dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8043df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8043df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8043dfa:	4a04      	ldr	r2, [pc, #16]	; (8043e0c <__NVIC_SetPriorityGrouping+0x44>)
 8043dfc:	68bb      	ldr	r3, [r7, #8]
 8043dfe:	60d3      	str	r3, [r2, #12]
}
 8043e00:	bf00      	nop
 8043e02:	3714      	adds	r7, #20
 8043e04:	46bd      	mov	sp, r7
 8043e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e0a:	4770      	bx	lr
 8043e0c:	e000ed00 	.word	0xe000ed00

08043e10 <__NVIC_GetPriorityGrouping>:
{
 8043e10:	b480      	push	{r7}
 8043e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8043e14:	4b04      	ldr	r3, [pc, #16]	; (8043e28 <__NVIC_GetPriorityGrouping+0x18>)
 8043e16:	68db      	ldr	r3, [r3, #12]
 8043e18:	0a1b      	lsrs	r3, r3, #8
 8043e1a:	f003 0307 	and.w	r3, r3, #7
}
 8043e1e:	4618      	mov	r0, r3
 8043e20:	46bd      	mov	sp, r7
 8043e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e26:	4770      	bx	lr
 8043e28:	e000ed00 	.word	0xe000ed00

08043e2c <__NVIC_EnableIRQ>:
{
 8043e2c:	b480      	push	{r7}
 8043e2e:	b083      	sub	sp, #12
 8043e30:	af00      	add	r7, sp, #0
 8043e32:	4603      	mov	r3, r0
 8043e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8043e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043e3a:	2b00      	cmp	r3, #0
 8043e3c:	db0b      	blt.n	8043e56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8043e3e:	79fb      	ldrb	r3, [r7, #7]
 8043e40:	f003 021f 	and.w	r2, r3, #31
 8043e44:	4907      	ldr	r1, [pc, #28]	; (8043e64 <__NVIC_EnableIRQ+0x38>)
 8043e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043e4a:	095b      	lsrs	r3, r3, #5
 8043e4c:	2001      	movs	r0, #1
 8043e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8043e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8043e56:	bf00      	nop
 8043e58:	370c      	adds	r7, #12
 8043e5a:	46bd      	mov	sp, r7
 8043e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e60:	4770      	bx	lr
 8043e62:	bf00      	nop
 8043e64:	e000e100 	.word	0xe000e100

08043e68 <__NVIC_SetPriority>:
{
 8043e68:	b480      	push	{r7}
 8043e6a:	b083      	sub	sp, #12
 8043e6c:	af00      	add	r7, sp, #0
 8043e6e:	4603      	mov	r3, r0
 8043e70:	6039      	str	r1, [r7, #0]
 8043e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8043e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043e78:	2b00      	cmp	r3, #0
 8043e7a:	db0a      	blt.n	8043e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043e7c:	683b      	ldr	r3, [r7, #0]
 8043e7e:	b2da      	uxtb	r2, r3
 8043e80:	490c      	ldr	r1, [pc, #48]	; (8043eb4 <__NVIC_SetPriority+0x4c>)
 8043e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043e86:	0112      	lsls	r2, r2, #4
 8043e88:	b2d2      	uxtb	r2, r2
 8043e8a:	440b      	add	r3, r1
 8043e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8043e90:	e00a      	b.n	8043ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043e92:	683b      	ldr	r3, [r7, #0]
 8043e94:	b2da      	uxtb	r2, r3
 8043e96:	4908      	ldr	r1, [pc, #32]	; (8043eb8 <__NVIC_SetPriority+0x50>)
 8043e98:	79fb      	ldrb	r3, [r7, #7]
 8043e9a:	f003 030f 	and.w	r3, r3, #15
 8043e9e:	3b04      	subs	r3, #4
 8043ea0:	0112      	lsls	r2, r2, #4
 8043ea2:	b2d2      	uxtb	r2, r2
 8043ea4:	440b      	add	r3, r1
 8043ea6:	761a      	strb	r2, [r3, #24]
}
 8043ea8:	bf00      	nop
 8043eaa:	370c      	adds	r7, #12
 8043eac:	46bd      	mov	sp, r7
 8043eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eb2:	4770      	bx	lr
 8043eb4:	e000e100 	.word	0xe000e100
 8043eb8:	e000ed00 	.word	0xe000ed00

08043ebc <NVIC_EncodePriority>:
{
 8043ebc:	b480      	push	{r7}
 8043ebe:	b089      	sub	sp, #36	; 0x24
 8043ec0:	af00      	add	r7, sp, #0
 8043ec2:	60f8      	str	r0, [r7, #12]
 8043ec4:	60b9      	str	r1, [r7, #8]
 8043ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8043ec8:	68fb      	ldr	r3, [r7, #12]
 8043eca:	f003 0307 	and.w	r3, r3, #7
 8043ece:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043ed0:	69fb      	ldr	r3, [r7, #28]
 8043ed2:	f1c3 0307 	rsb	r3, r3, #7
 8043ed6:	2b04      	cmp	r3, #4
 8043ed8:	bf28      	it	cs
 8043eda:	2304      	movcs	r3, #4
 8043edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8043ede:	69fb      	ldr	r3, [r7, #28]
 8043ee0:	3304      	adds	r3, #4
 8043ee2:	2b06      	cmp	r3, #6
 8043ee4:	d902      	bls.n	8043eec <NVIC_EncodePriority+0x30>
 8043ee6:	69fb      	ldr	r3, [r7, #28]
 8043ee8:	3b03      	subs	r3, #3
 8043eea:	e000      	b.n	8043eee <NVIC_EncodePriority+0x32>
 8043eec:	2300      	movs	r3, #0
 8043eee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8043ef4:	69bb      	ldr	r3, [r7, #24]
 8043ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8043efa:	43da      	mvns	r2, r3
 8043efc:	68bb      	ldr	r3, [r7, #8]
 8043efe:	401a      	ands	r2, r3
 8043f00:	697b      	ldr	r3, [r7, #20]
 8043f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8043f04:	f04f 31ff 	mov.w	r1, #4294967295
 8043f08:	697b      	ldr	r3, [r7, #20]
 8043f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8043f0e:	43d9      	mvns	r1, r3
 8043f10:	687b      	ldr	r3, [r7, #4]
 8043f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043f14:	4313      	orrs	r3, r2
}
 8043f16:	4618      	mov	r0, r3
 8043f18:	3724      	adds	r7, #36	; 0x24
 8043f1a:	46bd      	mov	sp, r7
 8043f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f20:	4770      	bx	lr
	...

08043f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8043f24:	b580      	push	{r7, lr}
 8043f26:	b082      	sub	sp, #8
 8043f28:	af00      	add	r7, sp, #0
 8043f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8043f2c:	687b      	ldr	r3, [r7, #4]
 8043f2e:	3b01      	subs	r3, #1
 8043f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8043f34:	d301      	bcc.n	8043f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8043f36:	2301      	movs	r3, #1
 8043f38:	e00f      	b.n	8043f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8043f3a:	4a0a      	ldr	r2, [pc, #40]	; (8043f64 <SysTick_Config+0x40>)
 8043f3c:	687b      	ldr	r3, [r7, #4]
 8043f3e:	3b01      	subs	r3, #1
 8043f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8043f42:	210f      	movs	r1, #15
 8043f44:	f04f 30ff 	mov.w	r0, #4294967295
 8043f48:	f7ff ff8e 	bl	8043e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8043f4c:	4b05      	ldr	r3, [pc, #20]	; (8043f64 <SysTick_Config+0x40>)
 8043f4e:	2200      	movs	r2, #0
 8043f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8043f52:	4b04      	ldr	r3, [pc, #16]	; (8043f64 <SysTick_Config+0x40>)
 8043f54:	2207      	movs	r2, #7
 8043f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8043f58:	2300      	movs	r3, #0
}
 8043f5a:	4618      	mov	r0, r3
 8043f5c:	3708      	adds	r7, #8
 8043f5e:	46bd      	mov	sp, r7
 8043f60:	bd80      	pop	{r7, pc}
 8043f62:	bf00      	nop
 8043f64:	e000e010 	.word	0xe000e010

08043f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8043f68:	b580      	push	{r7, lr}
 8043f6a:	b082      	sub	sp, #8
 8043f6c:	af00      	add	r7, sp, #0
 8043f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8043f70:	6878      	ldr	r0, [r7, #4]
 8043f72:	f7ff ff29 	bl	8043dc8 <__NVIC_SetPriorityGrouping>
}
 8043f76:	bf00      	nop
 8043f78:	3708      	adds	r7, #8
 8043f7a:	46bd      	mov	sp, r7
 8043f7c:	bd80      	pop	{r7, pc}

08043f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8043f7e:	b580      	push	{r7, lr}
 8043f80:	b086      	sub	sp, #24
 8043f82:	af00      	add	r7, sp, #0
 8043f84:	4603      	mov	r3, r0
 8043f86:	60b9      	str	r1, [r7, #8]
 8043f88:	607a      	str	r2, [r7, #4]
 8043f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8043f8c:	2300      	movs	r3, #0
 8043f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8043f90:	f7ff ff3e 	bl	8043e10 <__NVIC_GetPriorityGrouping>
 8043f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8043f96:	687a      	ldr	r2, [r7, #4]
 8043f98:	68b9      	ldr	r1, [r7, #8]
 8043f9a:	6978      	ldr	r0, [r7, #20]
 8043f9c:	f7ff ff8e 	bl	8043ebc <NVIC_EncodePriority>
 8043fa0:	4602      	mov	r2, r0
 8043fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8043fa6:	4611      	mov	r1, r2
 8043fa8:	4618      	mov	r0, r3
 8043faa:	f7ff ff5d 	bl	8043e68 <__NVIC_SetPriority>
}
 8043fae:	bf00      	nop
 8043fb0:	3718      	adds	r7, #24
 8043fb2:	46bd      	mov	sp, r7
 8043fb4:	bd80      	pop	{r7, pc}

08043fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8043fb6:	b580      	push	{r7, lr}
 8043fb8:	b082      	sub	sp, #8
 8043fba:	af00      	add	r7, sp, #0
 8043fbc:	4603      	mov	r3, r0
 8043fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8043fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043fc4:	4618      	mov	r0, r3
 8043fc6:	f7ff ff31 	bl	8043e2c <__NVIC_EnableIRQ>
}
 8043fca:	bf00      	nop
 8043fcc:	3708      	adds	r7, #8
 8043fce:	46bd      	mov	sp, r7
 8043fd0:	bd80      	pop	{r7, pc}

08043fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8043fd2:	b580      	push	{r7, lr}
 8043fd4:	b082      	sub	sp, #8
 8043fd6:	af00      	add	r7, sp, #0
 8043fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8043fda:	6878      	ldr	r0, [r7, #4]
 8043fdc:	f7ff ffa2 	bl	8043f24 <SysTick_Config>
 8043fe0:	4603      	mov	r3, r0
}
 8043fe2:	4618      	mov	r0, r3
 8043fe4:	3708      	adds	r7, #8
 8043fe6:	46bd      	mov	sp, r7
 8043fe8:	bd80      	pop	{r7, pc}

08043fea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8043fea:	b580      	push	{r7, lr}
 8043fec:	b084      	sub	sp, #16
 8043fee:	af00      	add	r7, sp, #0
 8043ff0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8043ff2:	687b      	ldr	r3, [r7, #4]
 8043ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043ff6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8043ff8:	f7ff feb6 	bl	8043d68 <HAL_GetTick>
 8043ffc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8043ffe:	687b      	ldr	r3, [r7, #4]
 8044000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8044004:	b2db      	uxtb	r3, r3
 8044006:	2b02      	cmp	r3, #2
 8044008:	d008      	beq.n	804401c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 804400a:	687b      	ldr	r3, [r7, #4]
 804400c:	2280      	movs	r2, #128	; 0x80
 804400e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8044010:	687b      	ldr	r3, [r7, #4]
 8044012:	2200      	movs	r2, #0
 8044014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8044018:	2301      	movs	r3, #1
 804401a:	e052      	b.n	80440c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 804401c:	687b      	ldr	r3, [r7, #4]
 804401e:	681b      	ldr	r3, [r3, #0]
 8044020:	681a      	ldr	r2, [r3, #0]
 8044022:	687b      	ldr	r3, [r7, #4]
 8044024:	681b      	ldr	r3, [r3, #0]
 8044026:	f022 0216 	bic.w	r2, r2, #22
 804402a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 804402c:	687b      	ldr	r3, [r7, #4]
 804402e:	681b      	ldr	r3, [r3, #0]
 8044030:	695a      	ldr	r2, [r3, #20]
 8044032:	687b      	ldr	r3, [r7, #4]
 8044034:	681b      	ldr	r3, [r3, #0]
 8044036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804403a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 804403c:	687b      	ldr	r3, [r7, #4]
 804403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044040:	2b00      	cmp	r3, #0
 8044042:	d103      	bne.n	804404c <HAL_DMA_Abort+0x62>
 8044044:	687b      	ldr	r3, [r7, #4]
 8044046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8044048:	2b00      	cmp	r3, #0
 804404a:	d007      	beq.n	804405c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 804404c:	687b      	ldr	r3, [r7, #4]
 804404e:	681b      	ldr	r3, [r3, #0]
 8044050:	681a      	ldr	r2, [r3, #0]
 8044052:	687b      	ldr	r3, [r7, #4]
 8044054:	681b      	ldr	r3, [r3, #0]
 8044056:	f022 0208 	bic.w	r2, r2, #8
 804405a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 804405c:	687b      	ldr	r3, [r7, #4]
 804405e:	681b      	ldr	r3, [r3, #0]
 8044060:	681a      	ldr	r2, [r3, #0]
 8044062:	687b      	ldr	r3, [r7, #4]
 8044064:	681b      	ldr	r3, [r3, #0]
 8044066:	f022 0201 	bic.w	r2, r2, #1
 804406a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 804406c:	e013      	b.n	8044096 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 804406e:	f7ff fe7b 	bl	8043d68 <HAL_GetTick>
 8044072:	4602      	mov	r2, r0
 8044074:	68bb      	ldr	r3, [r7, #8]
 8044076:	1ad3      	subs	r3, r2, r3
 8044078:	2b05      	cmp	r3, #5
 804407a:	d90c      	bls.n	8044096 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 804407c:	687b      	ldr	r3, [r7, #4]
 804407e:	2220      	movs	r2, #32
 8044080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8044082:	687b      	ldr	r3, [r7, #4]
 8044084:	2203      	movs	r2, #3
 8044086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 804408a:	687b      	ldr	r3, [r7, #4]
 804408c:	2200      	movs	r2, #0
 804408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8044092:	2303      	movs	r3, #3
 8044094:	e015      	b.n	80440c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8044096:	687b      	ldr	r3, [r7, #4]
 8044098:	681b      	ldr	r3, [r3, #0]
 804409a:	681b      	ldr	r3, [r3, #0]
 804409c:	f003 0301 	and.w	r3, r3, #1
 80440a0:	2b00      	cmp	r3, #0
 80440a2:	d1e4      	bne.n	804406e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80440a4:	687b      	ldr	r3, [r7, #4]
 80440a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80440a8:	223f      	movs	r2, #63	; 0x3f
 80440aa:	409a      	lsls	r2, r3
 80440ac:	68fb      	ldr	r3, [r7, #12]
 80440ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80440b0:	687b      	ldr	r3, [r7, #4]
 80440b2:	2201      	movs	r2, #1
 80440b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80440b8:	687b      	ldr	r3, [r7, #4]
 80440ba:	2200      	movs	r2, #0
 80440bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80440c0:	2300      	movs	r3, #0
}
 80440c2:	4618      	mov	r0, r3
 80440c4:	3710      	adds	r7, #16
 80440c6:	46bd      	mov	sp, r7
 80440c8:	bd80      	pop	{r7, pc}

080440ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80440ca:	b480      	push	{r7}
 80440cc:	b083      	sub	sp, #12
 80440ce:	af00      	add	r7, sp, #0
 80440d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80440d2:	687b      	ldr	r3, [r7, #4]
 80440d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80440d8:	b2db      	uxtb	r3, r3
 80440da:	2b02      	cmp	r3, #2
 80440dc:	d004      	beq.n	80440e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80440de:	687b      	ldr	r3, [r7, #4]
 80440e0:	2280      	movs	r2, #128	; 0x80
 80440e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80440e4:	2301      	movs	r3, #1
 80440e6:	e00c      	b.n	8044102 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80440e8:	687b      	ldr	r3, [r7, #4]
 80440ea:	2205      	movs	r2, #5
 80440ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80440f0:	687b      	ldr	r3, [r7, #4]
 80440f2:	681b      	ldr	r3, [r3, #0]
 80440f4:	681a      	ldr	r2, [r3, #0]
 80440f6:	687b      	ldr	r3, [r7, #4]
 80440f8:	681b      	ldr	r3, [r3, #0]
 80440fa:	f022 0201 	bic.w	r2, r2, #1
 80440fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8044100:	2300      	movs	r3, #0
}
 8044102:	4618      	mov	r0, r3
 8044104:	370c      	adds	r7, #12
 8044106:	46bd      	mov	sp, r7
 8044108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804410c:	4770      	bx	lr
	...

08044110 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8044110:	b580      	push	{r7, lr}
 8044112:	b086      	sub	sp, #24
 8044114:	af00      	add	r7, sp, #0
 8044116:	60f8      	str	r0, [r7, #12]
 8044118:	60b9      	str	r1, [r7, #8]
 804411a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 804411e:	2301      	movs	r3, #1
 8044120:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8044122:	4b23      	ldr	r3, [pc, #140]	; (80441b0 <HAL_FLASH_Program+0xa0>)
 8044124:	7e1b      	ldrb	r3, [r3, #24]
 8044126:	2b01      	cmp	r3, #1
 8044128:	d101      	bne.n	804412e <HAL_FLASH_Program+0x1e>
 804412a:	2302      	movs	r3, #2
 804412c:	e03b      	b.n	80441a6 <HAL_FLASH_Program+0x96>
 804412e:	4b20      	ldr	r3, [pc, #128]	; (80441b0 <HAL_FLASH_Program+0xa0>)
 8044130:	2201      	movs	r2, #1
 8044132:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044134:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044138:	f000 f870 	bl	804421c <FLASH_WaitForLastOperation>
 804413c:	4603      	mov	r3, r0
 804413e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8044140:	7dfb      	ldrb	r3, [r7, #23]
 8044142:	2b00      	cmp	r3, #0
 8044144:	d12b      	bne.n	804419e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8044146:	68fb      	ldr	r3, [r7, #12]
 8044148:	2b00      	cmp	r3, #0
 804414a:	d105      	bne.n	8044158 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 804414c:	783b      	ldrb	r3, [r7, #0]
 804414e:	4619      	mov	r1, r3
 8044150:	68b8      	ldr	r0, [r7, #8]
 8044152:	f000 f91b 	bl	804438c <FLASH_Program_Byte>
 8044156:	e016      	b.n	8044186 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8044158:	68fb      	ldr	r3, [r7, #12]
 804415a:	2b01      	cmp	r3, #1
 804415c:	d105      	bne.n	804416a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 804415e:	883b      	ldrh	r3, [r7, #0]
 8044160:	4619      	mov	r1, r3
 8044162:	68b8      	ldr	r0, [r7, #8]
 8044164:	f000 f8ee 	bl	8044344 <FLASH_Program_HalfWord>
 8044168:	e00d      	b.n	8044186 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 804416a:	68fb      	ldr	r3, [r7, #12]
 804416c:	2b02      	cmp	r3, #2
 804416e:	d105      	bne.n	804417c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8044170:	683b      	ldr	r3, [r7, #0]
 8044172:	4619      	mov	r1, r3
 8044174:	68b8      	ldr	r0, [r7, #8]
 8044176:	f000 f8c3 	bl	8044300 <FLASH_Program_Word>
 804417a:	e004      	b.n	8044186 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 804417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8044180:	68b8      	ldr	r0, [r7, #8]
 8044182:	f000 f88b 	bl	804429c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044186:	f24c 3050 	movw	r0, #50000	; 0xc350
 804418a:	f000 f847 	bl	804421c <FLASH_WaitForLastOperation>
 804418e:	4603      	mov	r3, r0
 8044190:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8044192:	4b08      	ldr	r3, [pc, #32]	; (80441b4 <HAL_FLASH_Program+0xa4>)
 8044194:	691b      	ldr	r3, [r3, #16]
 8044196:	4a07      	ldr	r2, [pc, #28]	; (80441b4 <HAL_FLASH_Program+0xa4>)
 8044198:	f023 0301 	bic.w	r3, r3, #1
 804419c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 804419e:	4b04      	ldr	r3, [pc, #16]	; (80441b0 <HAL_FLASH_Program+0xa0>)
 80441a0:	2200      	movs	r2, #0
 80441a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80441a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80441a6:	4618      	mov	r0, r3
 80441a8:	3718      	adds	r7, #24
 80441aa:	46bd      	mov	sp, r7
 80441ac:	bd80      	pop	{r7, pc}
 80441ae:	bf00      	nop
 80441b0:	20003790 	.word	0x20003790
 80441b4:	40023c00 	.word	0x40023c00

080441b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80441b8:	b480      	push	{r7}
 80441ba:	b083      	sub	sp, #12
 80441bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80441be:	2300      	movs	r3, #0
 80441c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80441c2:	4b0b      	ldr	r3, [pc, #44]	; (80441f0 <HAL_FLASH_Unlock+0x38>)
 80441c4:	691b      	ldr	r3, [r3, #16]
 80441c6:	2b00      	cmp	r3, #0
 80441c8:	da0b      	bge.n	80441e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80441ca:	4b09      	ldr	r3, [pc, #36]	; (80441f0 <HAL_FLASH_Unlock+0x38>)
 80441cc:	4a09      	ldr	r2, [pc, #36]	; (80441f4 <HAL_FLASH_Unlock+0x3c>)
 80441ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80441d0:	4b07      	ldr	r3, [pc, #28]	; (80441f0 <HAL_FLASH_Unlock+0x38>)
 80441d2:	4a09      	ldr	r2, [pc, #36]	; (80441f8 <HAL_FLASH_Unlock+0x40>)
 80441d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80441d6:	4b06      	ldr	r3, [pc, #24]	; (80441f0 <HAL_FLASH_Unlock+0x38>)
 80441d8:	691b      	ldr	r3, [r3, #16]
 80441da:	2b00      	cmp	r3, #0
 80441dc:	da01      	bge.n	80441e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80441de:	2301      	movs	r3, #1
 80441e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80441e2:	79fb      	ldrb	r3, [r7, #7]
}
 80441e4:	4618      	mov	r0, r3
 80441e6:	370c      	adds	r7, #12
 80441e8:	46bd      	mov	sp, r7
 80441ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441ee:	4770      	bx	lr
 80441f0:	40023c00 	.word	0x40023c00
 80441f4:	45670123 	.word	0x45670123
 80441f8:	cdef89ab 	.word	0xcdef89ab

080441fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80441fc:	b480      	push	{r7}
 80441fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8044200:	4b05      	ldr	r3, [pc, #20]	; (8044218 <HAL_FLASH_Lock+0x1c>)
 8044202:	691b      	ldr	r3, [r3, #16]
 8044204:	4a04      	ldr	r2, [pc, #16]	; (8044218 <HAL_FLASH_Lock+0x1c>)
 8044206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804420a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 804420c:	2300      	movs	r3, #0
}
 804420e:	4618      	mov	r0, r3
 8044210:	46bd      	mov	sp, r7
 8044212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044216:	4770      	bx	lr
 8044218:	40023c00 	.word	0x40023c00

0804421c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 804421c:	b580      	push	{r7, lr}
 804421e:	b084      	sub	sp, #16
 8044220:	af00      	add	r7, sp, #0
 8044222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8044224:	2300      	movs	r3, #0
 8044226:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8044228:	4b1a      	ldr	r3, [pc, #104]	; (8044294 <FLASH_WaitForLastOperation+0x78>)
 804422a:	2200      	movs	r2, #0
 804422c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 804422e:	f7ff fd9b 	bl	8043d68 <HAL_GetTick>
 8044232:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044234:	e010      	b.n	8044258 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8044236:	687b      	ldr	r3, [r7, #4]
 8044238:	f1b3 3fff 	cmp.w	r3, #4294967295
 804423c:	d00c      	beq.n	8044258 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 804423e:	687b      	ldr	r3, [r7, #4]
 8044240:	2b00      	cmp	r3, #0
 8044242:	d007      	beq.n	8044254 <FLASH_WaitForLastOperation+0x38>
 8044244:	f7ff fd90 	bl	8043d68 <HAL_GetTick>
 8044248:	4602      	mov	r2, r0
 804424a:	68fb      	ldr	r3, [r7, #12]
 804424c:	1ad3      	subs	r3, r2, r3
 804424e:	687a      	ldr	r2, [r7, #4]
 8044250:	429a      	cmp	r2, r3
 8044252:	d201      	bcs.n	8044258 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8044254:	2303      	movs	r3, #3
 8044256:	e019      	b.n	804428c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8044258:	4b0f      	ldr	r3, [pc, #60]	; (8044298 <FLASH_WaitForLastOperation+0x7c>)
 804425a:	68db      	ldr	r3, [r3, #12]
 804425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044260:	2b00      	cmp	r3, #0
 8044262:	d1e8      	bne.n	8044236 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8044264:	4b0c      	ldr	r3, [pc, #48]	; (8044298 <FLASH_WaitForLastOperation+0x7c>)
 8044266:	68db      	ldr	r3, [r3, #12]
 8044268:	f003 0301 	and.w	r3, r3, #1
 804426c:	2b00      	cmp	r3, #0
 804426e:	d002      	beq.n	8044276 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8044270:	4b09      	ldr	r3, [pc, #36]	; (8044298 <FLASH_WaitForLastOperation+0x7c>)
 8044272:	2201      	movs	r2, #1
 8044274:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8044276:	4b08      	ldr	r3, [pc, #32]	; (8044298 <FLASH_WaitForLastOperation+0x7c>)
 8044278:	68db      	ldr	r3, [r3, #12]
 804427a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 804427e:	2b00      	cmp	r3, #0
 8044280:	d003      	beq.n	804428a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8044282:	f000 f8a5 	bl	80443d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8044286:	2301      	movs	r3, #1
 8044288:	e000      	b.n	804428c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 804428a:	2300      	movs	r3, #0
  
}  
 804428c:	4618      	mov	r0, r3
 804428e:	3710      	adds	r7, #16
 8044290:	46bd      	mov	sp, r7
 8044292:	bd80      	pop	{r7, pc}
 8044294:	20003790 	.word	0x20003790
 8044298:	40023c00 	.word	0x40023c00

0804429c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 804429c:	b480      	push	{r7}
 804429e:	b085      	sub	sp, #20
 80442a0:	af00      	add	r7, sp, #0
 80442a2:	60f8      	str	r0, [r7, #12]
 80442a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80442a8:	4b14      	ldr	r3, [pc, #80]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442aa:	691b      	ldr	r3, [r3, #16]
 80442ac:	4a13      	ldr	r2, [pc, #76]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80442b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80442b4:	4b11      	ldr	r3, [pc, #68]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442b6:	691b      	ldr	r3, [r3, #16]
 80442b8:	4a10      	ldr	r2, [pc, #64]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80442be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80442c0:	4b0e      	ldr	r3, [pc, #56]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442c2:	691b      	ldr	r3, [r3, #16]
 80442c4:	4a0d      	ldr	r2, [pc, #52]	; (80442fc <FLASH_Program_DoubleWord+0x60>)
 80442c6:	f043 0301 	orr.w	r3, r3, #1
 80442ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80442cc:	68fb      	ldr	r3, [r7, #12]
 80442ce:	683a      	ldr	r2, [r7, #0]
 80442d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80442d2:	f3bf 8f6f 	isb	sy
}
 80442d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80442d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80442dc:	f04f 0200 	mov.w	r2, #0
 80442e0:	f04f 0300 	mov.w	r3, #0
 80442e4:	000a      	movs	r2, r1
 80442e6:	2300      	movs	r3, #0
 80442e8:	68f9      	ldr	r1, [r7, #12]
 80442ea:	3104      	adds	r1, #4
 80442ec:	4613      	mov	r3, r2
 80442ee:	600b      	str	r3, [r1, #0]
}
 80442f0:	bf00      	nop
 80442f2:	3714      	adds	r7, #20
 80442f4:	46bd      	mov	sp, r7
 80442f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442fa:	4770      	bx	lr
 80442fc:	40023c00 	.word	0x40023c00

08044300 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8044300:	b480      	push	{r7}
 8044302:	b083      	sub	sp, #12
 8044304:	af00      	add	r7, sp, #0
 8044306:	6078      	str	r0, [r7, #4]
 8044308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804430a:	4b0d      	ldr	r3, [pc, #52]	; (8044340 <FLASH_Program_Word+0x40>)
 804430c:	691b      	ldr	r3, [r3, #16]
 804430e:	4a0c      	ldr	r2, [pc, #48]	; (8044340 <FLASH_Program_Word+0x40>)
 8044310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044314:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8044316:	4b0a      	ldr	r3, [pc, #40]	; (8044340 <FLASH_Program_Word+0x40>)
 8044318:	691b      	ldr	r3, [r3, #16]
 804431a:	4a09      	ldr	r2, [pc, #36]	; (8044340 <FLASH_Program_Word+0x40>)
 804431c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044322:	4b07      	ldr	r3, [pc, #28]	; (8044340 <FLASH_Program_Word+0x40>)
 8044324:	691b      	ldr	r3, [r3, #16]
 8044326:	4a06      	ldr	r2, [pc, #24]	; (8044340 <FLASH_Program_Word+0x40>)
 8044328:	f043 0301 	orr.w	r3, r3, #1
 804432c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 804432e:	687b      	ldr	r3, [r7, #4]
 8044330:	683a      	ldr	r2, [r7, #0]
 8044332:	601a      	str	r2, [r3, #0]
}
 8044334:	bf00      	nop
 8044336:	370c      	adds	r7, #12
 8044338:	46bd      	mov	sp, r7
 804433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804433e:	4770      	bx	lr
 8044340:	40023c00 	.word	0x40023c00

08044344 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8044344:	b480      	push	{r7}
 8044346:	b083      	sub	sp, #12
 8044348:	af00      	add	r7, sp, #0
 804434a:	6078      	str	r0, [r7, #4]
 804434c:	460b      	mov	r3, r1
 804434e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044350:	4b0d      	ldr	r3, [pc, #52]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 8044352:	691b      	ldr	r3, [r3, #16]
 8044354:	4a0c      	ldr	r2, [pc, #48]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 8044356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804435a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 804435c:	4b0a      	ldr	r3, [pc, #40]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 804435e:	691b      	ldr	r3, [r3, #16]
 8044360:	4a09      	ldr	r2, [pc, #36]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 8044362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8044368:	4b07      	ldr	r3, [pc, #28]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 804436a:	691b      	ldr	r3, [r3, #16]
 804436c:	4a06      	ldr	r2, [pc, #24]	; (8044388 <FLASH_Program_HalfWord+0x44>)
 804436e:	f043 0301 	orr.w	r3, r3, #1
 8044372:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8044374:	687b      	ldr	r3, [r7, #4]
 8044376:	887a      	ldrh	r2, [r7, #2]
 8044378:	801a      	strh	r2, [r3, #0]
}
 804437a:	bf00      	nop
 804437c:	370c      	adds	r7, #12
 804437e:	46bd      	mov	sp, r7
 8044380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044384:	4770      	bx	lr
 8044386:	bf00      	nop
 8044388:	40023c00 	.word	0x40023c00

0804438c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 804438c:	b480      	push	{r7}
 804438e:	b083      	sub	sp, #12
 8044390:	af00      	add	r7, sp, #0
 8044392:	6078      	str	r0, [r7, #4]
 8044394:	460b      	mov	r3, r1
 8044396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044398:	4b0c      	ldr	r3, [pc, #48]	; (80443cc <FLASH_Program_Byte+0x40>)
 804439a:	691b      	ldr	r3, [r3, #16]
 804439c:	4a0b      	ldr	r2, [pc, #44]	; (80443cc <FLASH_Program_Byte+0x40>)
 804439e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80443a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80443a4:	4b09      	ldr	r3, [pc, #36]	; (80443cc <FLASH_Program_Byte+0x40>)
 80443a6:	4a09      	ldr	r2, [pc, #36]	; (80443cc <FLASH_Program_Byte+0x40>)
 80443a8:	691b      	ldr	r3, [r3, #16]
 80443aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80443ac:	4b07      	ldr	r3, [pc, #28]	; (80443cc <FLASH_Program_Byte+0x40>)
 80443ae:	691b      	ldr	r3, [r3, #16]
 80443b0:	4a06      	ldr	r2, [pc, #24]	; (80443cc <FLASH_Program_Byte+0x40>)
 80443b2:	f043 0301 	orr.w	r3, r3, #1
 80443b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80443b8:	687b      	ldr	r3, [r7, #4]
 80443ba:	78fa      	ldrb	r2, [r7, #3]
 80443bc:	701a      	strb	r2, [r3, #0]
}
 80443be:	bf00      	nop
 80443c0:	370c      	adds	r7, #12
 80443c2:	46bd      	mov	sp, r7
 80443c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443c8:	4770      	bx	lr
 80443ca:	bf00      	nop
 80443cc:	40023c00 	.word	0x40023c00

080443d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80443d0:	b480      	push	{r7}
 80443d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80443d4:	4b27      	ldr	r3, [pc, #156]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 80443d6:	68db      	ldr	r3, [r3, #12]
 80443d8:	f003 0310 	and.w	r3, r3, #16
 80443dc:	2b00      	cmp	r3, #0
 80443de:	d008      	beq.n	80443f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80443e0:	4b25      	ldr	r3, [pc, #148]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 80443e2:	69db      	ldr	r3, [r3, #28]
 80443e4:	f043 0310 	orr.w	r3, r3, #16
 80443e8:	4a23      	ldr	r2, [pc, #140]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 80443ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80443ec:	4b21      	ldr	r3, [pc, #132]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 80443ee:	2210      	movs	r2, #16
 80443f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80443f2:	4b20      	ldr	r3, [pc, #128]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 80443f4:	68db      	ldr	r3, [r3, #12]
 80443f6:	f003 0320 	and.w	r3, r3, #32
 80443fa:	2b00      	cmp	r3, #0
 80443fc:	d008      	beq.n	8044410 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80443fe:	4b1e      	ldr	r3, [pc, #120]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 8044400:	69db      	ldr	r3, [r3, #28]
 8044402:	f043 0308 	orr.w	r3, r3, #8
 8044406:	4a1c      	ldr	r2, [pc, #112]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 8044408:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 804440a:	4b1a      	ldr	r3, [pc, #104]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 804440c:	2220      	movs	r2, #32
 804440e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8044410:	4b18      	ldr	r3, [pc, #96]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 8044412:	68db      	ldr	r3, [r3, #12]
 8044414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044418:	2b00      	cmp	r3, #0
 804441a:	d008      	beq.n	804442e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 804441c:	4b16      	ldr	r3, [pc, #88]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 804441e:	69db      	ldr	r3, [r3, #28]
 8044420:	f043 0304 	orr.w	r3, r3, #4
 8044424:	4a14      	ldr	r2, [pc, #80]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 8044426:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8044428:	4b12      	ldr	r3, [pc, #72]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 804442a:	2240      	movs	r2, #64	; 0x40
 804442c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 804442e:	4b11      	ldr	r3, [pc, #68]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 8044430:	68db      	ldr	r3, [r3, #12]
 8044432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044436:	2b00      	cmp	r3, #0
 8044438:	d008      	beq.n	804444c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 804443a:	4b0f      	ldr	r3, [pc, #60]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 804443c:	69db      	ldr	r3, [r3, #28]
 804443e:	f043 0302 	orr.w	r3, r3, #2
 8044442:	4a0d      	ldr	r2, [pc, #52]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 8044444:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8044446:	4b0b      	ldr	r3, [pc, #44]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 8044448:	2280      	movs	r2, #128	; 0x80
 804444a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 804444c:	4b09      	ldr	r3, [pc, #36]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 804444e:	68db      	ldr	r3, [r3, #12]
 8044450:	f003 0302 	and.w	r3, r3, #2
 8044454:	2b00      	cmp	r3, #0
 8044456:	d008      	beq.n	804446a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8044458:	4b07      	ldr	r3, [pc, #28]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 804445a:	69db      	ldr	r3, [r3, #28]
 804445c:	f043 0320 	orr.w	r3, r3, #32
 8044460:	4a05      	ldr	r2, [pc, #20]	; (8044478 <FLASH_SetErrorCode+0xa8>)
 8044462:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8044464:	4b03      	ldr	r3, [pc, #12]	; (8044474 <FLASH_SetErrorCode+0xa4>)
 8044466:	2202      	movs	r2, #2
 8044468:	60da      	str	r2, [r3, #12]
  }
}
 804446a:	bf00      	nop
 804446c:	46bd      	mov	sp, r7
 804446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044472:	4770      	bx	lr
 8044474:	40023c00 	.word	0x40023c00
 8044478:	20003790 	.word	0x20003790

0804447c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 804447c:	b580      	push	{r7, lr}
 804447e:	b084      	sub	sp, #16
 8044480:	af00      	add	r7, sp, #0
 8044482:	6078      	str	r0, [r7, #4]
 8044484:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8044486:	2301      	movs	r3, #1
 8044488:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 804448a:	2300      	movs	r3, #0
 804448c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 804448e:	4b31      	ldr	r3, [pc, #196]	; (8044554 <HAL_FLASHEx_Erase+0xd8>)
 8044490:	7e1b      	ldrb	r3, [r3, #24]
 8044492:	2b01      	cmp	r3, #1
 8044494:	d101      	bne.n	804449a <HAL_FLASHEx_Erase+0x1e>
 8044496:	2302      	movs	r3, #2
 8044498:	e058      	b.n	804454c <HAL_FLASHEx_Erase+0xd0>
 804449a:	4b2e      	ldr	r3, [pc, #184]	; (8044554 <HAL_FLASHEx_Erase+0xd8>)
 804449c:	2201      	movs	r2, #1
 804449e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80444a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80444a4:	f7ff feba 	bl	804421c <FLASH_WaitForLastOperation>
 80444a8:	4603      	mov	r3, r0
 80444aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80444ac:	7bfb      	ldrb	r3, [r7, #15]
 80444ae:	2b00      	cmp	r3, #0
 80444b0:	d148      	bne.n	8044544 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80444b2:	683b      	ldr	r3, [r7, #0]
 80444b4:	f04f 32ff 	mov.w	r2, #4294967295
 80444b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80444ba:	687b      	ldr	r3, [r7, #4]
 80444bc:	681b      	ldr	r3, [r3, #0]
 80444be:	2b01      	cmp	r3, #1
 80444c0:	d115      	bne.n	80444ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80444c2:	687b      	ldr	r3, [r7, #4]
 80444c4:	691b      	ldr	r3, [r3, #16]
 80444c6:	b2da      	uxtb	r2, r3
 80444c8:	687b      	ldr	r3, [r7, #4]
 80444ca:	685b      	ldr	r3, [r3, #4]
 80444cc:	4619      	mov	r1, r3
 80444ce:	4610      	mov	r0, r2
 80444d0:	f000 f844 	bl	804455c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80444d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80444d8:	f7ff fea0 	bl	804421c <FLASH_WaitForLastOperation>
 80444dc:	4603      	mov	r3, r0
 80444de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80444e0:	4b1d      	ldr	r3, [pc, #116]	; (8044558 <HAL_FLASHEx_Erase+0xdc>)
 80444e2:	691b      	ldr	r3, [r3, #16]
 80444e4:	4a1c      	ldr	r2, [pc, #112]	; (8044558 <HAL_FLASHEx_Erase+0xdc>)
 80444e6:	f023 0304 	bic.w	r3, r3, #4
 80444ea:	6113      	str	r3, [r2, #16]
 80444ec:	e028      	b.n	8044540 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80444ee:	687b      	ldr	r3, [r7, #4]
 80444f0:	689b      	ldr	r3, [r3, #8]
 80444f2:	60bb      	str	r3, [r7, #8]
 80444f4:	e01c      	b.n	8044530 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80444f6:	687b      	ldr	r3, [r7, #4]
 80444f8:	691b      	ldr	r3, [r3, #16]
 80444fa:	b2db      	uxtb	r3, r3
 80444fc:	4619      	mov	r1, r3
 80444fe:	68b8      	ldr	r0, [r7, #8]
 8044500:	f000 f850 	bl	80445a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8044504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8044508:	f7ff fe88 	bl	804421c <FLASH_WaitForLastOperation>
 804450c:	4603      	mov	r3, r0
 804450e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8044510:	4b11      	ldr	r3, [pc, #68]	; (8044558 <HAL_FLASHEx_Erase+0xdc>)
 8044512:	691b      	ldr	r3, [r3, #16]
 8044514:	4a10      	ldr	r2, [pc, #64]	; (8044558 <HAL_FLASHEx_Erase+0xdc>)
 8044516:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 804451a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 804451c:	7bfb      	ldrb	r3, [r7, #15]
 804451e:	2b00      	cmp	r3, #0
 8044520:	d003      	beq.n	804452a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8044522:	683b      	ldr	r3, [r7, #0]
 8044524:	68ba      	ldr	r2, [r7, #8]
 8044526:	601a      	str	r2, [r3, #0]
          break;
 8044528:	e00a      	b.n	8044540 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 804452a:	68bb      	ldr	r3, [r7, #8]
 804452c:	3301      	adds	r3, #1
 804452e:	60bb      	str	r3, [r7, #8]
 8044530:	687b      	ldr	r3, [r7, #4]
 8044532:	68da      	ldr	r2, [r3, #12]
 8044534:	687b      	ldr	r3, [r7, #4]
 8044536:	689b      	ldr	r3, [r3, #8]
 8044538:	4413      	add	r3, r2
 804453a:	68ba      	ldr	r2, [r7, #8]
 804453c:	429a      	cmp	r2, r3
 804453e:	d3da      	bcc.n	80444f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8044540:	f000 f878 	bl	8044634 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8044544:	4b03      	ldr	r3, [pc, #12]	; (8044554 <HAL_FLASHEx_Erase+0xd8>)
 8044546:	2200      	movs	r2, #0
 8044548:	761a      	strb	r2, [r3, #24]

  return status;
 804454a:	7bfb      	ldrb	r3, [r7, #15]
}
 804454c:	4618      	mov	r0, r3
 804454e:	3710      	adds	r7, #16
 8044550:	46bd      	mov	sp, r7
 8044552:	bd80      	pop	{r7, pc}
 8044554:	20003790 	.word	0x20003790
 8044558:	40023c00 	.word	0x40023c00

0804455c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 804455c:	b480      	push	{r7}
 804455e:	b083      	sub	sp, #12
 8044560:	af00      	add	r7, sp, #0
 8044562:	4603      	mov	r3, r0
 8044564:	6039      	str	r1, [r7, #0]
 8044566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8044568:	4b0d      	ldr	r3, [pc, #52]	; (80445a0 <FLASH_MassErase+0x44>)
 804456a:	691b      	ldr	r3, [r3, #16]
 804456c:	4a0c      	ldr	r2, [pc, #48]	; (80445a0 <FLASH_MassErase+0x44>)
 804456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8044572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8044574:	4b0a      	ldr	r3, [pc, #40]	; (80445a0 <FLASH_MassErase+0x44>)
 8044576:	691b      	ldr	r3, [r3, #16]
 8044578:	4a09      	ldr	r2, [pc, #36]	; (80445a0 <FLASH_MassErase+0x44>)
 804457a:	f043 0304 	orr.w	r3, r3, #4
 804457e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8044580:	4b07      	ldr	r3, [pc, #28]	; (80445a0 <FLASH_MassErase+0x44>)
 8044582:	691a      	ldr	r2, [r3, #16]
 8044584:	79fb      	ldrb	r3, [r7, #7]
 8044586:	021b      	lsls	r3, r3, #8
 8044588:	4313      	orrs	r3, r2
 804458a:	4a05      	ldr	r2, [pc, #20]	; (80445a0 <FLASH_MassErase+0x44>)
 804458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044590:	6113      	str	r3, [r2, #16]
}
 8044592:	bf00      	nop
 8044594:	370c      	adds	r7, #12
 8044596:	46bd      	mov	sp, r7
 8044598:	f85d 7b04 	ldr.w	r7, [sp], #4
 804459c:	4770      	bx	lr
 804459e:	bf00      	nop
 80445a0:	40023c00 	.word	0x40023c00

080445a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80445a4:	b480      	push	{r7}
 80445a6:	b085      	sub	sp, #20
 80445a8:	af00      	add	r7, sp, #0
 80445aa:	6078      	str	r0, [r7, #4]
 80445ac:	460b      	mov	r3, r1
 80445ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80445b0:	2300      	movs	r3, #0
 80445b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80445b4:	78fb      	ldrb	r3, [r7, #3]
 80445b6:	2b00      	cmp	r3, #0
 80445b8:	d102      	bne.n	80445c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80445ba:	2300      	movs	r3, #0
 80445bc:	60fb      	str	r3, [r7, #12]
 80445be:	e010      	b.n	80445e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80445c0:	78fb      	ldrb	r3, [r7, #3]
 80445c2:	2b01      	cmp	r3, #1
 80445c4:	d103      	bne.n	80445ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80445c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80445ca:	60fb      	str	r3, [r7, #12]
 80445cc:	e009      	b.n	80445e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80445ce:	78fb      	ldrb	r3, [r7, #3]
 80445d0:	2b02      	cmp	r3, #2
 80445d2:	d103      	bne.n	80445dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80445d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80445d8:	60fb      	str	r3, [r7, #12]
 80445da:	e002      	b.n	80445e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80445dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80445e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80445e2:	4b13      	ldr	r3, [pc, #76]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 80445e4:	691b      	ldr	r3, [r3, #16]
 80445e6:	4a12      	ldr	r2, [pc, #72]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 80445e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80445ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80445ee:	4b10      	ldr	r3, [pc, #64]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 80445f0:	691a      	ldr	r2, [r3, #16]
 80445f2:	490f      	ldr	r1, [pc, #60]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 80445f4:	68fb      	ldr	r3, [r7, #12]
 80445f6:	4313      	orrs	r3, r2
 80445f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80445fa:	4b0d      	ldr	r3, [pc, #52]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 80445fc:	691b      	ldr	r3, [r3, #16]
 80445fe:	4a0c      	ldr	r2, [pc, #48]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 8044600:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8044604:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8044606:	4b0a      	ldr	r3, [pc, #40]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 8044608:	691a      	ldr	r2, [r3, #16]
 804460a:	687b      	ldr	r3, [r7, #4]
 804460c:	00db      	lsls	r3, r3, #3
 804460e:	4313      	orrs	r3, r2
 8044610:	4a07      	ldr	r2, [pc, #28]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 8044612:	f043 0302 	orr.w	r3, r3, #2
 8044616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8044618:	4b05      	ldr	r3, [pc, #20]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 804461a:	691b      	ldr	r3, [r3, #16]
 804461c:	4a04      	ldr	r2, [pc, #16]	; (8044630 <FLASH_Erase_Sector+0x8c>)
 804461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044622:	6113      	str	r3, [r2, #16]
}
 8044624:	bf00      	nop
 8044626:	3714      	adds	r7, #20
 8044628:	46bd      	mov	sp, r7
 804462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804462e:	4770      	bx	lr
 8044630:	40023c00 	.word	0x40023c00

08044634 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8044634:	b480      	push	{r7}
 8044636:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8044638:	4b20      	ldr	r3, [pc, #128]	; (80446bc <FLASH_FlushCaches+0x88>)
 804463a:	681b      	ldr	r3, [r3, #0]
 804463c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044640:	2b00      	cmp	r3, #0
 8044642:	d017      	beq.n	8044674 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8044644:	4b1d      	ldr	r3, [pc, #116]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044646:	681b      	ldr	r3, [r3, #0]
 8044648:	4a1c      	ldr	r2, [pc, #112]	; (80446bc <FLASH_FlushCaches+0x88>)
 804464a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 804464e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8044650:	4b1a      	ldr	r3, [pc, #104]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044652:	681b      	ldr	r3, [r3, #0]
 8044654:	4a19      	ldr	r2, [pc, #100]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804465a:	6013      	str	r3, [r2, #0]
 804465c:	4b17      	ldr	r3, [pc, #92]	; (80446bc <FLASH_FlushCaches+0x88>)
 804465e:	681b      	ldr	r3, [r3, #0]
 8044660:	4a16      	ldr	r2, [pc, #88]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8044666:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8044668:	4b14      	ldr	r3, [pc, #80]	; (80446bc <FLASH_FlushCaches+0x88>)
 804466a:	681b      	ldr	r3, [r3, #0]
 804466c:	4a13      	ldr	r2, [pc, #76]	; (80446bc <FLASH_FlushCaches+0x88>)
 804466e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8044672:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8044674:	4b11      	ldr	r3, [pc, #68]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044676:	681b      	ldr	r3, [r3, #0]
 8044678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804467c:	2b00      	cmp	r3, #0
 804467e:	d017      	beq.n	80446b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8044680:	4b0e      	ldr	r3, [pc, #56]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044682:	681b      	ldr	r3, [r3, #0]
 8044684:	4a0d      	ldr	r2, [pc, #52]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804468a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 804468c:	4b0b      	ldr	r3, [pc, #44]	; (80446bc <FLASH_FlushCaches+0x88>)
 804468e:	681b      	ldr	r3, [r3, #0]
 8044690:	4a0a      	ldr	r2, [pc, #40]	; (80446bc <FLASH_FlushCaches+0x88>)
 8044692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8044696:	6013      	str	r3, [r2, #0]
 8044698:	4b08      	ldr	r3, [pc, #32]	; (80446bc <FLASH_FlushCaches+0x88>)
 804469a:	681b      	ldr	r3, [r3, #0]
 804469c:	4a07      	ldr	r2, [pc, #28]	; (80446bc <FLASH_FlushCaches+0x88>)
 804469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80446a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80446a4:	4b05      	ldr	r3, [pc, #20]	; (80446bc <FLASH_FlushCaches+0x88>)
 80446a6:	681b      	ldr	r3, [r3, #0]
 80446a8:	4a04      	ldr	r2, [pc, #16]	; (80446bc <FLASH_FlushCaches+0x88>)
 80446aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80446ae:	6013      	str	r3, [r2, #0]
  }
}
 80446b0:	bf00      	nop
 80446b2:	46bd      	mov	sp, r7
 80446b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446b8:	4770      	bx	lr
 80446ba:	bf00      	nop
 80446bc:	40023c00 	.word	0x40023c00

080446c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80446c0:	b480      	push	{r7}
 80446c2:	b089      	sub	sp, #36	; 0x24
 80446c4:	af00      	add	r7, sp, #0
 80446c6:	6078      	str	r0, [r7, #4]
 80446c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80446ca:	2300      	movs	r3, #0
 80446cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80446ce:	2300      	movs	r3, #0
 80446d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80446d2:	2300      	movs	r3, #0
 80446d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80446d6:	2300      	movs	r3, #0
 80446d8:	61fb      	str	r3, [r7, #28]
 80446da:	e16b      	b.n	80449b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80446dc:	2201      	movs	r2, #1
 80446de:	69fb      	ldr	r3, [r7, #28]
 80446e0:	fa02 f303 	lsl.w	r3, r2, r3
 80446e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80446e6:	683b      	ldr	r3, [r7, #0]
 80446e8:	681b      	ldr	r3, [r3, #0]
 80446ea:	697a      	ldr	r2, [r7, #20]
 80446ec:	4013      	ands	r3, r2
 80446ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80446f0:	693a      	ldr	r2, [r7, #16]
 80446f2:	697b      	ldr	r3, [r7, #20]
 80446f4:	429a      	cmp	r2, r3
 80446f6:	f040 815a 	bne.w	80449ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80446fa:	683b      	ldr	r3, [r7, #0]
 80446fc:	685b      	ldr	r3, [r3, #4]
 80446fe:	f003 0303 	and.w	r3, r3, #3
 8044702:	2b01      	cmp	r3, #1
 8044704:	d005      	beq.n	8044712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8044706:	683b      	ldr	r3, [r7, #0]
 8044708:	685b      	ldr	r3, [r3, #4]
 804470a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 804470e:	2b02      	cmp	r3, #2
 8044710:	d130      	bne.n	8044774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8044712:	687b      	ldr	r3, [r7, #4]
 8044714:	689b      	ldr	r3, [r3, #8]
 8044716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044718:	69fb      	ldr	r3, [r7, #28]
 804471a:	005b      	lsls	r3, r3, #1
 804471c:	2203      	movs	r2, #3
 804471e:	fa02 f303 	lsl.w	r3, r2, r3
 8044722:	43db      	mvns	r3, r3
 8044724:	69ba      	ldr	r2, [r7, #24]
 8044726:	4013      	ands	r3, r2
 8044728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 804472a:	683b      	ldr	r3, [r7, #0]
 804472c:	68da      	ldr	r2, [r3, #12]
 804472e:	69fb      	ldr	r3, [r7, #28]
 8044730:	005b      	lsls	r3, r3, #1
 8044732:	fa02 f303 	lsl.w	r3, r2, r3
 8044736:	69ba      	ldr	r2, [r7, #24]
 8044738:	4313      	orrs	r3, r2
 804473a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 804473c:	687b      	ldr	r3, [r7, #4]
 804473e:	69ba      	ldr	r2, [r7, #24]
 8044740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8044742:	687b      	ldr	r3, [r7, #4]
 8044744:	685b      	ldr	r3, [r3, #4]
 8044746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8044748:	2201      	movs	r2, #1
 804474a:	69fb      	ldr	r3, [r7, #28]
 804474c:	fa02 f303 	lsl.w	r3, r2, r3
 8044750:	43db      	mvns	r3, r3
 8044752:	69ba      	ldr	r2, [r7, #24]
 8044754:	4013      	ands	r3, r2
 8044756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8044758:	683b      	ldr	r3, [r7, #0]
 804475a:	685b      	ldr	r3, [r3, #4]
 804475c:	091b      	lsrs	r3, r3, #4
 804475e:	f003 0201 	and.w	r2, r3, #1
 8044762:	69fb      	ldr	r3, [r7, #28]
 8044764:	fa02 f303 	lsl.w	r3, r2, r3
 8044768:	69ba      	ldr	r2, [r7, #24]
 804476a:	4313      	orrs	r3, r2
 804476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	69ba      	ldr	r2, [r7, #24]
 8044772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8044774:	683b      	ldr	r3, [r7, #0]
 8044776:	685b      	ldr	r3, [r3, #4]
 8044778:	f003 0303 	and.w	r3, r3, #3
 804477c:	2b03      	cmp	r3, #3
 804477e:	d017      	beq.n	80447b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8044780:	687b      	ldr	r3, [r7, #4]
 8044782:	68db      	ldr	r3, [r3, #12]
 8044784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8044786:	69fb      	ldr	r3, [r7, #28]
 8044788:	005b      	lsls	r3, r3, #1
 804478a:	2203      	movs	r2, #3
 804478c:	fa02 f303 	lsl.w	r3, r2, r3
 8044790:	43db      	mvns	r3, r3
 8044792:	69ba      	ldr	r2, [r7, #24]
 8044794:	4013      	ands	r3, r2
 8044796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8044798:	683b      	ldr	r3, [r7, #0]
 804479a:	689a      	ldr	r2, [r3, #8]
 804479c:	69fb      	ldr	r3, [r7, #28]
 804479e:	005b      	lsls	r3, r3, #1
 80447a0:	fa02 f303 	lsl.w	r3, r2, r3
 80447a4:	69ba      	ldr	r2, [r7, #24]
 80447a6:	4313      	orrs	r3, r2
 80447a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80447aa:	687b      	ldr	r3, [r7, #4]
 80447ac:	69ba      	ldr	r2, [r7, #24]
 80447ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80447b0:	683b      	ldr	r3, [r7, #0]
 80447b2:	685b      	ldr	r3, [r3, #4]
 80447b4:	f003 0303 	and.w	r3, r3, #3
 80447b8:	2b02      	cmp	r3, #2
 80447ba:	d123      	bne.n	8044804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80447bc:	69fb      	ldr	r3, [r7, #28]
 80447be:	08da      	lsrs	r2, r3, #3
 80447c0:	687b      	ldr	r3, [r7, #4]
 80447c2:	3208      	adds	r2, #8
 80447c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80447c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80447ca:	69fb      	ldr	r3, [r7, #28]
 80447cc:	f003 0307 	and.w	r3, r3, #7
 80447d0:	009b      	lsls	r3, r3, #2
 80447d2:	220f      	movs	r2, #15
 80447d4:	fa02 f303 	lsl.w	r3, r2, r3
 80447d8:	43db      	mvns	r3, r3
 80447da:	69ba      	ldr	r2, [r7, #24]
 80447dc:	4013      	ands	r3, r2
 80447de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80447e0:	683b      	ldr	r3, [r7, #0]
 80447e2:	691a      	ldr	r2, [r3, #16]
 80447e4:	69fb      	ldr	r3, [r7, #28]
 80447e6:	f003 0307 	and.w	r3, r3, #7
 80447ea:	009b      	lsls	r3, r3, #2
 80447ec:	fa02 f303 	lsl.w	r3, r2, r3
 80447f0:	69ba      	ldr	r2, [r7, #24]
 80447f2:	4313      	orrs	r3, r2
 80447f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80447f6:	69fb      	ldr	r3, [r7, #28]
 80447f8:	08da      	lsrs	r2, r3, #3
 80447fa:	687b      	ldr	r3, [r7, #4]
 80447fc:	3208      	adds	r2, #8
 80447fe:	69b9      	ldr	r1, [r7, #24]
 8044800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044804:	687b      	ldr	r3, [r7, #4]
 8044806:	681b      	ldr	r3, [r3, #0]
 8044808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 804480a:	69fb      	ldr	r3, [r7, #28]
 804480c:	005b      	lsls	r3, r3, #1
 804480e:	2203      	movs	r2, #3
 8044810:	fa02 f303 	lsl.w	r3, r2, r3
 8044814:	43db      	mvns	r3, r3
 8044816:	69ba      	ldr	r2, [r7, #24]
 8044818:	4013      	ands	r3, r2
 804481a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804481c:	683b      	ldr	r3, [r7, #0]
 804481e:	685b      	ldr	r3, [r3, #4]
 8044820:	f003 0203 	and.w	r2, r3, #3
 8044824:	69fb      	ldr	r3, [r7, #28]
 8044826:	005b      	lsls	r3, r3, #1
 8044828:	fa02 f303 	lsl.w	r3, r2, r3
 804482c:	69ba      	ldr	r2, [r7, #24]
 804482e:	4313      	orrs	r3, r2
 8044830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8044832:	687b      	ldr	r3, [r7, #4]
 8044834:	69ba      	ldr	r2, [r7, #24]
 8044836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8044838:	683b      	ldr	r3, [r7, #0]
 804483a:	685b      	ldr	r3, [r3, #4]
 804483c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8044840:	2b00      	cmp	r3, #0
 8044842:	f000 80b4 	beq.w	80449ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8044846:	2300      	movs	r3, #0
 8044848:	60fb      	str	r3, [r7, #12]
 804484a:	4b60      	ldr	r3, [pc, #384]	; (80449cc <HAL_GPIO_Init+0x30c>)
 804484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804484e:	4a5f      	ldr	r2, [pc, #380]	; (80449cc <HAL_GPIO_Init+0x30c>)
 8044850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8044854:	6453      	str	r3, [r2, #68]	; 0x44
 8044856:	4b5d      	ldr	r3, [pc, #372]	; (80449cc <HAL_GPIO_Init+0x30c>)
 8044858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804485a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804485e:	60fb      	str	r3, [r7, #12]
 8044860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8044862:	4a5b      	ldr	r2, [pc, #364]	; (80449d0 <HAL_GPIO_Init+0x310>)
 8044864:	69fb      	ldr	r3, [r7, #28]
 8044866:	089b      	lsrs	r3, r3, #2
 8044868:	3302      	adds	r3, #2
 804486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804486e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8044870:	69fb      	ldr	r3, [r7, #28]
 8044872:	f003 0303 	and.w	r3, r3, #3
 8044876:	009b      	lsls	r3, r3, #2
 8044878:	220f      	movs	r2, #15
 804487a:	fa02 f303 	lsl.w	r3, r2, r3
 804487e:	43db      	mvns	r3, r3
 8044880:	69ba      	ldr	r2, [r7, #24]
 8044882:	4013      	ands	r3, r2
 8044884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8044886:	687b      	ldr	r3, [r7, #4]
 8044888:	4a52      	ldr	r2, [pc, #328]	; (80449d4 <HAL_GPIO_Init+0x314>)
 804488a:	4293      	cmp	r3, r2
 804488c:	d02b      	beq.n	80448e6 <HAL_GPIO_Init+0x226>
 804488e:	687b      	ldr	r3, [r7, #4]
 8044890:	4a51      	ldr	r2, [pc, #324]	; (80449d8 <HAL_GPIO_Init+0x318>)
 8044892:	4293      	cmp	r3, r2
 8044894:	d025      	beq.n	80448e2 <HAL_GPIO_Init+0x222>
 8044896:	687b      	ldr	r3, [r7, #4]
 8044898:	4a50      	ldr	r2, [pc, #320]	; (80449dc <HAL_GPIO_Init+0x31c>)
 804489a:	4293      	cmp	r3, r2
 804489c:	d01f      	beq.n	80448de <HAL_GPIO_Init+0x21e>
 804489e:	687b      	ldr	r3, [r7, #4]
 80448a0:	4a4f      	ldr	r2, [pc, #316]	; (80449e0 <HAL_GPIO_Init+0x320>)
 80448a2:	4293      	cmp	r3, r2
 80448a4:	d019      	beq.n	80448da <HAL_GPIO_Init+0x21a>
 80448a6:	687b      	ldr	r3, [r7, #4]
 80448a8:	4a4e      	ldr	r2, [pc, #312]	; (80449e4 <HAL_GPIO_Init+0x324>)
 80448aa:	4293      	cmp	r3, r2
 80448ac:	d013      	beq.n	80448d6 <HAL_GPIO_Init+0x216>
 80448ae:	687b      	ldr	r3, [r7, #4]
 80448b0:	4a4d      	ldr	r2, [pc, #308]	; (80449e8 <HAL_GPIO_Init+0x328>)
 80448b2:	4293      	cmp	r3, r2
 80448b4:	d00d      	beq.n	80448d2 <HAL_GPIO_Init+0x212>
 80448b6:	687b      	ldr	r3, [r7, #4]
 80448b8:	4a4c      	ldr	r2, [pc, #304]	; (80449ec <HAL_GPIO_Init+0x32c>)
 80448ba:	4293      	cmp	r3, r2
 80448bc:	d007      	beq.n	80448ce <HAL_GPIO_Init+0x20e>
 80448be:	687b      	ldr	r3, [r7, #4]
 80448c0:	4a4b      	ldr	r2, [pc, #300]	; (80449f0 <HAL_GPIO_Init+0x330>)
 80448c2:	4293      	cmp	r3, r2
 80448c4:	d101      	bne.n	80448ca <HAL_GPIO_Init+0x20a>
 80448c6:	2307      	movs	r3, #7
 80448c8:	e00e      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448ca:	2308      	movs	r3, #8
 80448cc:	e00c      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448ce:	2306      	movs	r3, #6
 80448d0:	e00a      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448d2:	2305      	movs	r3, #5
 80448d4:	e008      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448d6:	2304      	movs	r3, #4
 80448d8:	e006      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448da:	2303      	movs	r3, #3
 80448dc:	e004      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448de:	2302      	movs	r3, #2
 80448e0:	e002      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448e2:	2301      	movs	r3, #1
 80448e4:	e000      	b.n	80448e8 <HAL_GPIO_Init+0x228>
 80448e6:	2300      	movs	r3, #0
 80448e8:	69fa      	ldr	r2, [r7, #28]
 80448ea:	f002 0203 	and.w	r2, r2, #3
 80448ee:	0092      	lsls	r2, r2, #2
 80448f0:	4093      	lsls	r3, r2
 80448f2:	69ba      	ldr	r2, [r7, #24]
 80448f4:	4313      	orrs	r3, r2
 80448f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80448f8:	4935      	ldr	r1, [pc, #212]	; (80449d0 <HAL_GPIO_Init+0x310>)
 80448fa:	69fb      	ldr	r3, [r7, #28]
 80448fc:	089b      	lsrs	r3, r3, #2
 80448fe:	3302      	adds	r3, #2
 8044900:	69ba      	ldr	r2, [r7, #24]
 8044902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8044906:	4b3b      	ldr	r3, [pc, #236]	; (80449f4 <HAL_GPIO_Init+0x334>)
 8044908:	689b      	ldr	r3, [r3, #8]
 804490a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804490c:	693b      	ldr	r3, [r7, #16]
 804490e:	43db      	mvns	r3, r3
 8044910:	69ba      	ldr	r2, [r7, #24]
 8044912:	4013      	ands	r3, r2
 8044914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8044916:	683b      	ldr	r3, [r7, #0]
 8044918:	685b      	ldr	r3, [r3, #4]
 804491a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804491e:	2b00      	cmp	r3, #0
 8044920:	d003      	beq.n	804492a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8044922:	69ba      	ldr	r2, [r7, #24]
 8044924:	693b      	ldr	r3, [r7, #16]
 8044926:	4313      	orrs	r3, r2
 8044928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 804492a:	4a32      	ldr	r2, [pc, #200]	; (80449f4 <HAL_GPIO_Init+0x334>)
 804492c:	69bb      	ldr	r3, [r7, #24]
 804492e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8044930:	4b30      	ldr	r3, [pc, #192]	; (80449f4 <HAL_GPIO_Init+0x334>)
 8044932:	68db      	ldr	r3, [r3, #12]
 8044934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044936:	693b      	ldr	r3, [r7, #16]
 8044938:	43db      	mvns	r3, r3
 804493a:	69ba      	ldr	r2, [r7, #24]
 804493c:	4013      	ands	r3, r2
 804493e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8044940:	683b      	ldr	r3, [r7, #0]
 8044942:	685b      	ldr	r3, [r3, #4]
 8044944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044948:	2b00      	cmp	r3, #0
 804494a:	d003      	beq.n	8044954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 804494c:	69ba      	ldr	r2, [r7, #24]
 804494e:	693b      	ldr	r3, [r7, #16]
 8044950:	4313      	orrs	r3, r2
 8044952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8044954:	4a27      	ldr	r2, [pc, #156]	; (80449f4 <HAL_GPIO_Init+0x334>)
 8044956:	69bb      	ldr	r3, [r7, #24]
 8044958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 804495a:	4b26      	ldr	r3, [pc, #152]	; (80449f4 <HAL_GPIO_Init+0x334>)
 804495c:	685b      	ldr	r3, [r3, #4]
 804495e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044960:	693b      	ldr	r3, [r7, #16]
 8044962:	43db      	mvns	r3, r3
 8044964:	69ba      	ldr	r2, [r7, #24]
 8044966:	4013      	ands	r3, r2
 8044968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 804496a:	683b      	ldr	r3, [r7, #0]
 804496c:	685b      	ldr	r3, [r3, #4]
 804496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044972:	2b00      	cmp	r3, #0
 8044974:	d003      	beq.n	804497e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8044976:	69ba      	ldr	r2, [r7, #24]
 8044978:	693b      	ldr	r3, [r7, #16]
 804497a:	4313      	orrs	r3, r2
 804497c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 804497e:	4a1d      	ldr	r2, [pc, #116]	; (80449f4 <HAL_GPIO_Init+0x334>)
 8044980:	69bb      	ldr	r3, [r7, #24]
 8044982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044984:	4b1b      	ldr	r3, [pc, #108]	; (80449f4 <HAL_GPIO_Init+0x334>)
 8044986:	681b      	ldr	r3, [r3, #0]
 8044988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804498a:	693b      	ldr	r3, [r7, #16]
 804498c:	43db      	mvns	r3, r3
 804498e:	69ba      	ldr	r2, [r7, #24]
 8044990:	4013      	ands	r3, r2
 8044992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8044994:	683b      	ldr	r3, [r7, #0]
 8044996:	685b      	ldr	r3, [r3, #4]
 8044998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804499c:	2b00      	cmp	r3, #0
 804499e:	d003      	beq.n	80449a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80449a0:	69ba      	ldr	r2, [r7, #24]
 80449a2:	693b      	ldr	r3, [r7, #16]
 80449a4:	4313      	orrs	r3, r2
 80449a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80449a8:	4a12      	ldr	r2, [pc, #72]	; (80449f4 <HAL_GPIO_Init+0x334>)
 80449aa:	69bb      	ldr	r3, [r7, #24]
 80449ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80449ae:	69fb      	ldr	r3, [r7, #28]
 80449b0:	3301      	adds	r3, #1
 80449b2:	61fb      	str	r3, [r7, #28]
 80449b4:	69fb      	ldr	r3, [r7, #28]
 80449b6:	2b0f      	cmp	r3, #15
 80449b8:	f67f ae90 	bls.w	80446dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80449bc:	bf00      	nop
 80449be:	bf00      	nop
 80449c0:	3724      	adds	r7, #36	; 0x24
 80449c2:	46bd      	mov	sp, r7
 80449c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449c8:	4770      	bx	lr
 80449ca:	bf00      	nop
 80449cc:	40023800 	.word	0x40023800
 80449d0:	40013800 	.word	0x40013800
 80449d4:	40020000 	.word	0x40020000
 80449d8:	40020400 	.word	0x40020400
 80449dc:	40020800 	.word	0x40020800
 80449e0:	40020c00 	.word	0x40020c00
 80449e4:	40021000 	.word	0x40021000
 80449e8:	40021400 	.word	0x40021400
 80449ec:	40021800 	.word	0x40021800
 80449f0:	40021c00 	.word	0x40021c00
 80449f4:	40013c00 	.word	0x40013c00

080449f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80449f8:	b480      	push	{r7}
 80449fa:	b083      	sub	sp, #12
 80449fc:	af00      	add	r7, sp, #0
 80449fe:	6078      	str	r0, [r7, #4]
 8044a00:	460b      	mov	r3, r1
 8044a02:	807b      	strh	r3, [r7, #2]
 8044a04:	4613      	mov	r3, r2
 8044a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044a08:	787b      	ldrb	r3, [r7, #1]
 8044a0a:	2b00      	cmp	r3, #0
 8044a0c:	d003      	beq.n	8044a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8044a0e:	887a      	ldrh	r2, [r7, #2]
 8044a10:	687b      	ldr	r3, [r7, #4]
 8044a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044a14:	e003      	b.n	8044a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044a16:	887b      	ldrh	r3, [r7, #2]
 8044a18:	041a      	lsls	r2, r3, #16
 8044a1a:	687b      	ldr	r3, [r7, #4]
 8044a1c:	619a      	str	r2, [r3, #24]
}
 8044a1e:	bf00      	nop
 8044a20:	370c      	adds	r7, #12
 8044a22:	46bd      	mov	sp, r7
 8044a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a28:	4770      	bx	lr
	...

08044a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8044a2c:	b580      	push	{r7, lr}
 8044a2e:	b084      	sub	sp, #16
 8044a30:	af00      	add	r7, sp, #0
 8044a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8044a34:	687b      	ldr	r3, [r7, #4]
 8044a36:	2b00      	cmp	r3, #0
 8044a38:	d101      	bne.n	8044a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8044a3a:	2301      	movs	r3, #1
 8044a3c:	e12b      	b.n	8044c96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8044a3e:	687b      	ldr	r3, [r7, #4]
 8044a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8044a44:	b2db      	uxtb	r3, r3
 8044a46:	2b00      	cmp	r3, #0
 8044a48:	d106      	bne.n	8044a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8044a4a:	687b      	ldr	r3, [r7, #4]
 8044a4c:	2200      	movs	r2, #0
 8044a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8044a52:	6878      	ldr	r0, [r7, #4]
 8044a54:	f7fe fe40 	bl	80436d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8044a58:	687b      	ldr	r3, [r7, #4]
 8044a5a:	2224      	movs	r2, #36	; 0x24
 8044a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8044a60:	687b      	ldr	r3, [r7, #4]
 8044a62:	681b      	ldr	r3, [r3, #0]
 8044a64:	681a      	ldr	r2, [r3, #0]
 8044a66:	687b      	ldr	r3, [r7, #4]
 8044a68:	681b      	ldr	r3, [r3, #0]
 8044a6a:	f022 0201 	bic.w	r2, r2, #1
 8044a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8044a70:	687b      	ldr	r3, [r7, #4]
 8044a72:	681b      	ldr	r3, [r3, #0]
 8044a74:	681a      	ldr	r2, [r3, #0]
 8044a76:	687b      	ldr	r3, [r7, #4]
 8044a78:	681b      	ldr	r3, [r3, #0]
 8044a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8044a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8044a80:	687b      	ldr	r3, [r7, #4]
 8044a82:	681b      	ldr	r3, [r3, #0]
 8044a84:	681a      	ldr	r2, [r3, #0]
 8044a86:	687b      	ldr	r3, [r7, #4]
 8044a88:	681b      	ldr	r3, [r3, #0]
 8044a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8044a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8044a90:	f000 fd80 	bl	8045594 <HAL_RCC_GetPCLK1Freq>
 8044a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8044a96:	687b      	ldr	r3, [r7, #4]
 8044a98:	685b      	ldr	r3, [r3, #4]
 8044a9a:	4a81      	ldr	r2, [pc, #516]	; (8044ca0 <HAL_I2C_Init+0x274>)
 8044a9c:	4293      	cmp	r3, r2
 8044a9e:	d807      	bhi.n	8044ab0 <HAL_I2C_Init+0x84>
 8044aa0:	68fb      	ldr	r3, [r7, #12]
 8044aa2:	4a80      	ldr	r2, [pc, #512]	; (8044ca4 <HAL_I2C_Init+0x278>)
 8044aa4:	4293      	cmp	r3, r2
 8044aa6:	bf94      	ite	ls
 8044aa8:	2301      	movls	r3, #1
 8044aaa:	2300      	movhi	r3, #0
 8044aac:	b2db      	uxtb	r3, r3
 8044aae:	e006      	b.n	8044abe <HAL_I2C_Init+0x92>
 8044ab0:	68fb      	ldr	r3, [r7, #12]
 8044ab2:	4a7d      	ldr	r2, [pc, #500]	; (8044ca8 <HAL_I2C_Init+0x27c>)
 8044ab4:	4293      	cmp	r3, r2
 8044ab6:	bf94      	ite	ls
 8044ab8:	2301      	movls	r3, #1
 8044aba:	2300      	movhi	r3, #0
 8044abc:	b2db      	uxtb	r3, r3
 8044abe:	2b00      	cmp	r3, #0
 8044ac0:	d001      	beq.n	8044ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8044ac2:	2301      	movs	r3, #1
 8044ac4:	e0e7      	b.n	8044c96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8044ac6:	68fb      	ldr	r3, [r7, #12]
 8044ac8:	4a78      	ldr	r2, [pc, #480]	; (8044cac <HAL_I2C_Init+0x280>)
 8044aca:	fba2 2303 	umull	r2, r3, r2, r3
 8044ace:	0c9b      	lsrs	r3, r3, #18
 8044ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8044ad2:	687b      	ldr	r3, [r7, #4]
 8044ad4:	681b      	ldr	r3, [r3, #0]
 8044ad6:	685b      	ldr	r3, [r3, #4]
 8044ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8044adc:	687b      	ldr	r3, [r7, #4]
 8044ade:	681b      	ldr	r3, [r3, #0]
 8044ae0:	68ba      	ldr	r2, [r7, #8]
 8044ae2:	430a      	orrs	r2, r1
 8044ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8044ae6:	687b      	ldr	r3, [r7, #4]
 8044ae8:	681b      	ldr	r3, [r3, #0]
 8044aea:	6a1b      	ldr	r3, [r3, #32]
 8044aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8044af0:	687b      	ldr	r3, [r7, #4]
 8044af2:	685b      	ldr	r3, [r3, #4]
 8044af4:	4a6a      	ldr	r2, [pc, #424]	; (8044ca0 <HAL_I2C_Init+0x274>)
 8044af6:	4293      	cmp	r3, r2
 8044af8:	d802      	bhi.n	8044b00 <HAL_I2C_Init+0xd4>
 8044afa:	68bb      	ldr	r3, [r7, #8]
 8044afc:	3301      	adds	r3, #1
 8044afe:	e009      	b.n	8044b14 <HAL_I2C_Init+0xe8>
 8044b00:	68bb      	ldr	r3, [r7, #8]
 8044b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8044b06:	fb02 f303 	mul.w	r3, r2, r3
 8044b0a:	4a69      	ldr	r2, [pc, #420]	; (8044cb0 <HAL_I2C_Init+0x284>)
 8044b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8044b10:	099b      	lsrs	r3, r3, #6
 8044b12:	3301      	adds	r3, #1
 8044b14:	687a      	ldr	r2, [r7, #4]
 8044b16:	6812      	ldr	r2, [r2, #0]
 8044b18:	430b      	orrs	r3, r1
 8044b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8044b1c:	687b      	ldr	r3, [r7, #4]
 8044b1e:	681b      	ldr	r3, [r3, #0]
 8044b20:	69db      	ldr	r3, [r3, #28]
 8044b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8044b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8044b2a:	687b      	ldr	r3, [r7, #4]
 8044b2c:	685b      	ldr	r3, [r3, #4]
 8044b2e:	495c      	ldr	r1, [pc, #368]	; (8044ca0 <HAL_I2C_Init+0x274>)
 8044b30:	428b      	cmp	r3, r1
 8044b32:	d819      	bhi.n	8044b68 <HAL_I2C_Init+0x13c>
 8044b34:	68fb      	ldr	r3, [r7, #12]
 8044b36:	1e59      	subs	r1, r3, #1
 8044b38:	687b      	ldr	r3, [r7, #4]
 8044b3a:	685b      	ldr	r3, [r3, #4]
 8044b3c:	005b      	lsls	r3, r3, #1
 8044b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8044b42:	1c59      	adds	r1, r3, #1
 8044b44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8044b48:	400b      	ands	r3, r1
 8044b4a:	2b00      	cmp	r3, #0
 8044b4c:	d00a      	beq.n	8044b64 <HAL_I2C_Init+0x138>
 8044b4e:	68fb      	ldr	r3, [r7, #12]
 8044b50:	1e59      	subs	r1, r3, #1
 8044b52:	687b      	ldr	r3, [r7, #4]
 8044b54:	685b      	ldr	r3, [r3, #4]
 8044b56:	005b      	lsls	r3, r3, #1
 8044b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8044b5c:	3301      	adds	r3, #1
 8044b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044b62:	e051      	b.n	8044c08 <HAL_I2C_Init+0x1dc>
 8044b64:	2304      	movs	r3, #4
 8044b66:	e04f      	b.n	8044c08 <HAL_I2C_Init+0x1dc>
 8044b68:	687b      	ldr	r3, [r7, #4]
 8044b6a:	689b      	ldr	r3, [r3, #8]
 8044b6c:	2b00      	cmp	r3, #0
 8044b6e:	d111      	bne.n	8044b94 <HAL_I2C_Init+0x168>
 8044b70:	68fb      	ldr	r3, [r7, #12]
 8044b72:	1e58      	subs	r0, r3, #1
 8044b74:	687b      	ldr	r3, [r7, #4]
 8044b76:	6859      	ldr	r1, [r3, #4]
 8044b78:	460b      	mov	r3, r1
 8044b7a:	005b      	lsls	r3, r3, #1
 8044b7c:	440b      	add	r3, r1
 8044b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8044b82:	3301      	adds	r3, #1
 8044b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044b88:	2b00      	cmp	r3, #0
 8044b8a:	bf0c      	ite	eq
 8044b8c:	2301      	moveq	r3, #1
 8044b8e:	2300      	movne	r3, #0
 8044b90:	b2db      	uxtb	r3, r3
 8044b92:	e012      	b.n	8044bba <HAL_I2C_Init+0x18e>
 8044b94:	68fb      	ldr	r3, [r7, #12]
 8044b96:	1e58      	subs	r0, r3, #1
 8044b98:	687b      	ldr	r3, [r7, #4]
 8044b9a:	6859      	ldr	r1, [r3, #4]
 8044b9c:	460b      	mov	r3, r1
 8044b9e:	009b      	lsls	r3, r3, #2
 8044ba0:	440b      	add	r3, r1
 8044ba2:	0099      	lsls	r1, r3, #2
 8044ba4:	440b      	add	r3, r1
 8044ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8044baa:	3301      	adds	r3, #1
 8044bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044bb0:	2b00      	cmp	r3, #0
 8044bb2:	bf0c      	ite	eq
 8044bb4:	2301      	moveq	r3, #1
 8044bb6:	2300      	movne	r3, #0
 8044bb8:	b2db      	uxtb	r3, r3
 8044bba:	2b00      	cmp	r3, #0
 8044bbc:	d001      	beq.n	8044bc2 <HAL_I2C_Init+0x196>
 8044bbe:	2301      	movs	r3, #1
 8044bc0:	e022      	b.n	8044c08 <HAL_I2C_Init+0x1dc>
 8044bc2:	687b      	ldr	r3, [r7, #4]
 8044bc4:	689b      	ldr	r3, [r3, #8]
 8044bc6:	2b00      	cmp	r3, #0
 8044bc8:	d10e      	bne.n	8044be8 <HAL_I2C_Init+0x1bc>
 8044bca:	68fb      	ldr	r3, [r7, #12]
 8044bcc:	1e58      	subs	r0, r3, #1
 8044bce:	687b      	ldr	r3, [r7, #4]
 8044bd0:	6859      	ldr	r1, [r3, #4]
 8044bd2:	460b      	mov	r3, r1
 8044bd4:	005b      	lsls	r3, r3, #1
 8044bd6:	440b      	add	r3, r1
 8044bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8044bdc:	3301      	adds	r3, #1
 8044bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8044be6:	e00f      	b.n	8044c08 <HAL_I2C_Init+0x1dc>
 8044be8:	68fb      	ldr	r3, [r7, #12]
 8044bea:	1e58      	subs	r0, r3, #1
 8044bec:	687b      	ldr	r3, [r7, #4]
 8044bee:	6859      	ldr	r1, [r3, #4]
 8044bf0:	460b      	mov	r3, r1
 8044bf2:	009b      	lsls	r3, r3, #2
 8044bf4:	440b      	add	r3, r1
 8044bf6:	0099      	lsls	r1, r3, #2
 8044bf8:	440b      	add	r3, r1
 8044bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8044bfe:	3301      	adds	r3, #1
 8044c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8044c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8044c08:	6879      	ldr	r1, [r7, #4]
 8044c0a:	6809      	ldr	r1, [r1, #0]
 8044c0c:	4313      	orrs	r3, r2
 8044c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8044c10:	687b      	ldr	r3, [r7, #4]
 8044c12:	681b      	ldr	r3, [r3, #0]
 8044c14:	681b      	ldr	r3, [r3, #0]
 8044c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8044c1a:	687b      	ldr	r3, [r7, #4]
 8044c1c:	69da      	ldr	r2, [r3, #28]
 8044c1e:	687b      	ldr	r3, [r7, #4]
 8044c20:	6a1b      	ldr	r3, [r3, #32]
 8044c22:	431a      	orrs	r2, r3
 8044c24:	687b      	ldr	r3, [r7, #4]
 8044c26:	681b      	ldr	r3, [r3, #0]
 8044c28:	430a      	orrs	r2, r1
 8044c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8044c2c:	687b      	ldr	r3, [r7, #4]
 8044c2e:	681b      	ldr	r3, [r3, #0]
 8044c30:	689b      	ldr	r3, [r3, #8]
 8044c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8044c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8044c3a:	687a      	ldr	r2, [r7, #4]
 8044c3c:	6911      	ldr	r1, [r2, #16]
 8044c3e:	687a      	ldr	r2, [r7, #4]
 8044c40:	68d2      	ldr	r2, [r2, #12]
 8044c42:	4311      	orrs	r1, r2
 8044c44:	687a      	ldr	r2, [r7, #4]
 8044c46:	6812      	ldr	r2, [r2, #0]
 8044c48:	430b      	orrs	r3, r1
 8044c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8044c4c:	687b      	ldr	r3, [r7, #4]
 8044c4e:	681b      	ldr	r3, [r3, #0]
 8044c50:	68db      	ldr	r3, [r3, #12]
 8044c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8044c56:	687b      	ldr	r3, [r7, #4]
 8044c58:	695a      	ldr	r2, [r3, #20]
 8044c5a:	687b      	ldr	r3, [r7, #4]
 8044c5c:	699b      	ldr	r3, [r3, #24]
 8044c5e:	431a      	orrs	r2, r3
 8044c60:	687b      	ldr	r3, [r7, #4]
 8044c62:	681b      	ldr	r3, [r3, #0]
 8044c64:	430a      	orrs	r2, r1
 8044c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8044c68:	687b      	ldr	r3, [r7, #4]
 8044c6a:	681b      	ldr	r3, [r3, #0]
 8044c6c:	681a      	ldr	r2, [r3, #0]
 8044c6e:	687b      	ldr	r3, [r7, #4]
 8044c70:	681b      	ldr	r3, [r3, #0]
 8044c72:	f042 0201 	orr.w	r2, r2, #1
 8044c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8044c78:	687b      	ldr	r3, [r7, #4]
 8044c7a:	2200      	movs	r2, #0
 8044c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8044c7e:	687b      	ldr	r3, [r7, #4]
 8044c80:	2220      	movs	r2, #32
 8044c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8044c86:	687b      	ldr	r3, [r7, #4]
 8044c88:	2200      	movs	r2, #0
 8044c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8044c8c:	687b      	ldr	r3, [r7, #4]
 8044c8e:	2200      	movs	r2, #0
 8044c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8044c94:	2300      	movs	r3, #0
}
 8044c96:	4618      	mov	r0, r3
 8044c98:	3710      	adds	r7, #16
 8044c9a:	46bd      	mov	sp, r7
 8044c9c:	bd80      	pop	{r7, pc}
 8044c9e:	bf00      	nop
 8044ca0:	000186a0 	.word	0x000186a0
 8044ca4:	001e847f 	.word	0x001e847f
 8044ca8:	003d08ff 	.word	0x003d08ff
 8044cac:	431bde83 	.word	0x431bde83
 8044cb0:	10624dd3 	.word	0x10624dd3

08044cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8044cb4:	b580      	push	{r7, lr}
 8044cb6:	b086      	sub	sp, #24
 8044cb8:	af00      	add	r7, sp, #0
 8044cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8044cbc:	687b      	ldr	r3, [r7, #4]
 8044cbe:	2b00      	cmp	r3, #0
 8044cc0:	d101      	bne.n	8044cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8044cc2:	2301      	movs	r3, #1
 8044cc4:	e267      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8044cc6:	687b      	ldr	r3, [r7, #4]
 8044cc8:	681b      	ldr	r3, [r3, #0]
 8044cca:	f003 0301 	and.w	r3, r3, #1
 8044cce:	2b00      	cmp	r3, #0
 8044cd0:	d075      	beq.n	8044dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8044cd2:	4b88      	ldr	r3, [pc, #544]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044cd4:	689b      	ldr	r3, [r3, #8]
 8044cd6:	f003 030c 	and.w	r3, r3, #12
 8044cda:	2b04      	cmp	r3, #4
 8044cdc:	d00c      	beq.n	8044cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044cde:	4b85      	ldr	r3, [pc, #532]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044ce0:	689b      	ldr	r3, [r3, #8]
 8044ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8044ce6:	2b08      	cmp	r3, #8
 8044ce8:	d112      	bne.n	8044d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044cea:	4b82      	ldr	r3, [pc, #520]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044cec:	685b      	ldr	r3, [r3, #4]
 8044cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8044cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8044cf6:	d10b      	bne.n	8044d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8044cf8:	4b7e      	ldr	r3, [pc, #504]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044cfa:	681b      	ldr	r3, [r3, #0]
 8044cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044d00:	2b00      	cmp	r3, #0
 8044d02:	d05b      	beq.n	8044dbc <HAL_RCC_OscConfig+0x108>
 8044d04:	687b      	ldr	r3, [r7, #4]
 8044d06:	685b      	ldr	r3, [r3, #4]
 8044d08:	2b00      	cmp	r3, #0
 8044d0a:	d157      	bne.n	8044dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8044d0c:	2301      	movs	r3, #1
 8044d0e:	e242      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8044d10:	687b      	ldr	r3, [r7, #4]
 8044d12:	685b      	ldr	r3, [r3, #4]
 8044d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044d18:	d106      	bne.n	8044d28 <HAL_RCC_OscConfig+0x74>
 8044d1a:	4b76      	ldr	r3, [pc, #472]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d1c:	681b      	ldr	r3, [r3, #0]
 8044d1e:	4a75      	ldr	r2, [pc, #468]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044d24:	6013      	str	r3, [r2, #0]
 8044d26:	e01d      	b.n	8044d64 <HAL_RCC_OscConfig+0xb0>
 8044d28:	687b      	ldr	r3, [r7, #4]
 8044d2a:	685b      	ldr	r3, [r3, #4]
 8044d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8044d30:	d10c      	bne.n	8044d4c <HAL_RCC_OscConfig+0x98>
 8044d32:	4b70      	ldr	r3, [pc, #448]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d34:	681b      	ldr	r3, [r3, #0]
 8044d36:	4a6f      	ldr	r2, [pc, #444]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8044d3c:	6013      	str	r3, [r2, #0]
 8044d3e:	4b6d      	ldr	r3, [pc, #436]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d40:	681b      	ldr	r3, [r3, #0]
 8044d42:	4a6c      	ldr	r2, [pc, #432]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044d48:	6013      	str	r3, [r2, #0]
 8044d4a:	e00b      	b.n	8044d64 <HAL_RCC_OscConfig+0xb0>
 8044d4c:	4b69      	ldr	r3, [pc, #420]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d4e:	681b      	ldr	r3, [r3, #0]
 8044d50:	4a68      	ldr	r2, [pc, #416]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8044d56:	6013      	str	r3, [r2, #0]
 8044d58:	4b66      	ldr	r3, [pc, #408]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d5a:	681b      	ldr	r3, [r3, #0]
 8044d5c:	4a65      	ldr	r2, [pc, #404]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8044d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8044d64:	687b      	ldr	r3, [r7, #4]
 8044d66:	685b      	ldr	r3, [r3, #4]
 8044d68:	2b00      	cmp	r3, #0
 8044d6a:	d013      	beq.n	8044d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044d6c:	f7fe fffc 	bl	8043d68 <HAL_GetTick>
 8044d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044d72:	e008      	b.n	8044d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8044d74:	f7fe fff8 	bl	8043d68 <HAL_GetTick>
 8044d78:	4602      	mov	r2, r0
 8044d7a:	693b      	ldr	r3, [r7, #16]
 8044d7c:	1ad3      	subs	r3, r2, r3
 8044d7e:	2b64      	cmp	r3, #100	; 0x64
 8044d80:	d901      	bls.n	8044d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8044d82:	2303      	movs	r3, #3
 8044d84:	e207      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044d86:	4b5b      	ldr	r3, [pc, #364]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044d88:	681b      	ldr	r3, [r3, #0]
 8044d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044d8e:	2b00      	cmp	r3, #0
 8044d90:	d0f0      	beq.n	8044d74 <HAL_RCC_OscConfig+0xc0>
 8044d92:	e014      	b.n	8044dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8044d94:	f7fe ffe8 	bl	8043d68 <HAL_GetTick>
 8044d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044d9a:	e008      	b.n	8044dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8044d9c:	f7fe ffe4 	bl	8043d68 <HAL_GetTick>
 8044da0:	4602      	mov	r2, r0
 8044da2:	693b      	ldr	r3, [r7, #16]
 8044da4:	1ad3      	subs	r3, r2, r3
 8044da6:	2b64      	cmp	r3, #100	; 0x64
 8044da8:	d901      	bls.n	8044dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8044daa:	2303      	movs	r3, #3
 8044dac:	e1f3      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044dae:	4b51      	ldr	r3, [pc, #324]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044db0:	681b      	ldr	r3, [r3, #0]
 8044db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044db6:	2b00      	cmp	r3, #0
 8044db8:	d1f0      	bne.n	8044d9c <HAL_RCC_OscConfig+0xe8>
 8044dba:	e000      	b.n	8044dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8044dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8044dbe:	687b      	ldr	r3, [r7, #4]
 8044dc0:	681b      	ldr	r3, [r3, #0]
 8044dc2:	f003 0302 	and.w	r3, r3, #2
 8044dc6:	2b00      	cmp	r3, #0
 8044dc8:	d063      	beq.n	8044e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8044dca:	4b4a      	ldr	r3, [pc, #296]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044dcc:	689b      	ldr	r3, [r3, #8]
 8044dce:	f003 030c 	and.w	r3, r3, #12
 8044dd2:	2b00      	cmp	r3, #0
 8044dd4:	d00b      	beq.n	8044dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8044dd6:	4b47      	ldr	r3, [pc, #284]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044dd8:	689b      	ldr	r3, [r3, #8]
 8044dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8044dde:	2b08      	cmp	r3, #8
 8044de0:	d11c      	bne.n	8044e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8044de2:	4b44      	ldr	r3, [pc, #272]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044de4:	685b      	ldr	r3, [r3, #4]
 8044de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8044dea:	2b00      	cmp	r3, #0
 8044dec:	d116      	bne.n	8044e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8044dee:	4b41      	ldr	r3, [pc, #260]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044df0:	681b      	ldr	r3, [r3, #0]
 8044df2:	f003 0302 	and.w	r3, r3, #2
 8044df6:	2b00      	cmp	r3, #0
 8044df8:	d005      	beq.n	8044e06 <HAL_RCC_OscConfig+0x152>
 8044dfa:	687b      	ldr	r3, [r7, #4]
 8044dfc:	68db      	ldr	r3, [r3, #12]
 8044dfe:	2b01      	cmp	r3, #1
 8044e00:	d001      	beq.n	8044e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8044e02:	2301      	movs	r3, #1
 8044e04:	e1c7      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8044e06:	4b3b      	ldr	r3, [pc, #236]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e08:	681b      	ldr	r3, [r3, #0]
 8044e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8044e0e:	687b      	ldr	r3, [r7, #4]
 8044e10:	691b      	ldr	r3, [r3, #16]
 8044e12:	00db      	lsls	r3, r3, #3
 8044e14:	4937      	ldr	r1, [pc, #220]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e16:	4313      	orrs	r3, r2
 8044e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8044e1a:	e03a      	b.n	8044e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8044e1c:	687b      	ldr	r3, [r7, #4]
 8044e1e:	68db      	ldr	r3, [r3, #12]
 8044e20:	2b00      	cmp	r3, #0
 8044e22:	d020      	beq.n	8044e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8044e24:	4b34      	ldr	r3, [pc, #208]	; (8044ef8 <HAL_RCC_OscConfig+0x244>)
 8044e26:	2201      	movs	r2, #1
 8044e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044e2a:	f7fe ff9d 	bl	8043d68 <HAL_GetTick>
 8044e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044e30:	e008      	b.n	8044e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8044e32:	f7fe ff99 	bl	8043d68 <HAL_GetTick>
 8044e36:	4602      	mov	r2, r0
 8044e38:	693b      	ldr	r3, [r7, #16]
 8044e3a:	1ad3      	subs	r3, r2, r3
 8044e3c:	2b02      	cmp	r3, #2
 8044e3e:	d901      	bls.n	8044e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8044e40:	2303      	movs	r3, #3
 8044e42:	e1a8      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044e44:	4b2b      	ldr	r3, [pc, #172]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e46:	681b      	ldr	r3, [r3, #0]
 8044e48:	f003 0302 	and.w	r3, r3, #2
 8044e4c:	2b00      	cmp	r3, #0
 8044e4e:	d0f0      	beq.n	8044e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8044e50:	4b28      	ldr	r3, [pc, #160]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e52:	681b      	ldr	r3, [r3, #0]
 8044e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8044e58:	687b      	ldr	r3, [r7, #4]
 8044e5a:	691b      	ldr	r3, [r3, #16]
 8044e5c:	00db      	lsls	r3, r3, #3
 8044e5e:	4925      	ldr	r1, [pc, #148]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e60:	4313      	orrs	r3, r2
 8044e62:	600b      	str	r3, [r1, #0]
 8044e64:	e015      	b.n	8044e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8044e66:	4b24      	ldr	r3, [pc, #144]	; (8044ef8 <HAL_RCC_OscConfig+0x244>)
 8044e68:	2200      	movs	r2, #0
 8044e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044e6c:	f7fe ff7c 	bl	8043d68 <HAL_GetTick>
 8044e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8044e72:	e008      	b.n	8044e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8044e74:	f7fe ff78 	bl	8043d68 <HAL_GetTick>
 8044e78:	4602      	mov	r2, r0
 8044e7a:	693b      	ldr	r3, [r7, #16]
 8044e7c:	1ad3      	subs	r3, r2, r3
 8044e7e:	2b02      	cmp	r3, #2
 8044e80:	d901      	bls.n	8044e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8044e82:	2303      	movs	r3, #3
 8044e84:	e187      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8044e86:	4b1b      	ldr	r3, [pc, #108]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044e88:	681b      	ldr	r3, [r3, #0]
 8044e8a:	f003 0302 	and.w	r3, r3, #2
 8044e8e:	2b00      	cmp	r3, #0
 8044e90:	d1f0      	bne.n	8044e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8044e92:	687b      	ldr	r3, [r7, #4]
 8044e94:	681b      	ldr	r3, [r3, #0]
 8044e96:	f003 0308 	and.w	r3, r3, #8
 8044e9a:	2b00      	cmp	r3, #0
 8044e9c:	d036      	beq.n	8044f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8044e9e:	687b      	ldr	r3, [r7, #4]
 8044ea0:	695b      	ldr	r3, [r3, #20]
 8044ea2:	2b00      	cmp	r3, #0
 8044ea4:	d016      	beq.n	8044ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8044ea6:	4b15      	ldr	r3, [pc, #84]	; (8044efc <HAL_RCC_OscConfig+0x248>)
 8044ea8:	2201      	movs	r2, #1
 8044eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044eac:	f7fe ff5c 	bl	8043d68 <HAL_GetTick>
 8044eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8044eb2:	e008      	b.n	8044ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8044eb4:	f7fe ff58 	bl	8043d68 <HAL_GetTick>
 8044eb8:	4602      	mov	r2, r0
 8044eba:	693b      	ldr	r3, [r7, #16]
 8044ebc:	1ad3      	subs	r3, r2, r3
 8044ebe:	2b02      	cmp	r3, #2
 8044ec0:	d901      	bls.n	8044ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8044ec2:	2303      	movs	r3, #3
 8044ec4:	e167      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8044ec6:	4b0b      	ldr	r3, [pc, #44]	; (8044ef4 <HAL_RCC_OscConfig+0x240>)
 8044ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044eca:	f003 0302 	and.w	r3, r3, #2
 8044ece:	2b00      	cmp	r3, #0
 8044ed0:	d0f0      	beq.n	8044eb4 <HAL_RCC_OscConfig+0x200>
 8044ed2:	e01b      	b.n	8044f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8044ed4:	4b09      	ldr	r3, [pc, #36]	; (8044efc <HAL_RCC_OscConfig+0x248>)
 8044ed6:	2200      	movs	r2, #0
 8044ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8044eda:	f7fe ff45 	bl	8043d68 <HAL_GetTick>
 8044ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8044ee0:	e00e      	b.n	8044f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8044ee2:	f7fe ff41 	bl	8043d68 <HAL_GetTick>
 8044ee6:	4602      	mov	r2, r0
 8044ee8:	693b      	ldr	r3, [r7, #16]
 8044eea:	1ad3      	subs	r3, r2, r3
 8044eec:	2b02      	cmp	r3, #2
 8044eee:	d907      	bls.n	8044f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8044ef0:	2303      	movs	r3, #3
 8044ef2:	e150      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
 8044ef4:	40023800 	.word	0x40023800
 8044ef8:	42470000 	.word	0x42470000
 8044efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8044f00:	4b88      	ldr	r3, [pc, #544]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044f04:	f003 0302 	and.w	r3, r3, #2
 8044f08:	2b00      	cmp	r3, #0
 8044f0a:	d1ea      	bne.n	8044ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8044f0c:	687b      	ldr	r3, [r7, #4]
 8044f0e:	681b      	ldr	r3, [r3, #0]
 8044f10:	f003 0304 	and.w	r3, r3, #4
 8044f14:	2b00      	cmp	r3, #0
 8044f16:	f000 8097 	beq.w	8045048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8044f1a:	2300      	movs	r3, #0
 8044f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8044f1e:	4b81      	ldr	r3, [pc, #516]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044f26:	2b00      	cmp	r3, #0
 8044f28:	d10f      	bne.n	8044f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8044f2a:	2300      	movs	r3, #0
 8044f2c:	60bb      	str	r3, [r7, #8]
 8044f2e:	4b7d      	ldr	r3, [pc, #500]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044f32:	4a7c      	ldr	r2, [pc, #496]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044f38:	6413      	str	r3, [r2, #64]	; 0x40
 8044f3a:	4b7a      	ldr	r3, [pc, #488]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044f42:	60bb      	str	r3, [r7, #8]
 8044f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8044f46:	2301      	movs	r3, #1
 8044f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044f4a:	4b77      	ldr	r3, [pc, #476]	; (8045128 <HAL_RCC_OscConfig+0x474>)
 8044f4c:	681b      	ldr	r3, [r3, #0]
 8044f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044f52:	2b00      	cmp	r3, #0
 8044f54:	d118      	bne.n	8044f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8044f56:	4b74      	ldr	r3, [pc, #464]	; (8045128 <HAL_RCC_OscConfig+0x474>)
 8044f58:	681b      	ldr	r3, [r3, #0]
 8044f5a:	4a73      	ldr	r2, [pc, #460]	; (8045128 <HAL_RCC_OscConfig+0x474>)
 8044f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8044f62:	f7fe ff01 	bl	8043d68 <HAL_GetTick>
 8044f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044f68:	e008      	b.n	8044f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044f6a:	f7fe fefd 	bl	8043d68 <HAL_GetTick>
 8044f6e:	4602      	mov	r2, r0
 8044f70:	693b      	ldr	r3, [r7, #16]
 8044f72:	1ad3      	subs	r3, r2, r3
 8044f74:	2b02      	cmp	r3, #2
 8044f76:	d901      	bls.n	8044f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8044f78:	2303      	movs	r3, #3
 8044f7a:	e10c      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8044f7c:	4b6a      	ldr	r3, [pc, #424]	; (8045128 <HAL_RCC_OscConfig+0x474>)
 8044f7e:	681b      	ldr	r3, [r3, #0]
 8044f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044f84:	2b00      	cmp	r3, #0
 8044f86:	d0f0      	beq.n	8044f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044f88:	687b      	ldr	r3, [r7, #4]
 8044f8a:	689b      	ldr	r3, [r3, #8]
 8044f8c:	2b01      	cmp	r3, #1
 8044f8e:	d106      	bne.n	8044f9e <HAL_RCC_OscConfig+0x2ea>
 8044f90:	4b64      	ldr	r3, [pc, #400]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044f94:	4a63      	ldr	r2, [pc, #396]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044f96:	f043 0301 	orr.w	r3, r3, #1
 8044f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8044f9c:	e01c      	b.n	8044fd8 <HAL_RCC_OscConfig+0x324>
 8044f9e:	687b      	ldr	r3, [r7, #4]
 8044fa0:	689b      	ldr	r3, [r3, #8]
 8044fa2:	2b05      	cmp	r3, #5
 8044fa4:	d10c      	bne.n	8044fc0 <HAL_RCC_OscConfig+0x30c>
 8044fa6:	4b5f      	ldr	r3, [pc, #380]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044faa:	4a5e      	ldr	r2, [pc, #376]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fac:	f043 0304 	orr.w	r3, r3, #4
 8044fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8044fb2:	4b5c      	ldr	r3, [pc, #368]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044fb6:	4a5b      	ldr	r2, [pc, #364]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fb8:	f043 0301 	orr.w	r3, r3, #1
 8044fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8044fbe:	e00b      	b.n	8044fd8 <HAL_RCC_OscConfig+0x324>
 8044fc0:	4b58      	ldr	r3, [pc, #352]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044fc4:	4a57      	ldr	r2, [pc, #348]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fc6:	f023 0301 	bic.w	r3, r3, #1
 8044fca:	6713      	str	r3, [r2, #112]	; 0x70
 8044fcc:	4b55      	ldr	r3, [pc, #340]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044fd0:	4a54      	ldr	r2, [pc, #336]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8044fd2:	f023 0304 	bic.w	r3, r3, #4
 8044fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8044fd8:	687b      	ldr	r3, [r7, #4]
 8044fda:	689b      	ldr	r3, [r3, #8]
 8044fdc:	2b00      	cmp	r3, #0
 8044fde:	d015      	beq.n	804500c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044fe0:	f7fe fec2 	bl	8043d68 <HAL_GetTick>
 8044fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044fe6:	e00a      	b.n	8044ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8044fe8:	f7fe febe 	bl	8043d68 <HAL_GetTick>
 8044fec:	4602      	mov	r2, r0
 8044fee:	693b      	ldr	r3, [r7, #16]
 8044ff0:	1ad3      	subs	r3, r2, r3
 8044ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8044ff6:	4293      	cmp	r3, r2
 8044ff8:	d901      	bls.n	8044ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8044ffa:	2303      	movs	r3, #3
 8044ffc:	e0cb      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044ffe:	4b49      	ldr	r3, [pc, #292]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8045000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045002:	f003 0302 	and.w	r3, r3, #2
 8045006:	2b00      	cmp	r3, #0
 8045008:	d0ee      	beq.n	8044fe8 <HAL_RCC_OscConfig+0x334>
 804500a:	e014      	b.n	8045036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804500c:	f7fe feac 	bl	8043d68 <HAL_GetTick>
 8045010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8045012:	e00a      	b.n	804502a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045014:	f7fe fea8 	bl	8043d68 <HAL_GetTick>
 8045018:	4602      	mov	r2, r0
 804501a:	693b      	ldr	r3, [r7, #16]
 804501c:	1ad3      	subs	r3, r2, r3
 804501e:	f241 3288 	movw	r2, #5000	; 0x1388
 8045022:	4293      	cmp	r3, r2
 8045024:	d901      	bls.n	804502a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8045026:	2303      	movs	r3, #3
 8045028:	e0b5      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 804502a:	4b3e      	ldr	r3, [pc, #248]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 804502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804502e:	f003 0302 	and.w	r3, r3, #2
 8045032:	2b00      	cmp	r3, #0
 8045034:	d1ee      	bne.n	8045014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8045036:	7dfb      	ldrb	r3, [r7, #23]
 8045038:	2b01      	cmp	r3, #1
 804503a:	d105      	bne.n	8045048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804503c:	4b39      	ldr	r3, [pc, #228]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 804503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045040:	4a38      	ldr	r2, [pc, #224]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8045042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8045046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8045048:	687b      	ldr	r3, [r7, #4]
 804504a:	699b      	ldr	r3, [r3, #24]
 804504c:	2b00      	cmp	r3, #0
 804504e:	f000 80a1 	beq.w	8045194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8045052:	4b34      	ldr	r3, [pc, #208]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8045054:	689b      	ldr	r3, [r3, #8]
 8045056:	f003 030c 	and.w	r3, r3, #12
 804505a:	2b08      	cmp	r3, #8
 804505c:	d05c      	beq.n	8045118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 804505e:	687b      	ldr	r3, [r7, #4]
 8045060:	699b      	ldr	r3, [r3, #24]
 8045062:	2b02      	cmp	r3, #2
 8045064:	d141      	bne.n	80450ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8045066:	4b31      	ldr	r3, [pc, #196]	; (804512c <HAL_RCC_OscConfig+0x478>)
 8045068:	2200      	movs	r2, #0
 804506a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 804506c:	f7fe fe7c 	bl	8043d68 <HAL_GetTick>
 8045070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045072:	e008      	b.n	8045086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8045074:	f7fe fe78 	bl	8043d68 <HAL_GetTick>
 8045078:	4602      	mov	r2, r0
 804507a:	693b      	ldr	r3, [r7, #16]
 804507c:	1ad3      	subs	r3, r2, r3
 804507e:	2b02      	cmp	r3, #2
 8045080:	d901      	bls.n	8045086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8045082:	2303      	movs	r3, #3
 8045084:	e087      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8045086:	4b27      	ldr	r3, [pc, #156]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 8045088:	681b      	ldr	r3, [r3, #0]
 804508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804508e:	2b00      	cmp	r3, #0
 8045090:	d1f0      	bne.n	8045074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8045092:	687b      	ldr	r3, [r7, #4]
 8045094:	69da      	ldr	r2, [r3, #28]
 8045096:	687b      	ldr	r3, [r7, #4]
 8045098:	6a1b      	ldr	r3, [r3, #32]
 804509a:	431a      	orrs	r2, r3
 804509c:	687b      	ldr	r3, [r7, #4]
 804509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80450a0:	019b      	lsls	r3, r3, #6
 80450a2:	431a      	orrs	r2, r3
 80450a4:	687b      	ldr	r3, [r7, #4]
 80450a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450a8:	085b      	lsrs	r3, r3, #1
 80450aa:	3b01      	subs	r3, #1
 80450ac:	041b      	lsls	r3, r3, #16
 80450ae:	431a      	orrs	r2, r3
 80450b0:	687b      	ldr	r3, [r7, #4]
 80450b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80450b4:	061b      	lsls	r3, r3, #24
 80450b6:	491b      	ldr	r1, [pc, #108]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 80450b8:	4313      	orrs	r3, r2
 80450ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80450bc:	4b1b      	ldr	r3, [pc, #108]	; (804512c <HAL_RCC_OscConfig+0x478>)
 80450be:	2201      	movs	r2, #1
 80450c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80450c2:	f7fe fe51 	bl	8043d68 <HAL_GetTick>
 80450c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80450c8:	e008      	b.n	80450dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80450ca:	f7fe fe4d 	bl	8043d68 <HAL_GetTick>
 80450ce:	4602      	mov	r2, r0
 80450d0:	693b      	ldr	r3, [r7, #16]
 80450d2:	1ad3      	subs	r3, r2, r3
 80450d4:	2b02      	cmp	r3, #2
 80450d6:	d901      	bls.n	80450dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80450d8:	2303      	movs	r3, #3
 80450da:	e05c      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80450dc:	4b11      	ldr	r3, [pc, #68]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 80450de:	681b      	ldr	r3, [r3, #0]
 80450e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80450e4:	2b00      	cmp	r3, #0
 80450e6:	d0f0      	beq.n	80450ca <HAL_RCC_OscConfig+0x416>
 80450e8:	e054      	b.n	8045194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80450ea:	4b10      	ldr	r3, [pc, #64]	; (804512c <HAL_RCC_OscConfig+0x478>)
 80450ec:	2200      	movs	r2, #0
 80450ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80450f0:	f7fe fe3a 	bl	8043d68 <HAL_GetTick>
 80450f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80450f6:	e008      	b.n	804510a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80450f8:	f7fe fe36 	bl	8043d68 <HAL_GetTick>
 80450fc:	4602      	mov	r2, r0
 80450fe:	693b      	ldr	r3, [r7, #16]
 8045100:	1ad3      	subs	r3, r2, r3
 8045102:	2b02      	cmp	r3, #2
 8045104:	d901      	bls.n	804510a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8045106:	2303      	movs	r3, #3
 8045108:	e045      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804510a:	4b06      	ldr	r3, [pc, #24]	; (8045124 <HAL_RCC_OscConfig+0x470>)
 804510c:	681b      	ldr	r3, [r3, #0]
 804510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045112:	2b00      	cmp	r3, #0
 8045114:	d1f0      	bne.n	80450f8 <HAL_RCC_OscConfig+0x444>
 8045116:	e03d      	b.n	8045194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8045118:	687b      	ldr	r3, [r7, #4]
 804511a:	699b      	ldr	r3, [r3, #24]
 804511c:	2b01      	cmp	r3, #1
 804511e:	d107      	bne.n	8045130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8045120:	2301      	movs	r3, #1
 8045122:	e038      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
 8045124:	40023800 	.word	0x40023800
 8045128:	40007000 	.word	0x40007000
 804512c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8045130:	4b1b      	ldr	r3, [pc, #108]	; (80451a0 <HAL_RCC_OscConfig+0x4ec>)
 8045132:	685b      	ldr	r3, [r3, #4]
 8045134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8045136:	687b      	ldr	r3, [r7, #4]
 8045138:	699b      	ldr	r3, [r3, #24]
 804513a:	2b01      	cmp	r3, #1
 804513c:	d028      	beq.n	8045190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804513e:	68fb      	ldr	r3, [r7, #12]
 8045140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8045144:	687b      	ldr	r3, [r7, #4]
 8045146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8045148:	429a      	cmp	r2, r3
 804514a:	d121      	bne.n	8045190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 804514c:	68fb      	ldr	r3, [r7, #12]
 804514e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8045152:	687b      	ldr	r3, [r7, #4]
 8045154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8045156:	429a      	cmp	r2, r3
 8045158:	d11a      	bne.n	8045190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 804515a:	68fa      	ldr	r2, [r7, #12]
 804515c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8045160:	4013      	ands	r3, r2
 8045162:	687a      	ldr	r2, [r7, #4]
 8045164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8045166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8045168:	4293      	cmp	r3, r2
 804516a:	d111      	bne.n	8045190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 804516c:	68fb      	ldr	r3, [r7, #12]
 804516e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8045172:	687b      	ldr	r3, [r7, #4]
 8045174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045176:	085b      	lsrs	r3, r3, #1
 8045178:	3b01      	subs	r3, #1
 804517a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 804517c:	429a      	cmp	r2, r3
 804517e:	d107      	bne.n	8045190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8045180:	68fb      	ldr	r3, [r7, #12]
 8045182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8045186:	687b      	ldr	r3, [r7, #4]
 8045188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804518a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 804518c:	429a      	cmp	r2, r3
 804518e:	d001      	beq.n	8045194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8045190:	2301      	movs	r3, #1
 8045192:	e000      	b.n	8045196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8045194:	2300      	movs	r3, #0
}
 8045196:	4618      	mov	r0, r3
 8045198:	3718      	adds	r7, #24
 804519a:	46bd      	mov	sp, r7
 804519c:	bd80      	pop	{r7, pc}
 804519e:	bf00      	nop
 80451a0:	40023800 	.word	0x40023800

080451a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80451a4:	b580      	push	{r7, lr}
 80451a6:	b084      	sub	sp, #16
 80451a8:	af00      	add	r7, sp, #0
 80451aa:	6078      	str	r0, [r7, #4]
 80451ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80451ae:	687b      	ldr	r3, [r7, #4]
 80451b0:	2b00      	cmp	r3, #0
 80451b2:	d101      	bne.n	80451b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80451b4:	2301      	movs	r3, #1
 80451b6:	e0cc      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80451b8:	4b68      	ldr	r3, [pc, #416]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80451ba:	681b      	ldr	r3, [r3, #0]
 80451bc:	f003 0307 	and.w	r3, r3, #7
 80451c0:	683a      	ldr	r2, [r7, #0]
 80451c2:	429a      	cmp	r2, r3
 80451c4:	d90c      	bls.n	80451e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80451c6:	4b65      	ldr	r3, [pc, #404]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80451c8:	683a      	ldr	r2, [r7, #0]
 80451ca:	b2d2      	uxtb	r2, r2
 80451cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80451ce:	4b63      	ldr	r3, [pc, #396]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80451d0:	681b      	ldr	r3, [r3, #0]
 80451d2:	f003 0307 	and.w	r3, r3, #7
 80451d6:	683a      	ldr	r2, [r7, #0]
 80451d8:	429a      	cmp	r2, r3
 80451da:	d001      	beq.n	80451e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80451dc:	2301      	movs	r3, #1
 80451de:	e0b8      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80451e0:	687b      	ldr	r3, [r7, #4]
 80451e2:	681b      	ldr	r3, [r3, #0]
 80451e4:	f003 0302 	and.w	r3, r3, #2
 80451e8:	2b00      	cmp	r3, #0
 80451ea:	d020      	beq.n	804522e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80451ec:	687b      	ldr	r3, [r7, #4]
 80451ee:	681b      	ldr	r3, [r3, #0]
 80451f0:	f003 0304 	and.w	r3, r3, #4
 80451f4:	2b00      	cmp	r3, #0
 80451f6:	d005      	beq.n	8045204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80451f8:	4b59      	ldr	r3, [pc, #356]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 80451fa:	689b      	ldr	r3, [r3, #8]
 80451fc:	4a58      	ldr	r2, [pc, #352]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 80451fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8045202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8045204:	687b      	ldr	r3, [r7, #4]
 8045206:	681b      	ldr	r3, [r3, #0]
 8045208:	f003 0308 	and.w	r3, r3, #8
 804520c:	2b00      	cmp	r3, #0
 804520e:	d005      	beq.n	804521c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8045210:	4b53      	ldr	r3, [pc, #332]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045212:	689b      	ldr	r3, [r3, #8]
 8045214:	4a52      	ldr	r2, [pc, #328]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 804521a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804521c:	4b50      	ldr	r3, [pc, #320]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 804521e:	689b      	ldr	r3, [r3, #8]
 8045220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8045224:	687b      	ldr	r3, [r7, #4]
 8045226:	689b      	ldr	r3, [r3, #8]
 8045228:	494d      	ldr	r1, [pc, #308]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 804522a:	4313      	orrs	r3, r2
 804522c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804522e:	687b      	ldr	r3, [r7, #4]
 8045230:	681b      	ldr	r3, [r3, #0]
 8045232:	f003 0301 	and.w	r3, r3, #1
 8045236:	2b00      	cmp	r3, #0
 8045238:	d044      	beq.n	80452c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804523a:	687b      	ldr	r3, [r7, #4]
 804523c:	685b      	ldr	r3, [r3, #4]
 804523e:	2b01      	cmp	r3, #1
 8045240:	d107      	bne.n	8045252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8045242:	4b47      	ldr	r3, [pc, #284]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045244:	681b      	ldr	r3, [r3, #0]
 8045246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804524a:	2b00      	cmp	r3, #0
 804524c:	d119      	bne.n	8045282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804524e:	2301      	movs	r3, #1
 8045250:	e07f      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8045252:	687b      	ldr	r3, [r7, #4]
 8045254:	685b      	ldr	r3, [r3, #4]
 8045256:	2b02      	cmp	r3, #2
 8045258:	d003      	beq.n	8045262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 804525a:	687b      	ldr	r3, [r7, #4]
 804525c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804525e:	2b03      	cmp	r3, #3
 8045260:	d107      	bne.n	8045272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8045262:	4b3f      	ldr	r3, [pc, #252]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045264:	681b      	ldr	r3, [r3, #0]
 8045266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804526a:	2b00      	cmp	r3, #0
 804526c:	d109      	bne.n	8045282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804526e:	2301      	movs	r3, #1
 8045270:	e06f      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8045272:	4b3b      	ldr	r3, [pc, #236]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045274:	681b      	ldr	r3, [r3, #0]
 8045276:	f003 0302 	and.w	r3, r3, #2
 804527a:	2b00      	cmp	r3, #0
 804527c:	d101      	bne.n	8045282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804527e:	2301      	movs	r3, #1
 8045280:	e067      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8045282:	4b37      	ldr	r3, [pc, #220]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045284:	689b      	ldr	r3, [r3, #8]
 8045286:	f023 0203 	bic.w	r2, r3, #3
 804528a:	687b      	ldr	r3, [r7, #4]
 804528c:	685b      	ldr	r3, [r3, #4]
 804528e:	4934      	ldr	r1, [pc, #208]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045290:	4313      	orrs	r3, r2
 8045292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8045294:	f7fe fd68 	bl	8043d68 <HAL_GetTick>
 8045298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804529a:	e00a      	b.n	80452b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804529c:	f7fe fd64 	bl	8043d68 <HAL_GetTick>
 80452a0:	4602      	mov	r2, r0
 80452a2:	68fb      	ldr	r3, [r7, #12]
 80452a4:	1ad3      	subs	r3, r2, r3
 80452a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80452aa:	4293      	cmp	r3, r2
 80452ac:	d901      	bls.n	80452b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80452ae:	2303      	movs	r3, #3
 80452b0:	e04f      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80452b2:	4b2b      	ldr	r3, [pc, #172]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 80452b4:	689b      	ldr	r3, [r3, #8]
 80452b6:	f003 020c 	and.w	r2, r3, #12
 80452ba:	687b      	ldr	r3, [r7, #4]
 80452bc:	685b      	ldr	r3, [r3, #4]
 80452be:	009b      	lsls	r3, r3, #2
 80452c0:	429a      	cmp	r2, r3
 80452c2:	d1eb      	bne.n	804529c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80452c4:	4b25      	ldr	r3, [pc, #148]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80452c6:	681b      	ldr	r3, [r3, #0]
 80452c8:	f003 0307 	and.w	r3, r3, #7
 80452cc:	683a      	ldr	r2, [r7, #0]
 80452ce:	429a      	cmp	r2, r3
 80452d0:	d20c      	bcs.n	80452ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80452d2:	4b22      	ldr	r3, [pc, #136]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80452d4:	683a      	ldr	r2, [r7, #0]
 80452d6:	b2d2      	uxtb	r2, r2
 80452d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80452da:	4b20      	ldr	r3, [pc, #128]	; (804535c <HAL_RCC_ClockConfig+0x1b8>)
 80452dc:	681b      	ldr	r3, [r3, #0]
 80452de:	f003 0307 	and.w	r3, r3, #7
 80452e2:	683a      	ldr	r2, [r7, #0]
 80452e4:	429a      	cmp	r2, r3
 80452e6:	d001      	beq.n	80452ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80452e8:	2301      	movs	r3, #1
 80452ea:	e032      	b.n	8045352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80452ec:	687b      	ldr	r3, [r7, #4]
 80452ee:	681b      	ldr	r3, [r3, #0]
 80452f0:	f003 0304 	and.w	r3, r3, #4
 80452f4:	2b00      	cmp	r3, #0
 80452f6:	d008      	beq.n	804530a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80452f8:	4b19      	ldr	r3, [pc, #100]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 80452fa:	689b      	ldr	r3, [r3, #8]
 80452fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8045300:	687b      	ldr	r3, [r7, #4]
 8045302:	68db      	ldr	r3, [r3, #12]
 8045304:	4916      	ldr	r1, [pc, #88]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045306:	4313      	orrs	r3, r2
 8045308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804530a:	687b      	ldr	r3, [r7, #4]
 804530c:	681b      	ldr	r3, [r3, #0]
 804530e:	f003 0308 	and.w	r3, r3, #8
 8045312:	2b00      	cmp	r3, #0
 8045314:	d009      	beq.n	804532a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8045316:	4b12      	ldr	r3, [pc, #72]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045318:	689b      	ldr	r3, [r3, #8]
 804531a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804531e:	687b      	ldr	r3, [r7, #4]
 8045320:	691b      	ldr	r3, [r3, #16]
 8045322:	00db      	lsls	r3, r3, #3
 8045324:	490e      	ldr	r1, [pc, #56]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045326:	4313      	orrs	r3, r2
 8045328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 804532a:	f000 f821 	bl	8045370 <HAL_RCC_GetSysClockFreq>
 804532e:	4602      	mov	r2, r0
 8045330:	4b0b      	ldr	r3, [pc, #44]	; (8045360 <HAL_RCC_ClockConfig+0x1bc>)
 8045332:	689b      	ldr	r3, [r3, #8]
 8045334:	091b      	lsrs	r3, r3, #4
 8045336:	f003 030f 	and.w	r3, r3, #15
 804533a:	490a      	ldr	r1, [pc, #40]	; (8045364 <HAL_RCC_ClockConfig+0x1c0>)
 804533c:	5ccb      	ldrb	r3, [r1, r3]
 804533e:	fa22 f303 	lsr.w	r3, r2, r3
 8045342:	4a09      	ldr	r2, [pc, #36]	; (8045368 <HAL_RCC_ClockConfig+0x1c4>)
 8045344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8045346:	4b09      	ldr	r3, [pc, #36]	; (804536c <HAL_RCC_ClockConfig+0x1c8>)
 8045348:	681b      	ldr	r3, [r3, #0]
 804534a:	4618      	mov	r0, r3
 804534c:	f7fe fcc8 	bl	8043ce0 <HAL_InitTick>

  return HAL_OK;
 8045350:	2300      	movs	r3, #0
}
 8045352:	4618      	mov	r0, r3
 8045354:	3710      	adds	r7, #16
 8045356:	46bd      	mov	sp, r7
 8045358:	bd80      	pop	{r7, pc}
 804535a:	bf00      	nop
 804535c:	40023c00 	.word	0x40023c00
 8045360:	40023800 	.word	0x40023800
 8045364:	0804aedc 	.word	0x0804aedc
 8045368:	20000024 	.word	0x20000024
 804536c:	20000028 	.word	0x20000028

08045370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8045370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8045374:	b094      	sub	sp, #80	; 0x50
 8045376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8045378:	2300      	movs	r3, #0
 804537a:	647b      	str	r3, [r7, #68]	; 0x44
 804537c:	2300      	movs	r3, #0
 804537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8045380:	2300      	movs	r3, #0
 8045382:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8045384:	2300      	movs	r3, #0
 8045386:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8045388:	4b79      	ldr	r3, [pc, #484]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 804538a:	689b      	ldr	r3, [r3, #8]
 804538c:	f003 030c 	and.w	r3, r3, #12
 8045390:	2b08      	cmp	r3, #8
 8045392:	d00d      	beq.n	80453b0 <HAL_RCC_GetSysClockFreq+0x40>
 8045394:	2b08      	cmp	r3, #8
 8045396:	f200 80e1 	bhi.w	804555c <HAL_RCC_GetSysClockFreq+0x1ec>
 804539a:	2b00      	cmp	r3, #0
 804539c:	d002      	beq.n	80453a4 <HAL_RCC_GetSysClockFreq+0x34>
 804539e:	2b04      	cmp	r3, #4
 80453a0:	d003      	beq.n	80453aa <HAL_RCC_GetSysClockFreq+0x3a>
 80453a2:	e0db      	b.n	804555c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80453a4:	4b73      	ldr	r3, [pc, #460]	; (8045574 <HAL_RCC_GetSysClockFreq+0x204>)
 80453a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80453a8:	e0db      	b.n	8045562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80453aa:	4b73      	ldr	r3, [pc, #460]	; (8045578 <HAL_RCC_GetSysClockFreq+0x208>)
 80453ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80453ae:	e0d8      	b.n	8045562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80453b0:	4b6f      	ldr	r3, [pc, #444]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 80453b2:	685b      	ldr	r3, [r3, #4]
 80453b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80453b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80453ba:	4b6d      	ldr	r3, [pc, #436]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 80453bc:	685b      	ldr	r3, [r3, #4]
 80453be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80453c2:	2b00      	cmp	r3, #0
 80453c4:	d063      	beq.n	804548e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80453c6:	4b6a      	ldr	r3, [pc, #424]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 80453c8:	685b      	ldr	r3, [r3, #4]
 80453ca:	099b      	lsrs	r3, r3, #6
 80453cc:	2200      	movs	r2, #0
 80453ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80453d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80453d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80453d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80453d8:	633b      	str	r3, [r7, #48]	; 0x30
 80453da:	2300      	movs	r3, #0
 80453dc:	637b      	str	r3, [r7, #52]	; 0x34
 80453de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80453e2:	4622      	mov	r2, r4
 80453e4:	462b      	mov	r3, r5
 80453e6:	f04f 0000 	mov.w	r0, #0
 80453ea:	f04f 0100 	mov.w	r1, #0
 80453ee:	0159      	lsls	r1, r3, #5
 80453f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80453f4:	0150      	lsls	r0, r2, #5
 80453f6:	4602      	mov	r2, r0
 80453f8:	460b      	mov	r3, r1
 80453fa:	4621      	mov	r1, r4
 80453fc:	1a51      	subs	r1, r2, r1
 80453fe:	6139      	str	r1, [r7, #16]
 8045400:	4629      	mov	r1, r5
 8045402:	eb63 0301 	sbc.w	r3, r3, r1
 8045406:	617b      	str	r3, [r7, #20]
 8045408:	f04f 0200 	mov.w	r2, #0
 804540c:	f04f 0300 	mov.w	r3, #0
 8045410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8045414:	4659      	mov	r1, fp
 8045416:	018b      	lsls	r3, r1, #6
 8045418:	4651      	mov	r1, sl
 804541a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 804541e:	4651      	mov	r1, sl
 8045420:	018a      	lsls	r2, r1, #6
 8045422:	4651      	mov	r1, sl
 8045424:	ebb2 0801 	subs.w	r8, r2, r1
 8045428:	4659      	mov	r1, fp
 804542a:	eb63 0901 	sbc.w	r9, r3, r1
 804542e:	f04f 0200 	mov.w	r2, #0
 8045432:	f04f 0300 	mov.w	r3, #0
 8045436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804543a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804543e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8045442:	4690      	mov	r8, r2
 8045444:	4699      	mov	r9, r3
 8045446:	4623      	mov	r3, r4
 8045448:	eb18 0303 	adds.w	r3, r8, r3
 804544c:	60bb      	str	r3, [r7, #8]
 804544e:	462b      	mov	r3, r5
 8045450:	eb49 0303 	adc.w	r3, r9, r3
 8045454:	60fb      	str	r3, [r7, #12]
 8045456:	f04f 0200 	mov.w	r2, #0
 804545a:	f04f 0300 	mov.w	r3, #0
 804545e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8045462:	4629      	mov	r1, r5
 8045464:	024b      	lsls	r3, r1, #9
 8045466:	4621      	mov	r1, r4
 8045468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 804546c:	4621      	mov	r1, r4
 804546e:	024a      	lsls	r2, r1, #9
 8045470:	4610      	mov	r0, r2
 8045472:	4619      	mov	r1, r3
 8045474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8045476:	2200      	movs	r2, #0
 8045478:	62bb      	str	r3, [r7, #40]	; 0x28
 804547a:	62fa      	str	r2, [r7, #44]	; 0x2c
 804547c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8045480:	f7fb fbc2 	bl	8040c08 <__aeabi_uldivmod>
 8045484:	4602      	mov	r2, r0
 8045486:	460b      	mov	r3, r1
 8045488:	4613      	mov	r3, r2
 804548a:	64fb      	str	r3, [r7, #76]	; 0x4c
 804548c:	e058      	b.n	8045540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804548e:	4b38      	ldr	r3, [pc, #224]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 8045490:	685b      	ldr	r3, [r3, #4]
 8045492:	099b      	lsrs	r3, r3, #6
 8045494:	2200      	movs	r2, #0
 8045496:	4618      	mov	r0, r3
 8045498:	4611      	mov	r1, r2
 804549a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 804549e:	623b      	str	r3, [r7, #32]
 80454a0:	2300      	movs	r3, #0
 80454a2:	627b      	str	r3, [r7, #36]	; 0x24
 80454a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80454a8:	4642      	mov	r2, r8
 80454aa:	464b      	mov	r3, r9
 80454ac:	f04f 0000 	mov.w	r0, #0
 80454b0:	f04f 0100 	mov.w	r1, #0
 80454b4:	0159      	lsls	r1, r3, #5
 80454b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80454ba:	0150      	lsls	r0, r2, #5
 80454bc:	4602      	mov	r2, r0
 80454be:	460b      	mov	r3, r1
 80454c0:	4641      	mov	r1, r8
 80454c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80454c6:	4649      	mov	r1, r9
 80454c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80454cc:	f04f 0200 	mov.w	r2, #0
 80454d0:	f04f 0300 	mov.w	r3, #0
 80454d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80454d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80454dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80454e0:	ebb2 040a 	subs.w	r4, r2, sl
 80454e4:	eb63 050b 	sbc.w	r5, r3, fp
 80454e8:	f04f 0200 	mov.w	r2, #0
 80454ec:	f04f 0300 	mov.w	r3, #0
 80454f0:	00eb      	lsls	r3, r5, #3
 80454f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80454f6:	00e2      	lsls	r2, r4, #3
 80454f8:	4614      	mov	r4, r2
 80454fa:	461d      	mov	r5, r3
 80454fc:	4643      	mov	r3, r8
 80454fe:	18e3      	adds	r3, r4, r3
 8045500:	603b      	str	r3, [r7, #0]
 8045502:	464b      	mov	r3, r9
 8045504:	eb45 0303 	adc.w	r3, r5, r3
 8045508:	607b      	str	r3, [r7, #4]
 804550a:	f04f 0200 	mov.w	r2, #0
 804550e:	f04f 0300 	mov.w	r3, #0
 8045512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8045516:	4629      	mov	r1, r5
 8045518:	028b      	lsls	r3, r1, #10
 804551a:	4621      	mov	r1, r4
 804551c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8045520:	4621      	mov	r1, r4
 8045522:	028a      	lsls	r2, r1, #10
 8045524:	4610      	mov	r0, r2
 8045526:	4619      	mov	r1, r3
 8045528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804552a:	2200      	movs	r2, #0
 804552c:	61bb      	str	r3, [r7, #24]
 804552e:	61fa      	str	r2, [r7, #28]
 8045530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8045534:	f7fb fb68 	bl	8040c08 <__aeabi_uldivmod>
 8045538:	4602      	mov	r2, r0
 804553a:	460b      	mov	r3, r1
 804553c:	4613      	mov	r3, r2
 804553e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8045540:	4b0b      	ldr	r3, [pc, #44]	; (8045570 <HAL_RCC_GetSysClockFreq+0x200>)
 8045542:	685b      	ldr	r3, [r3, #4]
 8045544:	0c1b      	lsrs	r3, r3, #16
 8045546:	f003 0303 	and.w	r3, r3, #3
 804554a:	3301      	adds	r3, #1
 804554c:	005b      	lsls	r3, r3, #1
 804554e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8045550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8045552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8045554:	fbb2 f3f3 	udiv	r3, r2, r3
 8045558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 804555a:	e002      	b.n	8045562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 804555c:	4b05      	ldr	r3, [pc, #20]	; (8045574 <HAL_RCC_GetSysClockFreq+0x204>)
 804555e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8045560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8045562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8045564:	4618      	mov	r0, r3
 8045566:	3750      	adds	r7, #80	; 0x50
 8045568:	46bd      	mov	sp, r7
 804556a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804556e:	bf00      	nop
 8045570:	40023800 	.word	0x40023800
 8045574:	00f42400 	.word	0x00f42400
 8045578:	007a1200 	.word	0x007a1200

0804557c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804557c:	b480      	push	{r7}
 804557e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8045580:	4b03      	ldr	r3, [pc, #12]	; (8045590 <HAL_RCC_GetHCLKFreq+0x14>)
 8045582:	681b      	ldr	r3, [r3, #0]
}
 8045584:	4618      	mov	r0, r3
 8045586:	46bd      	mov	sp, r7
 8045588:	f85d 7b04 	ldr.w	r7, [sp], #4
 804558c:	4770      	bx	lr
 804558e:	bf00      	nop
 8045590:	20000024 	.word	0x20000024

08045594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8045594:	b580      	push	{r7, lr}
 8045596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8045598:	f7ff fff0 	bl	804557c <HAL_RCC_GetHCLKFreq>
 804559c:	4602      	mov	r2, r0
 804559e:	4b05      	ldr	r3, [pc, #20]	; (80455b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80455a0:	689b      	ldr	r3, [r3, #8]
 80455a2:	0a9b      	lsrs	r3, r3, #10
 80455a4:	f003 0307 	and.w	r3, r3, #7
 80455a8:	4903      	ldr	r1, [pc, #12]	; (80455b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80455aa:	5ccb      	ldrb	r3, [r1, r3]
 80455ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80455b0:	4618      	mov	r0, r3
 80455b2:	bd80      	pop	{r7, pc}
 80455b4:	40023800 	.word	0x40023800
 80455b8:	0804aeec 	.word	0x0804aeec

080455bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80455bc:	b580      	push	{r7, lr}
 80455be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80455c0:	f7ff ffdc 	bl	804557c <HAL_RCC_GetHCLKFreq>
 80455c4:	4602      	mov	r2, r0
 80455c6:	4b05      	ldr	r3, [pc, #20]	; (80455dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80455c8:	689b      	ldr	r3, [r3, #8]
 80455ca:	0b5b      	lsrs	r3, r3, #13
 80455cc:	f003 0307 	and.w	r3, r3, #7
 80455d0:	4903      	ldr	r1, [pc, #12]	; (80455e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80455d2:	5ccb      	ldrb	r3, [r1, r3]
 80455d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80455d8:	4618      	mov	r0, r3
 80455da:	bd80      	pop	{r7, pc}
 80455dc:	40023800 	.word	0x40023800
 80455e0:	0804aeec 	.word	0x0804aeec

080455e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80455e4:	b580      	push	{r7, lr}
 80455e6:	b082      	sub	sp, #8
 80455e8:	af00      	add	r7, sp, #0
 80455ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80455ec:	687b      	ldr	r3, [r7, #4]
 80455ee:	2b00      	cmp	r3, #0
 80455f0:	d101      	bne.n	80455f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80455f2:	2301      	movs	r3, #1
 80455f4:	e07b      	b.n	80456ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80455f6:	687b      	ldr	r3, [r7, #4]
 80455f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80455fa:	2b00      	cmp	r3, #0
 80455fc:	d108      	bne.n	8045610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80455fe:	687b      	ldr	r3, [r7, #4]
 8045600:	685b      	ldr	r3, [r3, #4]
 8045602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8045606:	d009      	beq.n	804561c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8045608:	687b      	ldr	r3, [r7, #4]
 804560a:	2200      	movs	r2, #0
 804560c:	61da      	str	r2, [r3, #28]
 804560e:	e005      	b.n	804561c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8045610:	687b      	ldr	r3, [r7, #4]
 8045612:	2200      	movs	r2, #0
 8045614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8045616:	687b      	ldr	r3, [r7, #4]
 8045618:	2200      	movs	r2, #0
 804561a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804561c:	687b      	ldr	r3, [r7, #4]
 804561e:	2200      	movs	r2, #0
 8045620:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8045622:	687b      	ldr	r3, [r7, #4]
 8045624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8045628:	b2db      	uxtb	r3, r3
 804562a:	2b00      	cmp	r3, #0
 804562c:	d106      	bne.n	804563c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804562e:	687b      	ldr	r3, [r7, #4]
 8045630:	2200      	movs	r2, #0
 8045632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8045636:	6878      	ldr	r0, [r7, #4]
 8045638:	f7fe f896 	bl	8043768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804563c:	687b      	ldr	r3, [r7, #4]
 804563e:	2202      	movs	r2, #2
 8045640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8045644:	687b      	ldr	r3, [r7, #4]
 8045646:	681b      	ldr	r3, [r3, #0]
 8045648:	681a      	ldr	r2, [r3, #0]
 804564a:	687b      	ldr	r3, [r7, #4]
 804564c:	681b      	ldr	r3, [r3, #0]
 804564e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8045652:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8045654:	687b      	ldr	r3, [r7, #4]
 8045656:	685b      	ldr	r3, [r3, #4]
 8045658:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804565c:	687b      	ldr	r3, [r7, #4]
 804565e:	689b      	ldr	r3, [r3, #8]
 8045660:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8045664:	431a      	orrs	r2, r3
 8045666:	687b      	ldr	r3, [r7, #4]
 8045668:	68db      	ldr	r3, [r3, #12]
 804566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804566e:	431a      	orrs	r2, r3
 8045670:	687b      	ldr	r3, [r7, #4]
 8045672:	691b      	ldr	r3, [r3, #16]
 8045674:	f003 0302 	and.w	r3, r3, #2
 8045678:	431a      	orrs	r2, r3
 804567a:	687b      	ldr	r3, [r7, #4]
 804567c:	695b      	ldr	r3, [r3, #20]
 804567e:	f003 0301 	and.w	r3, r3, #1
 8045682:	431a      	orrs	r2, r3
 8045684:	687b      	ldr	r3, [r7, #4]
 8045686:	699b      	ldr	r3, [r3, #24]
 8045688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804568c:	431a      	orrs	r2, r3
 804568e:	687b      	ldr	r3, [r7, #4]
 8045690:	69db      	ldr	r3, [r3, #28]
 8045692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8045696:	431a      	orrs	r2, r3
 8045698:	687b      	ldr	r3, [r7, #4]
 804569a:	6a1b      	ldr	r3, [r3, #32]
 804569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80456a0:	ea42 0103 	orr.w	r1, r2, r3
 80456a4:	687b      	ldr	r3, [r7, #4]
 80456a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80456a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80456ac:	687b      	ldr	r3, [r7, #4]
 80456ae:	681b      	ldr	r3, [r3, #0]
 80456b0:	430a      	orrs	r2, r1
 80456b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80456b4:	687b      	ldr	r3, [r7, #4]
 80456b6:	699b      	ldr	r3, [r3, #24]
 80456b8:	0c1b      	lsrs	r3, r3, #16
 80456ba:	f003 0104 	and.w	r1, r3, #4
 80456be:	687b      	ldr	r3, [r7, #4]
 80456c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80456c2:	f003 0210 	and.w	r2, r3, #16
 80456c6:	687b      	ldr	r3, [r7, #4]
 80456c8:	681b      	ldr	r3, [r3, #0]
 80456ca:	430a      	orrs	r2, r1
 80456cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80456ce:	687b      	ldr	r3, [r7, #4]
 80456d0:	681b      	ldr	r3, [r3, #0]
 80456d2:	69da      	ldr	r2, [r3, #28]
 80456d4:	687b      	ldr	r3, [r7, #4]
 80456d6:	681b      	ldr	r3, [r3, #0]
 80456d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80456dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80456de:	687b      	ldr	r3, [r7, #4]
 80456e0:	2200      	movs	r2, #0
 80456e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80456e4:	687b      	ldr	r3, [r7, #4]
 80456e6:	2201      	movs	r2, #1
 80456e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80456ec:	2300      	movs	r3, #0
}
 80456ee:	4618      	mov	r0, r3
 80456f0:	3708      	adds	r7, #8
 80456f2:	46bd      	mov	sp, r7
 80456f4:	bd80      	pop	{r7, pc}

080456f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80456f6:	b580      	push	{r7, lr}
 80456f8:	b082      	sub	sp, #8
 80456fa:	af00      	add	r7, sp, #0
 80456fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80456fe:	687b      	ldr	r3, [r7, #4]
 8045700:	2b00      	cmp	r3, #0
 8045702:	d101      	bne.n	8045708 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8045704:	2301      	movs	r3, #1
 8045706:	e03f      	b.n	8045788 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8045708:	687b      	ldr	r3, [r7, #4]
 804570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804570e:	b2db      	uxtb	r3, r3
 8045710:	2b00      	cmp	r3, #0
 8045712:	d106      	bne.n	8045722 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8045714:	687b      	ldr	r3, [r7, #4]
 8045716:	2200      	movs	r2, #0
 8045718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804571c:	6878      	ldr	r0, [r7, #4]
 804571e:	f7fe f86b 	bl	80437f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8045722:	687b      	ldr	r3, [r7, #4]
 8045724:	2224      	movs	r2, #36	; 0x24
 8045726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 804572a:	687b      	ldr	r3, [r7, #4]
 804572c:	681b      	ldr	r3, [r3, #0]
 804572e:	68da      	ldr	r2, [r3, #12]
 8045730:	687b      	ldr	r3, [r7, #4]
 8045732:	681b      	ldr	r3, [r3, #0]
 8045734:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8045738:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 804573a:	6878      	ldr	r0, [r7, #4]
 804573c:	f000 fdde 	bl	80462fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8045740:	687b      	ldr	r3, [r7, #4]
 8045742:	681b      	ldr	r3, [r3, #0]
 8045744:	691a      	ldr	r2, [r3, #16]
 8045746:	687b      	ldr	r3, [r7, #4]
 8045748:	681b      	ldr	r3, [r3, #0]
 804574a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804574e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8045750:	687b      	ldr	r3, [r7, #4]
 8045752:	681b      	ldr	r3, [r3, #0]
 8045754:	695a      	ldr	r2, [r3, #20]
 8045756:	687b      	ldr	r3, [r7, #4]
 8045758:	681b      	ldr	r3, [r3, #0]
 804575a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804575e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8045760:	687b      	ldr	r3, [r7, #4]
 8045762:	681b      	ldr	r3, [r3, #0]
 8045764:	68da      	ldr	r2, [r3, #12]
 8045766:	687b      	ldr	r3, [r7, #4]
 8045768:	681b      	ldr	r3, [r3, #0]
 804576a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804576e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045770:	687b      	ldr	r3, [r7, #4]
 8045772:	2200      	movs	r2, #0
 8045774:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8045776:	687b      	ldr	r3, [r7, #4]
 8045778:	2220      	movs	r2, #32
 804577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 804577e:	687b      	ldr	r3, [r7, #4]
 8045780:	2220      	movs	r2, #32
 8045782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8045786:	2300      	movs	r3, #0
}
 8045788:	4618      	mov	r0, r3
 804578a:	3708      	adds	r7, #8
 804578c:	46bd      	mov	sp, r7
 804578e:	bd80      	pop	{r7, pc}

08045790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8045790:	b580      	push	{r7, lr}
 8045792:	b08a      	sub	sp, #40	; 0x28
 8045794:	af02      	add	r7, sp, #8
 8045796:	60f8      	str	r0, [r7, #12]
 8045798:	60b9      	str	r1, [r7, #8]
 804579a:	603b      	str	r3, [r7, #0]
 804579c:	4613      	mov	r3, r2
 804579e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80457a0:	2300      	movs	r3, #0
 80457a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80457a4:	68fb      	ldr	r3, [r7, #12]
 80457a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80457aa:	b2db      	uxtb	r3, r3
 80457ac:	2b20      	cmp	r3, #32
 80457ae:	d17c      	bne.n	80458aa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80457b0:	68bb      	ldr	r3, [r7, #8]
 80457b2:	2b00      	cmp	r3, #0
 80457b4:	d002      	beq.n	80457bc <HAL_UART_Transmit+0x2c>
 80457b6:	88fb      	ldrh	r3, [r7, #6]
 80457b8:	2b00      	cmp	r3, #0
 80457ba:	d101      	bne.n	80457c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80457bc:	2301      	movs	r3, #1
 80457be:	e075      	b.n	80458ac <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80457c0:	68fb      	ldr	r3, [r7, #12]
 80457c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80457c6:	2b01      	cmp	r3, #1
 80457c8:	d101      	bne.n	80457ce <HAL_UART_Transmit+0x3e>
 80457ca:	2302      	movs	r3, #2
 80457cc:	e06e      	b.n	80458ac <HAL_UART_Transmit+0x11c>
 80457ce:	68fb      	ldr	r3, [r7, #12]
 80457d0:	2201      	movs	r2, #1
 80457d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80457d6:	68fb      	ldr	r3, [r7, #12]
 80457d8:	2200      	movs	r2, #0
 80457da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80457dc:	68fb      	ldr	r3, [r7, #12]
 80457de:	2221      	movs	r2, #33	; 0x21
 80457e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80457e4:	f7fe fac0 	bl	8043d68 <HAL_GetTick>
 80457e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80457ea:	68fb      	ldr	r3, [r7, #12]
 80457ec:	88fa      	ldrh	r2, [r7, #6]
 80457ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80457f0:	68fb      	ldr	r3, [r7, #12]
 80457f2:	88fa      	ldrh	r2, [r7, #6]
 80457f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80457f6:	68fb      	ldr	r3, [r7, #12]
 80457f8:	689b      	ldr	r3, [r3, #8]
 80457fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80457fe:	d108      	bne.n	8045812 <HAL_UART_Transmit+0x82>
 8045800:	68fb      	ldr	r3, [r7, #12]
 8045802:	691b      	ldr	r3, [r3, #16]
 8045804:	2b00      	cmp	r3, #0
 8045806:	d104      	bne.n	8045812 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8045808:	2300      	movs	r3, #0
 804580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 804580c:	68bb      	ldr	r3, [r7, #8]
 804580e:	61bb      	str	r3, [r7, #24]
 8045810:	e003      	b.n	804581a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8045812:	68bb      	ldr	r3, [r7, #8]
 8045814:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8045816:	2300      	movs	r3, #0
 8045818:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 804581a:	68fb      	ldr	r3, [r7, #12]
 804581c:	2200      	movs	r2, #0
 804581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8045822:	e02a      	b.n	804587a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8045824:	683b      	ldr	r3, [r7, #0]
 8045826:	9300      	str	r3, [sp, #0]
 8045828:	697b      	ldr	r3, [r7, #20]
 804582a:	2200      	movs	r2, #0
 804582c:	2180      	movs	r1, #128	; 0x80
 804582e:	68f8      	ldr	r0, [r7, #12]
 8045830:	f000 fb1e 	bl	8045e70 <UART_WaitOnFlagUntilTimeout>
 8045834:	4603      	mov	r3, r0
 8045836:	2b00      	cmp	r3, #0
 8045838:	d001      	beq.n	804583e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 804583a:	2303      	movs	r3, #3
 804583c:	e036      	b.n	80458ac <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 804583e:	69fb      	ldr	r3, [r7, #28]
 8045840:	2b00      	cmp	r3, #0
 8045842:	d10b      	bne.n	804585c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8045844:	69bb      	ldr	r3, [r7, #24]
 8045846:	881b      	ldrh	r3, [r3, #0]
 8045848:	461a      	mov	r2, r3
 804584a:	68fb      	ldr	r3, [r7, #12]
 804584c:	681b      	ldr	r3, [r3, #0]
 804584e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8045852:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8045854:	69bb      	ldr	r3, [r7, #24]
 8045856:	3302      	adds	r3, #2
 8045858:	61bb      	str	r3, [r7, #24]
 804585a:	e007      	b.n	804586c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804585c:	69fb      	ldr	r3, [r7, #28]
 804585e:	781a      	ldrb	r2, [r3, #0]
 8045860:	68fb      	ldr	r3, [r7, #12]
 8045862:	681b      	ldr	r3, [r3, #0]
 8045864:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8045866:	69fb      	ldr	r3, [r7, #28]
 8045868:	3301      	adds	r3, #1
 804586a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804586c:	68fb      	ldr	r3, [r7, #12]
 804586e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8045870:	b29b      	uxth	r3, r3
 8045872:	3b01      	subs	r3, #1
 8045874:	b29a      	uxth	r2, r3
 8045876:	68fb      	ldr	r3, [r7, #12]
 8045878:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 804587a:	68fb      	ldr	r3, [r7, #12]
 804587c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804587e:	b29b      	uxth	r3, r3
 8045880:	2b00      	cmp	r3, #0
 8045882:	d1cf      	bne.n	8045824 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8045884:	683b      	ldr	r3, [r7, #0]
 8045886:	9300      	str	r3, [sp, #0]
 8045888:	697b      	ldr	r3, [r7, #20]
 804588a:	2200      	movs	r2, #0
 804588c:	2140      	movs	r1, #64	; 0x40
 804588e:	68f8      	ldr	r0, [r7, #12]
 8045890:	f000 faee 	bl	8045e70 <UART_WaitOnFlagUntilTimeout>
 8045894:	4603      	mov	r3, r0
 8045896:	2b00      	cmp	r3, #0
 8045898:	d001      	beq.n	804589e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 804589a:	2303      	movs	r3, #3
 804589c:	e006      	b.n	80458ac <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804589e:	68fb      	ldr	r3, [r7, #12]
 80458a0:	2220      	movs	r2, #32
 80458a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80458a6:	2300      	movs	r3, #0
 80458a8:	e000      	b.n	80458ac <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80458aa:	2302      	movs	r3, #2
  }
}
 80458ac:	4618      	mov	r0, r3
 80458ae:	3720      	adds	r7, #32
 80458b0:	46bd      	mov	sp, r7
 80458b2:	bd80      	pop	{r7, pc}

080458b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80458b4:	b580      	push	{r7, lr}
 80458b6:	b084      	sub	sp, #16
 80458b8:	af00      	add	r7, sp, #0
 80458ba:	60f8      	str	r0, [r7, #12]
 80458bc:	60b9      	str	r1, [r7, #8]
 80458be:	4613      	mov	r3, r2
 80458c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80458c2:	68fb      	ldr	r3, [r7, #12]
 80458c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80458c8:	b2db      	uxtb	r3, r3
 80458ca:	2b20      	cmp	r3, #32
 80458cc:	d11d      	bne.n	804590a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80458ce:	68bb      	ldr	r3, [r7, #8]
 80458d0:	2b00      	cmp	r3, #0
 80458d2:	d002      	beq.n	80458da <HAL_UART_Receive_IT+0x26>
 80458d4:	88fb      	ldrh	r3, [r7, #6]
 80458d6:	2b00      	cmp	r3, #0
 80458d8:	d101      	bne.n	80458de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80458da:	2301      	movs	r3, #1
 80458dc:	e016      	b.n	804590c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80458de:	68fb      	ldr	r3, [r7, #12]
 80458e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80458e4:	2b01      	cmp	r3, #1
 80458e6:	d101      	bne.n	80458ec <HAL_UART_Receive_IT+0x38>
 80458e8:	2302      	movs	r3, #2
 80458ea:	e00f      	b.n	804590c <HAL_UART_Receive_IT+0x58>
 80458ec:	68fb      	ldr	r3, [r7, #12]
 80458ee:	2201      	movs	r2, #1
 80458f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80458f4:	68fb      	ldr	r3, [r7, #12]
 80458f6:	2200      	movs	r2, #0
 80458f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80458fa:	88fb      	ldrh	r3, [r7, #6]
 80458fc:	461a      	mov	r2, r3
 80458fe:	68b9      	ldr	r1, [r7, #8]
 8045900:	68f8      	ldr	r0, [r7, #12]
 8045902:	f000 fb23 	bl	8045f4c <UART_Start_Receive_IT>
 8045906:	4603      	mov	r3, r0
 8045908:	e000      	b.n	804590c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 804590a:	2302      	movs	r3, #2
  }
}
 804590c:	4618      	mov	r0, r3
 804590e:	3710      	adds	r7, #16
 8045910:	46bd      	mov	sp, r7
 8045912:	bd80      	pop	{r7, pc}

08045914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8045914:	b580      	push	{r7, lr}
 8045916:	b0ba      	sub	sp, #232	; 0xe8
 8045918:	af00      	add	r7, sp, #0
 804591a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 804591c:	687b      	ldr	r3, [r7, #4]
 804591e:	681b      	ldr	r3, [r3, #0]
 8045920:	681b      	ldr	r3, [r3, #0]
 8045922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8045926:	687b      	ldr	r3, [r7, #4]
 8045928:	681b      	ldr	r3, [r3, #0]
 804592a:	68db      	ldr	r3, [r3, #12]
 804592c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8045930:	687b      	ldr	r3, [r7, #4]
 8045932:	681b      	ldr	r3, [r3, #0]
 8045934:	695b      	ldr	r3, [r3, #20]
 8045936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 804593a:	2300      	movs	r3, #0
 804593c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8045940:	2300      	movs	r3, #0
 8045942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8045946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804594a:	f003 030f 	and.w	r3, r3, #15
 804594e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8045952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8045956:	2b00      	cmp	r3, #0
 8045958:	d10f      	bne.n	804597a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 804595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804595e:	f003 0320 	and.w	r3, r3, #32
 8045962:	2b00      	cmp	r3, #0
 8045964:	d009      	beq.n	804597a <HAL_UART_IRQHandler+0x66>
 8045966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804596a:	f003 0320 	and.w	r3, r3, #32
 804596e:	2b00      	cmp	r3, #0
 8045970:	d003      	beq.n	804597a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8045972:	6878      	ldr	r0, [r7, #4]
 8045974:	f000 fc07 	bl	8046186 <UART_Receive_IT>
      return;
 8045978:	e256      	b.n	8045e28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 804597a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 804597e:	2b00      	cmp	r3, #0
 8045980:	f000 80de 	beq.w	8045b40 <HAL_UART_IRQHandler+0x22c>
 8045984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8045988:	f003 0301 	and.w	r3, r3, #1
 804598c:	2b00      	cmp	r3, #0
 804598e:	d106      	bne.n	804599e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8045990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8045998:	2b00      	cmp	r3, #0
 804599a:	f000 80d1 	beq.w	8045b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 804599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80459a2:	f003 0301 	and.w	r3, r3, #1
 80459a6:	2b00      	cmp	r3, #0
 80459a8:	d00b      	beq.n	80459c2 <HAL_UART_IRQHandler+0xae>
 80459aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80459ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80459b2:	2b00      	cmp	r3, #0
 80459b4:	d005      	beq.n	80459c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80459b6:	687b      	ldr	r3, [r7, #4]
 80459b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80459ba:	f043 0201 	orr.w	r2, r3, #1
 80459be:	687b      	ldr	r3, [r7, #4]
 80459c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80459c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80459c6:	f003 0304 	and.w	r3, r3, #4
 80459ca:	2b00      	cmp	r3, #0
 80459cc:	d00b      	beq.n	80459e6 <HAL_UART_IRQHandler+0xd2>
 80459ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80459d2:	f003 0301 	and.w	r3, r3, #1
 80459d6:	2b00      	cmp	r3, #0
 80459d8:	d005      	beq.n	80459e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80459da:	687b      	ldr	r3, [r7, #4]
 80459dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80459de:	f043 0202 	orr.w	r2, r3, #2
 80459e2:	687b      	ldr	r3, [r7, #4]
 80459e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80459e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80459ea:	f003 0302 	and.w	r3, r3, #2
 80459ee:	2b00      	cmp	r3, #0
 80459f0:	d00b      	beq.n	8045a0a <HAL_UART_IRQHandler+0xf6>
 80459f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80459f6:	f003 0301 	and.w	r3, r3, #1
 80459fa:	2b00      	cmp	r3, #0
 80459fc:	d005      	beq.n	8045a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80459fe:	687b      	ldr	r3, [r7, #4]
 8045a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045a02:	f043 0204 	orr.w	r2, r3, #4
 8045a06:	687b      	ldr	r3, [r7, #4]
 8045a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8045a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045a0e:	f003 0308 	and.w	r3, r3, #8
 8045a12:	2b00      	cmp	r3, #0
 8045a14:	d011      	beq.n	8045a3a <HAL_UART_IRQHandler+0x126>
 8045a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045a1a:	f003 0320 	and.w	r3, r3, #32
 8045a1e:	2b00      	cmp	r3, #0
 8045a20:	d105      	bne.n	8045a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8045a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8045a26:	f003 0301 	and.w	r3, r3, #1
 8045a2a:	2b00      	cmp	r3, #0
 8045a2c:	d005      	beq.n	8045a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8045a2e:	687b      	ldr	r3, [r7, #4]
 8045a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045a32:	f043 0208 	orr.w	r2, r3, #8
 8045a36:	687b      	ldr	r3, [r7, #4]
 8045a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8045a3a:	687b      	ldr	r3, [r7, #4]
 8045a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045a3e:	2b00      	cmp	r3, #0
 8045a40:	f000 81ed 	beq.w	8045e1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8045a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045a48:	f003 0320 	and.w	r3, r3, #32
 8045a4c:	2b00      	cmp	r3, #0
 8045a4e:	d008      	beq.n	8045a62 <HAL_UART_IRQHandler+0x14e>
 8045a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045a54:	f003 0320 	and.w	r3, r3, #32
 8045a58:	2b00      	cmp	r3, #0
 8045a5a:	d002      	beq.n	8045a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8045a5c:	6878      	ldr	r0, [r7, #4]
 8045a5e:	f000 fb92 	bl	8046186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8045a62:	687b      	ldr	r3, [r7, #4]
 8045a64:	681b      	ldr	r3, [r3, #0]
 8045a66:	695b      	ldr	r3, [r3, #20]
 8045a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045a6c:	2b40      	cmp	r3, #64	; 0x40
 8045a6e:	bf0c      	ite	eq
 8045a70:	2301      	moveq	r3, #1
 8045a72:	2300      	movne	r3, #0
 8045a74:	b2db      	uxtb	r3, r3
 8045a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8045a7a:	687b      	ldr	r3, [r7, #4]
 8045a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045a7e:	f003 0308 	and.w	r3, r3, #8
 8045a82:	2b00      	cmp	r3, #0
 8045a84:	d103      	bne.n	8045a8e <HAL_UART_IRQHandler+0x17a>
 8045a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8045a8a:	2b00      	cmp	r3, #0
 8045a8c:	d04f      	beq.n	8045b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8045a8e:	6878      	ldr	r0, [r7, #4]
 8045a90:	f000 fa9a 	bl	8045fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045a94:	687b      	ldr	r3, [r7, #4]
 8045a96:	681b      	ldr	r3, [r3, #0]
 8045a98:	695b      	ldr	r3, [r3, #20]
 8045a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045a9e:	2b40      	cmp	r3, #64	; 0x40
 8045aa0:	d141      	bne.n	8045b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045aa2:	687b      	ldr	r3, [r7, #4]
 8045aa4:	681b      	ldr	r3, [r3, #0]
 8045aa6:	3314      	adds	r3, #20
 8045aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8045ab0:	e853 3f00 	ldrex	r3, [r3]
 8045ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8045ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8045abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8045ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8045ac4:	687b      	ldr	r3, [r7, #4]
 8045ac6:	681b      	ldr	r3, [r3, #0]
 8045ac8:	3314      	adds	r3, #20
 8045aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8045ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8045ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8045ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8045ade:	e841 2300 	strex	r3, r2, [r1]
 8045ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8045ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8045aea:	2b00      	cmp	r3, #0
 8045aec:	d1d9      	bne.n	8045aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8045aee:	687b      	ldr	r3, [r7, #4]
 8045af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045af2:	2b00      	cmp	r3, #0
 8045af4:	d013      	beq.n	8045b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8045af6:	687b      	ldr	r3, [r7, #4]
 8045af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045afa:	4a7d      	ldr	r2, [pc, #500]	; (8045cf0 <HAL_UART_IRQHandler+0x3dc>)
 8045afc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8045afe:	687b      	ldr	r3, [r7, #4]
 8045b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045b02:	4618      	mov	r0, r3
 8045b04:	f7fe fae1 	bl	80440ca <HAL_DMA_Abort_IT>
 8045b08:	4603      	mov	r3, r0
 8045b0a:	2b00      	cmp	r3, #0
 8045b0c:	d016      	beq.n	8045b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8045b0e:	687b      	ldr	r3, [r7, #4]
 8045b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8045b14:	687a      	ldr	r2, [r7, #4]
 8045b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8045b18:	4610      	mov	r0, r2
 8045b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045b1c:	e00e      	b.n	8045b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8045b1e:	6878      	ldr	r0, [r7, #4]
 8045b20:	f000 f990 	bl	8045e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045b24:	e00a      	b.n	8045b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8045b26:	6878      	ldr	r0, [r7, #4]
 8045b28:	f000 f98c 	bl	8045e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045b2c:	e006      	b.n	8045b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8045b2e:	6878      	ldr	r0, [r7, #4]
 8045b30:	f000 f988 	bl	8045e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045b34:	687b      	ldr	r3, [r7, #4]
 8045b36:	2200      	movs	r2, #0
 8045b38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8045b3a:	e170      	b.n	8045e1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045b3c:	bf00      	nop
    return;
 8045b3e:	e16e      	b.n	8045e1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8045b40:	687b      	ldr	r3, [r7, #4]
 8045b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045b44:	2b01      	cmp	r3, #1
 8045b46:	f040 814a 	bne.w	8045dde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8045b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045b4e:	f003 0310 	and.w	r3, r3, #16
 8045b52:	2b00      	cmp	r3, #0
 8045b54:	f000 8143 	beq.w	8045dde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8045b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045b5c:	f003 0310 	and.w	r3, r3, #16
 8045b60:	2b00      	cmp	r3, #0
 8045b62:	f000 813c 	beq.w	8045dde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8045b66:	2300      	movs	r3, #0
 8045b68:	60bb      	str	r3, [r7, #8]
 8045b6a:	687b      	ldr	r3, [r7, #4]
 8045b6c:	681b      	ldr	r3, [r3, #0]
 8045b6e:	681b      	ldr	r3, [r3, #0]
 8045b70:	60bb      	str	r3, [r7, #8]
 8045b72:	687b      	ldr	r3, [r7, #4]
 8045b74:	681b      	ldr	r3, [r3, #0]
 8045b76:	685b      	ldr	r3, [r3, #4]
 8045b78:	60bb      	str	r3, [r7, #8]
 8045b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8045b7c:	687b      	ldr	r3, [r7, #4]
 8045b7e:	681b      	ldr	r3, [r3, #0]
 8045b80:	695b      	ldr	r3, [r3, #20]
 8045b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045b86:	2b40      	cmp	r3, #64	; 0x40
 8045b88:	f040 80b4 	bne.w	8045cf4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8045b8c:	687b      	ldr	r3, [r7, #4]
 8045b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045b90:	681b      	ldr	r3, [r3, #0]
 8045b92:	685b      	ldr	r3, [r3, #4]
 8045b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8045b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8045b9c:	2b00      	cmp	r3, #0
 8045b9e:	f000 8140 	beq.w	8045e22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8045ba2:	687b      	ldr	r3, [r7, #4]
 8045ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8045ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8045baa:	429a      	cmp	r2, r3
 8045bac:	f080 8139 	bcs.w	8045e22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8045bb0:	687b      	ldr	r3, [r7, #4]
 8045bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8045bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8045bb8:	687b      	ldr	r3, [r7, #4]
 8045bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045bbc:	69db      	ldr	r3, [r3, #28]
 8045bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045bc2:	f000 8088 	beq.w	8045cd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8045bc6:	687b      	ldr	r3, [r7, #4]
 8045bc8:	681b      	ldr	r3, [r3, #0]
 8045bca:	330c      	adds	r3, #12
 8045bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8045bd4:	e853 3f00 	ldrex	r3, [r3]
 8045bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8045bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8045be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8045be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8045be8:	687b      	ldr	r3, [r7, #4]
 8045bea:	681b      	ldr	r3, [r3, #0]
 8045bec:	330c      	adds	r3, #12
 8045bee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8045bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8045bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8045bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8045c02:	e841 2300 	strex	r3, r2, [r1]
 8045c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8045c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8045c0e:	2b00      	cmp	r3, #0
 8045c10:	d1d9      	bne.n	8045bc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045c12:	687b      	ldr	r3, [r7, #4]
 8045c14:	681b      	ldr	r3, [r3, #0]
 8045c16:	3314      	adds	r3, #20
 8045c18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8045c1c:	e853 3f00 	ldrex	r3, [r3]
 8045c20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8045c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8045c24:	f023 0301 	bic.w	r3, r3, #1
 8045c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8045c2c:	687b      	ldr	r3, [r7, #4]
 8045c2e:	681b      	ldr	r3, [r3, #0]
 8045c30:	3314      	adds	r3, #20
 8045c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8045c36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8045c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045c3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8045c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8045c42:	e841 2300 	strex	r3, r2, [r1]
 8045c46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8045c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8045c4a:	2b00      	cmp	r3, #0
 8045c4c:	d1e1      	bne.n	8045c12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8045c4e:	687b      	ldr	r3, [r7, #4]
 8045c50:	681b      	ldr	r3, [r3, #0]
 8045c52:	3314      	adds	r3, #20
 8045c54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8045c58:	e853 3f00 	ldrex	r3, [r3]
 8045c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8045c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8045c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8045c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8045c68:	687b      	ldr	r3, [r7, #4]
 8045c6a:	681b      	ldr	r3, [r3, #0]
 8045c6c:	3314      	adds	r3, #20
 8045c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8045c72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8045c74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045c76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8045c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8045c7a:	e841 2300 	strex	r3, r2, [r1]
 8045c7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8045c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8045c82:	2b00      	cmp	r3, #0
 8045c84:	d1e3      	bne.n	8045c4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8045c86:	687b      	ldr	r3, [r7, #4]
 8045c88:	2220      	movs	r2, #32
 8045c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045c8e:	687b      	ldr	r3, [r7, #4]
 8045c90:	2200      	movs	r2, #0
 8045c92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045c94:	687b      	ldr	r3, [r7, #4]
 8045c96:	681b      	ldr	r3, [r3, #0]
 8045c98:	330c      	adds	r3, #12
 8045c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8045c9e:	e853 3f00 	ldrex	r3, [r3]
 8045ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8045ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8045ca6:	f023 0310 	bic.w	r3, r3, #16
 8045caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8045cae:	687b      	ldr	r3, [r7, #4]
 8045cb0:	681b      	ldr	r3, [r3, #0]
 8045cb2:	330c      	adds	r3, #12
 8045cb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8045cb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8045cba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045cbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8045cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8045cc0:	e841 2300 	strex	r3, r2, [r1]
 8045cc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8045cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8045cc8:	2b00      	cmp	r3, #0
 8045cca:	d1e3      	bne.n	8045c94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8045ccc:	687b      	ldr	r3, [r7, #4]
 8045cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045cd0:	4618      	mov	r0, r3
 8045cd2:	f7fe f98a 	bl	8043fea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8045cd6:	687b      	ldr	r3, [r7, #4]
 8045cd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8045cda:	687b      	ldr	r3, [r7, #4]
 8045cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8045cde:	b29b      	uxth	r3, r3
 8045ce0:	1ad3      	subs	r3, r2, r3
 8045ce2:	b29b      	uxth	r3, r3
 8045ce4:	4619      	mov	r1, r3
 8045ce6:	6878      	ldr	r0, [r7, #4]
 8045ce8:	f000 f8b6 	bl	8045e58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8045cec:	e099      	b.n	8045e22 <HAL_UART_IRQHandler+0x50e>
 8045cee:	bf00      	nop
 8045cf0:	0804608f 	.word	0x0804608f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8045cf4:	687b      	ldr	r3, [r7, #4]
 8045cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8045cf8:	687b      	ldr	r3, [r7, #4]
 8045cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8045cfc:	b29b      	uxth	r3, r3
 8045cfe:	1ad3      	subs	r3, r2, r3
 8045d00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8045d04:	687b      	ldr	r3, [r7, #4]
 8045d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8045d08:	b29b      	uxth	r3, r3
 8045d0a:	2b00      	cmp	r3, #0
 8045d0c:	f000 808b 	beq.w	8045e26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8045d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8045d14:	2b00      	cmp	r3, #0
 8045d16:	f000 8086 	beq.w	8045e26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045d1a:	687b      	ldr	r3, [r7, #4]
 8045d1c:	681b      	ldr	r3, [r3, #0]
 8045d1e:	330c      	adds	r3, #12
 8045d20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045d24:	e853 3f00 	ldrex	r3, [r3]
 8045d28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8045d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8045d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8045d34:	687b      	ldr	r3, [r7, #4]
 8045d36:	681b      	ldr	r3, [r3, #0]
 8045d38:	330c      	adds	r3, #12
 8045d3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8045d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8045d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045d42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8045d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8045d46:	e841 2300 	strex	r3, r2, [r1]
 8045d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8045d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045d4e:	2b00      	cmp	r3, #0
 8045d50:	d1e3      	bne.n	8045d1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045d52:	687b      	ldr	r3, [r7, #4]
 8045d54:	681b      	ldr	r3, [r3, #0]
 8045d56:	3314      	adds	r3, #20
 8045d58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045d5c:	e853 3f00 	ldrex	r3, [r3]
 8045d60:	623b      	str	r3, [r7, #32]
   return(result);
 8045d62:	6a3b      	ldr	r3, [r7, #32]
 8045d64:	f023 0301 	bic.w	r3, r3, #1
 8045d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8045d6c:	687b      	ldr	r3, [r7, #4]
 8045d6e:	681b      	ldr	r3, [r3, #0]
 8045d70:	3314      	adds	r3, #20
 8045d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8045d76:	633a      	str	r2, [r7, #48]	; 0x30
 8045d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8045d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8045d7e:	e841 2300 	strex	r3, r2, [r1]
 8045d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8045d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045d86:	2b00      	cmp	r3, #0
 8045d88:	d1e3      	bne.n	8045d52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8045d8a:	687b      	ldr	r3, [r7, #4]
 8045d8c:	2220      	movs	r2, #32
 8045d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045d92:	687b      	ldr	r3, [r7, #4]
 8045d94:	2200      	movs	r2, #0
 8045d96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045d98:	687b      	ldr	r3, [r7, #4]
 8045d9a:	681b      	ldr	r3, [r3, #0]
 8045d9c:	330c      	adds	r3, #12
 8045d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045da0:	693b      	ldr	r3, [r7, #16]
 8045da2:	e853 3f00 	ldrex	r3, [r3]
 8045da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8045da8:	68fb      	ldr	r3, [r7, #12]
 8045daa:	f023 0310 	bic.w	r3, r3, #16
 8045dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8045db2:	687b      	ldr	r3, [r7, #4]
 8045db4:	681b      	ldr	r3, [r3, #0]
 8045db6:	330c      	adds	r3, #12
 8045db8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8045dbc:	61fa      	str	r2, [r7, #28]
 8045dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045dc0:	69b9      	ldr	r1, [r7, #24]
 8045dc2:	69fa      	ldr	r2, [r7, #28]
 8045dc4:	e841 2300 	strex	r3, r2, [r1]
 8045dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8045dca:	697b      	ldr	r3, [r7, #20]
 8045dcc:	2b00      	cmp	r3, #0
 8045dce:	d1e3      	bne.n	8045d98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8045dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8045dd4:	4619      	mov	r1, r3
 8045dd6:	6878      	ldr	r0, [r7, #4]
 8045dd8:	f000 f83e 	bl	8045e58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8045ddc:	e023      	b.n	8045e26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8045dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045de6:	2b00      	cmp	r3, #0
 8045de8:	d009      	beq.n	8045dfe <HAL_UART_IRQHandler+0x4ea>
 8045dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045df2:	2b00      	cmp	r3, #0
 8045df4:	d003      	beq.n	8045dfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8045df6:	6878      	ldr	r0, [r7, #4]
 8045df8:	f000 f95d 	bl	80460b6 <UART_Transmit_IT>
    return;
 8045dfc:	e014      	b.n	8045e28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8045dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8045e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045e06:	2b00      	cmp	r3, #0
 8045e08:	d00e      	beq.n	8045e28 <HAL_UART_IRQHandler+0x514>
 8045e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8045e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045e12:	2b00      	cmp	r3, #0
 8045e14:	d008      	beq.n	8045e28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8045e16:	6878      	ldr	r0, [r7, #4]
 8045e18:	f000 f99d 	bl	8046156 <UART_EndTransmit_IT>
    return;
 8045e1c:	e004      	b.n	8045e28 <HAL_UART_IRQHandler+0x514>
    return;
 8045e1e:	bf00      	nop
 8045e20:	e002      	b.n	8045e28 <HAL_UART_IRQHandler+0x514>
      return;
 8045e22:	bf00      	nop
 8045e24:	e000      	b.n	8045e28 <HAL_UART_IRQHandler+0x514>
      return;
 8045e26:	bf00      	nop
  }
}
 8045e28:	37e8      	adds	r7, #232	; 0xe8
 8045e2a:	46bd      	mov	sp, r7
 8045e2c:	bd80      	pop	{r7, pc}
 8045e2e:	bf00      	nop

08045e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8045e30:	b480      	push	{r7}
 8045e32:	b083      	sub	sp, #12
 8045e34:	af00      	add	r7, sp, #0
 8045e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8045e38:	bf00      	nop
 8045e3a:	370c      	adds	r7, #12
 8045e3c:	46bd      	mov	sp, r7
 8045e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e42:	4770      	bx	lr

08045e44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8045e44:	b480      	push	{r7}
 8045e46:	b083      	sub	sp, #12
 8045e48:	af00      	add	r7, sp, #0
 8045e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8045e4c:	bf00      	nop
 8045e4e:	370c      	adds	r7, #12
 8045e50:	46bd      	mov	sp, r7
 8045e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e56:	4770      	bx	lr

08045e58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8045e58:	b480      	push	{r7}
 8045e5a:	b083      	sub	sp, #12
 8045e5c:	af00      	add	r7, sp, #0
 8045e5e:	6078      	str	r0, [r7, #4]
 8045e60:	460b      	mov	r3, r1
 8045e62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8045e64:	bf00      	nop
 8045e66:	370c      	adds	r7, #12
 8045e68:	46bd      	mov	sp, r7
 8045e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e6e:	4770      	bx	lr

08045e70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8045e70:	b580      	push	{r7, lr}
 8045e72:	b090      	sub	sp, #64	; 0x40
 8045e74:	af00      	add	r7, sp, #0
 8045e76:	60f8      	str	r0, [r7, #12]
 8045e78:	60b9      	str	r1, [r7, #8]
 8045e7a:	603b      	str	r3, [r7, #0]
 8045e7c:	4613      	mov	r3, r2
 8045e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045e80:	e050      	b.n	8045f24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8045e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045e88:	d04c      	beq.n	8045f24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8045e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8045e8c:	2b00      	cmp	r3, #0
 8045e8e:	d007      	beq.n	8045ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8045e90:	f7fd ff6a 	bl	8043d68 <HAL_GetTick>
 8045e94:	4602      	mov	r2, r0
 8045e96:	683b      	ldr	r3, [r7, #0]
 8045e98:	1ad3      	subs	r3, r2, r3
 8045e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8045e9c:	429a      	cmp	r2, r3
 8045e9e:	d241      	bcs.n	8045f24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8045ea0:	68fb      	ldr	r3, [r7, #12]
 8045ea2:	681b      	ldr	r3, [r3, #0]
 8045ea4:	330c      	adds	r3, #12
 8045ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045eaa:	e853 3f00 	ldrex	r3, [r3]
 8045eae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8045eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045eb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8045eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045eb8:	68fb      	ldr	r3, [r7, #12]
 8045eba:	681b      	ldr	r3, [r3, #0]
 8045ebc:	330c      	adds	r3, #12
 8045ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8045ec0:	637a      	str	r2, [r7, #52]	; 0x34
 8045ec2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8045ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045ec8:	e841 2300 	strex	r3, r2, [r1]
 8045ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8045ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045ed0:	2b00      	cmp	r3, #0
 8045ed2:	d1e5      	bne.n	8045ea0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8045ed4:	68fb      	ldr	r3, [r7, #12]
 8045ed6:	681b      	ldr	r3, [r3, #0]
 8045ed8:	3314      	adds	r3, #20
 8045eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045edc:	697b      	ldr	r3, [r7, #20]
 8045ede:	e853 3f00 	ldrex	r3, [r3]
 8045ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8045ee4:	693b      	ldr	r3, [r7, #16]
 8045ee6:	f023 0301 	bic.w	r3, r3, #1
 8045eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8045eec:	68fb      	ldr	r3, [r7, #12]
 8045eee:	681b      	ldr	r3, [r3, #0]
 8045ef0:	3314      	adds	r3, #20
 8045ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8045ef4:	623a      	str	r2, [r7, #32]
 8045ef6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045ef8:	69f9      	ldr	r1, [r7, #28]
 8045efa:	6a3a      	ldr	r2, [r7, #32]
 8045efc:	e841 2300 	strex	r3, r2, [r1]
 8045f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8045f02:	69bb      	ldr	r3, [r7, #24]
 8045f04:	2b00      	cmp	r3, #0
 8045f06:	d1e5      	bne.n	8045ed4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8045f08:	68fb      	ldr	r3, [r7, #12]
 8045f0a:	2220      	movs	r2, #32
 8045f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8045f10:	68fb      	ldr	r3, [r7, #12]
 8045f12:	2220      	movs	r2, #32
 8045f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8045f18:	68fb      	ldr	r3, [r7, #12]
 8045f1a:	2200      	movs	r2, #0
 8045f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8045f20:	2303      	movs	r3, #3
 8045f22:	e00f      	b.n	8045f44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045f24:	68fb      	ldr	r3, [r7, #12]
 8045f26:	681b      	ldr	r3, [r3, #0]
 8045f28:	681a      	ldr	r2, [r3, #0]
 8045f2a:	68bb      	ldr	r3, [r7, #8]
 8045f2c:	4013      	ands	r3, r2
 8045f2e:	68ba      	ldr	r2, [r7, #8]
 8045f30:	429a      	cmp	r2, r3
 8045f32:	bf0c      	ite	eq
 8045f34:	2301      	moveq	r3, #1
 8045f36:	2300      	movne	r3, #0
 8045f38:	b2db      	uxtb	r3, r3
 8045f3a:	461a      	mov	r2, r3
 8045f3c:	79fb      	ldrb	r3, [r7, #7]
 8045f3e:	429a      	cmp	r2, r3
 8045f40:	d09f      	beq.n	8045e82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8045f42:	2300      	movs	r3, #0
}
 8045f44:	4618      	mov	r0, r3
 8045f46:	3740      	adds	r7, #64	; 0x40
 8045f48:	46bd      	mov	sp, r7
 8045f4a:	bd80      	pop	{r7, pc}

08045f4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8045f4c:	b480      	push	{r7}
 8045f4e:	b085      	sub	sp, #20
 8045f50:	af00      	add	r7, sp, #0
 8045f52:	60f8      	str	r0, [r7, #12]
 8045f54:	60b9      	str	r1, [r7, #8]
 8045f56:	4613      	mov	r3, r2
 8045f58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8045f5a:	68fb      	ldr	r3, [r7, #12]
 8045f5c:	68ba      	ldr	r2, [r7, #8]
 8045f5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8045f60:	68fb      	ldr	r3, [r7, #12]
 8045f62:	88fa      	ldrh	r2, [r7, #6]
 8045f64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8045f66:	68fb      	ldr	r3, [r7, #12]
 8045f68:	88fa      	ldrh	r2, [r7, #6]
 8045f6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045f6c:	68fb      	ldr	r3, [r7, #12]
 8045f6e:	2200      	movs	r2, #0
 8045f70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8045f72:	68fb      	ldr	r3, [r7, #12]
 8045f74:	2222      	movs	r2, #34	; 0x22
 8045f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8045f7a:	68fb      	ldr	r3, [r7, #12]
 8045f7c:	2200      	movs	r2, #0
 8045f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8045f82:	68fb      	ldr	r3, [r7, #12]
 8045f84:	691b      	ldr	r3, [r3, #16]
 8045f86:	2b00      	cmp	r3, #0
 8045f88:	d007      	beq.n	8045f9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8045f8a:	68fb      	ldr	r3, [r7, #12]
 8045f8c:	681b      	ldr	r3, [r3, #0]
 8045f8e:	68da      	ldr	r2, [r3, #12]
 8045f90:	68fb      	ldr	r3, [r7, #12]
 8045f92:	681b      	ldr	r3, [r3, #0]
 8045f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8045f98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8045f9a:	68fb      	ldr	r3, [r7, #12]
 8045f9c:	681b      	ldr	r3, [r3, #0]
 8045f9e:	695a      	ldr	r2, [r3, #20]
 8045fa0:	68fb      	ldr	r3, [r7, #12]
 8045fa2:	681b      	ldr	r3, [r3, #0]
 8045fa4:	f042 0201 	orr.w	r2, r2, #1
 8045fa8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8045faa:	68fb      	ldr	r3, [r7, #12]
 8045fac:	681b      	ldr	r3, [r3, #0]
 8045fae:	68da      	ldr	r2, [r3, #12]
 8045fb0:	68fb      	ldr	r3, [r7, #12]
 8045fb2:	681b      	ldr	r3, [r3, #0]
 8045fb4:	f042 0220 	orr.w	r2, r2, #32
 8045fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8045fba:	2300      	movs	r3, #0
}
 8045fbc:	4618      	mov	r0, r3
 8045fbe:	3714      	adds	r7, #20
 8045fc0:	46bd      	mov	sp, r7
 8045fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045fc6:	4770      	bx	lr

08045fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8045fc8:	b480      	push	{r7}
 8045fca:	b095      	sub	sp, #84	; 0x54
 8045fcc:	af00      	add	r7, sp, #0
 8045fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8045fd0:	687b      	ldr	r3, [r7, #4]
 8045fd2:	681b      	ldr	r3, [r3, #0]
 8045fd4:	330c      	adds	r3, #12
 8045fd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045fda:	e853 3f00 	ldrex	r3, [r3]
 8045fde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8045fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8045fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8045fe8:	687b      	ldr	r3, [r7, #4]
 8045fea:	681b      	ldr	r3, [r3, #0]
 8045fec:	330c      	adds	r3, #12
 8045fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8045ff0:	643a      	str	r2, [r7, #64]	; 0x40
 8045ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045ff4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8045ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8045ff8:	e841 2300 	strex	r3, r2, [r1]
 8045ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8045ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046000:	2b00      	cmp	r3, #0
 8046002:	d1e5      	bne.n	8045fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046004:	687b      	ldr	r3, [r7, #4]
 8046006:	681b      	ldr	r3, [r3, #0]
 8046008:	3314      	adds	r3, #20
 804600a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804600c:	6a3b      	ldr	r3, [r7, #32]
 804600e:	e853 3f00 	ldrex	r3, [r3]
 8046012:	61fb      	str	r3, [r7, #28]
   return(result);
 8046014:	69fb      	ldr	r3, [r7, #28]
 8046016:	f023 0301 	bic.w	r3, r3, #1
 804601a:	64bb      	str	r3, [r7, #72]	; 0x48
 804601c:	687b      	ldr	r3, [r7, #4]
 804601e:	681b      	ldr	r3, [r3, #0]
 8046020:	3314      	adds	r3, #20
 8046022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8046024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8046026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804602a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804602c:	e841 2300 	strex	r3, r2, [r1]
 8046030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8046032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046034:	2b00      	cmp	r3, #0
 8046036:	d1e5      	bne.n	8046004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046038:	687b      	ldr	r3, [r7, #4]
 804603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804603c:	2b01      	cmp	r3, #1
 804603e:	d119      	bne.n	8046074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8046040:	687b      	ldr	r3, [r7, #4]
 8046042:	681b      	ldr	r3, [r3, #0]
 8046044:	330c      	adds	r3, #12
 8046046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046048:	68fb      	ldr	r3, [r7, #12]
 804604a:	e853 3f00 	ldrex	r3, [r3]
 804604e:	60bb      	str	r3, [r7, #8]
   return(result);
 8046050:	68bb      	ldr	r3, [r7, #8]
 8046052:	f023 0310 	bic.w	r3, r3, #16
 8046056:	647b      	str	r3, [r7, #68]	; 0x44
 8046058:	687b      	ldr	r3, [r7, #4]
 804605a:	681b      	ldr	r3, [r3, #0]
 804605c:	330c      	adds	r3, #12
 804605e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8046060:	61ba      	str	r2, [r7, #24]
 8046062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046064:	6979      	ldr	r1, [r7, #20]
 8046066:	69ba      	ldr	r2, [r7, #24]
 8046068:	e841 2300 	strex	r3, r2, [r1]
 804606c:	613b      	str	r3, [r7, #16]
   return(result);
 804606e:	693b      	ldr	r3, [r7, #16]
 8046070:	2b00      	cmp	r3, #0
 8046072:	d1e5      	bne.n	8046040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8046074:	687b      	ldr	r3, [r7, #4]
 8046076:	2220      	movs	r2, #32
 8046078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804607c:	687b      	ldr	r3, [r7, #4]
 804607e:	2200      	movs	r2, #0
 8046080:	631a      	str	r2, [r3, #48]	; 0x30
}
 8046082:	bf00      	nop
 8046084:	3754      	adds	r7, #84	; 0x54
 8046086:	46bd      	mov	sp, r7
 8046088:	f85d 7b04 	ldr.w	r7, [sp], #4
 804608c:	4770      	bx	lr

0804608e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804608e:	b580      	push	{r7, lr}
 8046090:	b084      	sub	sp, #16
 8046092:	af00      	add	r7, sp, #0
 8046094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046096:	687b      	ldr	r3, [r7, #4]
 8046098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804609a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 804609c:	68fb      	ldr	r3, [r7, #12]
 804609e:	2200      	movs	r2, #0
 80460a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80460a2:	68fb      	ldr	r3, [r7, #12]
 80460a4:	2200      	movs	r2, #0
 80460a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80460a8:	68f8      	ldr	r0, [r7, #12]
 80460aa:	f7ff fecb 	bl	8045e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80460ae:	bf00      	nop
 80460b0:	3710      	adds	r7, #16
 80460b2:	46bd      	mov	sp, r7
 80460b4:	bd80      	pop	{r7, pc}

080460b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80460b6:	b480      	push	{r7}
 80460b8:	b085      	sub	sp, #20
 80460ba:	af00      	add	r7, sp, #0
 80460bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80460be:	687b      	ldr	r3, [r7, #4]
 80460c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80460c4:	b2db      	uxtb	r3, r3
 80460c6:	2b21      	cmp	r3, #33	; 0x21
 80460c8:	d13e      	bne.n	8046148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80460ca:	687b      	ldr	r3, [r7, #4]
 80460cc:	689b      	ldr	r3, [r3, #8]
 80460ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80460d2:	d114      	bne.n	80460fe <UART_Transmit_IT+0x48>
 80460d4:	687b      	ldr	r3, [r7, #4]
 80460d6:	691b      	ldr	r3, [r3, #16]
 80460d8:	2b00      	cmp	r3, #0
 80460da:	d110      	bne.n	80460fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80460dc:	687b      	ldr	r3, [r7, #4]
 80460de:	6a1b      	ldr	r3, [r3, #32]
 80460e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80460e2:	68fb      	ldr	r3, [r7, #12]
 80460e4:	881b      	ldrh	r3, [r3, #0]
 80460e6:	461a      	mov	r2, r3
 80460e8:	687b      	ldr	r3, [r7, #4]
 80460ea:	681b      	ldr	r3, [r3, #0]
 80460ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80460f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80460f2:	687b      	ldr	r3, [r7, #4]
 80460f4:	6a1b      	ldr	r3, [r3, #32]
 80460f6:	1c9a      	adds	r2, r3, #2
 80460f8:	687b      	ldr	r3, [r7, #4]
 80460fa:	621a      	str	r2, [r3, #32]
 80460fc:	e008      	b.n	8046110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80460fe:	687b      	ldr	r3, [r7, #4]
 8046100:	6a1b      	ldr	r3, [r3, #32]
 8046102:	1c59      	adds	r1, r3, #1
 8046104:	687a      	ldr	r2, [r7, #4]
 8046106:	6211      	str	r1, [r2, #32]
 8046108:	781a      	ldrb	r2, [r3, #0]
 804610a:	687b      	ldr	r3, [r7, #4]
 804610c:	681b      	ldr	r3, [r3, #0]
 804610e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8046110:	687b      	ldr	r3, [r7, #4]
 8046112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8046114:	b29b      	uxth	r3, r3
 8046116:	3b01      	subs	r3, #1
 8046118:	b29b      	uxth	r3, r3
 804611a:	687a      	ldr	r2, [r7, #4]
 804611c:	4619      	mov	r1, r3
 804611e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8046120:	2b00      	cmp	r3, #0
 8046122:	d10f      	bne.n	8046144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8046124:	687b      	ldr	r3, [r7, #4]
 8046126:	681b      	ldr	r3, [r3, #0]
 8046128:	68da      	ldr	r2, [r3, #12]
 804612a:	687b      	ldr	r3, [r7, #4]
 804612c:	681b      	ldr	r3, [r3, #0]
 804612e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8046132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8046134:	687b      	ldr	r3, [r7, #4]
 8046136:	681b      	ldr	r3, [r3, #0]
 8046138:	68da      	ldr	r2, [r3, #12]
 804613a:	687b      	ldr	r3, [r7, #4]
 804613c:	681b      	ldr	r3, [r3, #0]
 804613e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8046142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8046144:	2300      	movs	r3, #0
 8046146:	e000      	b.n	804614a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8046148:	2302      	movs	r3, #2
  }
}
 804614a:	4618      	mov	r0, r3
 804614c:	3714      	adds	r7, #20
 804614e:	46bd      	mov	sp, r7
 8046150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046154:	4770      	bx	lr

08046156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8046156:	b580      	push	{r7, lr}
 8046158:	b082      	sub	sp, #8
 804615a:	af00      	add	r7, sp, #0
 804615c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 804615e:	687b      	ldr	r3, [r7, #4]
 8046160:	681b      	ldr	r3, [r3, #0]
 8046162:	68da      	ldr	r2, [r3, #12]
 8046164:	687b      	ldr	r3, [r7, #4]
 8046166:	681b      	ldr	r3, [r3, #0]
 8046168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804616c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804616e:	687b      	ldr	r3, [r7, #4]
 8046170:	2220      	movs	r2, #32
 8046172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8046176:	6878      	ldr	r0, [r7, #4]
 8046178:	f7ff fe5a 	bl	8045e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 804617c:	2300      	movs	r3, #0
}
 804617e:	4618      	mov	r0, r3
 8046180:	3708      	adds	r7, #8
 8046182:	46bd      	mov	sp, r7
 8046184:	bd80      	pop	{r7, pc}

08046186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8046186:	b580      	push	{r7, lr}
 8046188:	b08c      	sub	sp, #48	; 0x30
 804618a:	af00      	add	r7, sp, #0
 804618c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 804618e:	687b      	ldr	r3, [r7, #4]
 8046190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8046194:	b2db      	uxtb	r3, r3
 8046196:	2b22      	cmp	r3, #34	; 0x22
 8046198:	f040 80ab 	bne.w	80462f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804619c:	687b      	ldr	r3, [r7, #4]
 804619e:	689b      	ldr	r3, [r3, #8]
 80461a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80461a4:	d117      	bne.n	80461d6 <UART_Receive_IT+0x50>
 80461a6:	687b      	ldr	r3, [r7, #4]
 80461a8:	691b      	ldr	r3, [r3, #16]
 80461aa:	2b00      	cmp	r3, #0
 80461ac:	d113      	bne.n	80461d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80461ae:	2300      	movs	r3, #0
 80461b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80461b2:	687b      	ldr	r3, [r7, #4]
 80461b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80461b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80461b8:	687b      	ldr	r3, [r7, #4]
 80461ba:	681b      	ldr	r3, [r3, #0]
 80461bc:	685b      	ldr	r3, [r3, #4]
 80461be:	b29b      	uxth	r3, r3
 80461c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80461c4:	b29a      	uxth	r2, r3
 80461c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80461c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80461ca:	687b      	ldr	r3, [r7, #4]
 80461cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80461ce:	1c9a      	adds	r2, r3, #2
 80461d0:	687b      	ldr	r3, [r7, #4]
 80461d2:	629a      	str	r2, [r3, #40]	; 0x28
 80461d4:	e026      	b.n	8046224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80461d6:	687b      	ldr	r3, [r7, #4]
 80461d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80461da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80461dc:	2300      	movs	r3, #0
 80461de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80461e0:	687b      	ldr	r3, [r7, #4]
 80461e2:	689b      	ldr	r3, [r3, #8]
 80461e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80461e8:	d007      	beq.n	80461fa <UART_Receive_IT+0x74>
 80461ea:	687b      	ldr	r3, [r7, #4]
 80461ec:	689b      	ldr	r3, [r3, #8]
 80461ee:	2b00      	cmp	r3, #0
 80461f0:	d10a      	bne.n	8046208 <UART_Receive_IT+0x82>
 80461f2:	687b      	ldr	r3, [r7, #4]
 80461f4:	691b      	ldr	r3, [r3, #16]
 80461f6:	2b00      	cmp	r3, #0
 80461f8:	d106      	bne.n	8046208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80461fa:	687b      	ldr	r3, [r7, #4]
 80461fc:	681b      	ldr	r3, [r3, #0]
 80461fe:	685b      	ldr	r3, [r3, #4]
 8046200:	b2da      	uxtb	r2, r3
 8046202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046204:	701a      	strb	r2, [r3, #0]
 8046206:	e008      	b.n	804621a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8046208:	687b      	ldr	r3, [r7, #4]
 804620a:	681b      	ldr	r3, [r3, #0]
 804620c:	685b      	ldr	r3, [r3, #4]
 804620e:	b2db      	uxtb	r3, r3
 8046210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8046214:	b2da      	uxtb	r2, r3
 8046216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8046218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 804621a:	687b      	ldr	r3, [r7, #4]
 804621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804621e:	1c5a      	adds	r2, r3, #1
 8046220:	687b      	ldr	r3, [r7, #4]
 8046222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8046224:	687b      	ldr	r3, [r7, #4]
 8046226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8046228:	b29b      	uxth	r3, r3
 804622a:	3b01      	subs	r3, #1
 804622c:	b29b      	uxth	r3, r3
 804622e:	687a      	ldr	r2, [r7, #4]
 8046230:	4619      	mov	r1, r3
 8046232:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8046234:	2b00      	cmp	r3, #0
 8046236:	d15a      	bne.n	80462ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8046238:	687b      	ldr	r3, [r7, #4]
 804623a:	681b      	ldr	r3, [r3, #0]
 804623c:	68da      	ldr	r2, [r3, #12]
 804623e:	687b      	ldr	r3, [r7, #4]
 8046240:	681b      	ldr	r3, [r3, #0]
 8046242:	f022 0220 	bic.w	r2, r2, #32
 8046246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8046248:	687b      	ldr	r3, [r7, #4]
 804624a:	681b      	ldr	r3, [r3, #0]
 804624c:	68da      	ldr	r2, [r3, #12]
 804624e:	687b      	ldr	r3, [r7, #4]
 8046250:	681b      	ldr	r3, [r3, #0]
 8046252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8046256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8046258:	687b      	ldr	r3, [r7, #4]
 804625a:	681b      	ldr	r3, [r3, #0]
 804625c:	695a      	ldr	r2, [r3, #20]
 804625e:	687b      	ldr	r3, [r7, #4]
 8046260:	681b      	ldr	r3, [r3, #0]
 8046262:	f022 0201 	bic.w	r2, r2, #1
 8046266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8046268:	687b      	ldr	r3, [r7, #4]
 804626a:	2220      	movs	r2, #32
 804626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046270:	687b      	ldr	r3, [r7, #4]
 8046272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046274:	2b01      	cmp	r3, #1
 8046276:	d135      	bne.n	80462e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046278:	687b      	ldr	r3, [r7, #4]
 804627a:	2200      	movs	r2, #0
 804627c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804627e:	687b      	ldr	r3, [r7, #4]
 8046280:	681b      	ldr	r3, [r3, #0]
 8046282:	330c      	adds	r3, #12
 8046284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046286:	697b      	ldr	r3, [r7, #20]
 8046288:	e853 3f00 	ldrex	r3, [r3]
 804628c:	613b      	str	r3, [r7, #16]
   return(result);
 804628e:	693b      	ldr	r3, [r7, #16]
 8046290:	f023 0310 	bic.w	r3, r3, #16
 8046294:	627b      	str	r3, [r7, #36]	; 0x24
 8046296:	687b      	ldr	r3, [r7, #4]
 8046298:	681b      	ldr	r3, [r3, #0]
 804629a:	330c      	adds	r3, #12
 804629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804629e:	623a      	str	r2, [r7, #32]
 80462a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80462a2:	69f9      	ldr	r1, [r7, #28]
 80462a4:	6a3a      	ldr	r2, [r7, #32]
 80462a6:	e841 2300 	strex	r3, r2, [r1]
 80462aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80462ac:	69bb      	ldr	r3, [r7, #24]
 80462ae:	2b00      	cmp	r3, #0
 80462b0:	d1e5      	bne.n	804627e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80462b2:	687b      	ldr	r3, [r7, #4]
 80462b4:	681b      	ldr	r3, [r3, #0]
 80462b6:	681b      	ldr	r3, [r3, #0]
 80462b8:	f003 0310 	and.w	r3, r3, #16
 80462bc:	2b10      	cmp	r3, #16
 80462be:	d10a      	bne.n	80462d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80462c0:	2300      	movs	r3, #0
 80462c2:	60fb      	str	r3, [r7, #12]
 80462c4:	687b      	ldr	r3, [r7, #4]
 80462c6:	681b      	ldr	r3, [r3, #0]
 80462c8:	681b      	ldr	r3, [r3, #0]
 80462ca:	60fb      	str	r3, [r7, #12]
 80462cc:	687b      	ldr	r3, [r7, #4]
 80462ce:	681b      	ldr	r3, [r3, #0]
 80462d0:	685b      	ldr	r3, [r3, #4]
 80462d2:	60fb      	str	r3, [r7, #12]
 80462d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80462d6:	687b      	ldr	r3, [r7, #4]
 80462d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80462da:	4619      	mov	r1, r3
 80462dc:	6878      	ldr	r0, [r7, #4]
 80462de:	f7ff fdbb 	bl	8045e58 <HAL_UARTEx_RxEventCallback>
 80462e2:	e002      	b.n	80462ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80462e4:	6878      	ldr	r0, [r7, #4]
 80462e6:	f7fd fb75 	bl	80439d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80462ea:	2300      	movs	r3, #0
 80462ec:	e002      	b.n	80462f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80462ee:	2300      	movs	r3, #0
 80462f0:	e000      	b.n	80462f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80462f2:	2302      	movs	r3, #2
  }
}
 80462f4:	4618      	mov	r0, r3
 80462f6:	3730      	adds	r7, #48	; 0x30
 80462f8:	46bd      	mov	sp, r7
 80462fa:	bd80      	pop	{r7, pc}

080462fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80462fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8046300:	b0c0      	sub	sp, #256	; 0x100
 8046302:	af00      	add	r7, sp, #0
 8046304:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8046308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804630c:	681b      	ldr	r3, [r3, #0]
 804630e:	691b      	ldr	r3, [r3, #16]
 8046310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8046314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046318:	68d9      	ldr	r1, [r3, #12]
 804631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804631e:	681a      	ldr	r2, [r3, #0]
 8046320:	ea40 0301 	orr.w	r3, r0, r1
 8046324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8046326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804632a:	689a      	ldr	r2, [r3, #8]
 804632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046330:	691b      	ldr	r3, [r3, #16]
 8046332:	431a      	orrs	r2, r3
 8046334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046338:	695b      	ldr	r3, [r3, #20]
 804633a:	431a      	orrs	r2, r3
 804633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046340:	69db      	ldr	r3, [r3, #28]
 8046342:	4313      	orrs	r3, r2
 8046344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8046348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804634c:	681b      	ldr	r3, [r3, #0]
 804634e:	68db      	ldr	r3, [r3, #12]
 8046350:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8046354:	f021 010c 	bic.w	r1, r1, #12
 8046358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804635c:	681a      	ldr	r2, [r3, #0]
 804635e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8046362:	430b      	orrs	r3, r1
 8046364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8046366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804636a:	681b      	ldr	r3, [r3, #0]
 804636c:	695b      	ldr	r3, [r3, #20]
 804636e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8046372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046376:	6999      	ldr	r1, [r3, #24]
 8046378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804637c:	681a      	ldr	r2, [r3, #0]
 804637e:	ea40 0301 	orr.w	r3, r0, r1
 8046382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8046384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046388:	681a      	ldr	r2, [r3, #0]
 804638a:	4b8f      	ldr	r3, [pc, #572]	; (80465c8 <UART_SetConfig+0x2cc>)
 804638c:	429a      	cmp	r2, r3
 804638e:	d005      	beq.n	804639c <UART_SetConfig+0xa0>
 8046390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8046394:	681a      	ldr	r2, [r3, #0]
 8046396:	4b8d      	ldr	r3, [pc, #564]	; (80465cc <UART_SetConfig+0x2d0>)
 8046398:	429a      	cmp	r2, r3
 804639a:	d104      	bne.n	80463a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 804639c:	f7ff f90e 	bl	80455bc <HAL_RCC_GetPCLK2Freq>
 80463a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80463a4:	e003      	b.n	80463ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80463a6:	f7ff f8f5 	bl	8045594 <HAL_RCC_GetPCLK1Freq>
 80463aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80463ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80463b2:	69db      	ldr	r3, [r3, #28]
 80463b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80463b8:	f040 810c 	bne.w	80465d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80463bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80463c0:	2200      	movs	r2, #0
 80463c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80463c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80463ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80463ce:	4622      	mov	r2, r4
 80463d0:	462b      	mov	r3, r5
 80463d2:	1891      	adds	r1, r2, r2
 80463d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80463d6:	415b      	adcs	r3, r3
 80463d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80463da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80463de:	4621      	mov	r1, r4
 80463e0:	eb12 0801 	adds.w	r8, r2, r1
 80463e4:	4629      	mov	r1, r5
 80463e6:	eb43 0901 	adc.w	r9, r3, r1
 80463ea:	f04f 0200 	mov.w	r2, #0
 80463ee:	f04f 0300 	mov.w	r3, #0
 80463f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80463f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80463fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80463fe:	4690      	mov	r8, r2
 8046400:	4699      	mov	r9, r3
 8046402:	4623      	mov	r3, r4
 8046404:	eb18 0303 	adds.w	r3, r8, r3
 8046408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 804640c:	462b      	mov	r3, r5
 804640e:	eb49 0303 	adc.w	r3, r9, r3
 8046412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8046416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804641a:	685b      	ldr	r3, [r3, #4]
 804641c:	2200      	movs	r2, #0
 804641e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8046422:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8046426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 804642a:	460b      	mov	r3, r1
 804642c:	18db      	adds	r3, r3, r3
 804642e:	653b      	str	r3, [r7, #80]	; 0x50
 8046430:	4613      	mov	r3, r2
 8046432:	eb42 0303 	adc.w	r3, r2, r3
 8046436:	657b      	str	r3, [r7, #84]	; 0x54
 8046438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 804643c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8046440:	f7fa fbe2 	bl	8040c08 <__aeabi_uldivmod>
 8046444:	4602      	mov	r2, r0
 8046446:	460b      	mov	r3, r1
 8046448:	4b61      	ldr	r3, [pc, #388]	; (80465d0 <UART_SetConfig+0x2d4>)
 804644a:	fba3 2302 	umull	r2, r3, r3, r2
 804644e:	095b      	lsrs	r3, r3, #5
 8046450:	011c      	lsls	r4, r3, #4
 8046452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8046456:	2200      	movs	r2, #0
 8046458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 804645c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8046460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8046464:	4642      	mov	r2, r8
 8046466:	464b      	mov	r3, r9
 8046468:	1891      	adds	r1, r2, r2
 804646a:	64b9      	str	r1, [r7, #72]	; 0x48
 804646c:	415b      	adcs	r3, r3
 804646e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8046470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8046474:	4641      	mov	r1, r8
 8046476:	eb12 0a01 	adds.w	sl, r2, r1
 804647a:	4649      	mov	r1, r9
 804647c:	eb43 0b01 	adc.w	fp, r3, r1
 8046480:	f04f 0200 	mov.w	r2, #0
 8046484:	f04f 0300 	mov.w	r3, #0
 8046488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 804648c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8046490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8046494:	4692      	mov	sl, r2
 8046496:	469b      	mov	fp, r3
 8046498:	4643      	mov	r3, r8
 804649a:	eb1a 0303 	adds.w	r3, sl, r3
 804649e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80464a2:	464b      	mov	r3, r9
 80464a4:	eb4b 0303 	adc.w	r3, fp, r3
 80464a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80464ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80464b0:	685b      	ldr	r3, [r3, #4]
 80464b2:	2200      	movs	r2, #0
 80464b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80464b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80464bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80464c0:	460b      	mov	r3, r1
 80464c2:	18db      	adds	r3, r3, r3
 80464c4:	643b      	str	r3, [r7, #64]	; 0x40
 80464c6:	4613      	mov	r3, r2
 80464c8:	eb42 0303 	adc.w	r3, r2, r3
 80464cc:	647b      	str	r3, [r7, #68]	; 0x44
 80464ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80464d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80464d6:	f7fa fb97 	bl	8040c08 <__aeabi_uldivmod>
 80464da:	4602      	mov	r2, r0
 80464dc:	460b      	mov	r3, r1
 80464de:	4611      	mov	r1, r2
 80464e0:	4b3b      	ldr	r3, [pc, #236]	; (80465d0 <UART_SetConfig+0x2d4>)
 80464e2:	fba3 2301 	umull	r2, r3, r3, r1
 80464e6:	095b      	lsrs	r3, r3, #5
 80464e8:	2264      	movs	r2, #100	; 0x64
 80464ea:	fb02 f303 	mul.w	r3, r2, r3
 80464ee:	1acb      	subs	r3, r1, r3
 80464f0:	00db      	lsls	r3, r3, #3
 80464f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80464f6:	4b36      	ldr	r3, [pc, #216]	; (80465d0 <UART_SetConfig+0x2d4>)
 80464f8:	fba3 2302 	umull	r2, r3, r3, r2
 80464fc:	095b      	lsrs	r3, r3, #5
 80464fe:	005b      	lsls	r3, r3, #1
 8046500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8046504:	441c      	add	r4, r3
 8046506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804650a:	2200      	movs	r2, #0
 804650c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8046510:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8046514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8046518:	4642      	mov	r2, r8
 804651a:	464b      	mov	r3, r9
 804651c:	1891      	adds	r1, r2, r2
 804651e:	63b9      	str	r1, [r7, #56]	; 0x38
 8046520:	415b      	adcs	r3, r3
 8046522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8046524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8046528:	4641      	mov	r1, r8
 804652a:	1851      	adds	r1, r2, r1
 804652c:	6339      	str	r1, [r7, #48]	; 0x30
 804652e:	4649      	mov	r1, r9
 8046530:	414b      	adcs	r3, r1
 8046532:	637b      	str	r3, [r7, #52]	; 0x34
 8046534:	f04f 0200 	mov.w	r2, #0
 8046538:	f04f 0300 	mov.w	r3, #0
 804653c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8046540:	4659      	mov	r1, fp
 8046542:	00cb      	lsls	r3, r1, #3
 8046544:	4651      	mov	r1, sl
 8046546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804654a:	4651      	mov	r1, sl
 804654c:	00ca      	lsls	r2, r1, #3
 804654e:	4610      	mov	r0, r2
 8046550:	4619      	mov	r1, r3
 8046552:	4603      	mov	r3, r0
 8046554:	4642      	mov	r2, r8
 8046556:	189b      	adds	r3, r3, r2
 8046558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 804655c:	464b      	mov	r3, r9
 804655e:	460a      	mov	r2, r1
 8046560:	eb42 0303 	adc.w	r3, r2, r3
 8046564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8046568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804656c:	685b      	ldr	r3, [r3, #4]
 804656e:	2200      	movs	r2, #0
 8046570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8046574:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8046578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 804657c:	460b      	mov	r3, r1
 804657e:	18db      	adds	r3, r3, r3
 8046580:	62bb      	str	r3, [r7, #40]	; 0x28
 8046582:	4613      	mov	r3, r2
 8046584:	eb42 0303 	adc.w	r3, r2, r3
 8046588:	62fb      	str	r3, [r7, #44]	; 0x2c
 804658a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804658e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8046592:	f7fa fb39 	bl	8040c08 <__aeabi_uldivmod>
 8046596:	4602      	mov	r2, r0
 8046598:	460b      	mov	r3, r1
 804659a:	4b0d      	ldr	r3, [pc, #52]	; (80465d0 <UART_SetConfig+0x2d4>)
 804659c:	fba3 1302 	umull	r1, r3, r3, r2
 80465a0:	095b      	lsrs	r3, r3, #5
 80465a2:	2164      	movs	r1, #100	; 0x64
 80465a4:	fb01 f303 	mul.w	r3, r1, r3
 80465a8:	1ad3      	subs	r3, r2, r3
 80465aa:	00db      	lsls	r3, r3, #3
 80465ac:	3332      	adds	r3, #50	; 0x32
 80465ae:	4a08      	ldr	r2, [pc, #32]	; (80465d0 <UART_SetConfig+0x2d4>)
 80465b0:	fba2 2303 	umull	r2, r3, r2, r3
 80465b4:	095b      	lsrs	r3, r3, #5
 80465b6:	f003 0207 	and.w	r2, r3, #7
 80465ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80465be:	681b      	ldr	r3, [r3, #0]
 80465c0:	4422      	add	r2, r4
 80465c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80465c4:	e106      	b.n	80467d4 <UART_SetConfig+0x4d8>
 80465c6:	bf00      	nop
 80465c8:	40011000 	.word	0x40011000
 80465cc:	40011400 	.word	0x40011400
 80465d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80465d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80465d8:	2200      	movs	r2, #0
 80465da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80465de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80465e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80465e6:	4642      	mov	r2, r8
 80465e8:	464b      	mov	r3, r9
 80465ea:	1891      	adds	r1, r2, r2
 80465ec:	6239      	str	r1, [r7, #32]
 80465ee:	415b      	adcs	r3, r3
 80465f0:	627b      	str	r3, [r7, #36]	; 0x24
 80465f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80465f6:	4641      	mov	r1, r8
 80465f8:	1854      	adds	r4, r2, r1
 80465fa:	4649      	mov	r1, r9
 80465fc:	eb43 0501 	adc.w	r5, r3, r1
 8046600:	f04f 0200 	mov.w	r2, #0
 8046604:	f04f 0300 	mov.w	r3, #0
 8046608:	00eb      	lsls	r3, r5, #3
 804660a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 804660e:	00e2      	lsls	r2, r4, #3
 8046610:	4614      	mov	r4, r2
 8046612:	461d      	mov	r5, r3
 8046614:	4643      	mov	r3, r8
 8046616:	18e3      	adds	r3, r4, r3
 8046618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 804661c:	464b      	mov	r3, r9
 804661e:	eb45 0303 	adc.w	r3, r5, r3
 8046622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8046626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804662a:	685b      	ldr	r3, [r3, #4]
 804662c:	2200      	movs	r2, #0
 804662e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8046632:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8046636:	f04f 0200 	mov.w	r2, #0
 804663a:	f04f 0300 	mov.w	r3, #0
 804663e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8046642:	4629      	mov	r1, r5
 8046644:	008b      	lsls	r3, r1, #2
 8046646:	4621      	mov	r1, r4
 8046648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804664c:	4621      	mov	r1, r4
 804664e:	008a      	lsls	r2, r1, #2
 8046650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8046654:	f7fa fad8 	bl	8040c08 <__aeabi_uldivmod>
 8046658:	4602      	mov	r2, r0
 804665a:	460b      	mov	r3, r1
 804665c:	4b60      	ldr	r3, [pc, #384]	; (80467e0 <UART_SetConfig+0x4e4>)
 804665e:	fba3 2302 	umull	r2, r3, r3, r2
 8046662:	095b      	lsrs	r3, r3, #5
 8046664:	011c      	lsls	r4, r3, #4
 8046666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804666a:	2200      	movs	r2, #0
 804666c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8046670:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8046674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8046678:	4642      	mov	r2, r8
 804667a:	464b      	mov	r3, r9
 804667c:	1891      	adds	r1, r2, r2
 804667e:	61b9      	str	r1, [r7, #24]
 8046680:	415b      	adcs	r3, r3
 8046682:	61fb      	str	r3, [r7, #28]
 8046684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8046688:	4641      	mov	r1, r8
 804668a:	1851      	adds	r1, r2, r1
 804668c:	6139      	str	r1, [r7, #16]
 804668e:	4649      	mov	r1, r9
 8046690:	414b      	adcs	r3, r1
 8046692:	617b      	str	r3, [r7, #20]
 8046694:	f04f 0200 	mov.w	r2, #0
 8046698:	f04f 0300 	mov.w	r3, #0
 804669c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80466a0:	4659      	mov	r1, fp
 80466a2:	00cb      	lsls	r3, r1, #3
 80466a4:	4651      	mov	r1, sl
 80466a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80466aa:	4651      	mov	r1, sl
 80466ac:	00ca      	lsls	r2, r1, #3
 80466ae:	4610      	mov	r0, r2
 80466b0:	4619      	mov	r1, r3
 80466b2:	4603      	mov	r3, r0
 80466b4:	4642      	mov	r2, r8
 80466b6:	189b      	adds	r3, r3, r2
 80466b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80466bc:	464b      	mov	r3, r9
 80466be:	460a      	mov	r2, r1
 80466c0:	eb42 0303 	adc.w	r3, r2, r3
 80466c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80466c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80466cc:	685b      	ldr	r3, [r3, #4]
 80466ce:	2200      	movs	r2, #0
 80466d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80466d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80466d4:	f04f 0200 	mov.w	r2, #0
 80466d8:	f04f 0300 	mov.w	r3, #0
 80466dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80466e0:	4649      	mov	r1, r9
 80466e2:	008b      	lsls	r3, r1, #2
 80466e4:	4641      	mov	r1, r8
 80466e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80466ea:	4641      	mov	r1, r8
 80466ec:	008a      	lsls	r2, r1, #2
 80466ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80466f2:	f7fa fa89 	bl	8040c08 <__aeabi_uldivmod>
 80466f6:	4602      	mov	r2, r0
 80466f8:	460b      	mov	r3, r1
 80466fa:	4611      	mov	r1, r2
 80466fc:	4b38      	ldr	r3, [pc, #224]	; (80467e0 <UART_SetConfig+0x4e4>)
 80466fe:	fba3 2301 	umull	r2, r3, r3, r1
 8046702:	095b      	lsrs	r3, r3, #5
 8046704:	2264      	movs	r2, #100	; 0x64
 8046706:	fb02 f303 	mul.w	r3, r2, r3
 804670a:	1acb      	subs	r3, r1, r3
 804670c:	011b      	lsls	r3, r3, #4
 804670e:	3332      	adds	r3, #50	; 0x32
 8046710:	4a33      	ldr	r2, [pc, #204]	; (80467e0 <UART_SetConfig+0x4e4>)
 8046712:	fba2 2303 	umull	r2, r3, r2, r3
 8046716:	095b      	lsrs	r3, r3, #5
 8046718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804671c:	441c      	add	r4, r3
 804671e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8046722:	2200      	movs	r2, #0
 8046724:	673b      	str	r3, [r7, #112]	; 0x70
 8046726:	677a      	str	r2, [r7, #116]	; 0x74
 8046728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 804672c:	4642      	mov	r2, r8
 804672e:	464b      	mov	r3, r9
 8046730:	1891      	adds	r1, r2, r2
 8046732:	60b9      	str	r1, [r7, #8]
 8046734:	415b      	adcs	r3, r3
 8046736:	60fb      	str	r3, [r7, #12]
 8046738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 804673c:	4641      	mov	r1, r8
 804673e:	1851      	adds	r1, r2, r1
 8046740:	6039      	str	r1, [r7, #0]
 8046742:	4649      	mov	r1, r9
 8046744:	414b      	adcs	r3, r1
 8046746:	607b      	str	r3, [r7, #4]
 8046748:	f04f 0200 	mov.w	r2, #0
 804674c:	f04f 0300 	mov.w	r3, #0
 8046750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8046754:	4659      	mov	r1, fp
 8046756:	00cb      	lsls	r3, r1, #3
 8046758:	4651      	mov	r1, sl
 804675a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804675e:	4651      	mov	r1, sl
 8046760:	00ca      	lsls	r2, r1, #3
 8046762:	4610      	mov	r0, r2
 8046764:	4619      	mov	r1, r3
 8046766:	4603      	mov	r3, r0
 8046768:	4642      	mov	r2, r8
 804676a:	189b      	adds	r3, r3, r2
 804676c:	66bb      	str	r3, [r7, #104]	; 0x68
 804676e:	464b      	mov	r3, r9
 8046770:	460a      	mov	r2, r1
 8046772:	eb42 0303 	adc.w	r3, r2, r3
 8046776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8046778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804677c:	685b      	ldr	r3, [r3, #4]
 804677e:	2200      	movs	r2, #0
 8046780:	663b      	str	r3, [r7, #96]	; 0x60
 8046782:	667a      	str	r2, [r7, #100]	; 0x64
 8046784:	f04f 0200 	mov.w	r2, #0
 8046788:	f04f 0300 	mov.w	r3, #0
 804678c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8046790:	4649      	mov	r1, r9
 8046792:	008b      	lsls	r3, r1, #2
 8046794:	4641      	mov	r1, r8
 8046796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804679a:	4641      	mov	r1, r8
 804679c:	008a      	lsls	r2, r1, #2
 804679e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80467a2:	f7fa fa31 	bl	8040c08 <__aeabi_uldivmod>
 80467a6:	4602      	mov	r2, r0
 80467a8:	460b      	mov	r3, r1
 80467aa:	4b0d      	ldr	r3, [pc, #52]	; (80467e0 <UART_SetConfig+0x4e4>)
 80467ac:	fba3 1302 	umull	r1, r3, r3, r2
 80467b0:	095b      	lsrs	r3, r3, #5
 80467b2:	2164      	movs	r1, #100	; 0x64
 80467b4:	fb01 f303 	mul.w	r3, r1, r3
 80467b8:	1ad3      	subs	r3, r2, r3
 80467ba:	011b      	lsls	r3, r3, #4
 80467bc:	3332      	adds	r3, #50	; 0x32
 80467be:	4a08      	ldr	r2, [pc, #32]	; (80467e0 <UART_SetConfig+0x4e4>)
 80467c0:	fba2 2303 	umull	r2, r3, r2, r3
 80467c4:	095b      	lsrs	r3, r3, #5
 80467c6:	f003 020f 	and.w	r2, r3, #15
 80467ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80467ce:	681b      	ldr	r3, [r3, #0]
 80467d0:	4422      	add	r2, r4
 80467d2:	609a      	str	r2, [r3, #8]
}
 80467d4:	bf00      	nop
 80467d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80467da:	46bd      	mov	sp, r7
 80467dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80467e0:	51eb851f 	.word	0x51eb851f

080467e4 <malloc>:
 80467e4:	4b02      	ldr	r3, [pc, #8]	; (80467f0 <malloc+0xc>)
 80467e6:	4601      	mov	r1, r0
 80467e8:	6818      	ldr	r0, [r3, #0]
 80467ea:	f000 b82b 	b.w	8046844 <_malloc_r>
 80467ee:	bf00      	nop
 80467f0:	200001f4 	.word	0x200001f4

080467f4 <free>:
 80467f4:	4b02      	ldr	r3, [pc, #8]	; (8046800 <free+0xc>)
 80467f6:	4601      	mov	r1, r0
 80467f8:	6818      	ldr	r0, [r3, #0]
 80467fa:	f002 bc0b 	b.w	8049014 <_free_r>
 80467fe:	bf00      	nop
 8046800:	200001f4 	.word	0x200001f4

08046804 <sbrk_aligned>:
 8046804:	b570      	push	{r4, r5, r6, lr}
 8046806:	4e0e      	ldr	r6, [pc, #56]	; (8046840 <sbrk_aligned+0x3c>)
 8046808:	460c      	mov	r4, r1
 804680a:	6831      	ldr	r1, [r6, #0]
 804680c:	4605      	mov	r5, r0
 804680e:	b911      	cbnz	r1, 8046816 <sbrk_aligned+0x12>
 8046810:	f001 fd22 	bl	8048258 <_sbrk_r>
 8046814:	6030      	str	r0, [r6, #0]
 8046816:	4621      	mov	r1, r4
 8046818:	4628      	mov	r0, r5
 804681a:	f001 fd1d 	bl	8048258 <_sbrk_r>
 804681e:	1c43      	adds	r3, r0, #1
 8046820:	d00a      	beq.n	8046838 <sbrk_aligned+0x34>
 8046822:	1cc4      	adds	r4, r0, #3
 8046824:	f024 0403 	bic.w	r4, r4, #3
 8046828:	42a0      	cmp	r0, r4
 804682a:	d007      	beq.n	804683c <sbrk_aligned+0x38>
 804682c:	1a21      	subs	r1, r4, r0
 804682e:	4628      	mov	r0, r5
 8046830:	f001 fd12 	bl	8048258 <_sbrk_r>
 8046834:	3001      	adds	r0, #1
 8046836:	d101      	bne.n	804683c <sbrk_aligned+0x38>
 8046838:	f04f 34ff 	mov.w	r4, #4294967295
 804683c:	4620      	mov	r0, r4
 804683e:	bd70      	pop	{r4, r5, r6, pc}
 8046840:	200037b4 	.word	0x200037b4

08046844 <_malloc_r>:
 8046844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8046848:	1ccd      	adds	r5, r1, #3
 804684a:	f025 0503 	bic.w	r5, r5, #3
 804684e:	3508      	adds	r5, #8
 8046850:	2d0c      	cmp	r5, #12
 8046852:	bf38      	it	cc
 8046854:	250c      	movcc	r5, #12
 8046856:	2d00      	cmp	r5, #0
 8046858:	4607      	mov	r7, r0
 804685a:	db01      	blt.n	8046860 <_malloc_r+0x1c>
 804685c:	42a9      	cmp	r1, r5
 804685e:	d905      	bls.n	804686c <_malloc_r+0x28>
 8046860:	230c      	movs	r3, #12
 8046862:	603b      	str	r3, [r7, #0]
 8046864:	2600      	movs	r6, #0
 8046866:	4630      	mov	r0, r6
 8046868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804686c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8046940 <_malloc_r+0xfc>
 8046870:	f000 f868 	bl	8046944 <__malloc_lock>
 8046874:	f8d8 3000 	ldr.w	r3, [r8]
 8046878:	461c      	mov	r4, r3
 804687a:	bb5c      	cbnz	r4, 80468d4 <_malloc_r+0x90>
 804687c:	4629      	mov	r1, r5
 804687e:	4638      	mov	r0, r7
 8046880:	f7ff ffc0 	bl	8046804 <sbrk_aligned>
 8046884:	1c43      	adds	r3, r0, #1
 8046886:	4604      	mov	r4, r0
 8046888:	d155      	bne.n	8046936 <_malloc_r+0xf2>
 804688a:	f8d8 4000 	ldr.w	r4, [r8]
 804688e:	4626      	mov	r6, r4
 8046890:	2e00      	cmp	r6, #0
 8046892:	d145      	bne.n	8046920 <_malloc_r+0xdc>
 8046894:	2c00      	cmp	r4, #0
 8046896:	d048      	beq.n	804692a <_malloc_r+0xe6>
 8046898:	6823      	ldr	r3, [r4, #0]
 804689a:	4631      	mov	r1, r6
 804689c:	4638      	mov	r0, r7
 804689e:	eb04 0903 	add.w	r9, r4, r3
 80468a2:	f001 fcd9 	bl	8048258 <_sbrk_r>
 80468a6:	4581      	cmp	r9, r0
 80468a8:	d13f      	bne.n	804692a <_malloc_r+0xe6>
 80468aa:	6821      	ldr	r1, [r4, #0]
 80468ac:	1a6d      	subs	r5, r5, r1
 80468ae:	4629      	mov	r1, r5
 80468b0:	4638      	mov	r0, r7
 80468b2:	f7ff ffa7 	bl	8046804 <sbrk_aligned>
 80468b6:	3001      	adds	r0, #1
 80468b8:	d037      	beq.n	804692a <_malloc_r+0xe6>
 80468ba:	6823      	ldr	r3, [r4, #0]
 80468bc:	442b      	add	r3, r5
 80468be:	6023      	str	r3, [r4, #0]
 80468c0:	f8d8 3000 	ldr.w	r3, [r8]
 80468c4:	2b00      	cmp	r3, #0
 80468c6:	d038      	beq.n	804693a <_malloc_r+0xf6>
 80468c8:	685a      	ldr	r2, [r3, #4]
 80468ca:	42a2      	cmp	r2, r4
 80468cc:	d12b      	bne.n	8046926 <_malloc_r+0xe2>
 80468ce:	2200      	movs	r2, #0
 80468d0:	605a      	str	r2, [r3, #4]
 80468d2:	e00f      	b.n	80468f4 <_malloc_r+0xb0>
 80468d4:	6822      	ldr	r2, [r4, #0]
 80468d6:	1b52      	subs	r2, r2, r5
 80468d8:	d41f      	bmi.n	804691a <_malloc_r+0xd6>
 80468da:	2a0b      	cmp	r2, #11
 80468dc:	d917      	bls.n	804690e <_malloc_r+0xca>
 80468de:	1961      	adds	r1, r4, r5
 80468e0:	42a3      	cmp	r3, r4
 80468e2:	6025      	str	r5, [r4, #0]
 80468e4:	bf18      	it	ne
 80468e6:	6059      	strne	r1, [r3, #4]
 80468e8:	6863      	ldr	r3, [r4, #4]
 80468ea:	bf08      	it	eq
 80468ec:	f8c8 1000 	streq.w	r1, [r8]
 80468f0:	5162      	str	r2, [r4, r5]
 80468f2:	604b      	str	r3, [r1, #4]
 80468f4:	4638      	mov	r0, r7
 80468f6:	f104 060b 	add.w	r6, r4, #11
 80468fa:	f000 f829 	bl	8046950 <__malloc_unlock>
 80468fe:	f026 0607 	bic.w	r6, r6, #7
 8046902:	1d23      	adds	r3, r4, #4
 8046904:	1af2      	subs	r2, r6, r3
 8046906:	d0ae      	beq.n	8046866 <_malloc_r+0x22>
 8046908:	1b9b      	subs	r3, r3, r6
 804690a:	50a3      	str	r3, [r4, r2]
 804690c:	e7ab      	b.n	8046866 <_malloc_r+0x22>
 804690e:	42a3      	cmp	r3, r4
 8046910:	6862      	ldr	r2, [r4, #4]
 8046912:	d1dd      	bne.n	80468d0 <_malloc_r+0x8c>
 8046914:	f8c8 2000 	str.w	r2, [r8]
 8046918:	e7ec      	b.n	80468f4 <_malloc_r+0xb0>
 804691a:	4623      	mov	r3, r4
 804691c:	6864      	ldr	r4, [r4, #4]
 804691e:	e7ac      	b.n	804687a <_malloc_r+0x36>
 8046920:	4634      	mov	r4, r6
 8046922:	6876      	ldr	r6, [r6, #4]
 8046924:	e7b4      	b.n	8046890 <_malloc_r+0x4c>
 8046926:	4613      	mov	r3, r2
 8046928:	e7cc      	b.n	80468c4 <_malloc_r+0x80>
 804692a:	230c      	movs	r3, #12
 804692c:	603b      	str	r3, [r7, #0]
 804692e:	4638      	mov	r0, r7
 8046930:	f000 f80e 	bl	8046950 <__malloc_unlock>
 8046934:	e797      	b.n	8046866 <_malloc_r+0x22>
 8046936:	6025      	str	r5, [r4, #0]
 8046938:	e7dc      	b.n	80468f4 <_malloc_r+0xb0>
 804693a:	605b      	str	r3, [r3, #4]
 804693c:	deff      	udf	#255	; 0xff
 804693e:	bf00      	nop
 8046940:	200037b0 	.word	0x200037b0

08046944 <__malloc_lock>:
 8046944:	4801      	ldr	r0, [pc, #4]	; (804694c <__malloc_lock+0x8>)
 8046946:	f001 bcd3 	b.w	80482f0 <__retarget_lock_acquire_recursive>
 804694a:	bf00      	nop
 804694c:	200038f8 	.word	0x200038f8

08046950 <__malloc_unlock>:
 8046950:	4801      	ldr	r0, [pc, #4]	; (8046958 <__malloc_unlock+0x8>)
 8046952:	f001 bcce 	b.w	80482f2 <__retarget_lock_release_recursive>
 8046956:	bf00      	nop
 8046958:	200038f8 	.word	0x200038f8

0804695c <realloc>:
 804695c:	4b02      	ldr	r3, [pc, #8]	; (8046968 <realloc+0xc>)
 804695e:	460a      	mov	r2, r1
 8046960:	4601      	mov	r1, r0
 8046962:	6818      	ldr	r0, [r3, #0]
 8046964:	f000 b802 	b.w	804696c <_realloc_r>
 8046968:	200001f4 	.word	0x200001f4

0804696c <_realloc_r>:
 804696c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8046970:	4680      	mov	r8, r0
 8046972:	4614      	mov	r4, r2
 8046974:	460e      	mov	r6, r1
 8046976:	b921      	cbnz	r1, 8046982 <_realloc_r+0x16>
 8046978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804697c:	4611      	mov	r1, r2
 804697e:	f7ff bf61 	b.w	8046844 <_malloc_r>
 8046982:	b92a      	cbnz	r2, 8046990 <_realloc_r+0x24>
 8046984:	f002 fb46 	bl	8049014 <_free_r>
 8046988:	4625      	mov	r5, r4
 804698a:	4628      	mov	r0, r5
 804698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8046990:	f003 fba3 	bl	804a0da <_malloc_usable_size_r>
 8046994:	4284      	cmp	r4, r0
 8046996:	4607      	mov	r7, r0
 8046998:	d802      	bhi.n	80469a0 <_realloc_r+0x34>
 804699a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804699e:	d812      	bhi.n	80469c6 <_realloc_r+0x5a>
 80469a0:	4621      	mov	r1, r4
 80469a2:	4640      	mov	r0, r8
 80469a4:	f7ff ff4e 	bl	8046844 <_malloc_r>
 80469a8:	4605      	mov	r5, r0
 80469aa:	2800      	cmp	r0, #0
 80469ac:	d0ed      	beq.n	804698a <_realloc_r+0x1e>
 80469ae:	42bc      	cmp	r4, r7
 80469b0:	4622      	mov	r2, r4
 80469b2:	4631      	mov	r1, r6
 80469b4:	bf28      	it	cs
 80469b6:	463a      	movcs	r2, r7
 80469b8:	f001 fc9c 	bl	80482f4 <memcpy>
 80469bc:	4631      	mov	r1, r6
 80469be:	4640      	mov	r0, r8
 80469c0:	f002 fb28 	bl	8049014 <_free_r>
 80469c4:	e7e1      	b.n	804698a <_realloc_r+0x1e>
 80469c6:	4635      	mov	r5, r6
 80469c8:	e7df      	b.n	804698a <_realloc_r+0x1e>

080469ca <sulp>:
 80469ca:	b570      	push	{r4, r5, r6, lr}
 80469cc:	4604      	mov	r4, r0
 80469ce:	460d      	mov	r5, r1
 80469d0:	ec45 4b10 	vmov	d0, r4, r5
 80469d4:	4616      	mov	r6, r2
 80469d6:	f003 fa3f 	bl	8049e58 <__ulp>
 80469da:	ec51 0b10 	vmov	r0, r1, d0
 80469de:	b17e      	cbz	r6, 8046a00 <sulp+0x36>
 80469e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80469e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80469e8:	2b00      	cmp	r3, #0
 80469ea:	dd09      	ble.n	8046a00 <sulp+0x36>
 80469ec:	051b      	lsls	r3, r3, #20
 80469ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80469f2:	2400      	movs	r4, #0
 80469f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80469f8:	4622      	mov	r2, r4
 80469fa:	462b      	mov	r3, r5
 80469fc:	f7f9 fe0c 	bl	8040618 <__aeabi_dmul>
 8046a00:	bd70      	pop	{r4, r5, r6, pc}
 8046a02:	0000      	movs	r0, r0
 8046a04:	0000      	movs	r0, r0
	...

08046a08 <_strtod_l>:
 8046a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8046a0c:	ed2d 8b02 	vpush	{d8}
 8046a10:	b09b      	sub	sp, #108	; 0x6c
 8046a12:	4604      	mov	r4, r0
 8046a14:	9213      	str	r2, [sp, #76]	; 0x4c
 8046a16:	2200      	movs	r2, #0
 8046a18:	9216      	str	r2, [sp, #88]	; 0x58
 8046a1a:	460d      	mov	r5, r1
 8046a1c:	f04f 0800 	mov.w	r8, #0
 8046a20:	f04f 0900 	mov.w	r9, #0
 8046a24:	460a      	mov	r2, r1
 8046a26:	9215      	str	r2, [sp, #84]	; 0x54
 8046a28:	7811      	ldrb	r1, [r2, #0]
 8046a2a:	292b      	cmp	r1, #43	; 0x2b
 8046a2c:	d04c      	beq.n	8046ac8 <_strtod_l+0xc0>
 8046a2e:	d83a      	bhi.n	8046aa6 <_strtod_l+0x9e>
 8046a30:	290d      	cmp	r1, #13
 8046a32:	d834      	bhi.n	8046a9e <_strtod_l+0x96>
 8046a34:	2908      	cmp	r1, #8
 8046a36:	d834      	bhi.n	8046aa2 <_strtod_l+0x9a>
 8046a38:	2900      	cmp	r1, #0
 8046a3a:	d03d      	beq.n	8046ab8 <_strtod_l+0xb0>
 8046a3c:	2200      	movs	r2, #0
 8046a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8046a40:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8046a42:	7832      	ldrb	r2, [r6, #0]
 8046a44:	2a30      	cmp	r2, #48	; 0x30
 8046a46:	f040 80b4 	bne.w	8046bb2 <_strtod_l+0x1aa>
 8046a4a:	7872      	ldrb	r2, [r6, #1]
 8046a4c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8046a50:	2a58      	cmp	r2, #88	; 0x58
 8046a52:	d170      	bne.n	8046b36 <_strtod_l+0x12e>
 8046a54:	9302      	str	r3, [sp, #8]
 8046a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046a58:	9301      	str	r3, [sp, #4]
 8046a5a:	ab16      	add	r3, sp, #88	; 0x58
 8046a5c:	9300      	str	r3, [sp, #0]
 8046a5e:	4a8e      	ldr	r2, [pc, #568]	; (8046c98 <_strtod_l+0x290>)
 8046a60:	ab17      	add	r3, sp, #92	; 0x5c
 8046a62:	a915      	add	r1, sp, #84	; 0x54
 8046a64:	4620      	mov	r0, r4
 8046a66:	f002 fb89 	bl	804917c <__gethex>
 8046a6a:	f010 070f 	ands.w	r7, r0, #15
 8046a6e:	4605      	mov	r5, r0
 8046a70:	d005      	beq.n	8046a7e <_strtod_l+0x76>
 8046a72:	2f06      	cmp	r7, #6
 8046a74:	d12a      	bne.n	8046acc <_strtod_l+0xc4>
 8046a76:	3601      	adds	r6, #1
 8046a78:	2300      	movs	r3, #0
 8046a7a:	9615      	str	r6, [sp, #84]	; 0x54
 8046a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8046a7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8046a80:	2b00      	cmp	r3, #0
 8046a82:	f040 857f 	bne.w	8047584 <_strtod_l+0xb7c>
 8046a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8046a88:	b1db      	cbz	r3, 8046ac2 <_strtod_l+0xba>
 8046a8a:	4642      	mov	r2, r8
 8046a8c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8046a90:	ec43 2b10 	vmov	d0, r2, r3
 8046a94:	b01b      	add	sp, #108	; 0x6c
 8046a96:	ecbd 8b02 	vpop	{d8}
 8046a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8046a9e:	2920      	cmp	r1, #32
 8046aa0:	d1cc      	bne.n	8046a3c <_strtod_l+0x34>
 8046aa2:	3201      	adds	r2, #1
 8046aa4:	e7bf      	b.n	8046a26 <_strtod_l+0x1e>
 8046aa6:	292d      	cmp	r1, #45	; 0x2d
 8046aa8:	d1c8      	bne.n	8046a3c <_strtod_l+0x34>
 8046aaa:	2101      	movs	r1, #1
 8046aac:	910a      	str	r1, [sp, #40]	; 0x28
 8046aae:	1c51      	adds	r1, r2, #1
 8046ab0:	9115      	str	r1, [sp, #84]	; 0x54
 8046ab2:	7852      	ldrb	r2, [r2, #1]
 8046ab4:	2a00      	cmp	r2, #0
 8046ab6:	d1c3      	bne.n	8046a40 <_strtod_l+0x38>
 8046ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8046aba:	9515      	str	r5, [sp, #84]	; 0x54
 8046abc:	2b00      	cmp	r3, #0
 8046abe:	f040 855f 	bne.w	8047580 <_strtod_l+0xb78>
 8046ac2:	4642      	mov	r2, r8
 8046ac4:	464b      	mov	r3, r9
 8046ac6:	e7e3      	b.n	8046a90 <_strtod_l+0x88>
 8046ac8:	2100      	movs	r1, #0
 8046aca:	e7ef      	b.n	8046aac <_strtod_l+0xa4>
 8046acc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8046ace:	b13a      	cbz	r2, 8046ae0 <_strtod_l+0xd8>
 8046ad0:	2135      	movs	r1, #53	; 0x35
 8046ad2:	a818      	add	r0, sp, #96	; 0x60
 8046ad4:	f003 fabd 	bl	804a052 <__copybits>
 8046ad8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8046ada:	4620      	mov	r0, r4
 8046adc:	f002 fe90 	bl	8049800 <_Bfree>
 8046ae0:	3f01      	subs	r7, #1
 8046ae2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8046ae4:	2f04      	cmp	r7, #4
 8046ae6:	d806      	bhi.n	8046af6 <_strtod_l+0xee>
 8046ae8:	e8df f007 	tbb	[pc, r7]
 8046aec:	201d0314 	.word	0x201d0314
 8046af0:	14          	.byte	0x14
 8046af1:	00          	.byte	0x00
 8046af2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8046af6:	05e9      	lsls	r1, r5, #23
 8046af8:	bf48      	it	mi
 8046afa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8046afe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8046b02:	0d1b      	lsrs	r3, r3, #20
 8046b04:	051b      	lsls	r3, r3, #20
 8046b06:	2b00      	cmp	r3, #0
 8046b08:	d1b9      	bne.n	8046a7e <_strtod_l+0x76>
 8046b0a:	f001 fbc7 	bl	804829c <__errno>
 8046b0e:	2322      	movs	r3, #34	; 0x22
 8046b10:	6003      	str	r3, [r0, #0]
 8046b12:	e7b4      	b.n	8046a7e <_strtod_l+0x76>
 8046b14:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8046b18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8046b1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8046b20:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8046b24:	e7e7      	b.n	8046af6 <_strtod_l+0xee>
 8046b26:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8046ca0 <_strtod_l+0x298>
 8046b2a:	e7e4      	b.n	8046af6 <_strtod_l+0xee>
 8046b2c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8046b30:	f04f 38ff 	mov.w	r8, #4294967295
 8046b34:	e7df      	b.n	8046af6 <_strtod_l+0xee>
 8046b36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046b38:	1c5a      	adds	r2, r3, #1
 8046b3a:	9215      	str	r2, [sp, #84]	; 0x54
 8046b3c:	785b      	ldrb	r3, [r3, #1]
 8046b3e:	2b30      	cmp	r3, #48	; 0x30
 8046b40:	d0f9      	beq.n	8046b36 <_strtod_l+0x12e>
 8046b42:	2b00      	cmp	r3, #0
 8046b44:	d09b      	beq.n	8046a7e <_strtod_l+0x76>
 8046b46:	2301      	movs	r3, #1
 8046b48:	f04f 0a00 	mov.w	sl, #0
 8046b4c:	9304      	str	r3, [sp, #16]
 8046b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8046b52:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8046b56:	46d3      	mov	fp, sl
 8046b58:	220a      	movs	r2, #10
 8046b5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8046b5c:	7806      	ldrb	r6, [r0, #0]
 8046b5e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8046b62:	b2d9      	uxtb	r1, r3
 8046b64:	2909      	cmp	r1, #9
 8046b66:	d926      	bls.n	8046bb6 <_strtod_l+0x1ae>
 8046b68:	494c      	ldr	r1, [pc, #304]	; (8046c9c <_strtod_l+0x294>)
 8046b6a:	2201      	movs	r2, #1
 8046b6c:	f001 fb00 	bl	8048170 <strncmp>
 8046b70:	2800      	cmp	r0, #0
 8046b72:	d030      	beq.n	8046bd6 <_strtod_l+0x1ce>
 8046b74:	2000      	movs	r0, #0
 8046b76:	4632      	mov	r2, r6
 8046b78:	9005      	str	r0, [sp, #20]
 8046b7a:	465e      	mov	r6, fp
 8046b7c:	4603      	mov	r3, r0
 8046b7e:	2a65      	cmp	r2, #101	; 0x65
 8046b80:	d001      	beq.n	8046b86 <_strtod_l+0x17e>
 8046b82:	2a45      	cmp	r2, #69	; 0x45
 8046b84:	d113      	bne.n	8046bae <_strtod_l+0x1a6>
 8046b86:	b91e      	cbnz	r6, 8046b90 <_strtod_l+0x188>
 8046b88:	9a04      	ldr	r2, [sp, #16]
 8046b8a:	4302      	orrs	r2, r0
 8046b8c:	d094      	beq.n	8046ab8 <_strtod_l+0xb0>
 8046b8e:	2600      	movs	r6, #0
 8046b90:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8046b92:	1c6a      	adds	r2, r5, #1
 8046b94:	9215      	str	r2, [sp, #84]	; 0x54
 8046b96:	786a      	ldrb	r2, [r5, #1]
 8046b98:	2a2b      	cmp	r2, #43	; 0x2b
 8046b9a:	d074      	beq.n	8046c86 <_strtod_l+0x27e>
 8046b9c:	2a2d      	cmp	r2, #45	; 0x2d
 8046b9e:	d078      	beq.n	8046c92 <_strtod_l+0x28a>
 8046ba0:	f04f 0c00 	mov.w	ip, #0
 8046ba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8046ba8:	2909      	cmp	r1, #9
 8046baa:	d97f      	bls.n	8046cac <_strtod_l+0x2a4>
 8046bac:	9515      	str	r5, [sp, #84]	; 0x54
 8046bae:	2700      	movs	r7, #0
 8046bb0:	e09e      	b.n	8046cf0 <_strtod_l+0x2e8>
 8046bb2:	2300      	movs	r3, #0
 8046bb4:	e7c8      	b.n	8046b48 <_strtod_l+0x140>
 8046bb6:	f1bb 0f08 	cmp.w	fp, #8
 8046bba:	bfd8      	it	le
 8046bbc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8046bbe:	f100 0001 	add.w	r0, r0, #1
 8046bc2:	bfda      	itte	le
 8046bc4:	fb02 3301 	mlale	r3, r2, r1, r3
 8046bc8:	9309      	strle	r3, [sp, #36]	; 0x24
 8046bca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8046bce:	f10b 0b01 	add.w	fp, fp, #1
 8046bd2:	9015      	str	r0, [sp, #84]	; 0x54
 8046bd4:	e7c1      	b.n	8046b5a <_strtod_l+0x152>
 8046bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046bd8:	1c5a      	adds	r2, r3, #1
 8046bda:	9215      	str	r2, [sp, #84]	; 0x54
 8046bdc:	785a      	ldrb	r2, [r3, #1]
 8046bde:	f1bb 0f00 	cmp.w	fp, #0
 8046be2:	d037      	beq.n	8046c54 <_strtod_l+0x24c>
 8046be4:	9005      	str	r0, [sp, #20]
 8046be6:	465e      	mov	r6, fp
 8046be8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8046bec:	2b09      	cmp	r3, #9
 8046bee:	d912      	bls.n	8046c16 <_strtod_l+0x20e>
 8046bf0:	2301      	movs	r3, #1
 8046bf2:	e7c4      	b.n	8046b7e <_strtod_l+0x176>
 8046bf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046bf6:	1c5a      	adds	r2, r3, #1
 8046bf8:	9215      	str	r2, [sp, #84]	; 0x54
 8046bfa:	785a      	ldrb	r2, [r3, #1]
 8046bfc:	3001      	adds	r0, #1
 8046bfe:	2a30      	cmp	r2, #48	; 0x30
 8046c00:	d0f8      	beq.n	8046bf4 <_strtod_l+0x1ec>
 8046c02:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8046c06:	2b08      	cmp	r3, #8
 8046c08:	f200 84c1 	bhi.w	804758e <_strtod_l+0xb86>
 8046c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046c0e:	9005      	str	r0, [sp, #20]
 8046c10:	2000      	movs	r0, #0
 8046c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8046c14:	4606      	mov	r6, r0
 8046c16:	3a30      	subs	r2, #48	; 0x30
 8046c18:	f100 0301 	add.w	r3, r0, #1
 8046c1c:	d014      	beq.n	8046c48 <_strtod_l+0x240>
 8046c1e:	9905      	ldr	r1, [sp, #20]
 8046c20:	4419      	add	r1, r3
 8046c22:	9105      	str	r1, [sp, #20]
 8046c24:	4633      	mov	r3, r6
 8046c26:	eb00 0c06 	add.w	ip, r0, r6
 8046c2a:	210a      	movs	r1, #10
 8046c2c:	4563      	cmp	r3, ip
 8046c2e:	d113      	bne.n	8046c58 <_strtod_l+0x250>
 8046c30:	1833      	adds	r3, r6, r0
 8046c32:	2b08      	cmp	r3, #8
 8046c34:	f106 0601 	add.w	r6, r6, #1
 8046c38:	4406      	add	r6, r0
 8046c3a:	dc1a      	bgt.n	8046c72 <_strtod_l+0x26a>
 8046c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8046c3e:	230a      	movs	r3, #10
 8046c40:	fb03 2301 	mla	r3, r3, r1, r2
 8046c44:	9309      	str	r3, [sp, #36]	; 0x24
 8046c46:	2300      	movs	r3, #0
 8046c48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8046c4a:	1c51      	adds	r1, r2, #1
 8046c4c:	9115      	str	r1, [sp, #84]	; 0x54
 8046c4e:	7852      	ldrb	r2, [r2, #1]
 8046c50:	4618      	mov	r0, r3
 8046c52:	e7c9      	b.n	8046be8 <_strtod_l+0x1e0>
 8046c54:	4658      	mov	r0, fp
 8046c56:	e7d2      	b.n	8046bfe <_strtod_l+0x1f6>
 8046c58:	2b08      	cmp	r3, #8
 8046c5a:	f103 0301 	add.w	r3, r3, #1
 8046c5e:	dc03      	bgt.n	8046c68 <_strtod_l+0x260>
 8046c60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8046c62:	434f      	muls	r7, r1
 8046c64:	9709      	str	r7, [sp, #36]	; 0x24
 8046c66:	e7e1      	b.n	8046c2c <_strtod_l+0x224>
 8046c68:	2b10      	cmp	r3, #16
 8046c6a:	bfd8      	it	le
 8046c6c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8046c70:	e7dc      	b.n	8046c2c <_strtod_l+0x224>
 8046c72:	2e10      	cmp	r6, #16
 8046c74:	bfdc      	itt	le
 8046c76:	230a      	movle	r3, #10
 8046c78:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8046c7c:	e7e3      	b.n	8046c46 <_strtod_l+0x23e>
 8046c7e:	2300      	movs	r3, #0
 8046c80:	9305      	str	r3, [sp, #20]
 8046c82:	2301      	movs	r3, #1
 8046c84:	e780      	b.n	8046b88 <_strtod_l+0x180>
 8046c86:	f04f 0c00 	mov.w	ip, #0
 8046c8a:	1caa      	adds	r2, r5, #2
 8046c8c:	9215      	str	r2, [sp, #84]	; 0x54
 8046c8e:	78aa      	ldrb	r2, [r5, #2]
 8046c90:	e788      	b.n	8046ba4 <_strtod_l+0x19c>
 8046c92:	f04f 0c01 	mov.w	ip, #1
 8046c96:	e7f8      	b.n	8046c8a <_strtod_l+0x282>
 8046c98:	0804aef8 	.word	0x0804aef8
 8046c9c:	0804aef4 	.word	0x0804aef4
 8046ca0:	7ff00000 	.word	0x7ff00000
 8046ca4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8046ca6:	1c51      	adds	r1, r2, #1
 8046ca8:	9115      	str	r1, [sp, #84]	; 0x54
 8046caa:	7852      	ldrb	r2, [r2, #1]
 8046cac:	2a30      	cmp	r2, #48	; 0x30
 8046cae:	d0f9      	beq.n	8046ca4 <_strtod_l+0x29c>
 8046cb0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8046cb4:	2908      	cmp	r1, #8
 8046cb6:	f63f af7a 	bhi.w	8046bae <_strtod_l+0x1a6>
 8046cba:	3a30      	subs	r2, #48	; 0x30
 8046cbc:	9208      	str	r2, [sp, #32]
 8046cbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8046cc0:	920c      	str	r2, [sp, #48]	; 0x30
 8046cc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8046cc4:	1c57      	adds	r7, r2, #1
 8046cc6:	9715      	str	r7, [sp, #84]	; 0x54
 8046cc8:	7852      	ldrb	r2, [r2, #1]
 8046cca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8046cce:	f1be 0f09 	cmp.w	lr, #9
 8046cd2:	d938      	bls.n	8046d46 <_strtod_l+0x33e>
 8046cd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8046cd6:	1a7f      	subs	r7, r7, r1
 8046cd8:	2f08      	cmp	r7, #8
 8046cda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8046cde:	dc03      	bgt.n	8046ce8 <_strtod_l+0x2e0>
 8046ce0:	9908      	ldr	r1, [sp, #32]
 8046ce2:	428f      	cmp	r7, r1
 8046ce4:	bfa8      	it	ge
 8046ce6:	460f      	movge	r7, r1
 8046ce8:	f1bc 0f00 	cmp.w	ip, #0
 8046cec:	d000      	beq.n	8046cf0 <_strtod_l+0x2e8>
 8046cee:	427f      	negs	r7, r7
 8046cf0:	2e00      	cmp	r6, #0
 8046cf2:	d14f      	bne.n	8046d94 <_strtod_l+0x38c>
 8046cf4:	9904      	ldr	r1, [sp, #16]
 8046cf6:	4301      	orrs	r1, r0
 8046cf8:	f47f aec1 	bne.w	8046a7e <_strtod_l+0x76>
 8046cfc:	2b00      	cmp	r3, #0
 8046cfe:	f47f aedb 	bne.w	8046ab8 <_strtod_l+0xb0>
 8046d02:	2a69      	cmp	r2, #105	; 0x69
 8046d04:	d029      	beq.n	8046d5a <_strtod_l+0x352>
 8046d06:	dc26      	bgt.n	8046d56 <_strtod_l+0x34e>
 8046d08:	2a49      	cmp	r2, #73	; 0x49
 8046d0a:	d026      	beq.n	8046d5a <_strtod_l+0x352>
 8046d0c:	2a4e      	cmp	r2, #78	; 0x4e
 8046d0e:	f47f aed3 	bne.w	8046ab8 <_strtod_l+0xb0>
 8046d12:	499b      	ldr	r1, [pc, #620]	; (8046f80 <_strtod_l+0x578>)
 8046d14:	a815      	add	r0, sp, #84	; 0x54
 8046d16:	f002 fc71 	bl	80495fc <__match>
 8046d1a:	2800      	cmp	r0, #0
 8046d1c:	f43f aecc 	beq.w	8046ab8 <_strtod_l+0xb0>
 8046d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046d22:	781b      	ldrb	r3, [r3, #0]
 8046d24:	2b28      	cmp	r3, #40	; 0x28
 8046d26:	d12f      	bne.n	8046d88 <_strtod_l+0x380>
 8046d28:	4996      	ldr	r1, [pc, #600]	; (8046f84 <_strtod_l+0x57c>)
 8046d2a:	aa18      	add	r2, sp, #96	; 0x60
 8046d2c:	a815      	add	r0, sp, #84	; 0x54
 8046d2e:	f002 fc79 	bl	8049624 <__hexnan>
 8046d32:	2805      	cmp	r0, #5
 8046d34:	d128      	bne.n	8046d88 <_strtod_l+0x380>
 8046d36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8046d38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8046d3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8046d40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8046d44:	e69b      	b.n	8046a7e <_strtod_l+0x76>
 8046d46:	9f08      	ldr	r7, [sp, #32]
 8046d48:	210a      	movs	r1, #10
 8046d4a:	fb01 2107 	mla	r1, r1, r7, r2
 8046d4e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8046d52:	9208      	str	r2, [sp, #32]
 8046d54:	e7b5      	b.n	8046cc2 <_strtod_l+0x2ba>
 8046d56:	2a6e      	cmp	r2, #110	; 0x6e
 8046d58:	e7d9      	b.n	8046d0e <_strtod_l+0x306>
 8046d5a:	498b      	ldr	r1, [pc, #556]	; (8046f88 <_strtod_l+0x580>)
 8046d5c:	a815      	add	r0, sp, #84	; 0x54
 8046d5e:	f002 fc4d 	bl	80495fc <__match>
 8046d62:	2800      	cmp	r0, #0
 8046d64:	f43f aea8 	beq.w	8046ab8 <_strtod_l+0xb0>
 8046d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046d6a:	4988      	ldr	r1, [pc, #544]	; (8046f8c <_strtod_l+0x584>)
 8046d6c:	3b01      	subs	r3, #1
 8046d6e:	a815      	add	r0, sp, #84	; 0x54
 8046d70:	9315      	str	r3, [sp, #84]	; 0x54
 8046d72:	f002 fc43 	bl	80495fc <__match>
 8046d76:	b910      	cbnz	r0, 8046d7e <_strtod_l+0x376>
 8046d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8046d7a:	3301      	adds	r3, #1
 8046d7c:	9315      	str	r3, [sp, #84]	; 0x54
 8046d7e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8046f9c <_strtod_l+0x594>
 8046d82:	f04f 0800 	mov.w	r8, #0
 8046d86:	e67a      	b.n	8046a7e <_strtod_l+0x76>
 8046d88:	4881      	ldr	r0, [pc, #516]	; (8046f90 <_strtod_l+0x588>)
 8046d8a:	f001 fac1 	bl	8048310 <nan>
 8046d8e:	ec59 8b10 	vmov	r8, r9, d0
 8046d92:	e674      	b.n	8046a7e <_strtod_l+0x76>
 8046d94:	9b05      	ldr	r3, [sp, #20]
 8046d96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8046d98:	1afb      	subs	r3, r7, r3
 8046d9a:	f1bb 0f00 	cmp.w	fp, #0
 8046d9e:	bf08      	it	eq
 8046da0:	46b3      	moveq	fp, r6
 8046da2:	2e10      	cmp	r6, #16
 8046da4:	9308      	str	r3, [sp, #32]
 8046da6:	4635      	mov	r5, r6
 8046da8:	bfa8      	it	ge
 8046daa:	2510      	movge	r5, #16
 8046dac:	f7f9 fbba 	bl	8040524 <__aeabi_ui2d>
 8046db0:	2e09      	cmp	r6, #9
 8046db2:	4680      	mov	r8, r0
 8046db4:	4689      	mov	r9, r1
 8046db6:	dd13      	ble.n	8046de0 <_strtod_l+0x3d8>
 8046db8:	4b76      	ldr	r3, [pc, #472]	; (8046f94 <_strtod_l+0x58c>)
 8046dba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8046dbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8046dc2:	f7f9 fc29 	bl	8040618 <__aeabi_dmul>
 8046dc6:	4680      	mov	r8, r0
 8046dc8:	4650      	mov	r0, sl
 8046dca:	4689      	mov	r9, r1
 8046dcc:	f7f9 fbaa 	bl	8040524 <__aeabi_ui2d>
 8046dd0:	4602      	mov	r2, r0
 8046dd2:	460b      	mov	r3, r1
 8046dd4:	4640      	mov	r0, r8
 8046dd6:	4649      	mov	r1, r9
 8046dd8:	f7f9 fa68 	bl	80402ac <__adddf3>
 8046ddc:	4680      	mov	r8, r0
 8046dde:	4689      	mov	r9, r1
 8046de0:	2e0f      	cmp	r6, #15
 8046de2:	dc38      	bgt.n	8046e56 <_strtod_l+0x44e>
 8046de4:	9b08      	ldr	r3, [sp, #32]
 8046de6:	2b00      	cmp	r3, #0
 8046de8:	f43f ae49 	beq.w	8046a7e <_strtod_l+0x76>
 8046dec:	dd24      	ble.n	8046e38 <_strtod_l+0x430>
 8046dee:	2b16      	cmp	r3, #22
 8046df0:	dc0b      	bgt.n	8046e0a <_strtod_l+0x402>
 8046df2:	4968      	ldr	r1, [pc, #416]	; (8046f94 <_strtod_l+0x58c>)
 8046df4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8046df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046dfc:	4642      	mov	r2, r8
 8046dfe:	464b      	mov	r3, r9
 8046e00:	f7f9 fc0a 	bl	8040618 <__aeabi_dmul>
 8046e04:	4680      	mov	r8, r0
 8046e06:	4689      	mov	r9, r1
 8046e08:	e639      	b.n	8046a7e <_strtod_l+0x76>
 8046e0a:	9a08      	ldr	r2, [sp, #32]
 8046e0c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8046e10:	4293      	cmp	r3, r2
 8046e12:	db20      	blt.n	8046e56 <_strtod_l+0x44e>
 8046e14:	4c5f      	ldr	r4, [pc, #380]	; (8046f94 <_strtod_l+0x58c>)
 8046e16:	f1c6 060f 	rsb	r6, r6, #15
 8046e1a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8046e1e:	4642      	mov	r2, r8
 8046e20:	464b      	mov	r3, r9
 8046e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046e26:	f7f9 fbf7 	bl	8040618 <__aeabi_dmul>
 8046e2a:	9b08      	ldr	r3, [sp, #32]
 8046e2c:	1b9e      	subs	r6, r3, r6
 8046e2e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8046e32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8046e36:	e7e3      	b.n	8046e00 <_strtod_l+0x3f8>
 8046e38:	9b08      	ldr	r3, [sp, #32]
 8046e3a:	3316      	adds	r3, #22
 8046e3c:	db0b      	blt.n	8046e56 <_strtod_l+0x44e>
 8046e3e:	9b05      	ldr	r3, [sp, #20]
 8046e40:	1bdf      	subs	r7, r3, r7
 8046e42:	4b54      	ldr	r3, [pc, #336]	; (8046f94 <_strtod_l+0x58c>)
 8046e44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8046e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8046e4c:	4640      	mov	r0, r8
 8046e4e:	4649      	mov	r1, r9
 8046e50:	f7f9 fd0c 	bl	804086c <__aeabi_ddiv>
 8046e54:	e7d6      	b.n	8046e04 <_strtod_l+0x3fc>
 8046e56:	9b08      	ldr	r3, [sp, #32]
 8046e58:	1b75      	subs	r5, r6, r5
 8046e5a:	441d      	add	r5, r3
 8046e5c:	2d00      	cmp	r5, #0
 8046e5e:	dd70      	ble.n	8046f42 <_strtod_l+0x53a>
 8046e60:	f015 030f 	ands.w	r3, r5, #15
 8046e64:	d00a      	beq.n	8046e7c <_strtod_l+0x474>
 8046e66:	494b      	ldr	r1, [pc, #300]	; (8046f94 <_strtod_l+0x58c>)
 8046e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8046e6c:	4642      	mov	r2, r8
 8046e6e:	464b      	mov	r3, r9
 8046e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046e74:	f7f9 fbd0 	bl	8040618 <__aeabi_dmul>
 8046e78:	4680      	mov	r8, r0
 8046e7a:	4689      	mov	r9, r1
 8046e7c:	f035 050f 	bics.w	r5, r5, #15
 8046e80:	d04d      	beq.n	8046f1e <_strtod_l+0x516>
 8046e82:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8046e86:	dd22      	ble.n	8046ece <_strtod_l+0x4c6>
 8046e88:	2500      	movs	r5, #0
 8046e8a:	46ab      	mov	fp, r5
 8046e8c:	9509      	str	r5, [sp, #36]	; 0x24
 8046e8e:	9505      	str	r5, [sp, #20]
 8046e90:	2322      	movs	r3, #34	; 0x22
 8046e92:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8046f9c <_strtod_l+0x594>
 8046e96:	6023      	str	r3, [r4, #0]
 8046e98:	f04f 0800 	mov.w	r8, #0
 8046e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8046e9e:	2b00      	cmp	r3, #0
 8046ea0:	f43f aded 	beq.w	8046a7e <_strtod_l+0x76>
 8046ea4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8046ea6:	4620      	mov	r0, r4
 8046ea8:	f002 fcaa 	bl	8049800 <_Bfree>
 8046eac:	9905      	ldr	r1, [sp, #20]
 8046eae:	4620      	mov	r0, r4
 8046eb0:	f002 fca6 	bl	8049800 <_Bfree>
 8046eb4:	4659      	mov	r1, fp
 8046eb6:	4620      	mov	r0, r4
 8046eb8:	f002 fca2 	bl	8049800 <_Bfree>
 8046ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8046ebe:	4620      	mov	r0, r4
 8046ec0:	f002 fc9e 	bl	8049800 <_Bfree>
 8046ec4:	4629      	mov	r1, r5
 8046ec6:	4620      	mov	r0, r4
 8046ec8:	f002 fc9a 	bl	8049800 <_Bfree>
 8046ecc:	e5d7      	b.n	8046a7e <_strtod_l+0x76>
 8046ece:	4b32      	ldr	r3, [pc, #200]	; (8046f98 <_strtod_l+0x590>)
 8046ed0:	9304      	str	r3, [sp, #16]
 8046ed2:	2300      	movs	r3, #0
 8046ed4:	112d      	asrs	r5, r5, #4
 8046ed6:	4640      	mov	r0, r8
 8046ed8:	4649      	mov	r1, r9
 8046eda:	469a      	mov	sl, r3
 8046edc:	2d01      	cmp	r5, #1
 8046ede:	dc21      	bgt.n	8046f24 <_strtod_l+0x51c>
 8046ee0:	b10b      	cbz	r3, 8046ee6 <_strtod_l+0x4de>
 8046ee2:	4680      	mov	r8, r0
 8046ee4:	4689      	mov	r9, r1
 8046ee6:	492c      	ldr	r1, [pc, #176]	; (8046f98 <_strtod_l+0x590>)
 8046ee8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8046eec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8046ef0:	4642      	mov	r2, r8
 8046ef2:	464b      	mov	r3, r9
 8046ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046ef8:	f7f9 fb8e 	bl	8040618 <__aeabi_dmul>
 8046efc:	4b27      	ldr	r3, [pc, #156]	; (8046f9c <_strtod_l+0x594>)
 8046efe:	460a      	mov	r2, r1
 8046f00:	400b      	ands	r3, r1
 8046f02:	4927      	ldr	r1, [pc, #156]	; (8046fa0 <_strtod_l+0x598>)
 8046f04:	428b      	cmp	r3, r1
 8046f06:	4680      	mov	r8, r0
 8046f08:	d8be      	bhi.n	8046e88 <_strtod_l+0x480>
 8046f0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8046f0e:	428b      	cmp	r3, r1
 8046f10:	bf86      	itte	hi
 8046f12:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8046fa4 <_strtod_l+0x59c>
 8046f16:	f04f 38ff 	movhi.w	r8, #4294967295
 8046f1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8046f1e:	2300      	movs	r3, #0
 8046f20:	9304      	str	r3, [sp, #16]
 8046f22:	e07b      	b.n	804701c <_strtod_l+0x614>
 8046f24:	07ea      	lsls	r2, r5, #31
 8046f26:	d505      	bpl.n	8046f34 <_strtod_l+0x52c>
 8046f28:	9b04      	ldr	r3, [sp, #16]
 8046f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046f2e:	f7f9 fb73 	bl	8040618 <__aeabi_dmul>
 8046f32:	2301      	movs	r3, #1
 8046f34:	9a04      	ldr	r2, [sp, #16]
 8046f36:	3208      	adds	r2, #8
 8046f38:	f10a 0a01 	add.w	sl, sl, #1
 8046f3c:	106d      	asrs	r5, r5, #1
 8046f3e:	9204      	str	r2, [sp, #16]
 8046f40:	e7cc      	b.n	8046edc <_strtod_l+0x4d4>
 8046f42:	d0ec      	beq.n	8046f1e <_strtod_l+0x516>
 8046f44:	426d      	negs	r5, r5
 8046f46:	f015 020f 	ands.w	r2, r5, #15
 8046f4a:	d00a      	beq.n	8046f62 <_strtod_l+0x55a>
 8046f4c:	4b11      	ldr	r3, [pc, #68]	; (8046f94 <_strtod_l+0x58c>)
 8046f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8046f52:	4640      	mov	r0, r8
 8046f54:	4649      	mov	r1, r9
 8046f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046f5a:	f7f9 fc87 	bl	804086c <__aeabi_ddiv>
 8046f5e:	4680      	mov	r8, r0
 8046f60:	4689      	mov	r9, r1
 8046f62:	112d      	asrs	r5, r5, #4
 8046f64:	d0db      	beq.n	8046f1e <_strtod_l+0x516>
 8046f66:	2d1f      	cmp	r5, #31
 8046f68:	dd1e      	ble.n	8046fa8 <_strtod_l+0x5a0>
 8046f6a:	2500      	movs	r5, #0
 8046f6c:	46ab      	mov	fp, r5
 8046f6e:	9509      	str	r5, [sp, #36]	; 0x24
 8046f70:	9505      	str	r5, [sp, #20]
 8046f72:	2322      	movs	r3, #34	; 0x22
 8046f74:	f04f 0800 	mov.w	r8, #0
 8046f78:	f04f 0900 	mov.w	r9, #0
 8046f7c:	6023      	str	r3, [r4, #0]
 8046f7e:	e78d      	b.n	8046e9c <_strtod_l+0x494>
 8046f80:	0804b056 	.word	0x0804b056
 8046f84:	0804af0c 	.word	0x0804af0c
 8046f88:	0804b04e 	.word	0x0804b04e
 8046f8c:	0804b088 	.word	0x0804b088
 8046f90:	0804b318 	.word	0x0804b318
 8046f94:	0804b1f8 	.word	0x0804b1f8
 8046f98:	0804b1d0 	.word	0x0804b1d0
 8046f9c:	7ff00000 	.word	0x7ff00000
 8046fa0:	7ca00000 	.word	0x7ca00000
 8046fa4:	7fefffff 	.word	0x7fefffff
 8046fa8:	f015 0310 	ands.w	r3, r5, #16
 8046fac:	bf18      	it	ne
 8046fae:	236a      	movne	r3, #106	; 0x6a
 8046fb0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8047354 <_strtod_l+0x94c>
 8046fb4:	9304      	str	r3, [sp, #16]
 8046fb6:	4640      	mov	r0, r8
 8046fb8:	4649      	mov	r1, r9
 8046fba:	2300      	movs	r3, #0
 8046fbc:	07ea      	lsls	r2, r5, #31
 8046fbe:	d504      	bpl.n	8046fca <_strtod_l+0x5c2>
 8046fc0:	e9da 2300 	ldrd	r2, r3, [sl]
 8046fc4:	f7f9 fb28 	bl	8040618 <__aeabi_dmul>
 8046fc8:	2301      	movs	r3, #1
 8046fca:	106d      	asrs	r5, r5, #1
 8046fcc:	f10a 0a08 	add.w	sl, sl, #8
 8046fd0:	d1f4      	bne.n	8046fbc <_strtod_l+0x5b4>
 8046fd2:	b10b      	cbz	r3, 8046fd8 <_strtod_l+0x5d0>
 8046fd4:	4680      	mov	r8, r0
 8046fd6:	4689      	mov	r9, r1
 8046fd8:	9b04      	ldr	r3, [sp, #16]
 8046fda:	b1bb      	cbz	r3, 804700c <_strtod_l+0x604>
 8046fdc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8046fe0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8046fe4:	2b00      	cmp	r3, #0
 8046fe6:	4649      	mov	r1, r9
 8046fe8:	dd10      	ble.n	804700c <_strtod_l+0x604>
 8046fea:	2b1f      	cmp	r3, #31
 8046fec:	f340 811e 	ble.w	804722c <_strtod_l+0x824>
 8046ff0:	2b34      	cmp	r3, #52	; 0x34
 8046ff2:	bfde      	ittt	le
 8046ff4:	f04f 33ff 	movle.w	r3, #4294967295
 8046ff8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8046ffc:	4093      	lslle	r3, r2
 8046ffe:	f04f 0800 	mov.w	r8, #0
 8047002:	bfcc      	ite	gt
 8047004:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8047008:	ea03 0901 	andle.w	r9, r3, r1
 804700c:	2200      	movs	r2, #0
 804700e:	2300      	movs	r3, #0
 8047010:	4640      	mov	r0, r8
 8047012:	4649      	mov	r1, r9
 8047014:	f7f9 fd68 	bl	8040ae8 <__aeabi_dcmpeq>
 8047018:	2800      	cmp	r0, #0
 804701a:	d1a6      	bne.n	8046f6a <_strtod_l+0x562>
 804701c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804701e:	9300      	str	r3, [sp, #0]
 8047020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8047022:	4633      	mov	r3, r6
 8047024:	465a      	mov	r2, fp
 8047026:	4620      	mov	r0, r4
 8047028:	f002 fc52 	bl	80498d0 <__s2b>
 804702c:	9009      	str	r0, [sp, #36]	; 0x24
 804702e:	2800      	cmp	r0, #0
 8047030:	f43f af2a 	beq.w	8046e88 <_strtod_l+0x480>
 8047034:	9a08      	ldr	r2, [sp, #32]
 8047036:	9b05      	ldr	r3, [sp, #20]
 8047038:	2a00      	cmp	r2, #0
 804703a:	eba3 0307 	sub.w	r3, r3, r7
 804703e:	bfa8      	it	ge
 8047040:	2300      	movge	r3, #0
 8047042:	930c      	str	r3, [sp, #48]	; 0x30
 8047044:	2500      	movs	r5, #0
 8047046:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 804704a:	9312      	str	r3, [sp, #72]	; 0x48
 804704c:	46ab      	mov	fp, r5
 804704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8047050:	4620      	mov	r0, r4
 8047052:	6859      	ldr	r1, [r3, #4]
 8047054:	f002 fb94 	bl	8049780 <_Balloc>
 8047058:	9005      	str	r0, [sp, #20]
 804705a:	2800      	cmp	r0, #0
 804705c:	f43f af18 	beq.w	8046e90 <_strtod_l+0x488>
 8047060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8047062:	691a      	ldr	r2, [r3, #16]
 8047064:	3202      	adds	r2, #2
 8047066:	f103 010c 	add.w	r1, r3, #12
 804706a:	0092      	lsls	r2, r2, #2
 804706c:	300c      	adds	r0, #12
 804706e:	f001 f941 	bl	80482f4 <memcpy>
 8047072:	ec49 8b10 	vmov	d0, r8, r9
 8047076:	aa18      	add	r2, sp, #96	; 0x60
 8047078:	a917      	add	r1, sp, #92	; 0x5c
 804707a:	4620      	mov	r0, r4
 804707c:	f002 ff5c 	bl	8049f38 <__d2b>
 8047080:	ec49 8b18 	vmov	d8, r8, r9
 8047084:	9016      	str	r0, [sp, #88]	; 0x58
 8047086:	2800      	cmp	r0, #0
 8047088:	f43f af02 	beq.w	8046e90 <_strtod_l+0x488>
 804708c:	2101      	movs	r1, #1
 804708e:	4620      	mov	r0, r4
 8047090:	f002 fcb6 	bl	8049a00 <__i2b>
 8047094:	4683      	mov	fp, r0
 8047096:	2800      	cmp	r0, #0
 8047098:	f43f aefa 	beq.w	8046e90 <_strtod_l+0x488>
 804709c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 804709e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80470a0:	2e00      	cmp	r6, #0
 80470a2:	bfab      	itete	ge
 80470a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80470a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80470a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80470aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80470ae:	bfac      	ite	ge
 80470b0:	eb06 0a03 	addge.w	sl, r6, r3
 80470b4:	1b9f      	sublt	r7, r3, r6
 80470b6:	9b04      	ldr	r3, [sp, #16]
 80470b8:	1af6      	subs	r6, r6, r3
 80470ba:	4416      	add	r6, r2
 80470bc:	4ba0      	ldr	r3, [pc, #640]	; (8047340 <_strtod_l+0x938>)
 80470be:	3e01      	subs	r6, #1
 80470c0:	429e      	cmp	r6, r3
 80470c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80470c6:	f280 80c4 	bge.w	8047252 <_strtod_l+0x84a>
 80470ca:	1b9b      	subs	r3, r3, r6
 80470cc:	2b1f      	cmp	r3, #31
 80470ce:	eba2 0203 	sub.w	r2, r2, r3
 80470d2:	f04f 0101 	mov.w	r1, #1
 80470d6:	f300 80b0 	bgt.w	804723a <_strtod_l+0x832>
 80470da:	fa01 f303 	lsl.w	r3, r1, r3
 80470de:	930e      	str	r3, [sp, #56]	; 0x38
 80470e0:	2300      	movs	r3, #0
 80470e2:	930d      	str	r3, [sp, #52]	; 0x34
 80470e4:	eb0a 0602 	add.w	r6, sl, r2
 80470e8:	9b04      	ldr	r3, [sp, #16]
 80470ea:	45b2      	cmp	sl, r6
 80470ec:	4417      	add	r7, r2
 80470ee:	441f      	add	r7, r3
 80470f0:	4653      	mov	r3, sl
 80470f2:	bfa8      	it	ge
 80470f4:	4633      	movge	r3, r6
 80470f6:	42bb      	cmp	r3, r7
 80470f8:	bfa8      	it	ge
 80470fa:	463b      	movge	r3, r7
 80470fc:	2b00      	cmp	r3, #0
 80470fe:	bfc2      	ittt	gt
 8047100:	1af6      	subgt	r6, r6, r3
 8047102:	1aff      	subgt	r7, r7, r3
 8047104:	ebaa 0a03 	subgt.w	sl, sl, r3
 8047108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 804710a:	2b00      	cmp	r3, #0
 804710c:	dd17      	ble.n	804713e <_strtod_l+0x736>
 804710e:	4659      	mov	r1, fp
 8047110:	461a      	mov	r2, r3
 8047112:	4620      	mov	r0, r4
 8047114:	f002 fd34 	bl	8049b80 <__pow5mult>
 8047118:	4683      	mov	fp, r0
 804711a:	2800      	cmp	r0, #0
 804711c:	f43f aeb8 	beq.w	8046e90 <_strtod_l+0x488>
 8047120:	4601      	mov	r1, r0
 8047122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8047124:	4620      	mov	r0, r4
 8047126:	f002 fc81 	bl	8049a2c <__multiply>
 804712a:	900b      	str	r0, [sp, #44]	; 0x2c
 804712c:	2800      	cmp	r0, #0
 804712e:	f43f aeaf 	beq.w	8046e90 <_strtod_l+0x488>
 8047132:	9916      	ldr	r1, [sp, #88]	; 0x58
 8047134:	4620      	mov	r0, r4
 8047136:	f002 fb63 	bl	8049800 <_Bfree>
 804713a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804713c:	9316      	str	r3, [sp, #88]	; 0x58
 804713e:	2e00      	cmp	r6, #0
 8047140:	f300 808c 	bgt.w	804725c <_strtod_l+0x854>
 8047144:	9b08      	ldr	r3, [sp, #32]
 8047146:	2b00      	cmp	r3, #0
 8047148:	dd08      	ble.n	804715c <_strtod_l+0x754>
 804714a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 804714c:	9905      	ldr	r1, [sp, #20]
 804714e:	4620      	mov	r0, r4
 8047150:	f002 fd16 	bl	8049b80 <__pow5mult>
 8047154:	9005      	str	r0, [sp, #20]
 8047156:	2800      	cmp	r0, #0
 8047158:	f43f ae9a 	beq.w	8046e90 <_strtod_l+0x488>
 804715c:	2f00      	cmp	r7, #0
 804715e:	dd08      	ble.n	8047172 <_strtod_l+0x76a>
 8047160:	9905      	ldr	r1, [sp, #20]
 8047162:	463a      	mov	r2, r7
 8047164:	4620      	mov	r0, r4
 8047166:	f002 fd65 	bl	8049c34 <__lshift>
 804716a:	9005      	str	r0, [sp, #20]
 804716c:	2800      	cmp	r0, #0
 804716e:	f43f ae8f 	beq.w	8046e90 <_strtod_l+0x488>
 8047172:	f1ba 0f00 	cmp.w	sl, #0
 8047176:	dd08      	ble.n	804718a <_strtod_l+0x782>
 8047178:	4659      	mov	r1, fp
 804717a:	4652      	mov	r2, sl
 804717c:	4620      	mov	r0, r4
 804717e:	f002 fd59 	bl	8049c34 <__lshift>
 8047182:	4683      	mov	fp, r0
 8047184:	2800      	cmp	r0, #0
 8047186:	f43f ae83 	beq.w	8046e90 <_strtod_l+0x488>
 804718a:	9a05      	ldr	r2, [sp, #20]
 804718c:	9916      	ldr	r1, [sp, #88]	; 0x58
 804718e:	4620      	mov	r0, r4
 8047190:	f002 fdd8 	bl	8049d44 <__mdiff>
 8047194:	4605      	mov	r5, r0
 8047196:	2800      	cmp	r0, #0
 8047198:	f43f ae7a 	beq.w	8046e90 <_strtod_l+0x488>
 804719c:	68c3      	ldr	r3, [r0, #12]
 804719e:	930b      	str	r3, [sp, #44]	; 0x2c
 80471a0:	2300      	movs	r3, #0
 80471a2:	60c3      	str	r3, [r0, #12]
 80471a4:	4659      	mov	r1, fp
 80471a6:	f002 fdb1 	bl	8049d0c <__mcmp>
 80471aa:	2800      	cmp	r0, #0
 80471ac:	da60      	bge.n	8047270 <_strtod_l+0x868>
 80471ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80471b0:	ea53 0308 	orrs.w	r3, r3, r8
 80471b4:	f040 8084 	bne.w	80472c0 <_strtod_l+0x8b8>
 80471b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80471bc:	2b00      	cmp	r3, #0
 80471be:	d17f      	bne.n	80472c0 <_strtod_l+0x8b8>
 80471c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80471c4:	0d1b      	lsrs	r3, r3, #20
 80471c6:	051b      	lsls	r3, r3, #20
 80471c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80471cc:	d978      	bls.n	80472c0 <_strtod_l+0x8b8>
 80471ce:	696b      	ldr	r3, [r5, #20]
 80471d0:	b913      	cbnz	r3, 80471d8 <_strtod_l+0x7d0>
 80471d2:	692b      	ldr	r3, [r5, #16]
 80471d4:	2b01      	cmp	r3, #1
 80471d6:	dd73      	ble.n	80472c0 <_strtod_l+0x8b8>
 80471d8:	4629      	mov	r1, r5
 80471da:	2201      	movs	r2, #1
 80471dc:	4620      	mov	r0, r4
 80471de:	f002 fd29 	bl	8049c34 <__lshift>
 80471e2:	4659      	mov	r1, fp
 80471e4:	4605      	mov	r5, r0
 80471e6:	f002 fd91 	bl	8049d0c <__mcmp>
 80471ea:	2800      	cmp	r0, #0
 80471ec:	dd68      	ble.n	80472c0 <_strtod_l+0x8b8>
 80471ee:	9904      	ldr	r1, [sp, #16]
 80471f0:	4a54      	ldr	r2, [pc, #336]	; (8047344 <_strtod_l+0x93c>)
 80471f2:	464b      	mov	r3, r9
 80471f4:	2900      	cmp	r1, #0
 80471f6:	f000 8084 	beq.w	8047302 <_strtod_l+0x8fa>
 80471fa:	ea02 0109 	and.w	r1, r2, r9
 80471fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8047202:	dc7e      	bgt.n	8047302 <_strtod_l+0x8fa>
 8047204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8047208:	f77f aeb3 	ble.w	8046f72 <_strtod_l+0x56a>
 804720c:	4b4e      	ldr	r3, [pc, #312]	; (8047348 <_strtod_l+0x940>)
 804720e:	4640      	mov	r0, r8
 8047210:	4649      	mov	r1, r9
 8047212:	2200      	movs	r2, #0
 8047214:	f7f9 fa00 	bl	8040618 <__aeabi_dmul>
 8047218:	4b4a      	ldr	r3, [pc, #296]	; (8047344 <_strtod_l+0x93c>)
 804721a:	400b      	ands	r3, r1
 804721c:	4680      	mov	r8, r0
 804721e:	4689      	mov	r9, r1
 8047220:	2b00      	cmp	r3, #0
 8047222:	f47f ae3f 	bne.w	8046ea4 <_strtod_l+0x49c>
 8047226:	2322      	movs	r3, #34	; 0x22
 8047228:	6023      	str	r3, [r4, #0]
 804722a:	e63b      	b.n	8046ea4 <_strtod_l+0x49c>
 804722c:	f04f 32ff 	mov.w	r2, #4294967295
 8047230:	fa02 f303 	lsl.w	r3, r2, r3
 8047234:	ea03 0808 	and.w	r8, r3, r8
 8047238:	e6e8      	b.n	804700c <_strtod_l+0x604>
 804723a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 804723e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8047242:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8047246:	36e2      	adds	r6, #226	; 0xe2
 8047248:	fa01 f306 	lsl.w	r3, r1, r6
 804724c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8047250:	e748      	b.n	80470e4 <_strtod_l+0x6dc>
 8047252:	2100      	movs	r1, #0
 8047254:	2301      	movs	r3, #1
 8047256:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 804725a:	e743      	b.n	80470e4 <_strtod_l+0x6dc>
 804725c:	9916      	ldr	r1, [sp, #88]	; 0x58
 804725e:	4632      	mov	r2, r6
 8047260:	4620      	mov	r0, r4
 8047262:	f002 fce7 	bl	8049c34 <__lshift>
 8047266:	9016      	str	r0, [sp, #88]	; 0x58
 8047268:	2800      	cmp	r0, #0
 804726a:	f47f af6b 	bne.w	8047144 <_strtod_l+0x73c>
 804726e:	e60f      	b.n	8046e90 <_strtod_l+0x488>
 8047270:	46ca      	mov	sl, r9
 8047272:	d171      	bne.n	8047358 <_strtod_l+0x950>
 8047274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8047276:	f3c9 0313 	ubfx	r3, r9, #0, #20
 804727a:	b352      	cbz	r2, 80472d2 <_strtod_l+0x8ca>
 804727c:	4a33      	ldr	r2, [pc, #204]	; (804734c <_strtod_l+0x944>)
 804727e:	4293      	cmp	r3, r2
 8047280:	d12a      	bne.n	80472d8 <_strtod_l+0x8d0>
 8047282:	9b04      	ldr	r3, [sp, #16]
 8047284:	4641      	mov	r1, r8
 8047286:	b1fb      	cbz	r3, 80472c8 <_strtod_l+0x8c0>
 8047288:	4b2e      	ldr	r3, [pc, #184]	; (8047344 <_strtod_l+0x93c>)
 804728a:	ea09 0303 	and.w	r3, r9, r3
 804728e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8047292:	f04f 32ff 	mov.w	r2, #4294967295
 8047296:	d81a      	bhi.n	80472ce <_strtod_l+0x8c6>
 8047298:	0d1b      	lsrs	r3, r3, #20
 804729a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 804729e:	fa02 f303 	lsl.w	r3, r2, r3
 80472a2:	4299      	cmp	r1, r3
 80472a4:	d118      	bne.n	80472d8 <_strtod_l+0x8d0>
 80472a6:	4b2a      	ldr	r3, [pc, #168]	; (8047350 <_strtod_l+0x948>)
 80472a8:	459a      	cmp	sl, r3
 80472aa:	d102      	bne.n	80472b2 <_strtod_l+0x8aa>
 80472ac:	3101      	adds	r1, #1
 80472ae:	f43f adef 	beq.w	8046e90 <_strtod_l+0x488>
 80472b2:	4b24      	ldr	r3, [pc, #144]	; (8047344 <_strtod_l+0x93c>)
 80472b4:	ea0a 0303 	and.w	r3, sl, r3
 80472b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80472bc:	f04f 0800 	mov.w	r8, #0
 80472c0:	9b04      	ldr	r3, [sp, #16]
 80472c2:	2b00      	cmp	r3, #0
 80472c4:	d1a2      	bne.n	804720c <_strtod_l+0x804>
 80472c6:	e5ed      	b.n	8046ea4 <_strtod_l+0x49c>
 80472c8:	f04f 33ff 	mov.w	r3, #4294967295
 80472cc:	e7e9      	b.n	80472a2 <_strtod_l+0x89a>
 80472ce:	4613      	mov	r3, r2
 80472d0:	e7e7      	b.n	80472a2 <_strtod_l+0x89a>
 80472d2:	ea53 0308 	orrs.w	r3, r3, r8
 80472d6:	d08a      	beq.n	80471ee <_strtod_l+0x7e6>
 80472d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80472da:	b1e3      	cbz	r3, 8047316 <_strtod_l+0x90e>
 80472dc:	ea13 0f0a 	tst.w	r3, sl
 80472e0:	d0ee      	beq.n	80472c0 <_strtod_l+0x8b8>
 80472e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80472e4:	9a04      	ldr	r2, [sp, #16]
 80472e6:	4640      	mov	r0, r8
 80472e8:	4649      	mov	r1, r9
 80472ea:	b1c3      	cbz	r3, 804731e <_strtod_l+0x916>
 80472ec:	f7ff fb6d 	bl	80469ca <sulp>
 80472f0:	4602      	mov	r2, r0
 80472f2:	460b      	mov	r3, r1
 80472f4:	ec51 0b18 	vmov	r0, r1, d8
 80472f8:	f7f8 ffd8 	bl	80402ac <__adddf3>
 80472fc:	4680      	mov	r8, r0
 80472fe:	4689      	mov	r9, r1
 8047300:	e7de      	b.n	80472c0 <_strtod_l+0x8b8>
 8047302:	4013      	ands	r3, r2
 8047304:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8047308:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 804730c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8047310:	f04f 38ff 	mov.w	r8, #4294967295
 8047314:	e7d4      	b.n	80472c0 <_strtod_l+0x8b8>
 8047316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8047318:	ea13 0f08 	tst.w	r3, r8
 804731c:	e7e0      	b.n	80472e0 <_strtod_l+0x8d8>
 804731e:	f7ff fb54 	bl	80469ca <sulp>
 8047322:	4602      	mov	r2, r0
 8047324:	460b      	mov	r3, r1
 8047326:	ec51 0b18 	vmov	r0, r1, d8
 804732a:	f7f8 ffbd 	bl	80402a8 <__aeabi_dsub>
 804732e:	2200      	movs	r2, #0
 8047330:	2300      	movs	r3, #0
 8047332:	4680      	mov	r8, r0
 8047334:	4689      	mov	r9, r1
 8047336:	f7f9 fbd7 	bl	8040ae8 <__aeabi_dcmpeq>
 804733a:	2800      	cmp	r0, #0
 804733c:	d0c0      	beq.n	80472c0 <_strtod_l+0x8b8>
 804733e:	e618      	b.n	8046f72 <_strtod_l+0x56a>
 8047340:	fffffc02 	.word	0xfffffc02
 8047344:	7ff00000 	.word	0x7ff00000
 8047348:	39500000 	.word	0x39500000
 804734c:	000fffff 	.word	0x000fffff
 8047350:	7fefffff 	.word	0x7fefffff
 8047354:	0804af20 	.word	0x0804af20
 8047358:	4659      	mov	r1, fp
 804735a:	4628      	mov	r0, r5
 804735c:	f002 fe46 	bl	8049fec <__ratio>
 8047360:	ec57 6b10 	vmov	r6, r7, d0
 8047364:	ee10 0a10 	vmov	r0, s0
 8047368:	2200      	movs	r2, #0
 804736a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804736e:	4639      	mov	r1, r7
 8047370:	f7f9 fbce 	bl	8040b10 <__aeabi_dcmple>
 8047374:	2800      	cmp	r0, #0
 8047376:	d071      	beq.n	804745c <_strtod_l+0xa54>
 8047378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804737a:	2b00      	cmp	r3, #0
 804737c:	d17c      	bne.n	8047478 <_strtod_l+0xa70>
 804737e:	f1b8 0f00 	cmp.w	r8, #0
 8047382:	d15a      	bne.n	804743a <_strtod_l+0xa32>
 8047384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8047388:	2b00      	cmp	r3, #0
 804738a:	d15d      	bne.n	8047448 <_strtod_l+0xa40>
 804738c:	4b90      	ldr	r3, [pc, #576]	; (80475d0 <_strtod_l+0xbc8>)
 804738e:	2200      	movs	r2, #0
 8047390:	4630      	mov	r0, r6
 8047392:	4639      	mov	r1, r7
 8047394:	f7f9 fbb2 	bl	8040afc <__aeabi_dcmplt>
 8047398:	2800      	cmp	r0, #0
 804739a:	d15c      	bne.n	8047456 <_strtod_l+0xa4e>
 804739c:	4630      	mov	r0, r6
 804739e:	4639      	mov	r1, r7
 80473a0:	4b8c      	ldr	r3, [pc, #560]	; (80475d4 <_strtod_l+0xbcc>)
 80473a2:	2200      	movs	r2, #0
 80473a4:	f7f9 f938 	bl	8040618 <__aeabi_dmul>
 80473a8:	4606      	mov	r6, r0
 80473aa:	460f      	mov	r7, r1
 80473ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80473b0:	9606      	str	r6, [sp, #24]
 80473b2:	9307      	str	r3, [sp, #28]
 80473b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80473b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80473bc:	4b86      	ldr	r3, [pc, #536]	; (80475d8 <_strtod_l+0xbd0>)
 80473be:	ea0a 0303 	and.w	r3, sl, r3
 80473c2:	930d      	str	r3, [sp, #52]	; 0x34
 80473c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80473c6:	4b85      	ldr	r3, [pc, #532]	; (80475dc <_strtod_l+0xbd4>)
 80473c8:	429a      	cmp	r2, r3
 80473ca:	f040 8090 	bne.w	80474ee <_strtod_l+0xae6>
 80473ce:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80473d2:	ec49 8b10 	vmov	d0, r8, r9
 80473d6:	f002 fd3f 	bl	8049e58 <__ulp>
 80473da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80473de:	ec51 0b10 	vmov	r0, r1, d0
 80473e2:	f7f9 f919 	bl	8040618 <__aeabi_dmul>
 80473e6:	4642      	mov	r2, r8
 80473e8:	464b      	mov	r3, r9
 80473ea:	f7f8 ff5f 	bl	80402ac <__adddf3>
 80473ee:	460b      	mov	r3, r1
 80473f0:	4979      	ldr	r1, [pc, #484]	; (80475d8 <_strtod_l+0xbd0>)
 80473f2:	4a7b      	ldr	r2, [pc, #492]	; (80475e0 <_strtod_l+0xbd8>)
 80473f4:	4019      	ands	r1, r3
 80473f6:	4291      	cmp	r1, r2
 80473f8:	4680      	mov	r8, r0
 80473fa:	d944      	bls.n	8047486 <_strtod_l+0xa7e>
 80473fc:	ee18 2a90 	vmov	r2, s17
 8047400:	4b78      	ldr	r3, [pc, #480]	; (80475e4 <_strtod_l+0xbdc>)
 8047402:	429a      	cmp	r2, r3
 8047404:	d104      	bne.n	8047410 <_strtod_l+0xa08>
 8047406:	ee18 3a10 	vmov	r3, s16
 804740a:	3301      	adds	r3, #1
 804740c:	f43f ad40 	beq.w	8046e90 <_strtod_l+0x488>
 8047410:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80475e4 <_strtod_l+0xbdc>
 8047414:	f04f 38ff 	mov.w	r8, #4294967295
 8047418:	9916      	ldr	r1, [sp, #88]	; 0x58
 804741a:	4620      	mov	r0, r4
 804741c:	f002 f9f0 	bl	8049800 <_Bfree>
 8047420:	9905      	ldr	r1, [sp, #20]
 8047422:	4620      	mov	r0, r4
 8047424:	f002 f9ec 	bl	8049800 <_Bfree>
 8047428:	4659      	mov	r1, fp
 804742a:	4620      	mov	r0, r4
 804742c:	f002 f9e8 	bl	8049800 <_Bfree>
 8047430:	4629      	mov	r1, r5
 8047432:	4620      	mov	r0, r4
 8047434:	f002 f9e4 	bl	8049800 <_Bfree>
 8047438:	e609      	b.n	804704e <_strtod_l+0x646>
 804743a:	f1b8 0f01 	cmp.w	r8, #1
 804743e:	d103      	bne.n	8047448 <_strtod_l+0xa40>
 8047440:	f1b9 0f00 	cmp.w	r9, #0
 8047444:	f43f ad95 	beq.w	8046f72 <_strtod_l+0x56a>
 8047448:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80475a0 <_strtod_l+0xb98>
 804744c:	4f60      	ldr	r7, [pc, #384]	; (80475d0 <_strtod_l+0xbc8>)
 804744e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8047452:	2600      	movs	r6, #0
 8047454:	e7ae      	b.n	80473b4 <_strtod_l+0x9ac>
 8047456:	4f5f      	ldr	r7, [pc, #380]	; (80475d4 <_strtod_l+0xbcc>)
 8047458:	2600      	movs	r6, #0
 804745a:	e7a7      	b.n	80473ac <_strtod_l+0x9a4>
 804745c:	4b5d      	ldr	r3, [pc, #372]	; (80475d4 <_strtod_l+0xbcc>)
 804745e:	4630      	mov	r0, r6
 8047460:	4639      	mov	r1, r7
 8047462:	2200      	movs	r2, #0
 8047464:	f7f9 f8d8 	bl	8040618 <__aeabi_dmul>
 8047468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804746a:	4606      	mov	r6, r0
 804746c:	460f      	mov	r7, r1
 804746e:	2b00      	cmp	r3, #0
 8047470:	d09c      	beq.n	80473ac <_strtod_l+0x9a4>
 8047472:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8047476:	e79d      	b.n	80473b4 <_strtod_l+0x9ac>
 8047478:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80475a8 <_strtod_l+0xba0>
 804747c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8047480:	ec57 6b17 	vmov	r6, r7, d7
 8047484:	e796      	b.n	80473b4 <_strtod_l+0x9ac>
 8047486:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 804748a:	9b04      	ldr	r3, [sp, #16]
 804748c:	46ca      	mov	sl, r9
 804748e:	2b00      	cmp	r3, #0
 8047490:	d1c2      	bne.n	8047418 <_strtod_l+0xa10>
 8047492:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8047496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8047498:	0d1b      	lsrs	r3, r3, #20
 804749a:	051b      	lsls	r3, r3, #20
 804749c:	429a      	cmp	r2, r3
 804749e:	d1bb      	bne.n	8047418 <_strtod_l+0xa10>
 80474a0:	4630      	mov	r0, r6
 80474a2:	4639      	mov	r1, r7
 80474a4:	f7f9 fbc8 	bl	8040c38 <__aeabi_d2lz>
 80474a8:	f7f9 f888 	bl	80405bc <__aeabi_l2d>
 80474ac:	4602      	mov	r2, r0
 80474ae:	460b      	mov	r3, r1
 80474b0:	4630      	mov	r0, r6
 80474b2:	4639      	mov	r1, r7
 80474b4:	f7f8 fef8 	bl	80402a8 <__aeabi_dsub>
 80474b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80474ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80474be:	ea43 0308 	orr.w	r3, r3, r8
 80474c2:	4313      	orrs	r3, r2
 80474c4:	4606      	mov	r6, r0
 80474c6:	460f      	mov	r7, r1
 80474c8:	d054      	beq.n	8047574 <_strtod_l+0xb6c>
 80474ca:	a339      	add	r3, pc, #228	; (adr r3, 80475b0 <_strtod_l+0xba8>)
 80474cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80474d0:	f7f9 fb14 	bl	8040afc <__aeabi_dcmplt>
 80474d4:	2800      	cmp	r0, #0
 80474d6:	f47f ace5 	bne.w	8046ea4 <_strtod_l+0x49c>
 80474da:	a337      	add	r3, pc, #220	; (adr r3, 80475b8 <_strtod_l+0xbb0>)
 80474dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80474e0:	4630      	mov	r0, r6
 80474e2:	4639      	mov	r1, r7
 80474e4:	f7f9 fb28 	bl	8040b38 <__aeabi_dcmpgt>
 80474e8:	2800      	cmp	r0, #0
 80474ea:	d095      	beq.n	8047418 <_strtod_l+0xa10>
 80474ec:	e4da      	b.n	8046ea4 <_strtod_l+0x49c>
 80474ee:	9b04      	ldr	r3, [sp, #16]
 80474f0:	b333      	cbz	r3, 8047540 <_strtod_l+0xb38>
 80474f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80474f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80474f8:	d822      	bhi.n	8047540 <_strtod_l+0xb38>
 80474fa:	a331      	add	r3, pc, #196	; (adr r3, 80475c0 <_strtod_l+0xbb8>)
 80474fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8047500:	4630      	mov	r0, r6
 8047502:	4639      	mov	r1, r7
 8047504:	f7f9 fb04 	bl	8040b10 <__aeabi_dcmple>
 8047508:	b1a0      	cbz	r0, 8047534 <_strtod_l+0xb2c>
 804750a:	4639      	mov	r1, r7
 804750c:	4630      	mov	r0, r6
 804750e:	f7f9 fb5b 	bl	8040bc8 <__aeabi_d2uiz>
 8047512:	2801      	cmp	r0, #1
 8047514:	bf38      	it	cc
 8047516:	2001      	movcc	r0, #1
 8047518:	f7f9 f804 	bl	8040524 <__aeabi_ui2d>
 804751c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 804751e:	4606      	mov	r6, r0
 8047520:	460f      	mov	r7, r1
 8047522:	bb23      	cbnz	r3, 804756e <_strtod_l+0xb66>
 8047524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8047528:	9010      	str	r0, [sp, #64]	; 0x40
 804752a:	9311      	str	r3, [sp, #68]	; 0x44
 804752c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8047530:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8047534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8047536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8047538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 804753c:	1a9b      	subs	r3, r3, r2
 804753e:	930f      	str	r3, [sp, #60]	; 0x3c
 8047540:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8047544:	eeb0 0a48 	vmov.f32	s0, s16
 8047548:	eef0 0a68 	vmov.f32	s1, s17
 804754c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8047550:	f002 fc82 	bl	8049e58 <__ulp>
 8047554:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8047558:	ec53 2b10 	vmov	r2, r3, d0
 804755c:	f7f9 f85c 	bl	8040618 <__aeabi_dmul>
 8047560:	ec53 2b18 	vmov	r2, r3, d8
 8047564:	f7f8 fea2 	bl	80402ac <__adddf3>
 8047568:	4680      	mov	r8, r0
 804756a:	4689      	mov	r9, r1
 804756c:	e78d      	b.n	804748a <_strtod_l+0xa82>
 804756e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8047572:	e7db      	b.n	804752c <_strtod_l+0xb24>
 8047574:	a314      	add	r3, pc, #80	; (adr r3, 80475c8 <_strtod_l+0xbc0>)
 8047576:	e9d3 2300 	ldrd	r2, r3, [r3]
 804757a:	f7f9 fabf 	bl	8040afc <__aeabi_dcmplt>
 804757e:	e7b3      	b.n	80474e8 <_strtod_l+0xae0>
 8047580:	2300      	movs	r3, #0
 8047582:	930a      	str	r3, [sp, #40]	; 0x28
 8047584:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8047586:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8047588:	6013      	str	r3, [r2, #0]
 804758a:	f7ff ba7c 	b.w	8046a86 <_strtod_l+0x7e>
 804758e:	2a65      	cmp	r2, #101	; 0x65
 8047590:	f43f ab75 	beq.w	8046c7e <_strtod_l+0x276>
 8047594:	2a45      	cmp	r2, #69	; 0x45
 8047596:	f43f ab72 	beq.w	8046c7e <_strtod_l+0x276>
 804759a:	2301      	movs	r3, #1
 804759c:	f7ff bbaa 	b.w	8046cf4 <_strtod_l+0x2ec>
 80475a0:	00000000 	.word	0x00000000
 80475a4:	bff00000 	.word	0xbff00000
 80475a8:	00000000 	.word	0x00000000
 80475ac:	3ff00000 	.word	0x3ff00000
 80475b0:	94a03595 	.word	0x94a03595
 80475b4:	3fdfffff 	.word	0x3fdfffff
 80475b8:	35afe535 	.word	0x35afe535
 80475bc:	3fe00000 	.word	0x3fe00000
 80475c0:	ffc00000 	.word	0xffc00000
 80475c4:	41dfffff 	.word	0x41dfffff
 80475c8:	94a03595 	.word	0x94a03595
 80475cc:	3fcfffff 	.word	0x3fcfffff
 80475d0:	3ff00000 	.word	0x3ff00000
 80475d4:	3fe00000 	.word	0x3fe00000
 80475d8:	7ff00000 	.word	0x7ff00000
 80475dc:	7fe00000 	.word	0x7fe00000
 80475e0:	7c9fffff 	.word	0x7c9fffff
 80475e4:	7fefffff 	.word	0x7fefffff

080475e8 <strtod>:
 80475e8:	460a      	mov	r2, r1
 80475ea:	4601      	mov	r1, r0
 80475ec:	4802      	ldr	r0, [pc, #8]	; (80475f8 <strtod+0x10>)
 80475ee:	4b03      	ldr	r3, [pc, #12]	; (80475fc <strtod+0x14>)
 80475f0:	6800      	ldr	r0, [r0, #0]
 80475f2:	f7ff ba09 	b.w	8046a08 <_strtod_l>
 80475f6:	bf00      	nop
 80475f8:	200001f4 	.word	0x200001f4
 80475fc:	2000003c 	.word	0x2000003c

08047600 <__cvt>:
 8047600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8047604:	ec55 4b10 	vmov	r4, r5, d0
 8047608:	2d00      	cmp	r5, #0
 804760a:	460e      	mov	r6, r1
 804760c:	4619      	mov	r1, r3
 804760e:	462b      	mov	r3, r5
 8047610:	bfbb      	ittet	lt
 8047612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8047616:	461d      	movlt	r5, r3
 8047618:	2300      	movge	r3, #0
 804761a:	232d      	movlt	r3, #45	; 0x2d
 804761c:	700b      	strb	r3, [r1, #0]
 804761e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8047620:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8047624:	4691      	mov	r9, r2
 8047626:	f023 0820 	bic.w	r8, r3, #32
 804762a:	bfbc      	itt	lt
 804762c:	4622      	movlt	r2, r4
 804762e:	4614      	movlt	r4, r2
 8047630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8047634:	d005      	beq.n	8047642 <__cvt+0x42>
 8047636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 804763a:	d100      	bne.n	804763e <__cvt+0x3e>
 804763c:	3601      	adds	r6, #1
 804763e:	2102      	movs	r1, #2
 8047640:	e000      	b.n	8047644 <__cvt+0x44>
 8047642:	2103      	movs	r1, #3
 8047644:	ab03      	add	r3, sp, #12
 8047646:	9301      	str	r3, [sp, #4]
 8047648:	ab02      	add	r3, sp, #8
 804764a:	9300      	str	r3, [sp, #0]
 804764c:	ec45 4b10 	vmov	d0, r4, r5
 8047650:	4653      	mov	r3, sl
 8047652:	4632      	mov	r2, r6
 8047654:	f000 feec 	bl	8048430 <_dtoa_r>
 8047658:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 804765c:	4607      	mov	r7, r0
 804765e:	d102      	bne.n	8047666 <__cvt+0x66>
 8047660:	f019 0f01 	tst.w	r9, #1
 8047664:	d022      	beq.n	80476ac <__cvt+0xac>
 8047666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 804766a:	eb07 0906 	add.w	r9, r7, r6
 804766e:	d110      	bne.n	8047692 <__cvt+0x92>
 8047670:	783b      	ldrb	r3, [r7, #0]
 8047672:	2b30      	cmp	r3, #48	; 0x30
 8047674:	d10a      	bne.n	804768c <__cvt+0x8c>
 8047676:	2200      	movs	r2, #0
 8047678:	2300      	movs	r3, #0
 804767a:	4620      	mov	r0, r4
 804767c:	4629      	mov	r1, r5
 804767e:	f7f9 fa33 	bl	8040ae8 <__aeabi_dcmpeq>
 8047682:	b918      	cbnz	r0, 804768c <__cvt+0x8c>
 8047684:	f1c6 0601 	rsb	r6, r6, #1
 8047688:	f8ca 6000 	str.w	r6, [sl]
 804768c:	f8da 3000 	ldr.w	r3, [sl]
 8047690:	4499      	add	r9, r3
 8047692:	2200      	movs	r2, #0
 8047694:	2300      	movs	r3, #0
 8047696:	4620      	mov	r0, r4
 8047698:	4629      	mov	r1, r5
 804769a:	f7f9 fa25 	bl	8040ae8 <__aeabi_dcmpeq>
 804769e:	b108      	cbz	r0, 80476a4 <__cvt+0xa4>
 80476a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80476a4:	2230      	movs	r2, #48	; 0x30
 80476a6:	9b03      	ldr	r3, [sp, #12]
 80476a8:	454b      	cmp	r3, r9
 80476aa:	d307      	bcc.n	80476bc <__cvt+0xbc>
 80476ac:	9b03      	ldr	r3, [sp, #12]
 80476ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80476b0:	1bdb      	subs	r3, r3, r7
 80476b2:	4638      	mov	r0, r7
 80476b4:	6013      	str	r3, [r2, #0]
 80476b6:	b004      	add	sp, #16
 80476b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80476bc:	1c59      	adds	r1, r3, #1
 80476be:	9103      	str	r1, [sp, #12]
 80476c0:	701a      	strb	r2, [r3, #0]
 80476c2:	e7f0      	b.n	80476a6 <__cvt+0xa6>

080476c4 <__exponent>:
 80476c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80476c6:	4603      	mov	r3, r0
 80476c8:	2900      	cmp	r1, #0
 80476ca:	bfb8      	it	lt
 80476cc:	4249      	neglt	r1, r1
 80476ce:	f803 2b02 	strb.w	r2, [r3], #2
 80476d2:	bfb4      	ite	lt
 80476d4:	222d      	movlt	r2, #45	; 0x2d
 80476d6:	222b      	movge	r2, #43	; 0x2b
 80476d8:	2909      	cmp	r1, #9
 80476da:	7042      	strb	r2, [r0, #1]
 80476dc:	dd2a      	ble.n	8047734 <__exponent+0x70>
 80476de:	f10d 0207 	add.w	r2, sp, #7
 80476e2:	4617      	mov	r7, r2
 80476e4:	260a      	movs	r6, #10
 80476e6:	4694      	mov	ip, r2
 80476e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80476ec:	fb06 1415 	mls	r4, r6, r5, r1
 80476f0:	3430      	adds	r4, #48	; 0x30
 80476f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80476f6:	460c      	mov	r4, r1
 80476f8:	2c63      	cmp	r4, #99	; 0x63
 80476fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80476fe:	4629      	mov	r1, r5
 8047700:	dcf1      	bgt.n	80476e6 <__exponent+0x22>
 8047702:	3130      	adds	r1, #48	; 0x30
 8047704:	f1ac 0402 	sub.w	r4, ip, #2
 8047708:	f802 1c01 	strb.w	r1, [r2, #-1]
 804770c:	1c41      	adds	r1, r0, #1
 804770e:	4622      	mov	r2, r4
 8047710:	42ba      	cmp	r2, r7
 8047712:	d30a      	bcc.n	804772a <__exponent+0x66>
 8047714:	f10d 0209 	add.w	r2, sp, #9
 8047718:	eba2 020c 	sub.w	r2, r2, ip
 804771c:	42bc      	cmp	r4, r7
 804771e:	bf88      	it	hi
 8047720:	2200      	movhi	r2, #0
 8047722:	4413      	add	r3, r2
 8047724:	1a18      	subs	r0, r3, r0
 8047726:	b003      	add	sp, #12
 8047728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 804772a:	f812 5b01 	ldrb.w	r5, [r2], #1
 804772e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8047732:	e7ed      	b.n	8047710 <__exponent+0x4c>
 8047734:	2330      	movs	r3, #48	; 0x30
 8047736:	3130      	adds	r1, #48	; 0x30
 8047738:	7083      	strb	r3, [r0, #2]
 804773a:	70c1      	strb	r1, [r0, #3]
 804773c:	1d03      	adds	r3, r0, #4
 804773e:	e7f1      	b.n	8047724 <__exponent+0x60>

08047740 <_printf_float>:
 8047740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8047744:	ed2d 8b02 	vpush	{d8}
 8047748:	b08d      	sub	sp, #52	; 0x34
 804774a:	460c      	mov	r4, r1
 804774c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8047750:	4616      	mov	r6, r2
 8047752:	461f      	mov	r7, r3
 8047754:	4605      	mov	r5, r0
 8047756:	f000 fd47 	bl	80481e8 <_localeconv_r>
 804775a:	f8d0 a000 	ldr.w	sl, [r0]
 804775e:	4650      	mov	r0, sl
 8047760:	f7f8 fd96 	bl	8040290 <strlen>
 8047764:	2300      	movs	r3, #0
 8047766:	930a      	str	r3, [sp, #40]	; 0x28
 8047768:	6823      	ldr	r3, [r4, #0]
 804776a:	9305      	str	r3, [sp, #20]
 804776c:	f8d8 3000 	ldr.w	r3, [r8]
 8047770:	f894 b018 	ldrb.w	fp, [r4, #24]
 8047774:	3307      	adds	r3, #7
 8047776:	f023 0307 	bic.w	r3, r3, #7
 804777a:	f103 0208 	add.w	r2, r3, #8
 804777e:	f8c8 2000 	str.w	r2, [r8]
 8047782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8047786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 804778a:	9307      	str	r3, [sp, #28]
 804778c:	f8cd 8018 	str.w	r8, [sp, #24]
 8047790:	ee08 0a10 	vmov	s16, r0
 8047794:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8047798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804779c:	4b9e      	ldr	r3, [pc, #632]	; (8047a18 <_printf_float+0x2d8>)
 804779e:	f04f 32ff 	mov.w	r2, #4294967295
 80477a2:	f7f9 f9d3 	bl	8040b4c <__aeabi_dcmpun>
 80477a6:	bb88      	cbnz	r0, 804780c <_printf_float+0xcc>
 80477a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80477ac:	4b9a      	ldr	r3, [pc, #616]	; (8047a18 <_printf_float+0x2d8>)
 80477ae:	f04f 32ff 	mov.w	r2, #4294967295
 80477b2:	f7f9 f9ad 	bl	8040b10 <__aeabi_dcmple>
 80477b6:	bb48      	cbnz	r0, 804780c <_printf_float+0xcc>
 80477b8:	2200      	movs	r2, #0
 80477ba:	2300      	movs	r3, #0
 80477bc:	4640      	mov	r0, r8
 80477be:	4649      	mov	r1, r9
 80477c0:	f7f9 f99c 	bl	8040afc <__aeabi_dcmplt>
 80477c4:	b110      	cbz	r0, 80477cc <_printf_float+0x8c>
 80477c6:	232d      	movs	r3, #45	; 0x2d
 80477c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80477cc:	4a93      	ldr	r2, [pc, #588]	; (8047a1c <_printf_float+0x2dc>)
 80477ce:	4b94      	ldr	r3, [pc, #592]	; (8047a20 <_printf_float+0x2e0>)
 80477d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80477d4:	bf94      	ite	ls
 80477d6:	4690      	movls	r8, r2
 80477d8:	4698      	movhi	r8, r3
 80477da:	2303      	movs	r3, #3
 80477dc:	6123      	str	r3, [r4, #16]
 80477de:	9b05      	ldr	r3, [sp, #20]
 80477e0:	f023 0304 	bic.w	r3, r3, #4
 80477e4:	6023      	str	r3, [r4, #0]
 80477e6:	f04f 0900 	mov.w	r9, #0
 80477ea:	9700      	str	r7, [sp, #0]
 80477ec:	4633      	mov	r3, r6
 80477ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80477f0:	4621      	mov	r1, r4
 80477f2:	4628      	mov	r0, r5
 80477f4:	f000 f9da 	bl	8047bac <_printf_common>
 80477f8:	3001      	adds	r0, #1
 80477fa:	f040 8090 	bne.w	804791e <_printf_float+0x1de>
 80477fe:	f04f 30ff 	mov.w	r0, #4294967295
 8047802:	b00d      	add	sp, #52	; 0x34
 8047804:	ecbd 8b02 	vpop	{d8}
 8047808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804780c:	4642      	mov	r2, r8
 804780e:	464b      	mov	r3, r9
 8047810:	4640      	mov	r0, r8
 8047812:	4649      	mov	r1, r9
 8047814:	f7f9 f99a 	bl	8040b4c <__aeabi_dcmpun>
 8047818:	b140      	cbz	r0, 804782c <_printf_float+0xec>
 804781a:	464b      	mov	r3, r9
 804781c:	2b00      	cmp	r3, #0
 804781e:	bfbc      	itt	lt
 8047820:	232d      	movlt	r3, #45	; 0x2d
 8047822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8047826:	4a7f      	ldr	r2, [pc, #508]	; (8047a24 <_printf_float+0x2e4>)
 8047828:	4b7f      	ldr	r3, [pc, #508]	; (8047a28 <_printf_float+0x2e8>)
 804782a:	e7d1      	b.n	80477d0 <_printf_float+0x90>
 804782c:	6863      	ldr	r3, [r4, #4]
 804782e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8047832:	9206      	str	r2, [sp, #24]
 8047834:	1c5a      	adds	r2, r3, #1
 8047836:	d13f      	bne.n	80478b8 <_printf_float+0x178>
 8047838:	2306      	movs	r3, #6
 804783a:	6063      	str	r3, [r4, #4]
 804783c:	9b05      	ldr	r3, [sp, #20]
 804783e:	6861      	ldr	r1, [r4, #4]
 8047840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8047844:	2300      	movs	r3, #0
 8047846:	9303      	str	r3, [sp, #12]
 8047848:	ab0a      	add	r3, sp, #40	; 0x28
 804784a:	e9cd b301 	strd	fp, r3, [sp, #4]
 804784e:	ab09      	add	r3, sp, #36	; 0x24
 8047850:	ec49 8b10 	vmov	d0, r8, r9
 8047854:	9300      	str	r3, [sp, #0]
 8047856:	6022      	str	r2, [r4, #0]
 8047858:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 804785c:	4628      	mov	r0, r5
 804785e:	f7ff fecf 	bl	8047600 <__cvt>
 8047862:	9b06      	ldr	r3, [sp, #24]
 8047864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8047866:	2b47      	cmp	r3, #71	; 0x47
 8047868:	4680      	mov	r8, r0
 804786a:	d108      	bne.n	804787e <_printf_float+0x13e>
 804786c:	1cc8      	adds	r0, r1, #3
 804786e:	db02      	blt.n	8047876 <_printf_float+0x136>
 8047870:	6863      	ldr	r3, [r4, #4]
 8047872:	4299      	cmp	r1, r3
 8047874:	dd41      	ble.n	80478fa <_printf_float+0x1ba>
 8047876:	f1ab 0302 	sub.w	r3, fp, #2
 804787a:	fa5f fb83 	uxtb.w	fp, r3
 804787e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8047882:	d820      	bhi.n	80478c6 <_printf_float+0x186>
 8047884:	3901      	subs	r1, #1
 8047886:	465a      	mov	r2, fp
 8047888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 804788c:	9109      	str	r1, [sp, #36]	; 0x24
 804788e:	f7ff ff19 	bl	80476c4 <__exponent>
 8047892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8047894:	1813      	adds	r3, r2, r0
 8047896:	2a01      	cmp	r2, #1
 8047898:	4681      	mov	r9, r0
 804789a:	6123      	str	r3, [r4, #16]
 804789c:	dc02      	bgt.n	80478a4 <_printf_float+0x164>
 804789e:	6822      	ldr	r2, [r4, #0]
 80478a0:	07d2      	lsls	r2, r2, #31
 80478a2:	d501      	bpl.n	80478a8 <_printf_float+0x168>
 80478a4:	3301      	adds	r3, #1
 80478a6:	6123      	str	r3, [r4, #16]
 80478a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80478ac:	2b00      	cmp	r3, #0
 80478ae:	d09c      	beq.n	80477ea <_printf_float+0xaa>
 80478b0:	232d      	movs	r3, #45	; 0x2d
 80478b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80478b6:	e798      	b.n	80477ea <_printf_float+0xaa>
 80478b8:	9a06      	ldr	r2, [sp, #24]
 80478ba:	2a47      	cmp	r2, #71	; 0x47
 80478bc:	d1be      	bne.n	804783c <_printf_float+0xfc>
 80478be:	2b00      	cmp	r3, #0
 80478c0:	d1bc      	bne.n	804783c <_printf_float+0xfc>
 80478c2:	2301      	movs	r3, #1
 80478c4:	e7b9      	b.n	804783a <_printf_float+0xfa>
 80478c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80478ca:	d118      	bne.n	80478fe <_printf_float+0x1be>
 80478cc:	2900      	cmp	r1, #0
 80478ce:	6863      	ldr	r3, [r4, #4]
 80478d0:	dd0b      	ble.n	80478ea <_printf_float+0x1aa>
 80478d2:	6121      	str	r1, [r4, #16]
 80478d4:	b913      	cbnz	r3, 80478dc <_printf_float+0x19c>
 80478d6:	6822      	ldr	r2, [r4, #0]
 80478d8:	07d0      	lsls	r0, r2, #31
 80478da:	d502      	bpl.n	80478e2 <_printf_float+0x1a2>
 80478dc:	3301      	adds	r3, #1
 80478de:	440b      	add	r3, r1
 80478e0:	6123      	str	r3, [r4, #16]
 80478e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80478e4:	f04f 0900 	mov.w	r9, #0
 80478e8:	e7de      	b.n	80478a8 <_printf_float+0x168>
 80478ea:	b913      	cbnz	r3, 80478f2 <_printf_float+0x1b2>
 80478ec:	6822      	ldr	r2, [r4, #0]
 80478ee:	07d2      	lsls	r2, r2, #31
 80478f0:	d501      	bpl.n	80478f6 <_printf_float+0x1b6>
 80478f2:	3302      	adds	r3, #2
 80478f4:	e7f4      	b.n	80478e0 <_printf_float+0x1a0>
 80478f6:	2301      	movs	r3, #1
 80478f8:	e7f2      	b.n	80478e0 <_printf_float+0x1a0>
 80478fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80478fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047900:	4299      	cmp	r1, r3
 8047902:	db05      	blt.n	8047910 <_printf_float+0x1d0>
 8047904:	6823      	ldr	r3, [r4, #0]
 8047906:	6121      	str	r1, [r4, #16]
 8047908:	07d8      	lsls	r0, r3, #31
 804790a:	d5ea      	bpl.n	80478e2 <_printf_float+0x1a2>
 804790c:	1c4b      	adds	r3, r1, #1
 804790e:	e7e7      	b.n	80478e0 <_printf_float+0x1a0>
 8047910:	2900      	cmp	r1, #0
 8047912:	bfd4      	ite	le
 8047914:	f1c1 0202 	rsble	r2, r1, #2
 8047918:	2201      	movgt	r2, #1
 804791a:	4413      	add	r3, r2
 804791c:	e7e0      	b.n	80478e0 <_printf_float+0x1a0>
 804791e:	6823      	ldr	r3, [r4, #0]
 8047920:	055a      	lsls	r2, r3, #21
 8047922:	d407      	bmi.n	8047934 <_printf_float+0x1f4>
 8047924:	6923      	ldr	r3, [r4, #16]
 8047926:	4642      	mov	r2, r8
 8047928:	4631      	mov	r1, r6
 804792a:	4628      	mov	r0, r5
 804792c:	47b8      	blx	r7
 804792e:	3001      	adds	r0, #1
 8047930:	d12c      	bne.n	804798c <_printf_float+0x24c>
 8047932:	e764      	b.n	80477fe <_printf_float+0xbe>
 8047934:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8047938:	f240 80e0 	bls.w	8047afc <_printf_float+0x3bc>
 804793c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8047940:	2200      	movs	r2, #0
 8047942:	2300      	movs	r3, #0
 8047944:	f7f9 f8d0 	bl	8040ae8 <__aeabi_dcmpeq>
 8047948:	2800      	cmp	r0, #0
 804794a:	d034      	beq.n	80479b6 <_printf_float+0x276>
 804794c:	4a37      	ldr	r2, [pc, #220]	; (8047a2c <_printf_float+0x2ec>)
 804794e:	2301      	movs	r3, #1
 8047950:	4631      	mov	r1, r6
 8047952:	4628      	mov	r0, r5
 8047954:	47b8      	blx	r7
 8047956:	3001      	adds	r0, #1
 8047958:	f43f af51 	beq.w	80477fe <_printf_float+0xbe>
 804795c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8047960:	429a      	cmp	r2, r3
 8047962:	db02      	blt.n	804796a <_printf_float+0x22a>
 8047964:	6823      	ldr	r3, [r4, #0]
 8047966:	07d8      	lsls	r0, r3, #31
 8047968:	d510      	bpl.n	804798c <_printf_float+0x24c>
 804796a:	ee18 3a10 	vmov	r3, s16
 804796e:	4652      	mov	r2, sl
 8047970:	4631      	mov	r1, r6
 8047972:	4628      	mov	r0, r5
 8047974:	47b8      	blx	r7
 8047976:	3001      	adds	r0, #1
 8047978:	f43f af41 	beq.w	80477fe <_printf_float+0xbe>
 804797c:	f04f 0800 	mov.w	r8, #0
 8047980:	f104 091a 	add.w	r9, r4, #26
 8047984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047986:	3b01      	subs	r3, #1
 8047988:	4543      	cmp	r3, r8
 804798a:	dc09      	bgt.n	80479a0 <_printf_float+0x260>
 804798c:	6823      	ldr	r3, [r4, #0]
 804798e:	079b      	lsls	r3, r3, #30
 8047990:	f100 8107 	bmi.w	8047ba2 <_printf_float+0x462>
 8047994:	68e0      	ldr	r0, [r4, #12]
 8047996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8047998:	4298      	cmp	r0, r3
 804799a:	bfb8      	it	lt
 804799c:	4618      	movlt	r0, r3
 804799e:	e730      	b.n	8047802 <_printf_float+0xc2>
 80479a0:	2301      	movs	r3, #1
 80479a2:	464a      	mov	r2, r9
 80479a4:	4631      	mov	r1, r6
 80479a6:	4628      	mov	r0, r5
 80479a8:	47b8      	blx	r7
 80479aa:	3001      	adds	r0, #1
 80479ac:	f43f af27 	beq.w	80477fe <_printf_float+0xbe>
 80479b0:	f108 0801 	add.w	r8, r8, #1
 80479b4:	e7e6      	b.n	8047984 <_printf_float+0x244>
 80479b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80479b8:	2b00      	cmp	r3, #0
 80479ba:	dc39      	bgt.n	8047a30 <_printf_float+0x2f0>
 80479bc:	4a1b      	ldr	r2, [pc, #108]	; (8047a2c <_printf_float+0x2ec>)
 80479be:	2301      	movs	r3, #1
 80479c0:	4631      	mov	r1, r6
 80479c2:	4628      	mov	r0, r5
 80479c4:	47b8      	blx	r7
 80479c6:	3001      	adds	r0, #1
 80479c8:	f43f af19 	beq.w	80477fe <_printf_float+0xbe>
 80479cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80479d0:	4313      	orrs	r3, r2
 80479d2:	d102      	bne.n	80479da <_printf_float+0x29a>
 80479d4:	6823      	ldr	r3, [r4, #0]
 80479d6:	07d9      	lsls	r1, r3, #31
 80479d8:	d5d8      	bpl.n	804798c <_printf_float+0x24c>
 80479da:	ee18 3a10 	vmov	r3, s16
 80479de:	4652      	mov	r2, sl
 80479e0:	4631      	mov	r1, r6
 80479e2:	4628      	mov	r0, r5
 80479e4:	47b8      	blx	r7
 80479e6:	3001      	adds	r0, #1
 80479e8:	f43f af09 	beq.w	80477fe <_printf_float+0xbe>
 80479ec:	f04f 0900 	mov.w	r9, #0
 80479f0:	f104 0a1a 	add.w	sl, r4, #26
 80479f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80479f6:	425b      	negs	r3, r3
 80479f8:	454b      	cmp	r3, r9
 80479fa:	dc01      	bgt.n	8047a00 <_printf_float+0x2c0>
 80479fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80479fe:	e792      	b.n	8047926 <_printf_float+0x1e6>
 8047a00:	2301      	movs	r3, #1
 8047a02:	4652      	mov	r2, sl
 8047a04:	4631      	mov	r1, r6
 8047a06:	4628      	mov	r0, r5
 8047a08:	47b8      	blx	r7
 8047a0a:	3001      	adds	r0, #1
 8047a0c:	f43f aef7 	beq.w	80477fe <_printf_float+0xbe>
 8047a10:	f109 0901 	add.w	r9, r9, #1
 8047a14:	e7ee      	b.n	80479f4 <_printf_float+0x2b4>
 8047a16:	bf00      	nop
 8047a18:	7fefffff 	.word	0x7fefffff
 8047a1c:	0804b049 	.word	0x0804b049
 8047a20:	0804b04d 	.word	0x0804b04d
 8047a24:	0804b051 	.word	0x0804b051
 8047a28:	0804b055 	.word	0x0804b055
 8047a2c:	0804b059 	.word	0x0804b059
 8047a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8047a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047a34:	429a      	cmp	r2, r3
 8047a36:	bfa8      	it	ge
 8047a38:	461a      	movge	r2, r3
 8047a3a:	2a00      	cmp	r2, #0
 8047a3c:	4691      	mov	r9, r2
 8047a3e:	dc37      	bgt.n	8047ab0 <_printf_float+0x370>
 8047a40:	f04f 0b00 	mov.w	fp, #0
 8047a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8047a48:	f104 021a 	add.w	r2, r4, #26
 8047a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047a4e:	9305      	str	r3, [sp, #20]
 8047a50:	eba3 0309 	sub.w	r3, r3, r9
 8047a54:	455b      	cmp	r3, fp
 8047a56:	dc33      	bgt.n	8047ac0 <_printf_float+0x380>
 8047a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8047a5c:	429a      	cmp	r2, r3
 8047a5e:	db3b      	blt.n	8047ad8 <_printf_float+0x398>
 8047a60:	6823      	ldr	r3, [r4, #0]
 8047a62:	07da      	lsls	r2, r3, #31
 8047a64:	d438      	bmi.n	8047ad8 <_printf_float+0x398>
 8047a66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8047a6a:	eba2 0903 	sub.w	r9, r2, r3
 8047a6e:	9b05      	ldr	r3, [sp, #20]
 8047a70:	1ad2      	subs	r2, r2, r3
 8047a72:	4591      	cmp	r9, r2
 8047a74:	bfa8      	it	ge
 8047a76:	4691      	movge	r9, r2
 8047a78:	f1b9 0f00 	cmp.w	r9, #0
 8047a7c:	dc35      	bgt.n	8047aea <_printf_float+0x3aa>
 8047a7e:	f04f 0800 	mov.w	r8, #0
 8047a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8047a86:	f104 0a1a 	add.w	sl, r4, #26
 8047a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8047a8e:	1a9b      	subs	r3, r3, r2
 8047a90:	eba3 0309 	sub.w	r3, r3, r9
 8047a94:	4543      	cmp	r3, r8
 8047a96:	f77f af79 	ble.w	804798c <_printf_float+0x24c>
 8047a9a:	2301      	movs	r3, #1
 8047a9c:	4652      	mov	r2, sl
 8047a9e:	4631      	mov	r1, r6
 8047aa0:	4628      	mov	r0, r5
 8047aa2:	47b8      	blx	r7
 8047aa4:	3001      	adds	r0, #1
 8047aa6:	f43f aeaa 	beq.w	80477fe <_printf_float+0xbe>
 8047aaa:	f108 0801 	add.w	r8, r8, #1
 8047aae:	e7ec      	b.n	8047a8a <_printf_float+0x34a>
 8047ab0:	4613      	mov	r3, r2
 8047ab2:	4631      	mov	r1, r6
 8047ab4:	4642      	mov	r2, r8
 8047ab6:	4628      	mov	r0, r5
 8047ab8:	47b8      	blx	r7
 8047aba:	3001      	adds	r0, #1
 8047abc:	d1c0      	bne.n	8047a40 <_printf_float+0x300>
 8047abe:	e69e      	b.n	80477fe <_printf_float+0xbe>
 8047ac0:	2301      	movs	r3, #1
 8047ac2:	4631      	mov	r1, r6
 8047ac4:	4628      	mov	r0, r5
 8047ac6:	9205      	str	r2, [sp, #20]
 8047ac8:	47b8      	blx	r7
 8047aca:	3001      	adds	r0, #1
 8047acc:	f43f ae97 	beq.w	80477fe <_printf_float+0xbe>
 8047ad0:	9a05      	ldr	r2, [sp, #20]
 8047ad2:	f10b 0b01 	add.w	fp, fp, #1
 8047ad6:	e7b9      	b.n	8047a4c <_printf_float+0x30c>
 8047ad8:	ee18 3a10 	vmov	r3, s16
 8047adc:	4652      	mov	r2, sl
 8047ade:	4631      	mov	r1, r6
 8047ae0:	4628      	mov	r0, r5
 8047ae2:	47b8      	blx	r7
 8047ae4:	3001      	adds	r0, #1
 8047ae6:	d1be      	bne.n	8047a66 <_printf_float+0x326>
 8047ae8:	e689      	b.n	80477fe <_printf_float+0xbe>
 8047aea:	9a05      	ldr	r2, [sp, #20]
 8047aec:	464b      	mov	r3, r9
 8047aee:	4442      	add	r2, r8
 8047af0:	4631      	mov	r1, r6
 8047af2:	4628      	mov	r0, r5
 8047af4:	47b8      	blx	r7
 8047af6:	3001      	adds	r0, #1
 8047af8:	d1c1      	bne.n	8047a7e <_printf_float+0x33e>
 8047afa:	e680      	b.n	80477fe <_printf_float+0xbe>
 8047afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8047afe:	2a01      	cmp	r2, #1
 8047b00:	dc01      	bgt.n	8047b06 <_printf_float+0x3c6>
 8047b02:	07db      	lsls	r3, r3, #31
 8047b04:	d53a      	bpl.n	8047b7c <_printf_float+0x43c>
 8047b06:	2301      	movs	r3, #1
 8047b08:	4642      	mov	r2, r8
 8047b0a:	4631      	mov	r1, r6
 8047b0c:	4628      	mov	r0, r5
 8047b0e:	47b8      	blx	r7
 8047b10:	3001      	adds	r0, #1
 8047b12:	f43f ae74 	beq.w	80477fe <_printf_float+0xbe>
 8047b16:	ee18 3a10 	vmov	r3, s16
 8047b1a:	4652      	mov	r2, sl
 8047b1c:	4631      	mov	r1, r6
 8047b1e:	4628      	mov	r0, r5
 8047b20:	47b8      	blx	r7
 8047b22:	3001      	adds	r0, #1
 8047b24:	f43f ae6b 	beq.w	80477fe <_printf_float+0xbe>
 8047b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8047b2c:	2200      	movs	r2, #0
 8047b2e:	2300      	movs	r3, #0
 8047b30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8047b34:	f7f8 ffd8 	bl	8040ae8 <__aeabi_dcmpeq>
 8047b38:	b9d8      	cbnz	r0, 8047b72 <_printf_float+0x432>
 8047b3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8047b3e:	f108 0201 	add.w	r2, r8, #1
 8047b42:	4631      	mov	r1, r6
 8047b44:	4628      	mov	r0, r5
 8047b46:	47b8      	blx	r7
 8047b48:	3001      	adds	r0, #1
 8047b4a:	d10e      	bne.n	8047b6a <_printf_float+0x42a>
 8047b4c:	e657      	b.n	80477fe <_printf_float+0xbe>
 8047b4e:	2301      	movs	r3, #1
 8047b50:	4652      	mov	r2, sl
 8047b52:	4631      	mov	r1, r6
 8047b54:	4628      	mov	r0, r5
 8047b56:	47b8      	blx	r7
 8047b58:	3001      	adds	r0, #1
 8047b5a:	f43f ae50 	beq.w	80477fe <_printf_float+0xbe>
 8047b5e:	f108 0801 	add.w	r8, r8, #1
 8047b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8047b64:	3b01      	subs	r3, #1
 8047b66:	4543      	cmp	r3, r8
 8047b68:	dcf1      	bgt.n	8047b4e <_printf_float+0x40e>
 8047b6a:	464b      	mov	r3, r9
 8047b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8047b70:	e6da      	b.n	8047928 <_printf_float+0x1e8>
 8047b72:	f04f 0800 	mov.w	r8, #0
 8047b76:	f104 0a1a 	add.w	sl, r4, #26
 8047b7a:	e7f2      	b.n	8047b62 <_printf_float+0x422>
 8047b7c:	2301      	movs	r3, #1
 8047b7e:	4642      	mov	r2, r8
 8047b80:	e7df      	b.n	8047b42 <_printf_float+0x402>
 8047b82:	2301      	movs	r3, #1
 8047b84:	464a      	mov	r2, r9
 8047b86:	4631      	mov	r1, r6
 8047b88:	4628      	mov	r0, r5
 8047b8a:	47b8      	blx	r7
 8047b8c:	3001      	adds	r0, #1
 8047b8e:	f43f ae36 	beq.w	80477fe <_printf_float+0xbe>
 8047b92:	f108 0801 	add.w	r8, r8, #1
 8047b96:	68e3      	ldr	r3, [r4, #12]
 8047b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8047b9a:	1a5b      	subs	r3, r3, r1
 8047b9c:	4543      	cmp	r3, r8
 8047b9e:	dcf0      	bgt.n	8047b82 <_printf_float+0x442>
 8047ba0:	e6f8      	b.n	8047994 <_printf_float+0x254>
 8047ba2:	f04f 0800 	mov.w	r8, #0
 8047ba6:	f104 0919 	add.w	r9, r4, #25
 8047baa:	e7f4      	b.n	8047b96 <_printf_float+0x456>

08047bac <_printf_common>:
 8047bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8047bb0:	4616      	mov	r6, r2
 8047bb2:	4699      	mov	r9, r3
 8047bb4:	688a      	ldr	r2, [r1, #8]
 8047bb6:	690b      	ldr	r3, [r1, #16]
 8047bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8047bbc:	4293      	cmp	r3, r2
 8047bbe:	bfb8      	it	lt
 8047bc0:	4613      	movlt	r3, r2
 8047bc2:	6033      	str	r3, [r6, #0]
 8047bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8047bc8:	4607      	mov	r7, r0
 8047bca:	460c      	mov	r4, r1
 8047bcc:	b10a      	cbz	r2, 8047bd2 <_printf_common+0x26>
 8047bce:	3301      	adds	r3, #1
 8047bd0:	6033      	str	r3, [r6, #0]
 8047bd2:	6823      	ldr	r3, [r4, #0]
 8047bd4:	0699      	lsls	r1, r3, #26
 8047bd6:	bf42      	ittt	mi
 8047bd8:	6833      	ldrmi	r3, [r6, #0]
 8047bda:	3302      	addmi	r3, #2
 8047bdc:	6033      	strmi	r3, [r6, #0]
 8047bde:	6825      	ldr	r5, [r4, #0]
 8047be0:	f015 0506 	ands.w	r5, r5, #6
 8047be4:	d106      	bne.n	8047bf4 <_printf_common+0x48>
 8047be6:	f104 0a19 	add.w	sl, r4, #25
 8047bea:	68e3      	ldr	r3, [r4, #12]
 8047bec:	6832      	ldr	r2, [r6, #0]
 8047bee:	1a9b      	subs	r3, r3, r2
 8047bf0:	42ab      	cmp	r3, r5
 8047bf2:	dc26      	bgt.n	8047c42 <_printf_common+0x96>
 8047bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8047bf8:	1e13      	subs	r3, r2, #0
 8047bfa:	6822      	ldr	r2, [r4, #0]
 8047bfc:	bf18      	it	ne
 8047bfe:	2301      	movne	r3, #1
 8047c00:	0692      	lsls	r2, r2, #26
 8047c02:	d42b      	bmi.n	8047c5c <_printf_common+0xb0>
 8047c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8047c08:	4649      	mov	r1, r9
 8047c0a:	4638      	mov	r0, r7
 8047c0c:	47c0      	blx	r8
 8047c0e:	3001      	adds	r0, #1
 8047c10:	d01e      	beq.n	8047c50 <_printf_common+0xa4>
 8047c12:	6823      	ldr	r3, [r4, #0]
 8047c14:	6922      	ldr	r2, [r4, #16]
 8047c16:	f003 0306 	and.w	r3, r3, #6
 8047c1a:	2b04      	cmp	r3, #4
 8047c1c:	bf02      	ittt	eq
 8047c1e:	68e5      	ldreq	r5, [r4, #12]
 8047c20:	6833      	ldreq	r3, [r6, #0]
 8047c22:	1aed      	subeq	r5, r5, r3
 8047c24:	68a3      	ldr	r3, [r4, #8]
 8047c26:	bf0c      	ite	eq
 8047c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8047c2c:	2500      	movne	r5, #0
 8047c2e:	4293      	cmp	r3, r2
 8047c30:	bfc4      	itt	gt
 8047c32:	1a9b      	subgt	r3, r3, r2
 8047c34:	18ed      	addgt	r5, r5, r3
 8047c36:	2600      	movs	r6, #0
 8047c38:	341a      	adds	r4, #26
 8047c3a:	42b5      	cmp	r5, r6
 8047c3c:	d11a      	bne.n	8047c74 <_printf_common+0xc8>
 8047c3e:	2000      	movs	r0, #0
 8047c40:	e008      	b.n	8047c54 <_printf_common+0xa8>
 8047c42:	2301      	movs	r3, #1
 8047c44:	4652      	mov	r2, sl
 8047c46:	4649      	mov	r1, r9
 8047c48:	4638      	mov	r0, r7
 8047c4a:	47c0      	blx	r8
 8047c4c:	3001      	adds	r0, #1
 8047c4e:	d103      	bne.n	8047c58 <_printf_common+0xac>
 8047c50:	f04f 30ff 	mov.w	r0, #4294967295
 8047c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047c58:	3501      	adds	r5, #1
 8047c5a:	e7c6      	b.n	8047bea <_printf_common+0x3e>
 8047c5c:	18e1      	adds	r1, r4, r3
 8047c5e:	1c5a      	adds	r2, r3, #1
 8047c60:	2030      	movs	r0, #48	; 0x30
 8047c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8047c66:	4422      	add	r2, r4
 8047c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8047c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8047c70:	3302      	adds	r3, #2
 8047c72:	e7c7      	b.n	8047c04 <_printf_common+0x58>
 8047c74:	2301      	movs	r3, #1
 8047c76:	4622      	mov	r2, r4
 8047c78:	4649      	mov	r1, r9
 8047c7a:	4638      	mov	r0, r7
 8047c7c:	47c0      	blx	r8
 8047c7e:	3001      	adds	r0, #1
 8047c80:	d0e6      	beq.n	8047c50 <_printf_common+0xa4>
 8047c82:	3601      	adds	r6, #1
 8047c84:	e7d9      	b.n	8047c3a <_printf_common+0x8e>
	...

08047c88 <_printf_i>:
 8047c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8047c8c:	7e0f      	ldrb	r7, [r1, #24]
 8047c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8047c90:	2f78      	cmp	r7, #120	; 0x78
 8047c92:	4691      	mov	r9, r2
 8047c94:	4680      	mov	r8, r0
 8047c96:	460c      	mov	r4, r1
 8047c98:	469a      	mov	sl, r3
 8047c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8047c9e:	d807      	bhi.n	8047cb0 <_printf_i+0x28>
 8047ca0:	2f62      	cmp	r7, #98	; 0x62
 8047ca2:	d80a      	bhi.n	8047cba <_printf_i+0x32>
 8047ca4:	2f00      	cmp	r7, #0
 8047ca6:	f000 80d4 	beq.w	8047e52 <_printf_i+0x1ca>
 8047caa:	2f58      	cmp	r7, #88	; 0x58
 8047cac:	f000 80c0 	beq.w	8047e30 <_printf_i+0x1a8>
 8047cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8047cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8047cb8:	e03a      	b.n	8047d30 <_printf_i+0xa8>
 8047cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8047cbe:	2b15      	cmp	r3, #21
 8047cc0:	d8f6      	bhi.n	8047cb0 <_printf_i+0x28>
 8047cc2:	a101      	add	r1, pc, #4	; (adr r1, 8047cc8 <_printf_i+0x40>)
 8047cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8047cc8:	08047d21 	.word	0x08047d21
 8047ccc:	08047d35 	.word	0x08047d35
 8047cd0:	08047cb1 	.word	0x08047cb1
 8047cd4:	08047cb1 	.word	0x08047cb1
 8047cd8:	08047cb1 	.word	0x08047cb1
 8047cdc:	08047cb1 	.word	0x08047cb1
 8047ce0:	08047d35 	.word	0x08047d35
 8047ce4:	08047cb1 	.word	0x08047cb1
 8047ce8:	08047cb1 	.word	0x08047cb1
 8047cec:	08047cb1 	.word	0x08047cb1
 8047cf0:	08047cb1 	.word	0x08047cb1
 8047cf4:	08047e39 	.word	0x08047e39
 8047cf8:	08047d61 	.word	0x08047d61
 8047cfc:	08047df3 	.word	0x08047df3
 8047d00:	08047cb1 	.word	0x08047cb1
 8047d04:	08047cb1 	.word	0x08047cb1
 8047d08:	08047e5b 	.word	0x08047e5b
 8047d0c:	08047cb1 	.word	0x08047cb1
 8047d10:	08047d61 	.word	0x08047d61
 8047d14:	08047cb1 	.word	0x08047cb1
 8047d18:	08047cb1 	.word	0x08047cb1
 8047d1c:	08047dfb 	.word	0x08047dfb
 8047d20:	682b      	ldr	r3, [r5, #0]
 8047d22:	1d1a      	adds	r2, r3, #4
 8047d24:	681b      	ldr	r3, [r3, #0]
 8047d26:	602a      	str	r2, [r5, #0]
 8047d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8047d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8047d30:	2301      	movs	r3, #1
 8047d32:	e09f      	b.n	8047e74 <_printf_i+0x1ec>
 8047d34:	6820      	ldr	r0, [r4, #0]
 8047d36:	682b      	ldr	r3, [r5, #0]
 8047d38:	0607      	lsls	r7, r0, #24
 8047d3a:	f103 0104 	add.w	r1, r3, #4
 8047d3e:	6029      	str	r1, [r5, #0]
 8047d40:	d501      	bpl.n	8047d46 <_printf_i+0xbe>
 8047d42:	681e      	ldr	r6, [r3, #0]
 8047d44:	e003      	b.n	8047d4e <_printf_i+0xc6>
 8047d46:	0646      	lsls	r6, r0, #25
 8047d48:	d5fb      	bpl.n	8047d42 <_printf_i+0xba>
 8047d4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8047d4e:	2e00      	cmp	r6, #0
 8047d50:	da03      	bge.n	8047d5a <_printf_i+0xd2>
 8047d52:	232d      	movs	r3, #45	; 0x2d
 8047d54:	4276      	negs	r6, r6
 8047d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047d5a:	485a      	ldr	r0, [pc, #360]	; (8047ec4 <_printf_i+0x23c>)
 8047d5c:	230a      	movs	r3, #10
 8047d5e:	e012      	b.n	8047d86 <_printf_i+0xfe>
 8047d60:	682b      	ldr	r3, [r5, #0]
 8047d62:	6820      	ldr	r0, [r4, #0]
 8047d64:	1d19      	adds	r1, r3, #4
 8047d66:	6029      	str	r1, [r5, #0]
 8047d68:	0605      	lsls	r5, r0, #24
 8047d6a:	d501      	bpl.n	8047d70 <_printf_i+0xe8>
 8047d6c:	681e      	ldr	r6, [r3, #0]
 8047d6e:	e002      	b.n	8047d76 <_printf_i+0xee>
 8047d70:	0641      	lsls	r1, r0, #25
 8047d72:	d5fb      	bpl.n	8047d6c <_printf_i+0xe4>
 8047d74:	881e      	ldrh	r6, [r3, #0]
 8047d76:	4853      	ldr	r0, [pc, #332]	; (8047ec4 <_printf_i+0x23c>)
 8047d78:	2f6f      	cmp	r7, #111	; 0x6f
 8047d7a:	bf0c      	ite	eq
 8047d7c:	2308      	moveq	r3, #8
 8047d7e:	230a      	movne	r3, #10
 8047d80:	2100      	movs	r1, #0
 8047d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8047d86:	6865      	ldr	r5, [r4, #4]
 8047d88:	60a5      	str	r5, [r4, #8]
 8047d8a:	2d00      	cmp	r5, #0
 8047d8c:	bfa2      	ittt	ge
 8047d8e:	6821      	ldrge	r1, [r4, #0]
 8047d90:	f021 0104 	bicge.w	r1, r1, #4
 8047d94:	6021      	strge	r1, [r4, #0]
 8047d96:	b90e      	cbnz	r6, 8047d9c <_printf_i+0x114>
 8047d98:	2d00      	cmp	r5, #0
 8047d9a:	d04b      	beq.n	8047e34 <_printf_i+0x1ac>
 8047d9c:	4615      	mov	r5, r2
 8047d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8047da2:	fb03 6711 	mls	r7, r3, r1, r6
 8047da6:	5dc7      	ldrb	r7, [r0, r7]
 8047da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8047dac:	4637      	mov	r7, r6
 8047dae:	42bb      	cmp	r3, r7
 8047db0:	460e      	mov	r6, r1
 8047db2:	d9f4      	bls.n	8047d9e <_printf_i+0x116>
 8047db4:	2b08      	cmp	r3, #8
 8047db6:	d10b      	bne.n	8047dd0 <_printf_i+0x148>
 8047db8:	6823      	ldr	r3, [r4, #0]
 8047dba:	07de      	lsls	r6, r3, #31
 8047dbc:	d508      	bpl.n	8047dd0 <_printf_i+0x148>
 8047dbe:	6923      	ldr	r3, [r4, #16]
 8047dc0:	6861      	ldr	r1, [r4, #4]
 8047dc2:	4299      	cmp	r1, r3
 8047dc4:	bfde      	ittt	le
 8047dc6:	2330      	movle	r3, #48	; 0x30
 8047dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8047dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8047dd0:	1b52      	subs	r2, r2, r5
 8047dd2:	6122      	str	r2, [r4, #16]
 8047dd4:	f8cd a000 	str.w	sl, [sp]
 8047dd8:	464b      	mov	r3, r9
 8047dda:	aa03      	add	r2, sp, #12
 8047ddc:	4621      	mov	r1, r4
 8047dde:	4640      	mov	r0, r8
 8047de0:	f7ff fee4 	bl	8047bac <_printf_common>
 8047de4:	3001      	adds	r0, #1
 8047de6:	d14a      	bne.n	8047e7e <_printf_i+0x1f6>
 8047de8:	f04f 30ff 	mov.w	r0, #4294967295
 8047dec:	b004      	add	sp, #16
 8047dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8047df2:	6823      	ldr	r3, [r4, #0]
 8047df4:	f043 0320 	orr.w	r3, r3, #32
 8047df8:	6023      	str	r3, [r4, #0]
 8047dfa:	4833      	ldr	r0, [pc, #204]	; (8047ec8 <_printf_i+0x240>)
 8047dfc:	2778      	movs	r7, #120	; 0x78
 8047dfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8047e02:	6823      	ldr	r3, [r4, #0]
 8047e04:	6829      	ldr	r1, [r5, #0]
 8047e06:	061f      	lsls	r7, r3, #24
 8047e08:	f851 6b04 	ldr.w	r6, [r1], #4
 8047e0c:	d402      	bmi.n	8047e14 <_printf_i+0x18c>
 8047e0e:	065f      	lsls	r7, r3, #25
 8047e10:	bf48      	it	mi
 8047e12:	b2b6      	uxthmi	r6, r6
 8047e14:	07df      	lsls	r7, r3, #31
 8047e16:	bf48      	it	mi
 8047e18:	f043 0320 	orrmi.w	r3, r3, #32
 8047e1c:	6029      	str	r1, [r5, #0]
 8047e1e:	bf48      	it	mi
 8047e20:	6023      	strmi	r3, [r4, #0]
 8047e22:	b91e      	cbnz	r6, 8047e2c <_printf_i+0x1a4>
 8047e24:	6823      	ldr	r3, [r4, #0]
 8047e26:	f023 0320 	bic.w	r3, r3, #32
 8047e2a:	6023      	str	r3, [r4, #0]
 8047e2c:	2310      	movs	r3, #16
 8047e2e:	e7a7      	b.n	8047d80 <_printf_i+0xf8>
 8047e30:	4824      	ldr	r0, [pc, #144]	; (8047ec4 <_printf_i+0x23c>)
 8047e32:	e7e4      	b.n	8047dfe <_printf_i+0x176>
 8047e34:	4615      	mov	r5, r2
 8047e36:	e7bd      	b.n	8047db4 <_printf_i+0x12c>
 8047e38:	682b      	ldr	r3, [r5, #0]
 8047e3a:	6826      	ldr	r6, [r4, #0]
 8047e3c:	6961      	ldr	r1, [r4, #20]
 8047e3e:	1d18      	adds	r0, r3, #4
 8047e40:	6028      	str	r0, [r5, #0]
 8047e42:	0635      	lsls	r5, r6, #24
 8047e44:	681b      	ldr	r3, [r3, #0]
 8047e46:	d501      	bpl.n	8047e4c <_printf_i+0x1c4>
 8047e48:	6019      	str	r1, [r3, #0]
 8047e4a:	e002      	b.n	8047e52 <_printf_i+0x1ca>
 8047e4c:	0670      	lsls	r0, r6, #25
 8047e4e:	d5fb      	bpl.n	8047e48 <_printf_i+0x1c0>
 8047e50:	8019      	strh	r1, [r3, #0]
 8047e52:	2300      	movs	r3, #0
 8047e54:	6123      	str	r3, [r4, #16]
 8047e56:	4615      	mov	r5, r2
 8047e58:	e7bc      	b.n	8047dd4 <_printf_i+0x14c>
 8047e5a:	682b      	ldr	r3, [r5, #0]
 8047e5c:	1d1a      	adds	r2, r3, #4
 8047e5e:	602a      	str	r2, [r5, #0]
 8047e60:	681d      	ldr	r5, [r3, #0]
 8047e62:	6862      	ldr	r2, [r4, #4]
 8047e64:	2100      	movs	r1, #0
 8047e66:	4628      	mov	r0, r5
 8047e68:	f7f8 f9c2 	bl	80401f0 <memchr>
 8047e6c:	b108      	cbz	r0, 8047e72 <_printf_i+0x1ea>
 8047e6e:	1b40      	subs	r0, r0, r5
 8047e70:	6060      	str	r0, [r4, #4]
 8047e72:	6863      	ldr	r3, [r4, #4]
 8047e74:	6123      	str	r3, [r4, #16]
 8047e76:	2300      	movs	r3, #0
 8047e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8047e7c:	e7aa      	b.n	8047dd4 <_printf_i+0x14c>
 8047e7e:	6923      	ldr	r3, [r4, #16]
 8047e80:	462a      	mov	r2, r5
 8047e82:	4649      	mov	r1, r9
 8047e84:	4640      	mov	r0, r8
 8047e86:	47d0      	blx	sl
 8047e88:	3001      	adds	r0, #1
 8047e8a:	d0ad      	beq.n	8047de8 <_printf_i+0x160>
 8047e8c:	6823      	ldr	r3, [r4, #0]
 8047e8e:	079b      	lsls	r3, r3, #30
 8047e90:	d413      	bmi.n	8047eba <_printf_i+0x232>
 8047e92:	68e0      	ldr	r0, [r4, #12]
 8047e94:	9b03      	ldr	r3, [sp, #12]
 8047e96:	4298      	cmp	r0, r3
 8047e98:	bfb8      	it	lt
 8047e9a:	4618      	movlt	r0, r3
 8047e9c:	e7a6      	b.n	8047dec <_printf_i+0x164>
 8047e9e:	2301      	movs	r3, #1
 8047ea0:	4632      	mov	r2, r6
 8047ea2:	4649      	mov	r1, r9
 8047ea4:	4640      	mov	r0, r8
 8047ea6:	47d0      	blx	sl
 8047ea8:	3001      	adds	r0, #1
 8047eaa:	d09d      	beq.n	8047de8 <_printf_i+0x160>
 8047eac:	3501      	adds	r5, #1
 8047eae:	68e3      	ldr	r3, [r4, #12]
 8047eb0:	9903      	ldr	r1, [sp, #12]
 8047eb2:	1a5b      	subs	r3, r3, r1
 8047eb4:	42ab      	cmp	r3, r5
 8047eb6:	dcf2      	bgt.n	8047e9e <_printf_i+0x216>
 8047eb8:	e7eb      	b.n	8047e92 <_printf_i+0x20a>
 8047eba:	2500      	movs	r5, #0
 8047ebc:	f104 0619 	add.w	r6, r4, #25
 8047ec0:	e7f5      	b.n	8047eae <_printf_i+0x226>
 8047ec2:	bf00      	nop
 8047ec4:	0804b05b 	.word	0x0804b05b
 8047ec8:	0804b06c 	.word	0x0804b06c

08047ecc <std>:
 8047ecc:	2300      	movs	r3, #0
 8047ece:	b510      	push	{r4, lr}
 8047ed0:	4604      	mov	r4, r0
 8047ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8047ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8047eda:	6083      	str	r3, [r0, #8]
 8047edc:	8181      	strh	r1, [r0, #12]
 8047ede:	6643      	str	r3, [r0, #100]	; 0x64
 8047ee0:	81c2      	strh	r2, [r0, #14]
 8047ee2:	6183      	str	r3, [r0, #24]
 8047ee4:	4619      	mov	r1, r3
 8047ee6:	2208      	movs	r2, #8
 8047ee8:	305c      	adds	r0, #92	; 0x5c
 8047eea:	f000 f92c 	bl	8048146 <memset>
 8047eee:	4b05      	ldr	r3, [pc, #20]	; (8047f04 <std+0x38>)
 8047ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8047ef2:	4b05      	ldr	r3, [pc, #20]	; (8047f08 <std+0x3c>)
 8047ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8047ef6:	4b05      	ldr	r3, [pc, #20]	; (8047f0c <std+0x40>)
 8047ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8047efa:	4b05      	ldr	r3, [pc, #20]	; (8047f10 <std+0x44>)
 8047efc:	6224      	str	r4, [r4, #32]
 8047efe:	6323      	str	r3, [r4, #48]	; 0x30
 8047f00:	bd10      	pop	{r4, pc}
 8047f02:	bf00      	nop
 8047f04:	0804806d 	.word	0x0804806d
 8047f08:	0804808f 	.word	0x0804808f
 8047f0c:	080480c7 	.word	0x080480c7
 8047f10:	080480eb 	.word	0x080480eb

08047f14 <stdio_exit_handler>:
 8047f14:	4a02      	ldr	r2, [pc, #8]	; (8047f20 <stdio_exit_handler+0xc>)
 8047f16:	4903      	ldr	r1, [pc, #12]	; (8047f24 <stdio_exit_handler+0x10>)
 8047f18:	4803      	ldr	r0, [pc, #12]	; (8047f28 <stdio_exit_handler+0x14>)
 8047f1a:	f000 b869 	b.w	8047ff0 <_fwalk_sglue>
 8047f1e:	bf00      	nop
 8047f20:	20000030 	.word	0x20000030
 8047f24:	0804a4c1 	.word	0x0804a4c1
 8047f28:	200001a8 	.word	0x200001a8

08047f2c <cleanup_stdio>:
 8047f2c:	6841      	ldr	r1, [r0, #4]
 8047f2e:	4b0c      	ldr	r3, [pc, #48]	; (8047f60 <cleanup_stdio+0x34>)
 8047f30:	4299      	cmp	r1, r3
 8047f32:	b510      	push	{r4, lr}
 8047f34:	4604      	mov	r4, r0
 8047f36:	d001      	beq.n	8047f3c <cleanup_stdio+0x10>
 8047f38:	f002 fac2 	bl	804a4c0 <_fflush_r>
 8047f3c:	68a1      	ldr	r1, [r4, #8]
 8047f3e:	4b09      	ldr	r3, [pc, #36]	; (8047f64 <cleanup_stdio+0x38>)
 8047f40:	4299      	cmp	r1, r3
 8047f42:	d002      	beq.n	8047f4a <cleanup_stdio+0x1e>
 8047f44:	4620      	mov	r0, r4
 8047f46:	f002 fabb 	bl	804a4c0 <_fflush_r>
 8047f4a:	68e1      	ldr	r1, [r4, #12]
 8047f4c:	4b06      	ldr	r3, [pc, #24]	; (8047f68 <cleanup_stdio+0x3c>)
 8047f4e:	4299      	cmp	r1, r3
 8047f50:	d004      	beq.n	8047f5c <cleanup_stdio+0x30>
 8047f52:	4620      	mov	r0, r4
 8047f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8047f58:	f002 bab2 	b.w	804a4c0 <_fflush_r>
 8047f5c:	bd10      	pop	{r4, pc}
 8047f5e:	bf00      	nop
 8047f60:	200037b8 	.word	0x200037b8
 8047f64:	20003820 	.word	0x20003820
 8047f68:	20003888 	.word	0x20003888

08047f6c <global_stdio_init.part.0>:
 8047f6c:	b510      	push	{r4, lr}
 8047f6e:	4b0b      	ldr	r3, [pc, #44]	; (8047f9c <global_stdio_init.part.0+0x30>)
 8047f70:	4c0b      	ldr	r4, [pc, #44]	; (8047fa0 <global_stdio_init.part.0+0x34>)
 8047f72:	4a0c      	ldr	r2, [pc, #48]	; (8047fa4 <global_stdio_init.part.0+0x38>)
 8047f74:	601a      	str	r2, [r3, #0]
 8047f76:	4620      	mov	r0, r4
 8047f78:	2200      	movs	r2, #0
 8047f7a:	2104      	movs	r1, #4
 8047f7c:	f7ff ffa6 	bl	8047ecc <std>
 8047f80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8047f84:	2201      	movs	r2, #1
 8047f86:	2109      	movs	r1, #9
 8047f88:	f7ff ffa0 	bl	8047ecc <std>
 8047f8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8047f90:	2202      	movs	r2, #2
 8047f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8047f96:	2112      	movs	r1, #18
 8047f98:	f7ff bf98 	b.w	8047ecc <std>
 8047f9c:	200038f0 	.word	0x200038f0
 8047fa0:	200037b8 	.word	0x200037b8
 8047fa4:	08047f15 	.word	0x08047f15

08047fa8 <__sfp_lock_acquire>:
 8047fa8:	4801      	ldr	r0, [pc, #4]	; (8047fb0 <__sfp_lock_acquire+0x8>)
 8047faa:	f000 b9a1 	b.w	80482f0 <__retarget_lock_acquire_recursive>
 8047fae:	bf00      	nop
 8047fb0:	200038f9 	.word	0x200038f9

08047fb4 <__sfp_lock_release>:
 8047fb4:	4801      	ldr	r0, [pc, #4]	; (8047fbc <__sfp_lock_release+0x8>)
 8047fb6:	f000 b99c 	b.w	80482f2 <__retarget_lock_release_recursive>
 8047fba:	bf00      	nop
 8047fbc:	200038f9 	.word	0x200038f9

08047fc0 <__sinit>:
 8047fc0:	b510      	push	{r4, lr}
 8047fc2:	4604      	mov	r4, r0
 8047fc4:	f7ff fff0 	bl	8047fa8 <__sfp_lock_acquire>
 8047fc8:	6a23      	ldr	r3, [r4, #32]
 8047fca:	b11b      	cbz	r3, 8047fd4 <__sinit+0x14>
 8047fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8047fd0:	f7ff bff0 	b.w	8047fb4 <__sfp_lock_release>
 8047fd4:	4b04      	ldr	r3, [pc, #16]	; (8047fe8 <__sinit+0x28>)
 8047fd6:	6223      	str	r3, [r4, #32]
 8047fd8:	4b04      	ldr	r3, [pc, #16]	; (8047fec <__sinit+0x2c>)
 8047fda:	681b      	ldr	r3, [r3, #0]
 8047fdc:	2b00      	cmp	r3, #0
 8047fde:	d1f5      	bne.n	8047fcc <__sinit+0xc>
 8047fe0:	f7ff ffc4 	bl	8047f6c <global_stdio_init.part.0>
 8047fe4:	e7f2      	b.n	8047fcc <__sinit+0xc>
 8047fe6:	bf00      	nop
 8047fe8:	08047f2d 	.word	0x08047f2d
 8047fec:	200038f0 	.word	0x200038f0

08047ff0 <_fwalk_sglue>:
 8047ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8047ff4:	4607      	mov	r7, r0
 8047ff6:	4688      	mov	r8, r1
 8047ff8:	4614      	mov	r4, r2
 8047ffa:	2600      	movs	r6, #0
 8047ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8048000:	f1b9 0901 	subs.w	r9, r9, #1
 8048004:	d505      	bpl.n	8048012 <_fwalk_sglue+0x22>
 8048006:	6824      	ldr	r4, [r4, #0]
 8048008:	2c00      	cmp	r4, #0
 804800a:	d1f7      	bne.n	8047ffc <_fwalk_sglue+0xc>
 804800c:	4630      	mov	r0, r6
 804800e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8048012:	89ab      	ldrh	r3, [r5, #12]
 8048014:	2b01      	cmp	r3, #1
 8048016:	d907      	bls.n	8048028 <_fwalk_sglue+0x38>
 8048018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804801c:	3301      	adds	r3, #1
 804801e:	d003      	beq.n	8048028 <_fwalk_sglue+0x38>
 8048020:	4629      	mov	r1, r5
 8048022:	4638      	mov	r0, r7
 8048024:	47c0      	blx	r8
 8048026:	4306      	orrs	r6, r0
 8048028:	3568      	adds	r5, #104	; 0x68
 804802a:	e7e9      	b.n	8048000 <_fwalk_sglue+0x10>

0804802c <siprintf>:
 804802c:	b40e      	push	{r1, r2, r3}
 804802e:	b500      	push	{lr}
 8048030:	b09c      	sub	sp, #112	; 0x70
 8048032:	ab1d      	add	r3, sp, #116	; 0x74
 8048034:	9002      	str	r0, [sp, #8]
 8048036:	9006      	str	r0, [sp, #24]
 8048038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804803c:	4809      	ldr	r0, [pc, #36]	; (8048064 <siprintf+0x38>)
 804803e:	9107      	str	r1, [sp, #28]
 8048040:	9104      	str	r1, [sp, #16]
 8048042:	4909      	ldr	r1, [pc, #36]	; (8048068 <siprintf+0x3c>)
 8048044:	f853 2b04 	ldr.w	r2, [r3], #4
 8048048:	9105      	str	r1, [sp, #20]
 804804a:	6800      	ldr	r0, [r0, #0]
 804804c:	9301      	str	r3, [sp, #4]
 804804e:	a902      	add	r1, sp, #8
 8048050:	f002 f8b2 	bl	804a1b8 <_svfiprintf_r>
 8048054:	9b02      	ldr	r3, [sp, #8]
 8048056:	2200      	movs	r2, #0
 8048058:	701a      	strb	r2, [r3, #0]
 804805a:	b01c      	add	sp, #112	; 0x70
 804805c:	f85d eb04 	ldr.w	lr, [sp], #4
 8048060:	b003      	add	sp, #12
 8048062:	4770      	bx	lr
 8048064:	200001f4 	.word	0x200001f4
 8048068:	ffff0208 	.word	0xffff0208

0804806c <__sread>:
 804806c:	b510      	push	{r4, lr}
 804806e:	460c      	mov	r4, r1
 8048070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8048074:	f000 f8de 	bl	8048234 <_read_r>
 8048078:	2800      	cmp	r0, #0
 804807a:	bfab      	itete	ge
 804807c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804807e:	89a3      	ldrhlt	r3, [r4, #12]
 8048080:	181b      	addge	r3, r3, r0
 8048082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8048086:	bfac      	ite	ge
 8048088:	6563      	strge	r3, [r4, #84]	; 0x54
 804808a:	81a3      	strhlt	r3, [r4, #12]
 804808c:	bd10      	pop	{r4, pc}

0804808e <__swrite>:
 804808e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8048092:	461f      	mov	r7, r3
 8048094:	898b      	ldrh	r3, [r1, #12]
 8048096:	05db      	lsls	r3, r3, #23
 8048098:	4605      	mov	r5, r0
 804809a:	460c      	mov	r4, r1
 804809c:	4616      	mov	r6, r2
 804809e:	d505      	bpl.n	80480ac <__swrite+0x1e>
 80480a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80480a4:	2302      	movs	r3, #2
 80480a6:	2200      	movs	r2, #0
 80480a8:	f000 f8b2 	bl	8048210 <_lseek_r>
 80480ac:	89a3      	ldrh	r3, [r4, #12]
 80480ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80480b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80480b6:	81a3      	strh	r3, [r4, #12]
 80480b8:	4632      	mov	r2, r6
 80480ba:	463b      	mov	r3, r7
 80480bc:	4628      	mov	r0, r5
 80480be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80480c2:	f000 b8d9 	b.w	8048278 <_write_r>

080480c6 <__sseek>:
 80480c6:	b510      	push	{r4, lr}
 80480c8:	460c      	mov	r4, r1
 80480ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80480ce:	f000 f89f 	bl	8048210 <_lseek_r>
 80480d2:	1c43      	adds	r3, r0, #1
 80480d4:	89a3      	ldrh	r3, [r4, #12]
 80480d6:	bf15      	itete	ne
 80480d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80480da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80480de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80480e2:	81a3      	strheq	r3, [r4, #12]
 80480e4:	bf18      	it	ne
 80480e6:	81a3      	strhne	r3, [r4, #12]
 80480e8:	bd10      	pop	{r4, pc}

080480ea <__sclose>:
 80480ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80480ee:	f000 b87f 	b.w	80481f0 <_close_r>

080480f2 <memcmp>:
 80480f2:	b510      	push	{r4, lr}
 80480f4:	3901      	subs	r1, #1
 80480f6:	4402      	add	r2, r0
 80480f8:	4290      	cmp	r0, r2
 80480fa:	d101      	bne.n	8048100 <memcmp+0xe>
 80480fc:	2000      	movs	r0, #0
 80480fe:	e005      	b.n	804810c <memcmp+0x1a>
 8048100:	7803      	ldrb	r3, [r0, #0]
 8048102:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8048106:	42a3      	cmp	r3, r4
 8048108:	d001      	beq.n	804810e <memcmp+0x1c>
 804810a:	1b18      	subs	r0, r3, r4
 804810c:	bd10      	pop	{r4, pc}
 804810e:	3001      	adds	r0, #1
 8048110:	e7f2      	b.n	80480f8 <memcmp+0x6>

08048112 <memmove>:
 8048112:	4288      	cmp	r0, r1
 8048114:	b510      	push	{r4, lr}
 8048116:	eb01 0402 	add.w	r4, r1, r2
 804811a:	d902      	bls.n	8048122 <memmove+0x10>
 804811c:	4284      	cmp	r4, r0
 804811e:	4623      	mov	r3, r4
 8048120:	d807      	bhi.n	8048132 <memmove+0x20>
 8048122:	1e43      	subs	r3, r0, #1
 8048124:	42a1      	cmp	r1, r4
 8048126:	d008      	beq.n	804813a <memmove+0x28>
 8048128:	f811 2b01 	ldrb.w	r2, [r1], #1
 804812c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8048130:	e7f8      	b.n	8048124 <memmove+0x12>
 8048132:	4402      	add	r2, r0
 8048134:	4601      	mov	r1, r0
 8048136:	428a      	cmp	r2, r1
 8048138:	d100      	bne.n	804813c <memmove+0x2a>
 804813a:	bd10      	pop	{r4, pc}
 804813c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8048140:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8048144:	e7f7      	b.n	8048136 <memmove+0x24>

08048146 <memset>:
 8048146:	4402      	add	r2, r0
 8048148:	4603      	mov	r3, r0
 804814a:	4293      	cmp	r3, r2
 804814c:	d100      	bne.n	8048150 <memset+0xa>
 804814e:	4770      	bx	lr
 8048150:	f803 1b01 	strb.w	r1, [r3], #1
 8048154:	e7f9      	b.n	804814a <memset+0x4>

08048156 <strchr>:
 8048156:	b2c9      	uxtb	r1, r1
 8048158:	4603      	mov	r3, r0
 804815a:	f810 2b01 	ldrb.w	r2, [r0], #1
 804815e:	b11a      	cbz	r2, 8048168 <strchr+0x12>
 8048160:	428a      	cmp	r2, r1
 8048162:	d1f9      	bne.n	8048158 <strchr+0x2>
 8048164:	4618      	mov	r0, r3
 8048166:	4770      	bx	lr
 8048168:	2900      	cmp	r1, #0
 804816a:	bf18      	it	ne
 804816c:	2300      	movne	r3, #0
 804816e:	e7f9      	b.n	8048164 <strchr+0xe>

08048170 <strncmp>:
 8048170:	b510      	push	{r4, lr}
 8048172:	b16a      	cbz	r2, 8048190 <strncmp+0x20>
 8048174:	3901      	subs	r1, #1
 8048176:	1884      	adds	r4, r0, r2
 8048178:	f810 2b01 	ldrb.w	r2, [r0], #1
 804817c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8048180:	429a      	cmp	r2, r3
 8048182:	d103      	bne.n	804818c <strncmp+0x1c>
 8048184:	42a0      	cmp	r0, r4
 8048186:	d001      	beq.n	804818c <strncmp+0x1c>
 8048188:	2a00      	cmp	r2, #0
 804818a:	d1f5      	bne.n	8048178 <strncmp+0x8>
 804818c:	1ad0      	subs	r0, r2, r3
 804818e:	bd10      	pop	{r4, pc}
 8048190:	4610      	mov	r0, r2
 8048192:	e7fc      	b.n	804818e <strncmp+0x1e>

08048194 <strncpy>:
 8048194:	b510      	push	{r4, lr}
 8048196:	3901      	subs	r1, #1
 8048198:	4603      	mov	r3, r0
 804819a:	b132      	cbz	r2, 80481aa <strncpy+0x16>
 804819c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80481a0:	f803 4b01 	strb.w	r4, [r3], #1
 80481a4:	3a01      	subs	r2, #1
 80481a6:	2c00      	cmp	r4, #0
 80481a8:	d1f7      	bne.n	804819a <strncpy+0x6>
 80481aa:	441a      	add	r2, r3
 80481ac:	2100      	movs	r1, #0
 80481ae:	4293      	cmp	r3, r2
 80481b0:	d100      	bne.n	80481b4 <strncpy+0x20>
 80481b2:	bd10      	pop	{r4, pc}
 80481b4:	f803 1b01 	strb.w	r1, [r3], #1
 80481b8:	e7f9      	b.n	80481ae <strncpy+0x1a>

080481ba <strstr>:
 80481ba:	780a      	ldrb	r2, [r1, #0]
 80481bc:	b570      	push	{r4, r5, r6, lr}
 80481be:	b96a      	cbnz	r2, 80481dc <strstr+0x22>
 80481c0:	bd70      	pop	{r4, r5, r6, pc}
 80481c2:	429a      	cmp	r2, r3
 80481c4:	d109      	bne.n	80481da <strstr+0x20>
 80481c6:	460c      	mov	r4, r1
 80481c8:	4605      	mov	r5, r0
 80481ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80481ce:	2b00      	cmp	r3, #0
 80481d0:	d0f6      	beq.n	80481c0 <strstr+0x6>
 80481d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80481d6:	429e      	cmp	r6, r3
 80481d8:	d0f7      	beq.n	80481ca <strstr+0x10>
 80481da:	3001      	adds	r0, #1
 80481dc:	7803      	ldrb	r3, [r0, #0]
 80481de:	2b00      	cmp	r3, #0
 80481e0:	d1ef      	bne.n	80481c2 <strstr+0x8>
 80481e2:	4618      	mov	r0, r3
 80481e4:	e7ec      	b.n	80481c0 <strstr+0x6>
	...

080481e8 <_localeconv_r>:
 80481e8:	4800      	ldr	r0, [pc, #0]	; (80481ec <_localeconv_r+0x4>)
 80481ea:	4770      	bx	lr
 80481ec:	2000012c 	.word	0x2000012c

080481f0 <_close_r>:
 80481f0:	b538      	push	{r3, r4, r5, lr}
 80481f2:	4d06      	ldr	r5, [pc, #24]	; (804820c <_close_r+0x1c>)
 80481f4:	2300      	movs	r3, #0
 80481f6:	4604      	mov	r4, r0
 80481f8:	4608      	mov	r0, r1
 80481fa:	602b      	str	r3, [r5, #0]
 80481fc:	f7fb fca7 	bl	8043b4e <_close>
 8048200:	1c43      	adds	r3, r0, #1
 8048202:	d102      	bne.n	804820a <_close_r+0x1a>
 8048204:	682b      	ldr	r3, [r5, #0]
 8048206:	b103      	cbz	r3, 804820a <_close_r+0x1a>
 8048208:	6023      	str	r3, [r4, #0]
 804820a:	bd38      	pop	{r3, r4, r5, pc}
 804820c:	200038f4 	.word	0x200038f4

08048210 <_lseek_r>:
 8048210:	b538      	push	{r3, r4, r5, lr}
 8048212:	4d07      	ldr	r5, [pc, #28]	; (8048230 <_lseek_r+0x20>)
 8048214:	4604      	mov	r4, r0
 8048216:	4608      	mov	r0, r1
 8048218:	4611      	mov	r1, r2
 804821a:	2200      	movs	r2, #0
 804821c:	602a      	str	r2, [r5, #0]
 804821e:	461a      	mov	r2, r3
 8048220:	f7fb fcbc 	bl	8043b9c <_lseek>
 8048224:	1c43      	adds	r3, r0, #1
 8048226:	d102      	bne.n	804822e <_lseek_r+0x1e>
 8048228:	682b      	ldr	r3, [r5, #0]
 804822a:	b103      	cbz	r3, 804822e <_lseek_r+0x1e>
 804822c:	6023      	str	r3, [r4, #0]
 804822e:	bd38      	pop	{r3, r4, r5, pc}
 8048230:	200038f4 	.word	0x200038f4

08048234 <_read_r>:
 8048234:	b538      	push	{r3, r4, r5, lr}
 8048236:	4d07      	ldr	r5, [pc, #28]	; (8048254 <_read_r+0x20>)
 8048238:	4604      	mov	r4, r0
 804823a:	4608      	mov	r0, r1
 804823c:	4611      	mov	r1, r2
 804823e:	2200      	movs	r2, #0
 8048240:	602a      	str	r2, [r5, #0]
 8048242:	461a      	mov	r2, r3
 8048244:	f7fb fc4a 	bl	8043adc <_read>
 8048248:	1c43      	adds	r3, r0, #1
 804824a:	d102      	bne.n	8048252 <_read_r+0x1e>
 804824c:	682b      	ldr	r3, [r5, #0]
 804824e:	b103      	cbz	r3, 8048252 <_read_r+0x1e>
 8048250:	6023      	str	r3, [r4, #0]
 8048252:	bd38      	pop	{r3, r4, r5, pc}
 8048254:	200038f4 	.word	0x200038f4

08048258 <_sbrk_r>:
 8048258:	b538      	push	{r3, r4, r5, lr}
 804825a:	4d06      	ldr	r5, [pc, #24]	; (8048274 <_sbrk_r+0x1c>)
 804825c:	2300      	movs	r3, #0
 804825e:	4604      	mov	r4, r0
 8048260:	4608      	mov	r0, r1
 8048262:	602b      	str	r3, [r5, #0]
 8048264:	f7fb fca8 	bl	8043bb8 <_sbrk>
 8048268:	1c43      	adds	r3, r0, #1
 804826a:	d102      	bne.n	8048272 <_sbrk_r+0x1a>
 804826c:	682b      	ldr	r3, [r5, #0]
 804826e:	b103      	cbz	r3, 8048272 <_sbrk_r+0x1a>
 8048270:	6023      	str	r3, [r4, #0]
 8048272:	bd38      	pop	{r3, r4, r5, pc}
 8048274:	200038f4 	.word	0x200038f4

08048278 <_write_r>:
 8048278:	b538      	push	{r3, r4, r5, lr}
 804827a:	4d07      	ldr	r5, [pc, #28]	; (8048298 <_write_r+0x20>)
 804827c:	4604      	mov	r4, r0
 804827e:	4608      	mov	r0, r1
 8048280:	4611      	mov	r1, r2
 8048282:	2200      	movs	r2, #0
 8048284:	602a      	str	r2, [r5, #0]
 8048286:	461a      	mov	r2, r3
 8048288:	f7fb fc45 	bl	8043b16 <_write>
 804828c:	1c43      	adds	r3, r0, #1
 804828e:	d102      	bne.n	8048296 <_write_r+0x1e>
 8048290:	682b      	ldr	r3, [r5, #0]
 8048292:	b103      	cbz	r3, 8048296 <_write_r+0x1e>
 8048294:	6023      	str	r3, [r4, #0]
 8048296:	bd38      	pop	{r3, r4, r5, pc}
 8048298:	200038f4 	.word	0x200038f4

0804829c <__errno>:
 804829c:	4b01      	ldr	r3, [pc, #4]	; (80482a4 <__errno+0x8>)
 804829e:	6818      	ldr	r0, [r3, #0]
 80482a0:	4770      	bx	lr
 80482a2:	bf00      	nop
 80482a4:	200001f4 	.word	0x200001f4

080482a8 <__libc_init_array>:
 80482a8:	b570      	push	{r4, r5, r6, lr}
 80482aa:	4d0d      	ldr	r5, [pc, #52]	; (80482e0 <__libc_init_array+0x38>)
 80482ac:	4c0d      	ldr	r4, [pc, #52]	; (80482e4 <__libc_init_array+0x3c>)
 80482ae:	1b64      	subs	r4, r4, r5
 80482b0:	10a4      	asrs	r4, r4, #2
 80482b2:	2600      	movs	r6, #0
 80482b4:	42a6      	cmp	r6, r4
 80482b6:	d109      	bne.n	80482cc <__libc_init_array+0x24>
 80482b8:	4d0b      	ldr	r5, [pc, #44]	; (80482e8 <__libc_init_array+0x40>)
 80482ba:	4c0c      	ldr	r4, [pc, #48]	; (80482ec <__libc_init_array+0x44>)
 80482bc:	f002 fc16 	bl	804aaec <_init>
 80482c0:	1b64      	subs	r4, r4, r5
 80482c2:	10a4      	asrs	r4, r4, #2
 80482c4:	2600      	movs	r6, #0
 80482c6:	42a6      	cmp	r6, r4
 80482c8:	d105      	bne.n	80482d6 <__libc_init_array+0x2e>
 80482ca:	bd70      	pop	{r4, r5, r6, pc}
 80482cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80482d0:	4798      	blx	r3
 80482d2:	3601      	adds	r6, #1
 80482d4:	e7ee      	b.n	80482b4 <__libc_init_array+0xc>
 80482d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80482da:	4798      	blx	r3
 80482dc:	3601      	adds	r6, #1
 80482de:	e7f2      	b.n	80482c6 <__libc_init_array+0x1e>
 80482e0:	0804b324 	.word	0x0804b324
 80482e4:	0804b324 	.word	0x0804b324
 80482e8:	0804b324 	.word	0x0804b324
 80482ec:	0804b328 	.word	0x0804b328

080482f0 <__retarget_lock_acquire_recursive>:
 80482f0:	4770      	bx	lr

080482f2 <__retarget_lock_release_recursive>:
 80482f2:	4770      	bx	lr

080482f4 <memcpy>:
 80482f4:	440a      	add	r2, r1
 80482f6:	4291      	cmp	r1, r2
 80482f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80482fc:	d100      	bne.n	8048300 <memcpy+0xc>
 80482fe:	4770      	bx	lr
 8048300:	b510      	push	{r4, lr}
 8048302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8048306:	f803 4f01 	strb.w	r4, [r3, #1]!
 804830a:	4291      	cmp	r1, r2
 804830c:	d1f9      	bne.n	8048302 <memcpy+0xe>
 804830e:	bd10      	pop	{r4, pc}

08048310 <nan>:
 8048310:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8048318 <nan+0x8>
 8048314:	4770      	bx	lr
 8048316:	bf00      	nop
 8048318:	00000000 	.word	0x00000000
 804831c:	7ff80000 	.word	0x7ff80000

08048320 <quorem>:
 8048320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048324:	6903      	ldr	r3, [r0, #16]
 8048326:	690c      	ldr	r4, [r1, #16]
 8048328:	42a3      	cmp	r3, r4
 804832a:	4607      	mov	r7, r0
 804832c:	db7e      	blt.n	804842c <quorem+0x10c>
 804832e:	3c01      	subs	r4, #1
 8048330:	f101 0814 	add.w	r8, r1, #20
 8048334:	f100 0514 	add.w	r5, r0, #20
 8048338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 804833c:	9301      	str	r3, [sp, #4]
 804833e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8048342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8048346:	3301      	adds	r3, #1
 8048348:	429a      	cmp	r2, r3
 804834a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 804834e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8048352:	fbb2 f6f3 	udiv	r6, r2, r3
 8048356:	d331      	bcc.n	80483bc <quorem+0x9c>
 8048358:	f04f 0e00 	mov.w	lr, #0
 804835c:	4640      	mov	r0, r8
 804835e:	46ac      	mov	ip, r5
 8048360:	46f2      	mov	sl, lr
 8048362:	f850 2b04 	ldr.w	r2, [r0], #4
 8048366:	b293      	uxth	r3, r2
 8048368:	fb06 e303 	mla	r3, r6, r3, lr
 804836c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8048370:	0c1a      	lsrs	r2, r3, #16
 8048372:	b29b      	uxth	r3, r3
 8048374:	ebaa 0303 	sub.w	r3, sl, r3
 8048378:	f8dc a000 	ldr.w	sl, [ip]
 804837c:	fa13 f38a 	uxtah	r3, r3, sl
 8048380:	fb06 220e 	mla	r2, r6, lr, r2
 8048384:	9300      	str	r3, [sp, #0]
 8048386:	9b00      	ldr	r3, [sp, #0]
 8048388:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 804838c:	b292      	uxth	r2, r2
 804838e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8048392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8048396:	f8bd 3000 	ldrh.w	r3, [sp]
 804839a:	4581      	cmp	r9, r0
 804839c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80483a0:	f84c 3b04 	str.w	r3, [ip], #4
 80483a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80483a8:	d2db      	bcs.n	8048362 <quorem+0x42>
 80483aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80483ae:	b92b      	cbnz	r3, 80483bc <quorem+0x9c>
 80483b0:	9b01      	ldr	r3, [sp, #4]
 80483b2:	3b04      	subs	r3, #4
 80483b4:	429d      	cmp	r5, r3
 80483b6:	461a      	mov	r2, r3
 80483b8:	d32c      	bcc.n	8048414 <quorem+0xf4>
 80483ba:	613c      	str	r4, [r7, #16]
 80483bc:	4638      	mov	r0, r7
 80483be:	f001 fca5 	bl	8049d0c <__mcmp>
 80483c2:	2800      	cmp	r0, #0
 80483c4:	db22      	blt.n	804840c <quorem+0xec>
 80483c6:	3601      	adds	r6, #1
 80483c8:	4629      	mov	r1, r5
 80483ca:	2000      	movs	r0, #0
 80483cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80483d0:	f8d1 c000 	ldr.w	ip, [r1]
 80483d4:	b293      	uxth	r3, r2
 80483d6:	1ac3      	subs	r3, r0, r3
 80483d8:	0c12      	lsrs	r2, r2, #16
 80483da:	fa13 f38c 	uxtah	r3, r3, ip
 80483de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80483e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80483e6:	b29b      	uxth	r3, r3
 80483e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80483ec:	45c1      	cmp	r9, r8
 80483ee:	f841 3b04 	str.w	r3, [r1], #4
 80483f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80483f6:	d2e9      	bcs.n	80483cc <quorem+0xac>
 80483f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80483fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8048400:	b922      	cbnz	r2, 804840c <quorem+0xec>
 8048402:	3b04      	subs	r3, #4
 8048404:	429d      	cmp	r5, r3
 8048406:	461a      	mov	r2, r3
 8048408:	d30a      	bcc.n	8048420 <quorem+0x100>
 804840a:	613c      	str	r4, [r7, #16]
 804840c:	4630      	mov	r0, r6
 804840e:	b003      	add	sp, #12
 8048410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8048414:	6812      	ldr	r2, [r2, #0]
 8048416:	3b04      	subs	r3, #4
 8048418:	2a00      	cmp	r2, #0
 804841a:	d1ce      	bne.n	80483ba <quorem+0x9a>
 804841c:	3c01      	subs	r4, #1
 804841e:	e7c9      	b.n	80483b4 <quorem+0x94>
 8048420:	6812      	ldr	r2, [r2, #0]
 8048422:	3b04      	subs	r3, #4
 8048424:	2a00      	cmp	r2, #0
 8048426:	d1f0      	bne.n	804840a <quorem+0xea>
 8048428:	3c01      	subs	r4, #1
 804842a:	e7eb      	b.n	8048404 <quorem+0xe4>
 804842c:	2000      	movs	r0, #0
 804842e:	e7ee      	b.n	804840e <quorem+0xee>

08048430 <_dtoa_r>:
 8048430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048434:	ed2d 8b04 	vpush	{d8-d9}
 8048438:	69c5      	ldr	r5, [r0, #28]
 804843a:	b093      	sub	sp, #76	; 0x4c
 804843c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8048440:	ec57 6b10 	vmov	r6, r7, d0
 8048444:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8048448:	9107      	str	r1, [sp, #28]
 804844a:	4604      	mov	r4, r0
 804844c:	920a      	str	r2, [sp, #40]	; 0x28
 804844e:	930d      	str	r3, [sp, #52]	; 0x34
 8048450:	b975      	cbnz	r5, 8048470 <_dtoa_r+0x40>
 8048452:	2010      	movs	r0, #16
 8048454:	f7fe f9c6 	bl	80467e4 <malloc>
 8048458:	4602      	mov	r2, r0
 804845a:	61e0      	str	r0, [r4, #28]
 804845c:	b920      	cbnz	r0, 8048468 <_dtoa_r+0x38>
 804845e:	4bae      	ldr	r3, [pc, #696]	; (8048718 <_dtoa_r+0x2e8>)
 8048460:	21ef      	movs	r1, #239	; 0xef
 8048462:	48ae      	ldr	r0, [pc, #696]	; (804871c <_dtoa_r+0x2ec>)
 8048464:	f002 f854 	bl	804a510 <__assert_func>
 8048468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 804846c:	6005      	str	r5, [r0, #0]
 804846e:	60c5      	str	r5, [r0, #12]
 8048470:	69e3      	ldr	r3, [r4, #28]
 8048472:	6819      	ldr	r1, [r3, #0]
 8048474:	b151      	cbz	r1, 804848c <_dtoa_r+0x5c>
 8048476:	685a      	ldr	r2, [r3, #4]
 8048478:	604a      	str	r2, [r1, #4]
 804847a:	2301      	movs	r3, #1
 804847c:	4093      	lsls	r3, r2
 804847e:	608b      	str	r3, [r1, #8]
 8048480:	4620      	mov	r0, r4
 8048482:	f001 f9bd 	bl	8049800 <_Bfree>
 8048486:	69e3      	ldr	r3, [r4, #28]
 8048488:	2200      	movs	r2, #0
 804848a:	601a      	str	r2, [r3, #0]
 804848c:	1e3b      	subs	r3, r7, #0
 804848e:	bfbb      	ittet	lt
 8048490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8048494:	9303      	strlt	r3, [sp, #12]
 8048496:	2300      	movge	r3, #0
 8048498:	2201      	movlt	r2, #1
 804849a:	bfac      	ite	ge
 804849c:	f8c8 3000 	strge.w	r3, [r8]
 80484a0:	f8c8 2000 	strlt.w	r2, [r8]
 80484a4:	4b9e      	ldr	r3, [pc, #632]	; (8048720 <_dtoa_r+0x2f0>)
 80484a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80484aa:	ea33 0308 	bics.w	r3, r3, r8
 80484ae:	d11b      	bne.n	80484e8 <_dtoa_r+0xb8>
 80484b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80484b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80484b6:	6013      	str	r3, [r2, #0]
 80484b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80484bc:	4333      	orrs	r3, r6
 80484be:	f000 8593 	beq.w	8048fe8 <_dtoa_r+0xbb8>
 80484c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80484c4:	b963      	cbnz	r3, 80484e0 <_dtoa_r+0xb0>
 80484c6:	4b97      	ldr	r3, [pc, #604]	; (8048724 <_dtoa_r+0x2f4>)
 80484c8:	e027      	b.n	804851a <_dtoa_r+0xea>
 80484ca:	4b97      	ldr	r3, [pc, #604]	; (8048728 <_dtoa_r+0x2f8>)
 80484cc:	9300      	str	r3, [sp, #0]
 80484ce:	3308      	adds	r3, #8
 80484d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80484d2:	6013      	str	r3, [r2, #0]
 80484d4:	9800      	ldr	r0, [sp, #0]
 80484d6:	b013      	add	sp, #76	; 0x4c
 80484d8:	ecbd 8b04 	vpop	{d8-d9}
 80484dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80484e0:	4b90      	ldr	r3, [pc, #576]	; (8048724 <_dtoa_r+0x2f4>)
 80484e2:	9300      	str	r3, [sp, #0]
 80484e4:	3303      	adds	r3, #3
 80484e6:	e7f3      	b.n	80484d0 <_dtoa_r+0xa0>
 80484e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80484ec:	2200      	movs	r2, #0
 80484ee:	ec51 0b17 	vmov	r0, r1, d7
 80484f2:	eeb0 8a47 	vmov.f32	s16, s14
 80484f6:	eef0 8a67 	vmov.f32	s17, s15
 80484fa:	2300      	movs	r3, #0
 80484fc:	f7f8 faf4 	bl	8040ae8 <__aeabi_dcmpeq>
 8048500:	4681      	mov	r9, r0
 8048502:	b160      	cbz	r0, 804851e <_dtoa_r+0xee>
 8048504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8048506:	2301      	movs	r3, #1
 8048508:	6013      	str	r3, [r2, #0]
 804850a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 804850c:	2b00      	cmp	r3, #0
 804850e:	f000 8568 	beq.w	8048fe2 <_dtoa_r+0xbb2>
 8048512:	4b86      	ldr	r3, [pc, #536]	; (804872c <_dtoa_r+0x2fc>)
 8048514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8048516:	6013      	str	r3, [r2, #0]
 8048518:	3b01      	subs	r3, #1
 804851a:	9300      	str	r3, [sp, #0]
 804851c:	e7da      	b.n	80484d4 <_dtoa_r+0xa4>
 804851e:	aa10      	add	r2, sp, #64	; 0x40
 8048520:	a911      	add	r1, sp, #68	; 0x44
 8048522:	4620      	mov	r0, r4
 8048524:	eeb0 0a48 	vmov.f32	s0, s16
 8048528:	eef0 0a68 	vmov.f32	s1, s17
 804852c:	f001 fd04 	bl	8049f38 <__d2b>
 8048530:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8048534:	4682      	mov	sl, r0
 8048536:	2d00      	cmp	r5, #0
 8048538:	d07f      	beq.n	804863a <_dtoa_r+0x20a>
 804853a:	ee18 3a90 	vmov	r3, s17
 804853e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8048542:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8048546:	ec51 0b18 	vmov	r0, r1, d8
 804854a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 804854e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8048552:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8048556:	4619      	mov	r1, r3
 8048558:	2200      	movs	r2, #0
 804855a:	4b75      	ldr	r3, [pc, #468]	; (8048730 <_dtoa_r+0x300>)
 804855c:	f7f7 fea4 	bl	80402a8 <__aeabi_dsub>
 8048560:	a367      	add	r3, pc, #412	; (adr r3, 8048700 <_dtoa_r+0x2d0>)
 8048562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048566:	f7f8 f857 	bl	8040618 <__aeabi_dmul>
 804856a:	a367      	add	r3, pc, #412	; (adr r3, 8048708 <_dtoa_r+0x2d8>)
 804856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048570:	f7f7 fe9c 	bl	80402ac <__adddf3>
 8048574:	4606      	mov	r6, r0
 8048576:	4628      	mov	r0, r5
 8048578:	460f      	mov	r7, r1
 804857a:	f7f7 ffe3 	bl	8040544 <__aeabi_i2d>
 804857e:	a364      	add	r3, pc, #400	; (adr r3, 8048710 <_dtoa_r+0x2e0>)
 8048580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8048584:	f7f8 f848 	bl	8040618 <__aeabi_dmul>
 8048588:	4602      	mov	r2, r0
 804858a:	460b      	mov	r3, r1
 804858c:	4630      	mov	r0, r6
 804858e:	4639      	mov	r1, r7
 8048590:	f7f7 fe8c 	bl	80402ac <__adddf3>
 8048594:	4606      	mov	r6, r0
 8048596:	460f      	mov	r7, r1
 8048598:	f7f8 faee 	bl	8040b78 <__aeabi_d2iz>
 804859c:	2200      	movs	r2, #0
 804859e:	4683      	mov	fp, r0
 80485a0:	2300      	movs	r3, #0
 80485a2:	4630      	mov	r0, r6
 80485a4:	4639      	mov	r1, r7
 80485a6:	f7f8 faa9 	bl	8040afc <__aeabi_dcmplt>
 80485aa:	b148      	cbz	r0, 80485c0 <_dtoa_r+0x190>
 80485ac:	4658      	mov	r0, fp
 80485ae:	f7f7 ffc9 	bl	8040544 <__aeabi_i2d>
 80485b2:	4632      	mov	r2, r6
 80485b4:	463b      	mov	r3, r7
 80485b6:	f7f8 fa97 	bl	8040ae8 <__aeabi_dcmpeq>
 80485ba:	b908      	cbnz	r0, 80485c0 <_dtoa_r+0x190>
 80485bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80485c0:	f1bb 0f16 	cmp.w	fp, #22
 80485c4:	d857      	bhi.n	8048676 <_dtoa_r+0x246>
 80485c6:	4b5b      	ldr	r3, [pc, #364]	; (8048734 <_dtoa_r+0x304>)
 80485c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80485cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80485d0:	ec51 0b18 	vmov	r0, r1, d8
 80485d4:	f7f8 fa92 	bl	8040afc <__aeabi_dcmplt>
 80485d8:	2800      	cmp	r0, #0
 80485da:	d04e      	beq.n	804867a <_dtoa_r+0x24a>
 80485dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80485e0:	2300      	movs	r3, #0
 80485e2:	930c      	str	r3, [sp, #48]	; 0x30
 80485e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80485e6:	1b5b      	subs	r3, r3, r5
 80485e8:	1e5a      	subs	r2, r3, #1
 80485ea:	bf45      	ittet	mi
 80485ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80485f0:	9305      	strmi	r3, [sp, #20]
 80485f2:	2300      	movpl	r3, #0
 80485f4:	2300      	movmi	r3, #0
 80485f6:	9206      	str	r2, [sp, #24]
 80485f8:	bf54      	ite	pl
 80485fa:	9305      	strpl	r3, [sp, #20]
 80485fc:	9306      	strmi	r3, [sp, #24]
 80485fe:	f1bb 0f00 	cmp.w	fp, #0
 8048602:	db3c      	blt.n	804867e <_dtoa_r+0x24e>
 8048604:	9b06      	ldr	r3, [sp, #24]
 8048606:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 804860a:	445b      	add	r3, fp
 804860c:	9306      	str	r3, [sp, #24]
 804860e:	2300      	movs	r3, #0
 8048610:	9308      	str	r3, [sp, #32]
 8048612:	9b07      	ldr	r3, [sp, #28]
 8048614:	2b09      	cmp	r3, #9
 8048616:	d868      	bhi.n	80486ea <_dtoa_r+0x2ba>
 8048618:	2b05      	cmp	r3, #5
 804861a:	bfc4      	itt	gt
 804861c:	3b04      	subgt	r3, #4
 804861e:	9307      	strgt	r3, [sp, #28]
 8048620:	9b07      	ldr	r3, [sp, #28]
 8048622:	f1a3 0302 	sub.w	r3, r3, #2
 8048626:	bfcc      	ite	gt
 8048628:	2500      	movgt	r5, #0
 804862a:	2501      	movle	r5, #1
 804862c:	2b03      	cmp	r3, #3
 804862e:	f200 8085 	bhi.w	804873c <_dtoa_r+0x30c>
 8048632:	e8df f003 	tbb	[pc, r3]
 8048636:	3b2e      	.short	0x3b2e
 8048638:	5839      	.short	0x5839
 804863a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 804863e:	441d      	add	r5, r3
 8048640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8048644:	2b20      	cmp	r3, #32
 8048646:	bfc1      	itttt	gt
 8048648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 804864c:	fa08 f803 	lslgt.w	r8, r8, r3
 8048650:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8048654:	fa26 f303 	lsrgt.w	r3, r6, r3
 8048658:	bfd6      	itet	le
 804865a:	f1c3 0320 	rsble	r3, r3, #32
 804865e:	ea48 0003 	orrgt.w	r0, r8, r3
 8048662:	fa06 f003 	lslle.w	r0, r6, r3
 8048666:	f7f7 ff5d 	bl	8040524 <__aeabi_ui2d>
 804866a:	2201      	movs	r2, #1
 804866c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8048670:	3d01      	subs	r5, #1
 8048672:	920e      	str	r2, [sp, #56]	; 0x38
 8048674:	e76f      	b.n	8048556 <_dtoa_r+0x126>
 8048676:	2301      	movs	r3, #1
 8048678:	e7b3      	b.n	80485e2 <_dtoa_r+0x1b2>
 804867a:	900c      	str	r0, [sp, #48]	; 0x30
 804867c:	e7b2      	b.n	80485e4 <_dtoa_r+0x1b4>
 804867e:	9b05      	ldr	r3, [sp, #20]
 8048680:	eba3 030b 	sub.w	r3, r3, fp
 8048684:	9305      	str	r3, [sp, #20]
 8048686:	f1cb 0300 	rsb	r3, fp, #0
 804868a:	9308      	str	r3, [sp, #32]
 804868c:	2300      	movs	r3, #0
 804868e:	930b      	str	r3, [sp, #44]	; 0x2c
 8048690:	e7bf      	b.n	8048612 <_dtoa_r+0x1e2>
 8048692:	2300      	movs	r3, #0
 8048694:	9309      	str	r3, [sp, #36]	; 0x24
 8048696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048698:	2b00      	cmp	r3, #0
 804869a:	dc52      	bgt.n	8048742 <_dtoa_r+0x312>
 804869c:	2301      	movs	r3, #1
 804869e:	9301      	str	r3, [sp, #4]
 80486a0:	9304      	str	r3, [sp, #16]
 80486a2:	461a      	mov	r2, r3
 80486a4:	920a      	str	r2, [sp, #40]	; 0x28
 80486a6:	e00b      	b.n	80486c0 <_dtoa_r+0x290>
 80486a8:	2301      	movs	r3, #1
 80486aa:	e7f3      	b.n	8048694 <_dtoa_r+0x264>
 80486ac:	2300      	movs	r3, #0
 80486ae:	9309      	str	r3, [sp, #36]	; 0x24
 80486b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80486b2:	445b      	add	r3, fp
 80486b4:	9301      	str	r3, [sp, #4]
 80486b6:	3301      	adds	r3, #1
 80486b8:	2b01      	cmp	r3, #1
 80486ba:	9304      	str	r3, [sp, #16]
 80486bc:	bfb8      	it	lt
 80486be:	2301      	movlt	r3, #1
 80486c0:	69e0      	ldr	r0, [r4, #28]
 80486c2:	2100      	movs	r1, #0
 80486c4:	2204      	movs	r2, #4
 80486c6:	f102 0614 	add.w	r6, r2, #20
 80486ca:	429e      	cmp	r6, r3
 80486cc:	d93d      	bls.n	804874a <_dtoa_r+0x31a>
 80486ce:	6041      	str	r1, [r0, #4]
 80486d0:	4620      	mov	r0, r4
 80486d2:	f001 f855 	bl	8049780 <_Balloc>
 80486d6:	9000      	str	r0, [sp, #0]
 80486d8:	2800      	cmp	r0, #0
 80486da:	d139      	bne.n	8048750 <_dtoa_r+0x320>
 80486dc:	4b16      	ldr	r3, [pc, #88]	; (8048738 <_dtoa_r+0x308>)
 80486de:	4602      	mov	r2, r0
 80486e0:	f240 11af 	movw	r1, #431	; 0x1af
 80486e4:	e6bd      	b.n	8048462 <_dtoa_r+0x32>
 80486e6:	2301      	movs	r3, #1
 80486e8:	e7e1      	b.n	80486ae <_dtoa_r+0x27e>
 80486ea:	2501      	movs	r5, #1
 80486ec:	2300      	movs	r3, #0
 80486ee:	9307      	str	r3, [sp, #28]
 80486f0:	9509      	str	r5, [sp, #36]	; 0x24
 80486f2:	f04f 33ff 	mov.w	r3, #4294967295
 80486f6:	9301      	str	r3, [sp, #4]
 80486f8:	9304      	str	r3, [sp, #16]
 80486fa:	2200      	movs	r2, #0
 80486fc:	2312      	movs	r3, #18
 80486fe:	e7d1      	b.n	80486a4 <_dtoa_r+0x274>
 8048700:	636f4361 	.word	0x636f4361
 8048704:	3fd287a7 	.word	0x3fd287a7
 8048708:	8b60c8b3 	.word	0x8b60c8b3
 804870c:	3fc68a28 	.word	0x3fc68a28
 8048710:	509f79fb 	.word	0x509f79fb
 8048714:	3fd34413 	.word	0x3fd34413
 8048718:	0804b092 	.word	0x0804b092
 804871c:	0804b0a9 	.word	0x0804b0a9
 8048720:	7ff00000 	.word	0x7ff00000
 8048724:	0804b08e 	.word	0x0804b08e
 8048728:	0804b085 	.word	0x0804b085
 804872c:	0804b05a 	.word	0x0804b05a
 8048730:	3ff80000 	.word	0x3ff80000
 8048734:	0804b1f8 	.word	0x0804b1f8
 8048738:	0804b101 	.word	0x0804b101
 804873c:	2301      	movs	r3, #1
 804873e:	9309      	str	r3, [sp, #36]	; 0x24
 8048740:	e7d7      	b.n	80486f2 <_dtoa_r+0x2c2>
 8048742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048744:	9301      	str	r3, [sp, #4]
 8048746:	9304      	str	r3, [sp, #16]
 8048748:	e7ba      	b.n	80486c0 <_dtoa_r+0x290>
 804874a:	3101      	adds	r1, #1
 804874c:	0052      	lsls	r2, r2, #1
 804874e:	e7ba      	b.n	80486c6 <_dtoa_r+0x296>
 8048750:	69e3      	ldr	r3, [r4, #28]
 8048752:	9a00      	ldr	r2, [sp, #0]
 8048754:	601a      	str	r2, [r3, #0]
 8048756:	9b04      	ldr	r3, [sp, #16]
 8048758:	2b0e      	cmp	r3, #14
 804875a:	f200 80a8 	bhi.w	80488ae <_dtoa_r+0x47e>
 804875e:	2d00      	cmp	r5, #0
 8048760:	f000 80a5 	beq.w	80488ae <_dtoa_r+0x47e>
 8048764:	f1bb 0f00 	cmp.w	fp, #0
 8048768:	dd38      	ble.n	80487dc <_dtoa_r+0x3ac>
 804876a:	4bc0      	ldr	r3, [pc, #768]	; (8048a6c <_dtoa_r+0x63c>)
 804876c:	f00b 020f 	and.w	r2, fp, #15
 8048770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8048774:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8048778:	e9d3 6700 	ldrd	r6, r7, [r3]
 804877c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8048780:	d019      	beq.n	80487b6 <_dtoa_r+0x386>
 8048782:	4bbb      	ldr	r3, [pc, #748]	; (8048a70 <_dtoa_r+0x640>)
 8048784:	ec51 0b18 	vmov	r0, r1, d8
 8048788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 804878c:	f7f8 f86e 	bl	804086c <__aeabi_ddiv>
 8048790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8048794:	f008 080f 	and.w	r8, r8, #15
 8048798:	2503      	movs	r5, #3
 804879a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8048a70 <_dtoa_r+0x640>
 804879e:	f1b8 0f00 	cmp.w	r8, #0
 80487a2:	d10a      	bne.n	80487ba <_dtoa_r+0x38a>
 80487a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80487a8:	4632      	mov	r2, r6
 80487aa:	463b      	mov	r3, r7
 80487ac:	f7f8 f85e 	bl	804086c <__aeabi_ddiv>
 80487b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80487b4:	e02b      	b.n	804880e <_dtoa_r+0x3de>
 80487b6:	2502      	movs	r5, #2
 80487b8:	e7ef      	b.n	804879a <_dtoa_r+0x36a>
 80487ba:	f018 0f01 	tst.w	r8, #1
 80487be:	d008      	beq.n	80487d2 <_dtoa_r+0x3a2>
 80487c0:	4630      	mov	r0, r6
 80487c2:	4639      	mov	r1, r7
 80487c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80487c8:	f7f7 ff26 	bl	8040618 <__aeabi_dmul>
 80487cc:	3501      	adds	r5, #1
 80487ce:	4606      	mov	r6, r0
 80487d0:	460f      	mov	r7, r1
 80487d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80487d6:	f109 0908 	add.w	r9, r9, #8
 80487da:	e7e0      	b.n	804879e <_dtoa_r+0x36e>
 80487dc:	f000 809f 	beq.w	804891e <_dtoa_r+0x4ee>
 80487e0:	f1cb 0600 	rsb	r6, fp, #0
 80487e4:	4ba1      	ldr	r3, [pc, #644]	; (8048a6c <_dtoa_r+0x63c>)
 80487e6:	4fa2      	ldr	r7, [pc, #648]	; (8048a70 <_dtoa_r+0x640>)
 80487e8:	f006 020f 	and.w	r2, r6, #15
 80487ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80487f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80487f4:	ec51 0b18 	vmov	r0, r1, d8
 80487f8:	f7f7 ff0e 	bl	8040618 <__aeabi_dmul>
 80487fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8048800:	1136      	asrs	r6, r6, #4
 8048802:	2300      	movs	r3, #0
 8048804:	2502      	movs	r5, #2
 8048806:	2e00      	cmp	r6, #0
 8048808:	d17e      	bne.n	8048908 <_dtoa_r+0x4d8>
 804880a:	2b00      	cmp	r3, #0
 804880c:	d1d0      	bne.n	80487b0 <_dtoa_r+0x380>
 804880e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8048810:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8048814:	2b00      	cmp	r3, #0
 8048816:	f000 8084 	beq.w	8048922 <_dtoa_r+0x4f2>
 804881a:	4b96      	ldr	r3, [pc, #600]	; (8048a74 <_dtoa_r+0x644>)
 804881c:	2200      	movs	r2, #0
 804881e:	4640      	mov	r0, r8
 8048820:	4649      	mov	r1, r9
 8048822:	f7f8 f96b 	bl	8040afc <__aeabi_dcmplt>
 8048826:	2800      	cmp	r0, #0
 8048828:	d07b      	beq.n	8048922 <_dtoa_r+0x4f2>
 804882a:	9b04      	ldr	r3, [sp, #16]
 804882c:	2b00      	cmp	r3, #0
 804882e:	d078      	beq.n	8048922 <_dtoa_r+0x4f2>
 8048830:	9b01      	ldr	r3, [sp, #4]
 8048832:	2b00      	cmp	r3, #0
 8048834:	dd39      	ble.n	80488aa <_dtoa_r+0x47a>
 8048836:	4b90      	ldr	r3, [pc, #576]	; (8048a78 <_dtoa_r+0x648>)
 8048838:	2200      	movs	r2, #0
 804883a:	4640      	mov	r0, r8
 804883c:	4649      	mov	r1, r9
 804883e:	f7f7 feeb 	bl	8040618 <__aeabi_dmul>
 8048842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8048846:	9e01      	ldr	r6, [sp, #4]
 8048848:	f10b 37ff 	add.w	r7, fp, #4294967295
 804884c:	3501      	adds	r5, #1
 804884e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8048852:	4628      	mov	r0, r5
 8048854:	f7f7 fe76 	bl	8040544 <__aeabi_i2d>
 8048858:	4642      	mov	r2, r8
 804885a:	464b      	mov	r3, r9
 804885c:	f7f7 fedc 	bl	8040618 <__aeabi_dmul>
 8048860:	4b86      	ldr	r3, [pc, #536]	; (8048a7c <_dtoa_r+0x64c>)
 8048862:	2200      	movs	r2, #0
 8048864:	f7f7 fd22 	bl	80402ac <__adddf3>
 8048868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 804886c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8048870:	9303      	str	r3, [sp, #12]
 8048872:	2e00      	cmp	r6, #0
 8048874:	d158      	bne.n	8048928 <_dtoa_r+0x4f8>
 8048876:	4b82      	ldr	r3, [pc, #520]	; (8048a80 <_dtoa_r+0x650>)
 8048878:	2200      	movs	r2, #0
 804887a:	4640      	mov	r0, r8
 804887c:	4649      	mov	r1, r9
 804887e:	f7f7 fd13 	bl	80402a8 <__aeabi_dsub>
 8048882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8048886:	4680      	mov	r8, r0
 8048888:	4689      	mov	r9, r1
 804888a:	f7f8 f955 	bl	8040b38 <__aeabi_dcmpgt>
 804888e:	2800      	cmp	r0, #0
 8048890:	f040 8296 	bne.w	8048dc0 <_dtoa_r+0x990>
 8048894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8048898:	4640      	mov	r0, r8
 804889a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 804889e:	4649      	mov	r1, r9
 80488a0:	f7f8 f92c 	bl	8040afc <__aeabi_dcmplt>
 80488a4:	2800      	cmp	r0, #0
 80488a6:	f040 8289 	bne.w	8048dbc <_dtoa_r+0x98c>
 80488aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80488ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80488b0:	2b00      	cmp	r3, #0
 80488b2:	f2c0 814e 	blt.w	8048b52 <_dtoa_r+0x722>
 80488b6:	f1bb 0f0e 	cmp.w	fp, #14
 80488ba:	f300 814a 	bgt.w	8048b52 <_dtoa_r+0x722>
 80488be:	4b6b      	ldr	r3, [pc, #428]	; (8048a6c <_dtoa_r+0x63c>)
 80488c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80488c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80488c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80488ca:	2b00      	cmp	r3, #0
 80488cc:	f280 80dc 	bge.w	8048a88 <_dtoa_r+0x658>
 80488d0:	9b04      	ldr	r3, [sp, #16]
 80488d2:	2b00      	cmp	r3, #0
 80488d4:	f300 80d8 	bgt.w	8048a88 <_dtoa_r+0x658>
 80488d8:	f040 826f 	bne.w	8048dba <_dtoa_r+0x98a>
 80488dc:	4b68      	ldr	r3, [pc, #416]	; (8048a80 <_dtoa_r+0x650>)
 80488de:	2200      	movs	r2, #0
 80488e0:	4640      	mov	r0, r8
 80488e2:	4649      	mov	r1, r9
 80488e4:	f7f7 fe98 	bl	8040618 <__aeabi_dmul>
 80488e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80488ec:	f7f8 f91a 	bl	8040b24 <__aeabi_dcmpge>
 80488f0:	9e04      	ldr	r6, [sp, #16]
 80488f2:	4637      	mov	r7, r6
 80488f4:	2800      	cmp	r0, #0
 80488f6:	f040 8245 	bne.w	8048d84 <_dtoa_r+0x954>
 80488fa:	9d00      	ldr	r5, [sp, #0]
 80488fc:	2331      	movs	r3, #49	; 0x31
 80488fe:	f805 3b01 	strb.w	r3, [r5], #1
 8048902:	f10b 0b01 	add.w	fp, fp, #1
 8048906:	e241      	b.n	8048d8c <_dtoa_r+0x95c>
 8048908:	07f2      	lsls	r2, r6, #31
 804890a:	d505      	bpl.n	8048918 <_dtoa_r+0x4e8>
 804890c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8048910:	f7f7 fe82 	bl	8040618 <__aeabi_dmul>
 8048914:	3501      	adds	r5, #1
 8048916:	2301      	movs	r3, #1
 8048918:	1076      	asrs	r6, r6, #1
 804891a:	3708      	adds	r7, #8
 804891c:	e773      	b.n	8048806 <_dtoa_r+0x3d6>
 804891e:	2502      	movs	r5, #2
 8048920:	e775      	b.n	804880e <_dtoa_r+0x3de>
 8048922:	9e04      	ldr	r6, [sp, #16]
 8048924:	465f      	mov	r7, fp
 8048926:	e792      	b.n	804884e <_dtoa_r+0x41e>
 8048928:	9900      	ldr	r1, [sp, #0]
 804892a:	4b50      	ldr	r3, [pc, #320]	; (8048a6c <_dtoa_r+0x63c>)
 804892c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8048930:	4431      	add	r1, r6
 8048932:	9102      	str	r1, [sp, #8]
 8048934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8048936:	eeb0 9a47 	vmov.f32	s18, s14
 804893a:	eef0 9a67 	vmov.f32	s19, s15
 804893e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8048942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8048946:	2900      	cmp	r1, #0
 8048948:	d044      	beq.n	80489d4 <_dtoa_r+0x5a4>
 804894a:	494e      	ldr	r1, [pc, #312]	; (8048a84 <_dtoa_r+0x654>)
 804894c:	2000      	movs	r0, #0
 804894e:	f7f7 ff8d 	bl	804086c <__aeabi_ddiv>
 8048952:	ec53 2b19 	vmov	r2, r3, d9
 8048956:	f7f7 fca7 	bl	80402a8 <__aeabi_dsub>
 804895a:	9d00      	ldr	r5, [sp, #0]
 804895c:	ec41 0b19 	vmov	d9, r0, r1
 8048960:	4649      	mov	r1, r9
 8048962:	4640      	mov	r0, r8
 8048964:	f7f8 f908 	bl	8040b78 <__aeabi_d2iz>
 8048968:	4606      	mov	r6, r0
 804896a:	f7f7 fdeb 	bl	8040544 <__aeabi_i2d>
 804896e:	4602      	mov	r2, r0
 8048970:	460b      	mov	r3, r1
 8048972:	4640      	mov	r0, r8
 8048974:	4649      	mov	r1, r9
 8048976:	f7f7 fc97 	bl	80402a8 <__aeabi_dsub>
 804897a:	3630      	adds	r6, #48	; 0x30
 804897c:	f805 6b01 	strb.w	r6, [r5], #1
 8048980:	ec53 2b19 	vmov	r2, r3, d9
 8048984:	4680      	mov	r8, r0
 8048986:	4689      	mov	r9, r1
 8048988:	f7f8 f8b8 	bl	8040afc <__aeabi_dcmplt>
 804898c:	2800      	cmp	r0, #0
 804898e:	d164      	bne.n	8048a5a <_dtoa_r+0x62a>
 8048990:	4642      	mov	r2, r8
 8048992:	464b      	mov	r3, r9
 8048994:	4937      	ldr	r1, [pc, #220]	; (8048a74 <_dtoa_r+0x644>)
 8048996:	2000      	movs	r0, #0
 8048998:	f7f7 fc86 	bl	80402a8 <__aeabi_dsub>
 804899c:	ec53 2b19 	vmov	r2, r3, d9
 80489a0:	f7f8 f8ac 	bl	8040afc <__aeabi_dcmplt>
 80489a4:	2800      	cmp	r0, #0
 80489a6:	f040 80b6 	bne.w	8048b16 <_dtoa_r+0x6e6>
 80489aa:	9b02      	ldr	r3, [sp, #8]
 80489ac:	429d      	cmp	r5, r3
 80489ae:	f43f af7c 	beq.w	80488aa <_dtoa_r+0x47a>
 80489b2:	4b31      	ldr	r3, [pc, #196]	; (8048a78 <_dtoa_r+0x648>)
 80489b4:	ec51 0b19 	vmov	r0, r1, d9
 80489b8:	2200      	movs	r2, #0
 80489ba:	f7f7 fe2d 	bl	8040618 <__aeabi_dmul>
 80489be:	4b2e      	ldr	r3, [pc, #184]	; (8048a78 <_dtoa_r+0x648>)
 80489c0:	ec41 0b19 	vmov	d9, r0, r1
 80489c4:	2200      	movs	r2, #0
 80489c6:	4640      	mov	r0, r8
 80489c8:	4649      	mov	r1, r9
 80489ca:	f7f7 fe25 	bl	8040618 <__aeabi_dmul>
 80489ce:	4680      	mov	r8, r0
 80489d0:	4689      	mov	r9, r1
 80489d2:	e7c5      	b.n	8048960 <_dtoa_r+0x530>
 80489d4:	ec51 0b17 	vmov	r0, r1, d7
 80489d8:	f7f7 fe1e 	bl	8040618 <__aeabi_dmul>
 80489dc:	9b02      	ldr	r3, [sp, #8]
 80489de:	9d00      	ldr	r5, [sp, #0]
 80489e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80489e2:	ec41 0b19 	vmov	d9, r0, r1
 80489e6:	4649      	mov	r1, r9
 80489e8:	4640      	mov	r0, r8
 80489ea:	f7f8 f8c5 	bl	8040b78 <__aeabi_d2iz>
 80489ee:	4606      	mov	r6, r0
 80489f0:	f7f7 fda8 	bl	8040544 <__aeabi_i2d>
 80489f4:	3630      	adds	r6, #48	; 0x30
 80489f6:	4602      	mov	r2, r0
 80489f8:	460b      	mov	r3, r1
 80489fa:	4640      	mov	r0, r8
 80489fc:	4649      	mov	r1, r9
 80489fe:	f7f7 fc53 	bl	80402a8 <__aeabi_dsub>
 8048a02:	f805 6b01 	strb.w	r6, [r5], #1
 8048a06:	9b02      	ldr	r3, [sp, #8]
 8048a08:	429d      	cmp	r5, r3
 8048a0a:	4680      	mov	r8, r0
 8048a0c:	4689      	mov	r9, r1
 8048a0e:	f04f 0200 	mov.w	r2, #0
 8048a12:	d124      	bne.n	8048a5e <_dtoa_r+0x62e>
 8048a14:	4b1b      	ldr	r3, [pc, #108]	; (8048a84 <_dtoa_r+0x654>)
 8048a16:	ec51 0b19 	vmov	r0, r1, d9
 8048a1a:	f7f7 fc47 	bl	80402ac <__adddf3>
 8048a1e:	4602      	mov	r2, r0
 8048a20:	460b      	mov	r3, r1
 8048a22:	4640      	mov	r0, r8
 8048a24:	4649      	mov	r1, r9
 8048a26:	f7f8 f887 	bl	8040b38 <__aeabi_dcmpgt>
 8048a2a:	2800      	cmp	r0, #0
 8048a2c:	d173      	bne.n	8048b16 <_dtoa_r+0x6e6>
 8048a2e:	ec53 2b19 	vmov	r2, r3, d9
 8048a32:	4914      	ldr	r1, [pc, #80]	; (8048a84 <_dtoa_r+0x654>)
 8048a34:	2000      	movs	r0, #0
 8048a36:	f7f7 fc37 	bl	80402a8 <__aeabi_dsub>
 8048a3a:	4602      	mov	r2, r0
 8048a3c:	460b      	mov	r3, r1
 8048a3e:	4640      	mov	r0, r8
 8048a40:	4649      	mov	r1, r9
 8048a42:	f7f8 f85b 	bl	8040afc <__aeabi_dcmplt>
 8048a46:	2800      	cmp	r0, #0
 8048a48:	f43f af2f 	beq.w	80488aa <_dtoa_r+0x47a>
 8048a4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8048a4e:	1e6b      	subs	r3, r5, #1
 8048a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8048a52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8048a56:	2b30      	cmp	r3, #48	; 0x30
 8048a58:	d0f8      	beq.n	8048a4c <_dtoa_r+0x61c>
 8048a5a:	46bb      	mov	fp, r7
 8048a5c:	e04a      	b.n	8048af4 <_dtoa_r+0x6c4>
 8048a5e:	4b06      	ldr	r3, [pc, #24]	; (8048a78 <_dtoa_r+0x648>)
 8048a60:	f7f7 fdda 	bl	8040618 <__aeabi_dmul>
 8048a64:	4680      	mov	r8, r0
 8048a66:	4689      	mov	r9, r1
 8048a68:	e7bd      	b.n	80489e6 <_dtoa_r+0x5b6>
 8048a6a:	bf00      	nop
 8048a6c:	0804b1f8 	.word	0x0804b1f8
 8048a70:	0804b1d0 	.word	0x0804b1d0
 8048a74:	3ff00000 	.word	0x3ff00000
 8048a78:	40240000 	.word	0x40240000
 8048a7c:	401c0000 	.word	0x401c0000
 8048a80:	40140000 	.word	0x40140000
 8048a84:	3fe00000 	.word	0x3fe00000
 8048a88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8048a8c:	9d00      	ldr	r5, [sp, #0]
 8048a8e:	4642      	mov	r2, r8
 8048a90:	464b      	mov	r3, r9
 8048a92:	4630      	mov	r0, r6
 8048a94:	4639      	mov	r1, r7
 8048a96:	f7f7 fee9 	bl	804086c <__aeabi_ddiv>
 8048a9a:	f7f8 f86d 	bl	8040b78 <__aeabi_d2iz>
 8048a9e:	9001      	str	r0, [sp, #4]
 8048aa0:	f7f7 fd50 	bl	8040544 <__aeabi_i2d>
 8048aa4:	4642      	mov	r2, r8
 8048aa6:	464b      	mov	r3, r9
 8048aa8:	f7f7 fdb6 	bl	8040618 <__aeabi_dmul>
 8048aac:	4602      	mov	r2, r0
 8048aae:	460b      	mov	r3, r1
 8048ab0:	4630      	mov	r0, r6
 8048ab2:	4639      	mov	r1, r7
 8048ab4:	f7f7 fbf8 	bl	80402a8 <__aeabi_dsub>
 8048ab8:	9e01      	ldr	r6, [sp, #4]
 8048aba:	9f04      	ldr	r7, [sp, #16]
 8048abc:	3630      	adds	r6, #48	; 0x30
 8048abe:	f805 6b01 	strb.w	r6, [r5], #1
 8048ac2:	9e00      	ldr	r6, [sp, #0]
 8048ac4:	1bae      	subs	r6, r5, r6
 8048ac6:	42b7      	cmp	r7, r6
 8048ac8:	4602      	mov	r2, r0
 8048aca:	460b      	mov	r3, r1
 8048acc:	d134      	bne.n	8048b38 <_dtoa_r+0x708>
 8048ace:	f7f7 fbed 	bl	80402ac <__adddf3>
 8048ad2:	4642      	mov	r2, r8
 8048ad4:	464b      	mov	r3, r9
 8048ad6:	4606      	mov	r6, r0
 8048ad8:	460f      	mov	r7, r1
 8048ada:	f7f8 f82d 	bl	8040b38 <__aeabi_dcmpgt>
 8048ade:	b9c8      	cbnz	r0, 8048b14 <_dtoa_r+0x6e4>
 8048ae0:	4642      	mov	r2, r8
 8048ae2:	464b      	mov	r3, r9
 8048ae4:	4630      	mov	r0, r6
 8048ae6:	4639      	mov	r1, r7
 8048ae8:	f7f7 fffe 	bl	8040ae8 <__aeabi_dcmpeq>
 8048aec:	b110      	cbz	r0, 8048af4 <_dtoa_r+0x6c4>
 8048aee:	9b01      	ldr	r3, [sp, #4]
 8048af0:	07db      	lsls	r3, r3, #31
 8048af2:	d40f      	bmi.n	8048b14 <_dtoa_r+0x6e4>
 8048af4:	4651      	mov	r1, sl
 8048af6:	4620      	mov	r0, r4
 8048af8:	f000 fe82 	bl	8049800 <_Bfree>
 8048afc:	2300      	movs	r3, #0
 8048afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8048b00:	702b      	strb	r3, [r5, #0]
 8048b02:	f10b 0301 	add.w	r3, fp, #1
 8048b06:	6013      	str	r3, [r2, #0]
 8048b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8048b0a:	2b00      	cmp	r3, #0
 8048b0c:	f43f ace2 	beq.w	80484d4 <_dtoa_r+0xa4>
 8048b10:	601d      	str	r5, [r3, #0]
 8048b12:	e4df      	b.n	80484d4 <_dtoa_r+0xa4>
 8048b14:	465f      	mov	r7, fp
 8048b16:	462b      	mov	r3, r5
 8048b18:	461d      	mov	r5, r3
 8048b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8048b1e:	2a39      	cmp	r2, #57	; 0x39
 8048b20:	d106      	bne.n	8048b30 <_dtoa_r+0x700>
 8048b22:	9a00      	ldr	r2, [sp, #0]
 8048b24:	429a      	cmp	r2, r3
 8048b26:	d1f7      	bne.n	8048b18 <_dtoa_r+0x6e8>
 8048b28:	9900      	ldr	r1, [sp, #0]
 8048b2a:	2230      	movs	r2, #48	; 0x30
 8048b2c:	3701      	adds	r7, #1
 8048b2e:	700a      	strb	r2, [r1, #0]
 8048b30:	781a      	ldrb	r2, [r3, #0]
 8048b32:	3201      	adds	r2, #1
 8048b34:	701a      	strb	r2, [r3, #0]
 8048b36:	e790      	b.n	8048a5a <_dtoa_r+0x62a>
 8048b38:	4ba3      	ldr	r3, [pc, #652]	; (8048dc8 <_dtoa_r+0x998>)
 8048b3a:	2200      	movs	r2, #0
 8048b3c:	f7f7 fd6c 	bl	8040618 <__aeabi_dmul>
 8048b40:	2200      	movs	r2, #0
 8048b42:	2300      	movs	r3, #0
 8048b44:	4606      	mov	r6, r0
 8048b46:	460f      	mov	r7, r1
 8048b48:	f7f7 ffce 	bl	8040ae8 <__aeabi_dcmpeq>
 8048b4c:	2800      	cmp	r0, #0
 8048b4e:	d09e      	beq.n	8048a8e <_dtoa_r+0x65e>
 8048b50:	e7d0      	b.n	8048af4 <_dtoa_r+0x6c4>
 8048b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8048b54:	2a00      	cmp	r2, #0
 8048b56:	f000 80ca 	beq.w	8048cee <_dtoa_r+0x8be>
 8048b5a:	9a07      	ldr	r2, [sp, #28]
 8048b5c:	2a01      	cmp	r2, #1
 8048b5e:	f300 80ad 	bgt.w	8048cbc <_dtoa_r+0x88c>
 8048b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8048b64:	2a00      	cmp	r2, #0
 8048b66:	f000 80a5 	beq.w	8048cb4 <_dtoa_r+0x884>
 8048b6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8048b6e:	9e08      	ldr	r6, [sp, #32]
 8048b70:	9d05      	ldr	r5, [sp, #20]
 8048b72:	9a05      	ldr	r2, [sp, #20]
 8048b74:	441a      	add	r2, r3
 8048b76:	9205      	str	r2, [sp, #20]
 8048b78:	9a06      	ldr	r2, [sp, #24]
 8048b7a:	2101      	movs	r1, #1
 8048b7c:	441a      	add	r2, r3
 8048b7e:	4620      	mov	r0, r4
 8048b80:	9206      	str	r2, [sp, #24]
 8048b82:	f000 ff3d 	bl	8049a00 <__i2b>
 8048b86:	4607      	mov	r7, r0
 8048b88:	b165      	cbz	r5, 8048ba4 <_dtoa_r+0x774>
 8048b8a:	9b06      	ldr	r3, [sp, #24]
 8048b8c:	2b00      	cmp	r3, #0
 8048b8e:	dd09      	ble.n	8048ba4 <_dtoa_r+0x774>
 8048b90:	42ab      	cmp	r3, r5
 8048b92:	9a05      	ldr	r2, [sp, #20]
 8048b94:	bfa8      	it	ge
 8048b96:	462b      	movge	r3, r5
 8048b98:	1ad2      	subs	r2, r2, r3
 8048b9a:	9205      	str	r2, [sp, #20]
 8048b9c:	9a06      	ldr	r2, [sp, #24]
 8048b9e:	1aed      	subs	r5, r5, r3
 8048ba0:	1ad3      	subs	r3, r2, r3
 8048ba2:	9306      	str	r3, [sp, #24]
 8048ba4:	9b08      	ldr	r3, [sp, #32]
 8048ba6:	b1f3      	cbz	r3, 8048be6 <_dtoa_r+0x7b6>
 8048ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048baa:	2b00      	cmp	r3, #0
 8048bac:	f000 80a3 	beq.w	8048cf6 <_dtoa_r+0x8c6>
 8048bb0:	2e00      	cmp	r6, #0
 8048bb2:	dd10      	ble.n	8048bd6 <_dtoa_r+0x7a6>
 8048bb4:	4639      	mov	r1, r7
 8048bb6:	4632      	mov	r2, r6
 8048bb8:	4620      	mov	r0, r4
 8048bba:	f000 ffe1 	bl	8049b80 <__pow5mult>
 8048bbe:	4652      	mov	r2, sl
 8048bc0:	4601      	mov	r1, r0
 8048bc2:	4607      	mov	r7, r0
 8048bc4:	4620      	mov	r0, r4
 8048bc6:	f000 ff31 	bl	8049a2c <__multiply>
 8048bca:	4651      	mov	r1, sl
 8048bcc:	4680      	mov	r8, r0
 8048bce:	4620      	mov	r0, r4
 8048bd0:	f000 fe16 	bl	8049800 <_Bfree>
 8048bd4:	46c2      	mov	sl, r8
 8048bd6:	9b08      	ldr	r3, [sp, #32]
 8048bd8:	1b9a      	subs	r2, r3, r6
 8048bda:	d004      	beq.n	8048be6 <_dtoa_r+0x7b6>
 8048bdc:	4651      	mov	r1, sl
 8048bde:	4620      	mov	r0, r4
 8048be0:	f000 ffce 	bl	8049b80 <__pow5mult>
 8048be4:	4682      	mov	sl, r0
 8048be6:	2101      	movs	r1, #1
 8048be8:	4620      	mov	r0, r4
 8048bea:	f000 ff09 	bl	8049a00 <__i2b>
 8048bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048bf0:	2b00      	cmp	r3, #0
 8048bf2:	4606      	mov	r6, r0
 8048bf4:	f340 8081 	ble.w	8048cfa <_dtoa_r+0x8ca>
 8048bf8:	461a      	mov	r2, r3
 8048bfa:	4601      	mov	r1, r0
 8048bfc:	4620      	mov	r0, r4
 8048bfe:	f000 ffbf 	bl	8049b80 <__pow5mult>
 8048c02:	9b07      	ldr	r3, [sp, #28]
 8048c04:	2b01      	cmp	r3, #1
 8048c06:	4606      	mov	r6, r0
 8048c08:	dd7a      	ble.n	8048d00 <_dtoa_r+0x8d0>
 8048c0a:	f04f 0800 	mov.w	r8, #0
 8048c0e:	6933      	ldr	r3, [r6, #16]
 8048c10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8048c14:	6918      	ldr	r0, [r3, #16]
 8048c16:	f000 fea5 	bl	8049964 <__hi0bits>
 8048c1a:	f1c0 0020 	rsb	r0, r0, #32
 8048c1e:	9b06      	ldr	r3, [sp, #24]
 8048c20:	4418      	add	r0, r3
 8048c22:	f010 001f 	ands.w	r0, r0, #31
 8048c26:	f000 8094 	beq.w	8048d52 <_dtoa_r+0x922>
 8048c2a:	f1c0 0320 	rsb	r3, r0, #32
 8048c2e:	2b04      	cmp	r3, #4
 8048c30:	f340 8085 	ble.w	8048d3e <_dtoa_r+0x90e>
 8048c34:	9b05      	ldr	r3, [sp, #20]
 8048c36:	f1c0 001c 	rsb	r0, r0, #28
 8048c3a:	4403      	add	r3, r0
 8048c3c:	9305      	str	r3, [sp, #20]
 8048c3e:	9b06      	ldr	r3, [sp, #24]
 8048c40:	4403      	add	r3, r0
 8048c42:	4405      	add	r5, r0
 8048c44:	9306      	str	r3, [sp, #24]
 8048c46:	9b05      	ldr	r3, [sp, #20]
 8048c48:	2b00      	cmp	r3, #0
 8048c4a:	dd05      	ble.n	8048c58 <_dtoa_r+0x828>
 8048c4c:	4651      	mov	r1, sl
 8048c4e:	461a      	mov	r2, r3
 8048c50:	4620      	mov	r0, r4
 8048c52:	f000 ffef 	bl	8049c34 <__lshift>
 8048c56:	4682      	mov	sl, r0
 8048c58:	9b06      	ldr	r3, [sp, #24]
 8048c5a:	2b00      	cmp	r3, #0
 8048c5c:	dd05      	ble.n	8048c6a <_dtoa_r+0x83a>
 8048c5e:	4631      	mov	r1, r6
 8048c60:	461a      	mov	r2, r3
 8048c62:	4620      	mov	r0, r4
 8048c64:	f000 ffe6 	bl	8049c34 <__lshift>
 8048c68:	4606      	mov	r6, r0
 8048c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8048c6c:	2b00      	cmp	r3, #0
 8048c6e:	d072      	beq.n	8048d56 <_dtoa_r+0x926>
 8048c70:	4631      	mov	r1, r6
 8048c72:	4650      	mov	r0, sl
 8048c74:	f001 f84a 	bl	8049d0c <__mcmp>
 8048c78:	2800      	cmp	r0, #0
 8048c7a:	da6c      	bge.n	8048d56 <_dtoa_r+0x926>
 8048c7c:	2300      	movs	r3, #0
 8048c7e:	4651      	mov	r1, sl
 8048c80:	220a      	movs	r2, #10
 8048c82:	4620      	mov	r0, r4
 8048c84:	f000 fdde 	bl	8049844 <__multadd>
 8048c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8048c8e:	4682      	mov	sl, r0
 8048c90:	2b00      	cmp	r3, #0
 8048c92:	f000 81b0 	beq.w	8048ff6 <_dtoa_r+0xbc6>
 8048c96:	2300      	movs	r3, #0
 8048c98:	4639      	mov	r1, r7
 8048c9a:	220a      	movs	r2, #10
 8048c9c:	4620      	mov	r0, r4
 8048c9e:	f000 fdd1 	bl	8049844 <__multadd>
 8048ca2:	9b01      	ldr	r3, [sp, #4]
 8048ca4:	2b00      	cmp	r3, #0
 8048ca6:	4607      	mov	r7, r0
 8048ca8:	f300 8096 	bgt.w	8048dd8 <_dtoa_r+0x9a8>
 8048cac:	9b07      	ldr	r3, [sp, #28]
 8048cae:	2b02      	cmp	r3, #2
 8048cb0:	dc59      	bgt.n	8048d66 <_dtoa_r+0x936>
 8048cb2:	e091      	b.n	8048dd8 <_dtoa_r+0x9a8>
 8048cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8048cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8048cba:	e758      	b.n	8048b6e <_dtoa_r+0x73e>
 8048cbc:	9b04      	ldr	r3, [sp, #16]
 8048cbe:	1e5e      	subs	r6, r3, #1
 8048cc0:	9b08      	ldr	r3, [sp, #32]
 8048cc2:	42b3      	cmp	r3, r6
 8048cc4:	bfbf      	itttt	lt
 8048cc6:	9b08      	ldrlt	r3, [sp, #32]
 8048cc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8048cca:	9608      	strlt	r6, [sp, #32]
 8048ccc:	1af3      	sublt	r3, r6, r3
 8048cce:	bfb4      	ite	lt
 8048cd0:	18d2      	addlt	r2, r2, r3
 8048cd2:	1b9e      	subge	r6, r3, r6
 8048cd4:	9b04      	ldr	r3, [sp, #16]
 8048cd6:	bfbc      	itt	lt
 8048cd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8048cda:	2600      	movlt	r6, #0
 8048cdc:	2b00      	cmp	r3, #0
 8048cde:	bfb7      	itett	lt
 8048ce0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8048ce4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8048ce8:	1a9d      	sublt	r5, r3, r2
 8048cea:	2300      	movlt	r3, #0
 8048cec:	e741      	b.n	8048b72 <_dtoa_r+0x742>
 8048cee:	9e08      	ldr	r6, [sp, #32]
 8048cf0:	9d05      	ldr	r5, [sp, #20]
 8048cf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8048cf4:	e748      	b.n	8048b88 <_dtoa_r+0x758>
 8048cf6:	9a08      	ldr	r2, [sp, #32]
 8048cf8:	e770      	b.n	8048bdc <_dtoa_r+0x7ac>
 8048cfa:	9b07      	ldr	r3, [sp, #28]
 8048cfc:	2b01      	cmp	r3, #1
 8048cfe:	dc19      	bgt.n	8048d34 <_dtoa_r+0x904>
 8048d00:	9b02      	ldr	r3, [sp, #8]
 8048d02:	b9bb      	cbnz	r3, 8048d34 <_dtoa_r+0x904>
 8048d04:	9b03      	ldr	r3, [sp, #12]
 8048d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8048d0a:	b99b      	cbnz	r3, 8048d34 <_dtoa_r+0x904>
 8048d0c:	9b03      	ldr	r3, [sp, #12]
 8048d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8048d12:	0d1b      	lsrs	r3, r3, #20
 8048d14:	051b      	lsls	r3, r3, #20
 8048d16:	b183      	cbz	r3, 8048d3a <_dtoa_r+0x90a>
 8048d18:	9b05      	ldr	r3, [sp, #20]
 8048d1a:	3301      	adds	r3, #1
 8048d1c:	9305      	str	r3, [sp, #20]
 8048d1e:	9b06      	ldr	r3, [sp, #24]
 8048d20:	3301      	adds	r3, #1
 8048d22:	9306      	str	r3, [sp, #24]
 8048d24:	f04f 0801 	mov.w	r8, #1
 8048d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8048d2a:	2b00      	cmp	r3, #0
 8048d2c:	f47f af6f 	bne.w	8048c0e <_dtoa_r+0x7de>
 8048d30:	2001      	movs	r0, #1
 8048d32:	e774      	b.n	8048c1e <_dtoa_r+0x7ee>
 8048d34:	f04f 0800 	mov.w	r8, #0
 8048d38:	e7f6      	b.n	8048d28 <_dtoa_r+0x8f8>
 8048d3a:	4698      	mov	r8, r3
 8048d3c:	e7f4      	b.n	8048d28 <_dtoa_r+0x8f8>
 8048d3e:	d082      	beq.n	8048c46 <_dtoa_r+0x816>
 8048d40:	9a05      	ldr	r2, [sp, #20]
 8048d42:	331c      	adds	r3, #28
 8048d44:	441a      	add	r2, r3
 8048d46:	9205      	str	r2, [sp, #20]
 8048d48:	9a06      	ldr	r2, [sp, #24]
 8048d4a:	441a      	add	r2, r3
 8048d4c:	441d      	add	r5, r3
 8048d4e:	9206      	str	r2, [sp, #24]
 8048d50:	e779      	b.n	8048c46 <_dtoa_r+0x816>
 8048d52:	4603      	mov	r3, r0
 8048d54:	e7f4      	b.n	8048d40 <_dtoa_r+0x910>
 8048d56:	9b04      	ldr	r3, [sp, #16]
 8048d58:	2b00      	cmp	r3, #0
 8048d5a:	dc37      	bgt.n	8048dcc <_dtoa_r+0x99c>
 8048d5c:	9b07      	ldr	r3, [sp, #28]
 8048d5e:	2b02      	cmp	r3, #2
 8048d60:	dd34      	ble.n	8048dcc <_dtoa_r+0x99c>
 8048d62:	9b04      	ldr	r3, [sp, #16]
 8048d64:	9301      	str	r3, [sp, #4]
 8048d66:	9b01      	ldr	r3, [sp, #4]
 8048d68:	b963      	cbnz	r3, 8048d84 <_dtoa_r+0x954>
 8048d6a:	4631      	mov	r1, r6
 8048d6c:	2205      	movs	r2, #5
 8048d6e:	4620      	mov	r0, r4
 8048d70:	f000 fd68 	bl	8049844 <__multadd>
 8048d74:	4601      	mov	r1, r0
 8048d76:	4606      	mov	r6, r0
 8048d78:	4650      	mov	r0, sl
 8048d7a:	f000 ffc7 	bl	8049d0c <__mcmp>
 8048d7e:	2800      	cmp	r0, #0
 8048d80:	f73f adbb 	bgt.w	80488fa <_dtoa_r+0x4ca>
 8048d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8048d86:	9d00      	ldr	r5, [sp, #0]
 8048d88:	ea6f 0b03 	mvn.w	fp, r3
 8048d8c:	f04f 0800 	mov.w	r8, #0
 8048d90:	4631      	mov	r1, r6
 8048d92:	4620      	mov	r0, r4
 8048d94:	f000 fd34 	bl	8049800 <_Bfree>
 8048d98:	2f00      	cmp	r7, #0
 8048d9a:	f43f aeab 	beq.w	8048af4 <_dtoa_r+0x6c4>
 8048d9e:	f1b8 0f00 	cmp.w	r8, #0
 8048da2:	d005      	beq.n	8048db0 <_dtoa_r+0x980>
 8048da4:	45b8      	cmp	r8, r7
 8048da6:	d003      	beq.n	8048db0 <_dtoa_r+0x980>
 8048da8:	4641      	mov	r1, r8
 8048daa:	4620      	mov	r0, r4
 8048dac:	f000 fd28 	bl	8049800 <_Bfree>
 8048db0:	4639      	mov	r1, r7
 8048db2:	4620      	mov	r0, r4
 8048db4:	f000 fd24 	bl	8049800 <_Bfree>
 8048db8:	e69c      	b.n	8048af4 <_dtoa_r+0x6c4>
 8048dba:	2600      	movs	r6, #0
 8048dbc:	4637      	mov	r7, r6
 8048dbe:	e7e1      	b.n	8048d84 <_dtoa_r+0x954>
 8048dc0:	46bb      	mov	fp, r7
 8048dc2:	4637      	mov	r7, r6
 8048dc4:	e599      	b.n	80488fa <_dtoa_r+0x4ca>
 8048dc6:	bf00      	nop
 8048dc8:	40240000 	.word	0x40240000
 8048dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8048dce:	2b00      	cmp	r3, #0
 8048dd0:	f000 80c8 	beq.w	8048f64 <_dtoa_r+0xb34>
 8048dd4:	9b04      	ldr	r3, [sp, #16]
 8048dd6:	9301      	str	r3, [sp, #4]
 8048dd8:	2d00      	cmp	r5, #0
 8048dda:	dd05      	ble.n	8048de8 <_dtoa_r+0x9b8>
 8048ddc:	4639      	mov	r1, r7
 8048dde:	462a      	mov	r2, r5
 8048de0:	4620      	mov	r0, r4
 8048de2:	f000 ff27 	bl	8049c34 <__lshift>
 8048de6:	4607      	mov	r7, r0
 8048de8:	f1b8 0f00 	cmp.w	r8, #0
 8048dec:	d05b      	beq.n	8048ea6 <_dtoa_r+0xa76>
 8048dee:	6879      	ldr	r1, [r7, #4]
 8048df0:	4620      	mov	r0, r4
 8048df2:	f000 fcc5 	bl	8049780 <_Balloc>
 8048df6:	4605      	mov	r5, r0
 8048df8:	b928      	cbnz	r0, 8048e06 <_dtoa_r+0x9d6>
 8048dfa:	4b83      	ldr	r3, [pc, #524]	; (8049008 <_dtoa_r+0xbd8>)
 8048dfc:	4602      	mov	r2, r0
 8048dfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8048e02:	f7ff bb2e 	b.w	8048462 <_dtoa_r+0x32>
 8048e06:	693a      	ldr	r2, [r7, #16]
 8048e08:	3202      	adds	r2, #2
 8048e0a:	0092      	lsls	r2, r2, #2
 8048e0c:	f107 010c 	add.w	r1, r7, #12
 8048e10:	300c      	adds	r0, #12
 8048e12:	f7ff fa6f 	bl	80482f4 <memcpy>
 8048e16:	2201      	movs	r2, #1
 8048e18:	4629      	mov	r1, r5
 8048e1a:	4620      	mov	r0, r4
 8048e1c:	f000 ff0a 	bl	8049c34 <__lshift>
 8048e20:	9b00      	ldr	r3, [sp, #0]
 8048e22:	3301      	adds	r3, #1
 8048e24:	9304      	str	r3, [sp, #16]
 8048e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8048e2a:	4413      	add	r3, r2
 8048e2c:	9308      	str	r3, [sp, #32]
 8048e2e:	9b02      	ldr	r3, [sp, #8]
 8048e30:	f003 0301 	and.w	r3, r3, #1
 8048e34:	46b8      	mov	r8, r7
 8048e36:	9306      	str	r3, [sp, #24]
 8048e38:	4607      	mov	r7, r0
 8048e3a:	9b04      	ldr	r3, [sp, #16]
 8048e3c:	4631      	mov	r1, r6
 8048e3e:	3b01      	subs	r3, #1
 8048e40:	4650      	mov	r0, sl
 8048e42:	9301      	str	r3, [sp, #4]
 8048e44:	f7ff fa6c 	bl	8048320 <quorem>
 8048e48:	4641      	mov	r1, r8
 8048e4a:	9002      	str	r0, [sp, #8]
 8048e4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8048e50:	4650      	mov	r0, sl
 8048e52:	f000 ff5b 	bl	8049d0c <__mcmp>
 8048e56:	463a      	mov	r2, r7
 8048e58:	9005      	str	r0, [sp, #20]
 8048e5a:	4631      	mov	r1, r6
 8048e5c:	4620      	mov	r0, r4
 8048e5e:	f000 ff71 	bl	8049d44 <__mdiff>
 8048e62:	68c2      	ldr	r2, [r0, #12]
 8048e64:	4605      	mov	r5, r0
 8048e66:	bb02      	cbnz	r2, 8048eaa <_dtoa_r+0xa7a>
 8048e68:	4601      	mov	r1, r0
 8048e6a:	4650      	mov	r0, sl
 8048e6c:	f000 ff4e 	bl	8049d0c <__mcmp>
 8048e70:	4602      	mov	r2, r0
 8048e72:	4629      	mov	r1, r5
 8048e74:	4620      	mov	r0, r4
 8048e76:	9209      	str	r2, [sp, #36]	; 0x24
 8048e78:	f000 fcc2 	bl	8049800 <_Bfree>
 8048e7c:	9b07      	ldr	r3, [sp, #28]
 8048e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8048e80:	9d04      	ldr	r5, [sp, #16]
 8048e82:	ea43 0102 	orr.w	r1, r3, r2
 8048e86:	9b06      	ldr	r3, [sp, #24]
 8048e88:	4319      	orrs	r1, r3
 8048e8a:	d110      	bne.n	8048eae <_dtoa_r+0xa7e>
 8048e8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8048e90:	d029      	beq.n	8048ee6 <_dtoa_r+0xab6>
 8048e92:	9b05      	ldr	r3, [sp, #20]
 8048e94:	2b00      	cmp	r3, #0
 8048e96:	dd02      	ble.n	8048e9e <_dtoa_r+0xa6e>
 8048e98:	9b02      	ldr	r3, [sp, #8]
 8048e9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8048e9e:	9b01      	ldr	r3, [sp, #4]
 8048ea0:	f883 9000 	strb.w	r9, [r3]
 8048ea4:	e774      	b.n	8048d90 <_dtoa_r+0x960>
 8048ea6:	4638      	mov	r0, r7
 8048ea8:	e7ba      	b.n	8048e20 <_dtoa_r+0x9f0>
 8048eaa:	2201      	movs	r2, #1
 8048eac:	e7e1      	b.n	8048e72 <_dtoa_r+0xa42>
 8048eae:	9b05      	ldr	r3, [sp, #20]
 8048eb0:	2b00      	cmp	r3, #0
 8048eb2:	db04      	blt.n	8048ebe <_dtoa_r+0xa8e>
 8048eb4:	9907      	ldr	r1, [sp, #28]
 8048eb6:	430b      	orrs	r3, r1
 8048eb8:	9906      	ldr	r1, [sp, #24]
 8048eba:	430b      	orrs	r3, r1
 8048ebc:	d120      	bne.n	8048f00 <_dtoa_r+0xad0>
 8048ebe:	2a00      	cmp	r2, #0
 8048ec0:	dded      	ble.n	8048e9e <_dtoa_r+0xa6e>
 8048ec2:	4651      	mov	r1, sl
 8048ec4:	2201      	movs	r2, #1
 8048ec6:	4620      	mov	r0, r4
 8048ec8:	f000 feb4 	bl	8049c34 <__lshift>
 8048ecc:	4631      	mov	r1, r6
 8048ece:	4682      	mov	sl, r0
 8048ed0:	f000 ff1c 	bl	8049d0c <__mcmp>
 8048ed4:	2800      	cmp	r0, #0
 8048ed6:	dc03      	bgt.n	8048ee0 <_dtoa_r+0xab0>
 8048ed8:	d1e1      	bne.n	8048e9e <_dtoa_r+0xa6e>
 8048eda:	f019 0f01 	tst.w	r9, #1
 8048ede:	d0de      	beq.n	8048e9e <_dtoa_r+0xa6e>
 8048ee0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8048ee4:	d1d8      	bne.n	8048e98 <_dtoa_r+0xa68>
 8048ee6:	9a01      	ldr	r2, [sp, #4]
 8048ee8:	2339      	movs	r3, #57	; 0x39
 8048eea:	7013      	strb	r3, [r2, #0]
 8048eec:	462b      	mov	r3, r5
 8048eee:	461d      	mov	r5, r3
 8048ef0:	3b01      	subs	r3, #1
 8048ef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8048ef6:	2a39      	cmp	r2, #57	; 0x39
 8048ef8:	d06c      	beq.n	8048fd4 <_dtoa_r+0xba4>
 8048efa:	3201      	adds	r2, #1
 8048efc:	701a      	strb	r2, [r3, #0]
 8048efe:	e747      	b.n	8048d90 <_dtoa_r+0x960>
 8048f00:	2a00      	cmp	r2, #0
 8048f02:	dd07      	ble.n	8048f14 <_dtoa_r+0xae4>
 8048f04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8048f08:	d0ed      	beq.n	8048ee6 <_dtoa_r+0xab6>
 8048f0a:	9a01      	ldr	r2, [sp, #4]
 8048f0c:	f109 0301 	add.w	r3, r9, #1
 8048f10:	7013      	strb	r3, [r2, #0]
 8048f12:	e73d      	b.n	8048d90 <_dtoa_r+0x960>
 8048f14:	9b04      	ldr	r3, [sp, #16]
 8048f16:	9a08      	ldr	r2, [sp, #32]
 8048f18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8048f1c:	4293      	cmp	r3, r2
 8048f1e:	d043      	beq.n	8048fa8 <_dtoa_r+0xb78>
 8048f20:	4651      	mov	r1, sl
 8048f22:	2300      	movs	r3, #0
 8048f24:	220a      	movs	r2, #10
 8048f26:	4620      	mov	r0, r4
 8048f28:	f000 fc8c 	bl	8049844 <__multadd>
 8048f2c:	45b8      	cmp	r8, r7
 8048f2e:	4682      	mov	sl, r0
 8048f30:	f04f 0300 	mov.w	r3, #0
 8048f34:	f04f 020a 	mov.w	r2, #10
 8048f38:	4641      	mov	r1, r8
 8048f3a:	4620      	mov	r0, r4
 8048f3c:	d107      	bne.n	8048f4e <_dtoa_r+0xb1e>
 8048f3e:	f000 fc81 	bl	8049844 <__multadd>
 8048f42:	4680      	mov	r8, r0
 8048f44:	4607      	mov	r7, r0
 8048f46:	9b04      	ldr	r3, [sp, #16]
 8048f48:	3301      	adds	r3, #1
 8048f4a:	9304      	str	r3, [sp, #16]
 8048f4c:	e775      	b.n	8048e3a <_dtoa_r+0xa0a>
 8048f4e:	f000 fc79 	bl	8049844 <__multadd>
 8048f52:	4639      	mov	r1, r7
 8048f54:	4680      	mov	r8, r0
 8048f56:	2300      	movs	r3, #0
 8048f58:	220a      	movs	r2, #10
 8048f5a:	4620      	mov	r0, r4
 8048f5c:	f000 fc72 	bl	8049844 <__multadd>
 8048f60:	4607      	mov	r7, r0
 8048f62:	e7f0      	b.n	8048f46 <_dtoa_r+0xb16>
 8048f64:	9b04      	ldr	r3, [sp, #16]
 8048f66:	9301      	str	r3, [sp, #4]
 8048f68:	9d00      	ldr	r5, [sp, #0]
 8048f6a:	4631      	mov	r1, r6
 8048f6c:	4650      	mov	r0, sl
 8048f6e:	f7ff f9d7 	bl	8048320 <quorem>
 8048f72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8048f76:	9b00      	ldr	r3, [sp, #0]
 8048f78:	f805 9b01 	strb.w	r9, [r5], #1
 8048f7c:	1aea      	subs	r2, r5, r3
 8048f7e:	9b01      	ldr	r3, [sp, #4]
 8048f80:	4293      	cmp	r3, r2
 8048f82:	dd07      	ble.n	8048f94 <_dtoa_r+0xb64>
 8048f84:	4651      	mov	r1, sl
 8048f86:	2300      	movs	r3, #0
 8048f88:	220a      	movs	r2, #10
 8048f8a:	4620      	mov	r0, r4
 8048f8c:	f000 fc5a 	bl	8049844 <__multadd>
 8048f90:	4682      	mov	sl, r0
 8048f92:	e7ea      	b.n	8048f6a <_dtoa_r+0xb3a>
 8048f94:	9b01      	ldr	r3, [sp, #4]
 8048f96:	2b00      	cmp	r3, #0
 8048f98:	bfc8      	it	gt
 8048f9a:	461d      	movgt	r5, r3
 8048f9c:	9b00      	ldr	r3, [sp, #0]
 8048f9e:	bfd8      	it	le
 8048fa0:	2501      	movle	r5, #1
 8048fa2:	441d      	add	r5, r3
 8048fa4:	f04f 0800 	mov.w	r8, #0
 8048fa8:	4651      	mov	r1, sl
 8048faa:	2201      	movs	r2, #1
 8048fac:	4620      	mov	r0, r4
 8048fae:	f000 fe41 	bl	8049c34 <__lshift>
 8048fb2:	4631      	mov	r1, r6
 8048fb4:	4682      	mov	sl, r0
 8048fb6:	f000 fea9 	bl	8049d0c <__mcmp>
 8048fba:	2800      	cmp	r0, #0
 8048fbc:	dc96      	bgt.n	8048eec <_dtoa_r+0xabc>
 8048fbe:	d102      	bne.n	8048fc6 <_dtoa_r+0xb96>
 8048fc0:	f019 0f01 	tst.w	r9, #1
 8048fc4:	d192      	bne.n	8048eec <_dtoa_r+0xabc>
 8048fc6:	462b      	mov	r3, r5
 8048fc8:	461d      	mov	r5, r3
 8048fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8048fce:	2a30      	cmp	r2, #48	; 0x30
 8048fd0:	d0fa      	beq.n	8048fc8 <_dtoa_r+0xb98>
 8048fd2:	e6dd      	b.n	8048d90 <_dtoa_r+0x960>
 8048fd4:	9a00      	ldr	r2, [sp, #0]
 8048fd6:	429a      	cmp	r2, r3
 8048fd8:	d189      	bne.n	8048eee <_dtoa_r+0xabe>
 8048fda:	f10b 0b01 	add.w	fp, fp, #1
 8048fde:	2331      	movs	r3, #49	; 0x31
 8048fe0:	e796      	b.n	8048f10 <_dtoa_r+0xae0>
 8048fe2:	4b0a      	ldr	r3, [pc, #40]	; (804900c <_dtoa_r+0xbdc>)
 8048fe4:	f7ff ba99 	b.w	804851a <_dtoa_r+0xea>
 8048fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8048fea:	2b00      	cmp	r3, #0
 8048fec:	f47f aa6d 	bne.w	80484ca <_dtoa_r+0x9a>
 8048ff0:	4b07      	ldr	r3, [pc, #28]	; (8049010 <_dtoa_r+0xbe0>)
 8048ff2:	f7ff ba92 	b.w	804851a <_dtoa_r+0xea>
 8048ff6:	9b01      	ldr	r3, [sp, #4]
 8048ff8:	2b00      	cmp	r3, #0
 8048ffa:	dcb5      	bgt.n	8048f68 <_dtoa_r+0xb38>
 8048ffc:	9b07      	ldr	r3, [sp, #28]
 8048ffe:	2b02      	cmp	r3, #2
 8049000:	f73f aeb1 	bgt.w	8048d66 <_dtoa_r+0x936>
 8049004:	e7b0      	b.n	8048f68 <_dtoa_r+0xb38>
 8049006:	bf00      	nop
 8049008:	0804b101 	.word	0x0804b101
 804900c:	0804b059 	.word	0x0804b059
 8049010:	0804b085 	.word	0x0804b085

08049014 <_free_r>:
 8049014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8049016:	2900      	cmp	r1, #0
 8049018:	d044      	beq.n	80490a4 <_free_r+0x90>
 804901a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804901e:	9001      	str	r0, [sp, #4]
 8049020:	2b00      	cmp	r3, #0
 8049022:	f1a1 0404 	sub.w	r4, r1, #4
 8049026:	bfb8      	it	lt
 8049028:	18e4      	addlt	r4, r4, r3
 804902a:	f7fd fc8b 	bl	8046944 <__malloc_lock>
 804902e:	4a1e      	ldr	r2, [pc, #120]	; (80490a8 <_free_r+0x94>)
 8049030:	9801      	ldr	r0, [sp, #4]
 8049032:	6813      	ldr	r3, [r2, #0]
 8049034:	b933      	cbnz	r3, 8049044 <_free_r+0x30>
 8049036:	6063      	str	r3, [r4, #4]
 8049038:	6014      	str	r4, [r2, #0]
 804903a:	b003      	add	sp, #12
 804903c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8049040:	f7fd bc86 	b.w	8046950 <__malloc_unlock>
 8049044:	42a3      	cmp	r3, r4
 8049046:	d908      	bls.n	804905a <_free_r+0x46>
 8049048:	6825      	ldr	r5, [r4, #0]
 804904a:	1961      	adds	r1, r4, r5
 804904c:	428b      	cmp	r3, r1
 804904e:	bf01      	itttt	eq
 8049050:	6819      	ldreq	r1, [r3, #0]
 8049052:	685b      	ldreq	r3, [r3, #4]
 8049054:	1949      	addeq	r1, r1, r5
 8049056:	6021      	streq	r1, [r4, #0]
 8049058:	e7ed      	b.n	8049036 <_free_r+0x22>
 804905a:	461a      	mov	r2, r3
 804905c:	685b      	ldr	r3, [r3, #4]
 804905e:	b10b      	cbz	r3, 8049064 <_free_r+0x50>
 8049060:	42a3      	cmp	r3, r4
 8049062:	d9fa      	bls.n	804905a <_free_r+0x46>
 8049064:	6811      	ldr	r1, [r2, #0]
 8049066:	1855      	adds	r5, r2, r1
 8049068:	42a5      	cmp	r5, r4
 804906a:	d10b      	bne.n	8049084 <_free_r+0x70>
 804906c:	6824      	ldr	r4, [r4, #0]
 804906e:	4421      	add	r1, r4
 8049070:	1854      	adds	r4, r2, r1
 8049072:	42a3      	cmp	r3, r4
 8049074:	6011      	str	r1, [r2, #0]
 8049076:	d1e0      	bne.n	804903a <_free_r+0x26>
 8049078:	681c      	ldr	r4, [r3, #0]
 804907a:	685b      	ldr	r3, [r3, #4]
 804907c:	6053      	str	r3, [r2, #4]
 804907e:	440c      	add	r4, r1
 8049080:	6014      	str	r4, [r2, #0]
 8049082:	e7da      	b.n	804903a <_free_r+0x26>
 8049084:	d902      	bls.n	804908c <_free_r+0x78>
 8049086:	230c      	movs	r3, #12
 8049088:	6003      	str	r3, [r0, #0]
 804908a:	e7d6      	b.n	804903a <_free_r+0x26>
 804908c:	6825      	ldr	r5, [r4, #0]
 804908e:	1961      	adds	r1, r4, r5
 8049090:	428b      	cmp	r3, r1
 8049092:	bf04      	itt	eq
 8049094:	6819      	ldreq	r1, [r3, #0]
 8049096:	685b      	ldreq	r3, [r3, #4]
 8049098:	6063      	str	r3, [r4, #4]
 804909a:	bf04      	itt	eq
 804909c:	1949      	addeq	r1, r1, r5
 804909e:	6021      	streq	r1, [r4, #0]
 80490a0:	6054      	str	r4, [r2, #4]
 80490a2:	e7ca      	b.n	804903a <_free_r+0x26>
 80490a4:	b003      	add	sp, #12
 80490a6:	bd30      	pop	{r4, r5, pc}
 80490a8:	200037b0 	.word	0x200037b0

080490ac <rshift>:
 80490ac:	6903      	ldr	r3, [r0, #16]
 80490ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80490b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80490b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80490ba:	f100 0414 	add.w	r4, r0, #20
 80490be:	dd45      	ble.n	804914c <rshift+0xa0>
 80490c0:	f011 011f 	ands.w	r1, r1, #31
 80490c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80490c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80490cc:	d10c      	bne.n	80490e8 <rshift+0x3c>
 80490ce:	f100 0710 	add.w	r7, r0, #16
 80490d2:	4629      	mov	r1, r5
 80490d4:	42b1      	cmp	r1, r6
 80490d6:	d334      	bcc.n	8049142 <rshift+0x96>
 80490d8:	1a9b      	subs	r3, r3, r2
 80490da:	009b      	lsls	r3, r3, #2
 80490dc:	1eea      	subs	r2, r5, #3
 80490de:	4296      	cmp	r6, r2
 80490e0:	bf38      	it	cc
 80490e2:	2300      	movcc	r3, #0
 80490e4:	4423      	add	r3, r4
 80490e6:	e015      	b.n	8049114 <rshift+0x68>
 80490e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80490ec:	f1c1 0820 	rsb	r8, r1, #32
 80490f0:	40cf      	lsrs	r7, r1
 80490f2:	f105 0e04 	add.w	lr, r5, #4
 80490f6:	46a1      	mov	r9, r4
 80490f8:	4576      	cmp	r6, lr
 80490fa:	46f4      	mov	ip, lr
 80490fc:	d815      	bhi.n	804912a <rshift+0x7e>
 80490fe:	1a9a      	subs	r2, r3, r2
 8049100:	0092      	lsls	r2, r2, #2
 8049102:	3a04      	subs	r2, #4
 8049104:	3501      	adds	r5, #1
 8049106:	42ae      	cmp	r6, r5
 8049108:	bf38      	it	cc
 804910a:	2200      	movcc	r2, #0
 804910c:	18a3      	adds	r3, r4, r2
 804910e:	50a7      	str	r7, [r4, r2]
 8049110:	b107      	cbz	r7, 8049114 <rshift+0x68>
 8049112:	3304      	adds	r3, #4
 8049114:	1b1a      	subs	r2, r3, r4
 8049116:	42a3      	cmp	r3, r4
 8049118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 804911c:	bf08      	it	eq
 804911e:	2300      	moveq	r3, #0
 8049120:	6102      	str	r2, [r0, #16]
 8049122:	bf08      	it	eq
 8049124:	6143      	streq	r3, [r0, #20]
 8049126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 804912a:	f8dc c000 	ldr.w	ip, [ip]
 804912e:	fa0c fc08 	lsl.w	ip, ip, r8
 8049132:	ea4c 0707 	orr.w	r7, ip, r7
 8049136:	f849 7b04 	str.w	r7, [r9], #4
 804913a:	f85e 7b04 	ldr.w	r7, [lr], #4
 804913e:	40cf      	lsrs	r7, r1
 8049140:	e7da      	b.n	80490f8 <rshift+0x4c>
 8049142:	f851 cb04 	ldr.w	ip, [r1], #4
 8049146:	f847 cf04 	str.w	ip, [r7, #4]!
 804914a:	e7c3      	b.n	80490d4 <rshift+0x28>
 804914c:	4623      	mov	r3, r4
 804914e:	e7e1      	b.n	8049114 <rshift+0x68>

08049150 <__hexdig_fun>:
 8049150:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8049154:	2b09      	cmp	r3, #9
 8049156:	d802      	bhi.n	804915e <__hexdig_fun+0xe>
 8049158:	3820      	subs	r0, #32
 804915a:	b2c0      	uxtb	r0, r0
 804915c:	4770      	bx	lr
 804915e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8049162:	2b05      	cmp	r3, #5
 8049164:	d801      	bhi.n	804916a <__hexdig_fun+0x1a>
 8049166:	3847      	subs	r0, #71	; 0x47
 8049168:	e7f7      	b.n	804915a <__hexdig_fun+0xa>
 804916a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 804916e:	2b05      	cmp	r3, #5
 8049170:	d801      	bhi.n	8049176 <__hexdig_fun+0x26>
 8049172:	3827      	subs	r0, #39	; 0x27
 8049174:	e7f1      	b.n	804915a <__hexdig_fun+0xa>
 8049176:	2000      	movs	r0, #0
 8049178:	4770      	bx	lr
	...

0804917c <__gethex>:
 804917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049180:	4617      	mov	r7, r2
 8049182:	680a      	ldr	r2, [r1, #0]
 8049184:	b085      	sub	sp, #20
 8049186:	f102 0b02 	add.w	fp, r2, #2
 804918a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 804918e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8049192:	4681      	mov	r9, r0
 8049194:	468a      	mov	sl, r1
 8049196:	9302      	str	r3, [sp, #8]
 8049198:	32fe      	adds	r2, #254	; 0xfe
 804919a:	eb02 030b 	add.w	r3, r2, fp
 804919e:	46d8      	mov	r8, fp
 80491a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80491a4:	9301      	str	r3, [sp, #4]
 80491a6:	2830      	cmp	r0, #48	; 0x30
 80491a8:	d0f7      	beq.n	804919a <__gethex+0x1e>
 80491aa:	f7ff ffd1 	bl	8049150 <__hexdig_fun>
 80491ae:	4604      	mov	r4, r0
 80491b0:	2800      	cmp	r0, #0
 80491b2:	d138      	bne.n	8049226 <__gethex+0xaa>
 80491b4:	49a7      	ldr	r1, [pc, #668]	; (8049454 <__gethex+0x2d8>)
 80491b6:	2201      	movs	r2, #1
 80491b8:	4640      	mov	r0, r8
 80491ba:	f7fe ffd9 	bl	8048170 <strncmp>
 80491be:	4606      	mov	r6, r0
 80491c0:	2800      	cmp	r0, #0
 80491c2:	d169      	bne.n	8049298 <__gethex+0x11c>
 80491c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80491c8:	465d      	mov	r5, fp
 80491ca:	f7ff ffc1 	bl	8049150 <__hexdig_fun>
 80491ce:	2800      	cmp	r0, #0
 80491d0:	d064      	beq.n	804929c <__gethex+0x120>
 80491d2:	465a      	mov	r2, fp
 80491d4:	7810      	ldrb	r0, [r2, #0]
 80491d6:	2830      	cmp	r0, #48	; 0x30
 80491d8:	4690      	mov	r8, r2
 80491da:	f102 0201 	add.w	r2, r2, #1
 80491de:	d0f9      	beq.n	80491d4 <__gethex+0x58>
 80491e0:	f7ff ffb6 	bl	8049150 <__hexdig_fun>
 80491e4:	2301      	movs	r3, #1
 80491e6:	fab0 f480 	clz	r4, r0
 80491ea:	0964      	lsrs	r4, r4, #5
 80491ec:	465e      	mov	r6, fp
 80491ee:	9301      	str	r3, [sp, #4]
 80491f0:	4642      	mov	r2, r8
 80491f2:	4615      	mov	r5, r2
 80491f4:	3201      	adds	r2, #1
 80491f6:	7828      	ldrb	r0, [r5, #0]
 80491f8:	f7ff ffaa 	bl	8049150 <__hexdig_fun>
 80491fc:	2800      	cmp	r0, #0
 80491fe:	d1f8      	bne.n	80491f2 <__gethex+0x76>
 8049200:	4994      	ldr	r1, [pc, #592]	; (8049454 <__gethex+0x2d8>)
 8049202:	2201      	movs	r2, #1
 8049204:	4628      	mov	r0, r5
 8049206:	f7fe ffb3 	bl	8048170 <strncmp>
 804920a:	b978      	cbnz	r0, 804922c <__gethex+0xb0>
 804920c:	b946      	cbnz	r6, 8049220 <__gethex+0xa4>
 804920e:	1c6e      	adds	r6, r5, #1
 8049210:	4632      	mov	r2, r6
 8049212:	4615      	mov	r5, r2
 8049214:	3201      	adds	r2, #1
 8049216:	7828      	ldrb	r0, [r5, #0]
 8049218:	f7ff ff9a 	bl	8049150 <__hexdig_fun>
 804921c:	2800      	cmp	r0, #0
 804921e:	d1f8      	bne.n	8049212 <__gethex+0x96>
 8049220:	1b73      	subs	r3, r6, r5
 8049222:	009e      	lsls	r6, r3, #2
 8049224:	e004      	b.n	8049230 <__gethex+0xb4>
 8049226:	2400      	movs	r4, #0
 8049228:	4626      	mov	r6, r4
 804922a:	e7e1      	b.n	80491f0 <__gethex+0x74>
 804922c:	2e00      	cmp	r6, #0
 804922e:	d1f7      	bne.n	8049220 <__gethex+0xa4>
 8049230:	782b      	ldrb	r3, [r5, #0]
 8049232:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8049236:	2b50      	cmp	r3, #80	; 0x50
 8049238:	d13d      	bne.n	80492b6 <__gethex+0x13a>
 804923a:	786b      	ldrb	r3, [r5, #1]
 804923c:	2b2b      	cmp	r3, #43	; 0x2b
 804923e:	d02f      	beq.n	80492a0 <__gethex+0x124>
 8049240:	2b2d      	cmp	r3, #45	; 0x2d
 8049242:	d031      	beq.n	80492a8 <__gethex+0x12c>
 8049244:	1c69      	adds	r1, r5, #1
 8049246:	f04f 0b00 	mov.w	fp, #0
 804924a:	7808      	ldrb	r0, [r1, #0]
 804924c:	f7ff ff80 	bl	8049150 <__hexdig_fun>
 8049250:	1e42      	subs	r2, r0, #1
 8049252:	b2d2      	uxtb	r2, r2
 8049254:	2a18      	cmp	r2, #24
 8049256:	d82e      	bhi.n	80492b6 <__gethex+0x13a>
 8049258:	f1a0 0210 	sub.w	r2, r0, #16
 804925c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8049260:	f7ff ff76 	bl	8049150 <__hexdig_fun>
 8049264:	f100 3cff 	add.w	ip, r0, #4294967295
 8049268:	fa5f fc8c 	uxtb.w	ip, ip
 804926c:	f1bc 0f18 	cmp.w	ip, #24
 8049270:	d91d      	bls.n	80492ae <__gethex+0x132>
 8049272:	f1bb 0f00 	cmp.w	fp, #0
 8049276:	d000      	beq.n	804927a <__gethex+0xfe>
 8049278:	4252      	negs	r2, r2
 804927a:	4416      	add	r6, r2
 804927c:	f8ca 1000 	str.w	r1, [sl]
 8049280:	b1dc      	cbz	r4, 80492ba <__gethex+0x13e>
 8049282:	9b01      	ldr	r3, [sp, #4]
 8049284:	2b00      	cmp	r3, #0
 8049286:	bf14      	ite	ne
 8049288:	f04f 0800 	movne.w	r8, #0
 804928c:	f04f 0806 	moveq.w	r8, #6
 8049290:	4640      	mov	r0, r8
 8049292:	b005      	add	sp, #20
 8049294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049298:	4645      	mov	r5, r8
 804929a:	4626      	mov	r6, r4
 804929c:	2401      	movs	r4, #1
 804929e:	e7c7      	b.n	8049230 <__gethex+0xb4>
 80492a0:	f04f 0b00 	mov.w	fp, #0
 80492a4:	1ca9      	adds	r1, r5, #2
 80492a6:	e7d0      	b.n	804924a <__gethex+0xce>
 80492a8:	f04f 0b01 	mov.w	fp, #1
 80492ac:	e7fa      	b.n	80492a4 <__gethex+0x128>
 80492ae:	230a      	movs	r3, #10
 80492b0:	fb03 0002 	mla	r0, r3, r2, r0
 80492b4:	e7d0      	b.n	8049258 <__gethex+0xdc>
 80492b6:	4629      	mov	r1, r5
 80492b8:	e7e0      	b.n	804927c <__gethex+0x100>
 80492ba:	eba5 0308 	sub.w	r3, r5, r8
 80492be:	3b01      	subs	r3, #1
 80492c0:	4621      	mov	r1, r4
 80492c2:	2b07      	cmp	r3, #7
 80492c4:	dc0a      	bgt.n	80492dc <__gethex+0x160>
 80492c6:	4648      	mov	r0, r9
 80492c8:	f000 fa5a 	bl	8049780 <_Balloc>
 80492cc:	4604      	mov	r4, r0
 80492ce:	b940      	cbnz	r0, 80492e2 <__gethex+0x166>
 80492d0:	4b61      	ldr	r3, [pc, #388]	; (8049458 <__gethex+0x2dc>)
 80492d2:	4602      	mov	r2, r0
 80492d4:	21e4      	movs	r1, #228	; 0xe4
 80492d6:	4861      	ldr	r0, [pc, #388]	; (804945c <__gethex+0x2e0>)
 80492d8:	f001 f91a 	bl	804a510 <__assert_func>
 80492dc:	3101      	adds	r1, #1
 80492de:	105b      	asrs	r3, r3, #1
 80492e0:	e7ef      	b.n	80492c2 <__gethex+0x146>
 80492e2:	f100 0a14 	add.w	sl, r0, #20
 80492e6:	2300      	movs	r3, #0
 80492e8:	495a      	ldr	r1, [pc, #360]	; (8049454 <__gethex+0x2d8>)
 80492ea:	f8cd a004 	str.w	sl, [sp, #4]
 80492ee:	469b      	mov	fp, r3
 80492f0:	45a8      	cmp	r8, r5
 80492f2:	d342      	bcc.n	804937a <__gethex+0x1fe>
 80492f4:	9801      	ldr	r0, [sp, #4]
 80492f6:	f840 bb04 	str.w	fp, [r0], #4
 80492fa:	eba0 000a 	sub.w	r0, r0, sl
 80492fe:	1080      	asrs	r0, r0, #2
 8049300:	6120      	str	r0, [r4, #16]
 8049302:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8049306:	4658      	mov	r0, fp
 8049308:	f000 fb2c 	bl	8049964 <__hi0bits>
 804930c:	683d      	ldr	r5, [r7, #0]
 804930e:	eba8 0000 	sub.w	r0, r8, r0
 8049312:	42a8      	cmp	r0, r5
 8049314:	dd59      	ble.n	80493ca <__gethex+0x24e>
 8049316:	eba0 0805 	sub.w	r8, r0, r5
 804931a:	4641      	mov	r1, r8
 804931c:	4620      	mov	r0, r4
 804931e:	f000 febb 	bl	804a098 <__any_on>
 8049322:	4683      	mov	fp, r0
 8049324:	b1b8      	cbz	r0, 8049356 <__gethex+0x1da>
 8049326:	f108 33ff 	add.w	r3, r8, #4294967295
 804932a:	1159      	asrs	r1, r3, #5
 804932c:	f003 021f 	and.w	r2, r3, #31
 8049330:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8049334:	f04f 0b01 	mov.w	fp, #1
 8049338:	fa0b f202 	lsl.w	r2, fp, r2
 804933c:	420a      	tst	r2, r1
 804933e:	d00a      	beq.n	8049356 <__gethex+0x1da>
 8049340:	455b      	cmp	r3, fp
 8049342:	dd06      	ble.n	8049352 <__gethex+0x1d6>
 8049344:	f1a8 0102 	sub.w	r1, r8, #2
 8049348:	4620      	mov	r0, r4
 804934a:	f000 fea5 	bl	804a098 <__any_on>
 804934e:	2800      	cmp	r0, #0
 8049350:	d138      	bne.n	80493c4 <__gethex+0x248>
 8049352:	f04f 0b02 	mov.w	fp, #2
 8049356:	4641      	mov	r1, r8
 8049358:	4620      	mov	r0, r4
 804935a:	f7ff fea7 	bl	80490ac <rshift>
 804935e:	4446      	add	r6, r8
 8049360:	68bb      	ldr	r3, [r7, #8]
 8049362:	42b3      	cmp	r3, r6
 8049364:	da41      	bge.n	80493ea <__gethex+0x26e>
 8049366:	4621      	mov	r1, r4
 8049368:	4648      	mov	r0, r9
 804936a:	f000 fa49 	bl	8049800 <_Bfree>
 804936e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8049370:	2300      	movs	r3, #0
 8049372:	6013      	str	r3, [r2, #0]
 8049374:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8049378:	e78a      	b.n	8049290 <__gethex+0x114>
 804937a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 804937e:	2a2e      	cmp	r2, #46	; 0x2e
 8049380:	d014      	beq.n	80493ac <__gethex+0x230>
 8049382:	2b20      	cmp	r3, #32
 8049384:	d106      	bne.n	8049394 <__gethex+0x218>
 8049386:	9b01      	ldr	r3, [sp, #4]
 8049388:	f843 bb04 	str.w	fp, [r3], #4
 804938c:	f04f 0b00 	mov.w	fp, #0
 8049390:	9301      	str	r3, [sp, #4]
 8049392:	465b      	mov	r3, fp
 8049394:	7828      	ldrb	r0, [r5, #0]
 8049396:	9303      	str	r3, [sp, #12]
 8049398:	f7ff feda 	bl	8049150 <__hexdig_fun>
 804939c:	9b03      	ldr	r3, [sp, #12]
 804939e:	f000 000f 	and.w	r0, r0, #15
 80493a2:	4098      	lsls	r0, r3
 80493a4:	ea4b 0b00 	orr.w	fp, fp, r0
 80493a8:	3304      	adds	r3, #4
 80493aa:	e7a1      	b.n	80492f0 <__gethex+0x174>
 80493ac:	45a8      	cmp	r8, r5
 80493ae:	d8e8      	bhi.n	8049382 <__gethex+0x206>
 80493b0:	2201      	movs	r2, #1
 80493b2:	4628      	mov	r0, r5
 80493b4:	9303      	str	r3, [sp, #12]
 80493b6:	f7fe fedb 	bl	8048170 <strncmp>
 80493ba:	4926      	ldr	r1, [pc, #152]	; (8049454 <__gethex+0x2d8>)
 80493bc:	9b03      	ldr	r3, [sp, #12]
 80493be:	2800      	cmp	r0, #0
 80493c0:	d1df      	bne.n	8049382 <__gethex+0x206>
 80493c2:	e795      	b.n	80492f0 <__gethex+0x174>
 80493c4:	f04f 0b03 	mov.w	fp, #3
 80493c8:	e7c5      	b.n	8049356 <__gethex+0x1da>
 80493ca:	da0b      	bge.n	80493e4 <__gethex+0x268>
 80493cc:	eba5 0800 	sub.w	r8, r5, r0
 80493d0:	4621      	mov	r1, r4
 80493d2:	4642      	mov	r2, r8
 80493d4:	4648      	mov	r0, r9
 80493d6:	f000 fc2d 	bl	8049c34 <__lshift>
 80493da:	eba6 0608 	sub.w	r6, r6, r8
 80493de:	4604      	mov	r4, r0
 80493e0:	f100 0a14 	add.w	sl, r0, #20
 80493e4:	f04f 0b00 	mov.w	fp, #0
 80493e8:	e7ba      	b.n	8049360 <__gethex+0x1e4>
 80493ea:	687b      	ldr	r3, [r7, #4]
 80493ec:	42b3      	cmp	r3, r6
 80493ee:	dd73      	ble.n	80494d8 <__gethex+0x35c>
 80493f0:	1b9e      	subs	r6, r3, r6
 80493f2:	42b5      	cmp	r5, r6
 80493f4:	dc34      	bgt.n	8049460 <__gethex+0x2e4>
 80493f6:	68fb      	ldr	r3, [r7, #12]
 80493f8:	2b02      	cmp	r3, #2
 80493fa:	d023      	beq.n	8049444 <__gethex+0x2c8>
 80493fc:	2b03      	cmp	r3, #3
 80493fe:	d025      	beq.n	804944c <__gethex+0x2d0>
 8049400:	2b01      	cmp	r3, #1
 8049402:	d115      	bne.n	8049430 <__gethex+0x2b4>
 8049404:	42b5      	cmp	r5, r6
 8049406:	d113      	bne.n	8049430 <__gethex+0x2b4>
 8049408:	2d01      	cmp	r5, #1
 804940a:	d10b      	bne.n	8049424 <__gethex+0x2a8>
 804940c:	9a02      	ldr	r2, [sp, #8]
 804940e:	687b      	ldr	r3, [r7, #4]
 8049410:	6013      	str	r3, [r2, #0]
 8049412:	2301      	movs	r3, #1
 8049414:	6123      	str	r3, [r4, #16]
 8049416:	f8ca 3000 	str.w	r3, [sl]
 804941a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 804941c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8049420:	601c      	str	r4, [r3, #0]
 8049422:	e735      	b.n	8049290 <__gethex+0x114>
 8049424:	1e69      	subs	r1, r5, #1
 8049426:	4620      	mov	r0, r4
 8049428:	f000 fe36 	bl	804a098 <__any_on>
 804942c:	2800      	cmp	r0, #0
 804942e:	d1ed      	bne.n	804940c <__gethex+0x290>
 8049430:	4621      	mov	r1, r4
 8049432:	4648      	mov	r0, r9
 8049434:	f000 f9e4 	bl	8049800 <_Bfree>
 8049438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 804943a:	2300      	movs	r3, #0
 804943c:	6013      	str	r3, [r2, #0]
 804943e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8049442:	e725      	b.n	8049290 <__gethex+0x114>
 8049444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8049446:	2b00      	cmp	r3, #0
 8049448:	d1f2      	bne.n	8049430 <__gethex+0x2b4>
 804944a:	e7df      	b.n	804940c <__gethex+0x290>
 804944c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 804944e:	2b00      	cmp	r3, #0
 8049450:	d1dc      	bne.n	804940c <__gethex+0x290>
 8049452:	e7ed      	b.n	8049430 <__gethex+0x2b4>
 8049454:	0804aef4 	.word	0x0804aef4
 8049458:	0804b101 	.word	0x0804b101
 804945c:	0804b112 	.word	0x0804b112
 8049460:	f106 38ff 	add.w	r8, r6, #4294967295
 8049464:	f1bb 0f00 	cmp.w	fp, #0
 8049468:	d133      	bne.n	80494d2 <__gethex+0x356>
 804946a:	f1b8 0f00 	cmp.w	r8, #0
 804946e:	d004      	beq.n	804947a <__gethex+0x2fe>
 8049470:	4641      	mov	r1, r8
 8049472:	4620      	mov	r0, r4
 8049474:	f000 fe10 	bl	804a098 <__any_on>
 8049478:	4683      	mov	fp, r0
 804947a:	ea4f 1268 	mov.w	r2, r8, asr #5
 804947e:	2301      	movs	r3, #1
 8049480:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8049484:	f008 081f 	and.w	r8, r8, #31
 8049488:	fa03 f308 	lsl.w	r3, r3, r8
 804948c:	4213      	tst	r3, r2
 804948e:	4631      	mov	r1, r6
 8049490:	4620      	mov	r0, r4
 8049492:	bf18      	it	ne
 8049494:	f04b 0b02 	orrne.w	fp, fp, #2
 8049498:	1bad      	subs	r5, r5, r6
 804949a:	f7ff fe07 	bl	80490ac <rshift>
 804949e:	687e      	ldr	r6, [r7, #4]
 80494a0:	f04f 0802 	mov.w	r8, #2
 80494a4:	f1bb 0f00 	cmp.w	fp, #0
 80494a8:	d04a      	beq.n	8049540 <__gethex+0x3c4>
 80494aa:	68fb      	ldr	r3, [r7, #12]
 80494ac:	2b02      	cmp	r3, #2
 80494ae:	d016      	beq.n	80494de <__gethex+0x362>
 80494b0:	2b03      	cmp	r3, #3
 80494b2:	d018      	beq.n	80494e6 <__gethex+0x36a>
 80494b4:	2b01      	cmp	r3, #1
 80494b6:	d109      	bne.n	80494cc <__gethex+0x350>
 80494b8:	f01b 0f02 	tst.w	fp, #2
 80494bc:	d006      	beq.n	80494cc <__gethex+0x350>
 80494be:	f8da 3000 	ldr.w	r3, [sl]
 80494c2:	ea4b 0b03 	orr.w	fp, fp, r3
 80494c6:	f01b 0f01 	tst.w	fp, #1
 80494ca:	d10f      	bne.n	80494ec <__gethex+0x370>
 80494cc:	f048 0810 	orr.w	r8, r8, #16
 80494d0:	e036      	b.n	8049540 <__gethex+0x3c4>
 80494d2:	f04f 0b01 	mov.w	fp, #1
 80494d6:	e7d0      	b.n	804947a <__gethex+0x2fe>
 80494d8:	f04f 0801 	mov.w	r8, #1
 80494dc:	e7e2      	b.n	80494a4 <__gethex+0x328>
 80494de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80494e0:	f1c3 0301 	rsb	r3, r3, #1
 80494e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80494e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80494e8:	2b00      	cmp	r3, #0
 80494ea:	d0ef      	beq.n	80494cc <__gethex+0x350>
 80494ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80494f0:	f104 0214 	add.w	r2, r4, #20
 80494f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80494f8:	9301      	str	r3, [sp, #4]
 80494fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80494fe:	2300      	movs	r3, #0
 8049500:	4694      	mov	ip, r2
 8049502:	f852 1b04 	ldr.w	r1, [r2], #4
 8049506:	f1b1 3fff 	cmp.w	r1, #4294967295
 804950a:	d01e      	beq.n	804954a <__gethex+0x3ce>
 804950c:	3101      	adds	r1, #1
 804950e:	f8cc 1000 	str.w	r1, [ip]
 8049512:	f1b8 0f02 	cmp.w	r8, #2
 8049516:	f104 0214 	add.w	r2, r4, #20
 804951a:	d13d      	bne.n	8049598 <__gethex+0x41c>
 804951c:	683b      	ldr	r3, [r7, #0]
 804951e:	3b01      	subs	r3, #1
 8049520:	42ab      	cmp	r3, r5
 8049522:	d10b      	bne.n	804953c <__gethex+0x3c0>
 8049524:	1169      	asrs	r1, r5, #5
 8049526:	2301      	movs	r3, #1
 8049528:	f005 051f 	and.w	r5, r5, #31
 804952c:	fa03 f505 	lsl.w	r5, r3, r5
 8049530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8049534:	421d      	tst	r5, r3
 8049536:	bf18      	it	ne
 8049538:	f04f 0801 	movne.w	r8, #1
 804953c:	f048 0820 	orr.w	r8, r8, #32
 8049540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8049542:	601c      	str	r4, [r3, #0]
 8049544:	9b02      	ldr	r3, [sp, #8]
 8049546:	601e      	str	r6, [r3, #0]
 8049548:	e6a2      	b.n	8049290 <__gethex+0x114>
 804954a:	4290      	cmp	r0, r2
 804954c:	f842 3c04 	str.w	r3, [r2, #-4]
 8049550:	d8d6      	bhi.n	8049500 <__gethex+0x384>
 8049552:	68a2      	ldr	r2, [r4, #8]
 8049554:	4593      	cmp	fp, r2
 8049556:	db17      	blt.n	8049588 <__gethex+0x40c>
 8049558:	6861      	ldr	r1, [r4, #4]
 804955a:	4648      	mov	r0, r9
 804955c:	3101      	adds	r1, #1
 804955e:	f000 f90f 	bl	8049780 <_Balloc>
 8049562:	4682      	mov	sl, r0
 8049564:	b918      	cbnz	r0, 804956e <__gethex+0x3f2>
 8049566:	4b1b      	ldr	r3, [pc, #108]	; (80495d4 <__gethex+0x458>)
 8049568:	4602      	mov	r2, r0
 804956a:	2184      	movs	r1, #132	; 0x84
 804956c:	e6b3      	b.n	80492d6 <__gethex+0x15a>
 804956e:	6922      	ldr	r2, [r4, #16]
 8049570:	3202      	adds	r2, #2
 8049572:	f104 010c 	add.w	r1, r4, #12
 8049576:	0092      	lsls	r2, r2, #2
 8049578:	300c      	adds	r0, #12
 804957a:	f7fe febb 	bl	80482f4 <memcpy>
 804957e:	4621      	mov	r1, r4
 8049580:	4648      	mov	r0, r9
 8049582:	f000 f93d 	bl	8049800 <_Bfree>
 8049586:	4654      	mov	r4, sl
 8049588:	6922      	ldr	r2, [r4, #16]
 804958a:	1c51      	adds	r1, r2, #1
 804958c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8049590:	6121      	str	r1, [r4, #16]
 8049592:	2101      	movs	r1, #1
 8049594:	6151      	str	r1, [r2, #20]
 8049596:	e7bc      	b.n	8049512 <__gethex+0x396>
 8049598:	6921      	ldr	r1, [r4, #16]
 804959a:	4559      	cmp	r1, fp
 804959c:	dd0b      	ble.n	80495b6 <__gethex+0x43a>
 804959e:	2101      	movs	r1, #1
 80495a0:	4620      	mov	r0, r4
 80495a2:	f7ff fd83 	bl	80490ac <rshift>
 80495a6:	68bb      	ldr	r3, [r7, #8]
 80495a8:	3601      	adds	r6, #1
 80495aa:	42b3      	cmp	r3, r6
 80495ac:	f6ff aedb 	blt.w	8049366 <__gethex+0x1ea>
 80495b0:	f04f 0801 	mov.w	r8, #1
 80495b4:	e7c2      	b.n	804953c <__gethex+0x3c0>
 80495b6:	f015 051f 	ands.w	r5, r5, #31
 80495ba:	d0f9      	beq.n	80495b0 <__gethex+0x434>
 80495bc:	9b01      	ldr	r3, [sp, #4]
 80495be:	441a      	add	r2, r3
 80495c0:	f1c5 0520 	rsb	r5, r5, #32
 80495c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80495c8:	f000 f9cc 	bl	8049964 <__hi0bits>
 80495cc:	42a8      	cmp	r0, r5
 80495ce:	dbe6      	blt.n	804959e <__gethex+0x422>
 80495d0:	e7ee      	b.n	80495b0 <__gethex+0x434>
 80495d2:	bf00      	nop
 80495d4:	0804b101 	.word	0x0804b101

080495d8 <L_shift>:
 80495d8:	f1c2 0208 	rsb	r2, r2, #8
 80495dc:	0092      	lsls	r2, r2, #2
 80495de:	b570      	push	{r4, r5, r6, lr}
 80495e0:	f1c2 0620 	rsb	r6, r2, #32
 80495e4:	6843      	ldr	r3, [r0, #4]
 80495e6:	6804      	ldr	r4, [r0, #0]
 80495e8:	fa03 f506 	lsl.w	r5, r3, r6
 80495ec:	432c      	orrs	r4, r5
 80495ee:	40d3      	lsrs	r3, r2
 80495f0:	6004      	str	r4, [r0, #0]
 80495f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80495f6:	4288      	cmp	r0, r1
 80495f8:	d3f4      	bcc.n	80495e4 <L_shift+0xc>
 80495fa:	bd70      	pop	{r4, r5, r6, pc}

080495fc <__match>:
 80495fc:	b530      	push	{r4, r5, lr}
 80495fe:	6803      	ldr	r3, [r0, #0]
 8049600:	3301      	adds	r3, #1
 8049602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8049606:	b914      	cbnz	r4, 804960e <__match+0x12>
 8049608:	6003      	str	r3, [r0, #0]
 804960a:	2001      	movs	r0, #1
 804960c:	bd30      	pop	{r4, r5, pc}
 804960e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8049612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8049616:	2d19      	cmp	r5, #25
 8049618:	bf98      	it	ls
 804961a:	3220      	addls	r2, #32
 804961c:	42a2      	cmp	r2, r4
 804961e:	d0f0      	beq.n	8049602 <__match+0x6>
 8049620:	2000      	movs	r0, #0
 8049622:	e7f3      	b.n	804960c <__match+0x10>

08049624 <__hexnan>:
 8049624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049628:	680b      	ldr	r3, [r1, #0]
 804962a:	6801      	ldr	r1, [r0, #0]
 804962c:	115e      	asrs	r6, r3, #5
 804962e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8049632:	f013 031f 	ands.w	r3, r3, #31
 8049636:	b087      	sub	sp, #28
 8049638:	bf18      	it	ne
 804963a:	3604      	addne	r6, #4
 804963c:	2500      	movs	r5, #0
 804963e:	1f37      	subs	r7, r6, #4
 8049640:	4682      	mov	sl, r0
 8049642:	4690      	mov	r8, r2
 8049644:	9301      	str	r3, [sp, #4]
 8049646:	f846 5c04 	str.w	r5, [r6, #-4]
 804964a:	46b9      	mov	r9, r7
 804964c:	463c      	mov	r4, r7
 804964e:	9502      	str	r5, [sp, #8]
 8049650:	46ab      	mov	fp, r5
 8049652:	784a      	ldrb	r2, [r1, #1]
 8049654:	1c4b      	adds	r3, r1, #1
 8049656:	9303      	str	r3, [sp, #12]
 8049658:	b342      	cbz	r2, 80496ac <__hexnan+0x88>
 804965a:	4610      	mov	r0, r2
 804965c:	9105      	str	r1, [sp, #20]
 804965e:	9204      	str	r2, [sp, #16]
 8049660:	f7ff fd76 	bl	8049150 <__hexdig_fun>
 8049664:	2800      	cmp	r0, #0
 8049666:	d14f      	bne.n	8049708 <__hexnan+0xe4>
 8049668:	9a04      	ldr	r2, [sp, #16]
 804966a:	9905      	ldr	r1, [sp, #20]
 804966c:	2a20      	cmp	r2, #32
 804966e:	d818      	bhi.n	80496a2 <__hexnan+0x7e>
 8049670:	9b02      	ldr	r3, [sp, #8]
 8049672:	459b      	cmp	fp, r3
 8049674:	dd13      	ble.n	804969e <__hexnan+0x7a>
 8049676:	454c      	cmp	r4, r9
 8049678:	d206      	bcs.n	8049688 <__hexnan+0x64>
 804967a:	2d07      	cmp	r5, #7
 804967c:	dc04      	bgt.n	8049688 <__hexnan+0x64>
 804967e:	462a      	mov	r2, r5
 8049680:	4649      	mov	r1, r9
 8049682:	4620      	mov	r0, r4
 8049684:	f7ff ffa8 	bl	80495d8 <L_shift>
 8049688:	4544      	cmp	r4, r8
 804968a:	d950      	bls.n	804972e <__hexnan+0x10a>
 804968c:	2300      	movs	r3, #0
 804968e:	f1a4 0904 	sub.w	r9, r4, #4
 8049692:	f844 3c04 	str.w	r3, [r4, #-4]
 8049696:	f8cd b008 	str.w	fp, [sp, #8]
 804969a:	464c      	mov	r4, r9
 804969c:	461d      	mov	r5, r3
 804969e:	9903      	ldr	r1, [sp, #12]
 80496a0:	e7d7      	b.n	8049652 <__hexnan+0x2e>
 80496a2:	2a29      	cmp	r2, #41	; 0x29
 80496a4:	d155      	bne.n	8049752 <__hexnan+0x12e>
 80496a6:	3102      	adds	r1, #2
 80496a8:	f8ca 1000 	str.w	r1, [sl]
 80496ac:	f1bb 0f00 	cmp.w	fp, #0
 80496b0:	d04f      	beq.n	8049752 <__hexnan+0x12e>
 80496b2:	454c      	cmp	r4, r9
 80496b4:	d206      	bcs.n	80496c4 <__hexnan+0xa0>
 80496b6:	2d07      	cmp	r5, #7
 80496b8:	dc04      	bgt.n	80496c4 <__hexnan+0xa0>
 80496ba:	462a      	mov	r2, r5
 80496bc:	4649      	mov	r1, r9
 80496be:	4620      	mov	r0, r4
 80496c0:	f7ff ff8a 	bl	80495d8 <L_shift>
 80496c4:	4544      	cmp	r4, r8
 80496c6:	d934      	bls.n	8049732 <__hexnan+0x10e>
 80496c8:	f1a8 0204 	sub.w	r2, r8, #4
 80496cc:	4623      	mov	r3, r4
 80496ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80496d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80496d6:	429f      	cmp	r7, r3
 80496d8:	d2f9      	bcs.n	80496ce <__hexnan+0xaa>
 80496da:	1b3b      	subs	r3, r7, r4
 80496dc:	f023 0303 	bic.w	r3, r3, #3
 80496e0:	3304      	adds	r3, #4
 80496e2:	3e03      	subs	r6, #3
 80496e4:	3401      	adds	r4, #1
 80496e6:	42a6      	cmp	r6, r4
 80496e8:	bf38      	it	cc
 80496ea:	2304      	movcc	r3, #4
 80496ec:	4443      	add	r3, r8
 80496ee:	2200      	movs	r2, #0
 80496f0:	f843 2b04 	str.w	r2, [r3], #4
 80496f4:	429f      	cmp	r7, r3
 80496f6:	d2fb      	bcs.n	80496f0 <__hexnan+0xcc>
 80496f8:	683b      	ldr	r3, [r7, #0]
 80496fa:	b91b      	cbnz	r3, 8049704 <__hexnan+0xe0>
 80496fc:	4547      	cmp	r7, r8
 80496fe:	d126      	bne.n	804974e <__hexnan+0x12a>
 8049700:	2301      	movs	r3, #1
 8049702:	603b      	str	r3, [r7, #0]
 8049704:	2005      	movs	r0, #5
 8049706:	e025      	b.n	8049754 <__hexnan+0x130>
 8049708:	3501      	adds	r5, #1
 804970a:	2d08      	cmp	r5, #8
 804970c:	f10b 0b01 	add.w	fp, fp, #1
 8049710:	dd06      	ble.n	8049720 <__hexnan+0xfc>
 8049712:	4544      	cmp	r4, r8
 8049714:	d9c3      	bls.n	804969e <__hexnan+0x7a>
 8049716:	2300      	movs	r3, #0
 8049718:	f844 3c04 	str.w	r3, [r4, #-4]
 804971c:	2501      	movs	r5, #1
 804971e:	3c04      	subs	r4, #4
 8049720:	6822      	ldr	r2, [r4, #0]
 8049722:	f000 000f 	and.w	r0, r0, #15
 8049726:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 804972a:	6020      	str	r0, [r4, #0]
 804972c:	e7b7      	b.n	804969e <__hexnan+0x7a>
 804972e:	2508      	movs	r5, #8
 8049730:	e7b5      	b.n	804969e <__hexnan+0x7a>
 8049732:	9b01      	ldr	r3, [sp, #4]
 8049734:	2b00      	cmp	r3, #0
 8049736:	d0df      	beq.n	80496f8 <__hexnan+0xd4>
 8049738:	f1c3 0320 	rsb	r3, r3, #32
 804973c:	f04f 32ff 	mov.w	r2, #4294967295
 8049740:	40da      	lsrs	r2, r3
 8049742:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8049746:	4013      	ands	r3, r2
 8049748:	f846 3c04 	str.w	r3, [r6, #-4]
 804974c:	e7d4      	b.n	80496f8 <__hexnan+0xd4>
 804974e:	3f04      	subs	r7, #4
 8049750:	e7d2      	b.n	80496f8 <__hexnan+0xd4>
 8049752:	2004      	movs	r0, #4
 8049754:	b007      	add	sp, #28
 8049756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804975a <__ascii_mbtowc>:
 804975a:	b082      	sub	sp, #8
 804975c:	b901      	cbnz	r1, 8049760 <__ascii_mbtowc+0x6>
 804975e:	a901      	add	r1, sp, #4
 8049760:	b142      	cbz	r2, 8049774 <__ascii_mbtowc+0x1a>
 8049762:	b14b      	cbz	r3, 8049778 <__ascii_mbtowc+0x1e>
 8049764:	7813      	ldrb	r3, [r2, #0]
 8049766:	600b      	str	r3, [r1, #0]
 8049768:	7812      	ldrb	r2, [r2, #0]
 804976a:	1e10      	subs	r0, r2, #0
 804976c:	bf18      	it	ne
 804976e:	2001      	movne	r0, #1
 8049770:	b002      	add	sp, #8
 8049772:	4770      	bx	lr
 8049774:	4610      	mov	r0, r2
 8049776:	e7fb      	b.n	8049770 <__ascii_mbtowc+0x16>
 8049778:	f06f 0001 	mvn.w	r0, #1
 804977c:	e7f8      	b.n	8049770 <__ascii_mbtowc+0x16>
	...

08049780 <_Balloc>:
 8049780:	b570      	push	{r4, r5, r6, lr}
 8049782:	69c6      	ldr	r6, [r0, #28]
 8049784:	4604      	mov	r4, r0
 8049786:	460d      	mov	r5, r1
 8049788:	b976      	cbnz	r6, 80497a8 <_Balloc+0x28>
 804978a:	2010      	movs	r0, #16
 804978c:	f7fd f82a 	bl	80467e4 <malloc>
 8049790:	4602      	mov	r2, r0
 8049792:	61e0      	str	r0, [r4, #28]
 8049794:	b920      	cbnz	r0, 80497a0 <_Balloc+0x20>
 8049796:	4b18      	ldr	r3, [pc, #96]	; (80497f8 <_Balloc+0x78>)
 8049798:	4818      	ldr	r0, [pc, #96]	; (80497fc <_Balloc+0x7c>)
 804979a:	216b      	movs	r1, #107	; 0x6b
 804979c:	f000 feb8 	bl	804a510 <__assert_func>
 80497a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80497a4:	6006      	str	r6, [r0, #0]
 80497a6:	60c6      	str	r6, [r0, #12]
 80497a8:	69e6      	ldr	r6, [r4, #28]
 80497aa:	68f3      	ldr	r3, [r6, #12]
 80497ac:	b183      	cbz	r3, 80497d0 <_Balloc+0x50>
 80497ae:	69e3      	ldr	r3, [r4, #28]
 80497b0:	68db      	ldr	r3, [r3, #12]
 80497b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80497b6:	b9b8      	cbnz	r0, 80497e8 <_Balloc+0x68>
 80497b8:	2101      	movs	r1, #1
 80497ba:	fa01 f605 	lsl.w	r6, r1, r5
 80497be:	1d72      	adds	r2, r6, #5
 80497c0:	0092      	lsls	r2, r2, #2
 80497c2:	4620      	mov	r0, r4
 80497c4:	f000 fec2 	bl	804a54c <_calloc_r>
 80497c8:	b160      	cbz	r0, 80497e4 <_Balloc+0x64>
 80497ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80497ce:	e00e      	b.n	80497ee <_Balloc+0x6e>
 80497d0:	2221      	movs	r2, #33	; 0x21
 80497d2:	2104      	movs	r1, #4
 80497d4:	4620      	mov	r0, r4
 80497d6:	f000 feb9 	bl	804a54c <_calloc_r>
 80497da:	69e3      	ldr	r3, [r4, #28]
 80497dc:	60f0      	str	r0, [r6, #12]
 80497de:	68db      	ldr	r3, [r3, #12]
 80497e0:	2b00      	cmp	r3, #0
 80497e2:	d1e4      	bne.n	80497ae <_Balloc+0x2e>
 80497e4:	2000      	movs	r0, #0
 80497e6:	bd70      	pop	{r4, r5, r6, pc}
 80497e8:	6802      	ldr	r2, [r0, #0]
 80497ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80497ee:	2300      	movs	r3, #0
 80497f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80497f4:	e7f7      	b.n	80497e6 <_Balloc+0x66>
 80497f6:	bf00      	nop
 80497f8:	0804b092 	.word	0x0804b092
 80497fc:	0804b172 	.word	0x0804b172

08049800 <_Bfree>:
 8049800:	b570      	push	{r4, r5, r6, lr}
 8049802:	69c6      	ldr	r6, [r0, #28]
 8049804:	4605      	mov	r5, r0
 8049806:	460c      	mov	r4, r1
 8049808:	b976      	cbnz	r6, 8049828 <_Bfree+0x28>
 804980a:	2010      	movs	r0, #16
 804980c:	f7fc ffea 	bl	80467e4 <malloc>
 8049810:	4602      	mov	r2, r0
 8049812:	61e8      	str	r0, [r5, #28]
 8049814:	b920      	cbnz	r0, 8049820 <_Bfree+0x20>
 8049816:	4b09      	ldr	r3, [pc, #36]	; (804983c <_Bfree+0x3c>)
 8049818:	4809      	ldr	r0, [pc, #36]	; (8049840 <_Bfree+0x40>)
 804981a:	218f      	movs	r1, #143	; 0x8f
 804981c:	f000 fe78 	bl	804a510 <__assert_func>
 8049820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8049824:	6006      	str	r6, [r0, #0]
 8049826:	60c6      	str	r6, [r0, #12]
 8049828:	b13c      	cbz	r4, 804983a <_Bfree+0x3a>
 804982a:	69eb      	ldr	r3, [r5, #28]
 804982c:	6862      	ldr	r2, [r4, #4]
 804982e:	68db      	ldr	r3, [r3, #12]
 8049830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8049834:	6021      	str	r1, [r4, #0]
 8049836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 804983a:	bd70      	pop	{r4, r5, r6, pc}
 804983c:	0804b092 	.word	0x0804b092
 8049840:	0804b172 	.word	0x0804b172

08049844 <__multadd>:
 8049844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049848:	690d      	ldr	r5, [r1, #16]
 804984a:	4607      	mov	r7, r0
 804984c:	460c      	mov	r4, r1
 804984e:	461e      	mov	r6, r3
 8049850:	f101 0c14 	add.w	ip, r1, #20
 8049854:	2000      	movs	r0, #0
 8049856:	f8dc 3000 	ldr.w	r3, [ip]
 804985a:	b299      	uxth	r1, r3
 804985c:	fb02 6101 	mla	r1, r2, r1, r6
 8049860:	0c1e      	lsrs	r6, r3, #16
 8049862:	0c0b      	lsrs	r3, r1, #16
 8049864:	fb02 3306 	mla	r3, r2, r6, r3
 8049868:	b289      	uxth	r1, r1
 804986a:	3001      	adds	r0, #1
 804986c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8049870:	4285      	cmp	r5, r0
 8049872:	f84c 1b04 	str.w	r1, [ip], #4
 8049876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 804987a:	dcec      	bgt.n	8049856 <__multadd+0x12>
 804987c:	b30e      	cbz	r6, 80498c2 <__multadd+0x7e>
 804987e:	68a3      	ldr	r3, [r4, #8]
 8049880:	42ab      	cmp	r3, r5
 8049882:	dc19      	bgt.n	80498b8 <__multadd+0x74>
 8049884:	6861      	ldr	r1, [r4, #4]
 8049886:	4638      	mov	r0, r7
 8049888:	3101      	adds	r1, #1
 804988a:	f7ff ff79 	bl	8049780 <_Balloc>
 804988e:	4680      	mov	r8, r0
 8049890:	b928      	cbnz	r0, 804989e <__multadd+0x5a>
 8049892:	4602      	mov	r2, r0
 8049894:	4b0c      	ldr	r3, [pc, #48]	; (80498c8 <__multadd+0x84>)
 8049896:	480d      	ldr	r0, [pc, #52]	; (80498cc <__multadd+0x88>)
 8049898:	21ba      	movs	r1, #186	; 0xba
 804989a:	f000 fe39 	bl	804a510 <__assert_func>
 804989e:	6922      	ldr	r2, [r4, #16]
 80498a0:	3202      	adds	r2, #2
 80498a2:	f104 010c 	add.w	r1, r4, #12
 80498a6:	0092      	lsls	r2, r2, #2
 80498a8:	300c      	adds	r0, #12
 80498aa:	f7fe fd23 	bl	80482f4 <memcpy>
 80498ae:	4621      	mov	r1, r4
 80498b0:	4638      	mov	r0, r7
 80498b2:	f7ff ffa5 	bl	8049800 <_Bfree>
 80498b6:	4644      	mov	r4, r8
 80498b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80498bc:	3501      	adds	r5, #1
 80498be:	615e      	str	r6, [r3, #20]
 80498c0:	6125      	str	r5, [r4, #16]
 80498c2:	4620      	mov	r0, r4
 80498c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80498c8:	0804b101 	.word	0x0804b101
 80498cc:	0804b172 	.word	0x0804b172

080498d0 <__s2b>:
 80498d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80498d4:	460c      	mov	r4, r1
 80498d6:	4615      	mov	r5, r2
 80498d8:	461f      	mov	r7, r3
 80498da:	2209      	movs	r2, #9
 80498dc:	3308      	adds	r3, #8
 80498de:	4606      	mov	r6, r0
 80498e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80498e4:	2100      	movs	r1, #0
 80498e6:	2201      	movs	r2, #1
 80498e8:	429a      	cmp	r2, r3
 80498ea:	db09      	blt.n	8049900 <__s2b+0x30>
 80498ec:	4630      	mov	r0, r6
 80498ee:	f7ff ff47 	bl	8049780 <_Balloc>
 80498f2:	b940      	cbnz	r0, 8049906 <__s2b+0x36>
 80498f4:	4602      	mov	r2, r0
 80498f6:	4b19      	ldr	r3, [pc, #100]	; (804995c <__s2b+0x8c>)
 80498f8:	4819      	ldr	r0, [pc, #100]	; (8049960 <__s2b+0x90>)
 80498fa:	21d3      	movs	r1, #211	; 0xd3
 80498fc:	f000 fe08 	bl	804a510 <__assert_func>
 8049900:	0052      	lsls	r2, r2, #1
 8049902:	3101      	adds	r1, #1
 8049904:	e7f0      	b.n	80498e8 <__s2b+0x18>
 8049906:	9b08      	ldr	r3, [sp, #32]
 8049908:	6143      	str	r3, [r0, #20]
 804990a:	2d09      	cmp	r5, #9
 804990c:	f04f 0301 	mov.w	r3, #1
 8049910:	6103      	str	r3, [r0, #16]
 8049912:	dd16      	ble.n	8049942 <__s2b+0x72>
 8049914:	f104 0909 	add.w	r9, r4, #9
 8049918:	46c8      	mov	r8, r9
 804991a:	442c      	add	r4, r5
 804991c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8049920:	4601      	mov	r1, r0
 8049922:	3b30      	subs	r3, #48	; 0x30
 8049924:	220a      	movs	r2, #10
 8049926:	4630      	mov	r0, r6
 8049928:	f7ff ff8c 	bl	8049844 <__multadd>
 804992c:	45a0      	cmp	r8, r4
 804992e:	d1f5      	bne.n	804991c <__s2b+0x4c>
 8049930:	f1a5 0408 	sub.w	r4, r5, #8
 8049934:	444c      	add	r4, r9
 8049936:	1b2d      	subs	r5, r5, r4
 8049938:	1963      	adds	r3, r4, r5
 804993a:	42bb      	cmp	r3, r7
 804993c:	db04      	blt.n	8049948 <__s2b+0x78>
 804993e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8049942:	340a      	adds	r4, #10
 8049944:	2509      	movs	r5, #9
 8049946:	e7f6      	b.n	8049936 <__s2b+0x66>
 8049948:	f814 3b01 	ldrb.w	r3, [r4], #1
 804994c:	4601      	mov	r1, r0
 804994e:	3b30      	subs	r3, #48	; 0x30
 8049950:	220a      	movs	r2, #10
 8049952:	4630      	mov	r0, r6
 8049954:	f7ff ff76 	bl	8049844 <__multadd>
 8049958:	e7ee      	b.n	8049938 <__s2b+0x68>
 804995a:	bf00      	nop
 804995c:	0804b101 	.word	0x0804b101
 8049960:	0804b172 	.word	0x0804b172

08049964 <__hi0bits>:
 8049964:	0c03      	lsrs	r3, r0, #16
 8049966:	041b      	lsls	r3, r3, #16
 8049968:	b9d3      	cbnz	r3, 80499a0 <__hi0bits+0x3c>
 804996a:	0400      	lsls	r0, r0, #16
 804996c:	2310      	movs	r3, #16
 804996e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8049972:	bf04      	itt	eq
 8049974:	0200      	lsleq	r0, r0, #8
 8049976:	3308      	addeq	r3, #8
 8049978:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 804997c:	bf04      	itt	eq
 804997e:	0100      	lsleq	r0, r0, #4
 8049980:	3304      	addeq	r3, #4
 8049982:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8049986:	bf04      	itt	eq
 8049988:	0080      	lsleq	r0, r0, #2
 804998a:	3302      	addeq	r3, #2
 804998c:	2800      	cmp	r0, #0
 804998e:	db05      	blt.n	804999c <__hi0bits+0x38>
 8049990:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8049994:	f103 0301 	add.w	r3, r3, #1
 8049998:	bf08      	it	eq
 804999a:	2320      	moveq	r3, #32
 804999c:	4618      	mov	r0, r3
 804999e:	4770      	bx	lr
 80499a0:	2300      	movs	r3, #0
 80499a2:	e7e4      	b.n	804996e <__hi0bits+0xa>

080499a4 <__lo0bits>:
 80499a4:	6803      	ldr	r3, [r0, #0]
 80499a6:	f013 0207 	ands.w	r2, r3, #7
 80499aa:	d00c      	beq.n	80499c6 <__lo0bits+0x22>
 80499ac:	07d9      	lsls	r1, r3, #31
 80499ae:	d422      	bmi.n	80499f6 <__lo0bits+0x52>
 80499b0:	079a      	lsls	r2, r3, #30
 80499b2:	bf49      	itett	mi
 80499b4:	085b      	lsrmi	r3, r3, #1
 80499b6:	089b      	lsrpl	r3, r3, #2
 80499b8:	6003      	strmi	r3, [r0, #0]
 80499ba:	2201      	movmi	r2, #1
 80499bc:	bf5c      	itt	pl
 80499be:	6003      	strpl	r3, [r0, #0]
 80499c0:	2202      	movpl	r2, #2
 80499c2:	4610      	mov	r0, r2
 80499c4:	4770      	bx	lr
 80499c6:	b299      	uxth	r1, r3
 80499c8:	b909      	cbnz	r1, 80499ce <__lo0bits+0x2a>
 80499ca:	0c1b      	lsrs	r3, r3, #16
 80499cc:	2210      	movs	r2, #16
 80499ce:	b2d9      	uxtb	r1, r3
 80499d0:	b909      	cbnz	r1, 80499d6 <__lo0bits+0x32>
 80499d2:	3208      	adds	r2, #8
 80499d4:	0a1b      	lsrs	r3, r3, #8
 80499d6:	0719      	lsls	r1, r3, #28
 80499d8:	bf04      	itt	eq
 80499da:	091b      	lsreq	r3, r3, #4
 80499dc:	3204      	addeq	r2, #4
 80499de:	0799      	lsls	r1, r3, #30
 80499e0:	bf04      	itt	eq
 80499e2:	089b      	lsreq	r3, r3, #2
 80499e4:	3202      	addeq	r2, #2
 80499e6:	07d9      	lsls	r1, r3, #31
 80499e8:	d403      	bmi.n	80499f2 <__lo0bits+0x4e>
 80499ea:	085b      	lsrs	r3, r3, #1
 80499ec:	f102 0201 	add.w	r2, r2, #1
 80499f0:	d003      	beq.n	80499fa <__lo0bits+0x56>
 80499f2:	6003      	str	r3, [r0, #0]
 80499f4:	e7e5      	b.n	80499c2 <__lo0bits+0x1e>
 80499f6:	2200      	movs	r2, #0
 80499f8:	e7e3      	b.n	80499c2 <__lo0bits+0x1e>
 80499fa:	2220      	movs	r2, #32
 80499fc:	e7e1      	b.n	80499c2 <__lo0bits+0x1e>
	...

08049a00 <__i2b>:
 8049a00:	b510      	push	{r4, lr}
 8049a02:	460c      	mov	r4, r1
 8049a04:	2101      	movs	r1, #1
 8049a06:	f7ff febb 	bl	8049780 <_Balloc>
 8049a0a:	4602      	mov	r2, r0
 8049a0c:	b928      	cbnz	r0, 8049a1a <__i2b+0x1a>
 8049a0e:	4b05      	ldr	r3, [pc, #20]	; (8049a24 <__i2b+0x24>)
 8049a10:	4805      	ldr	r0, [pc, #20]	; (8049a28 <__i2b+0x28>)
 8049a12:	f240 1145 	movw	r1, #325	; 0x145
 8049a16:	f000 fd7b 	bl	804a510 <__assert_func>
 8049a1a:	2301      	movs	r3, #1
 8049a1c:	6144      	str	r4, [r0, #20]
 8049a1e:	6103      	str	r3, [r0, #16]
 8049a20:	bd10      	pop	{r4, pc}
 8049a22:	bf00      	nop
 8049a24:	0804b101 	.word	0x0804b101
 8049a28:	0804b172 	.word	0x0804b172

08049a2c <__multiply>:
 8049a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049a30:	4691      	mov	r9, r2
 8049a32:	690a      	ldr	r2, [r1, #16]
 8049a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8049a38:	429a      	cmp	r2, r3
 8049a3a:	bfb8      	it	lt
 8049a3c:	460b      	movlt	r3, r1
 8049a3e:	460c      	mov	r4, r1
 8049a40:	bfbc      	itt	lt
 8049a42:	464c      	movlt	r4, r9
 8049a44:	4699      	movlt	r9, r3
 8049a46:	6927      	ldr	r7, [r4, #16]
 8049a48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8049a4c:	68a3      	ldr	r3, [r4, #8]
 8049a4e:	6861      	ldr	r1, [r4, #4]
 8049a50:	eb07 060a 	add.w	r6, r7, sl
 8049a54:	42b3      	cmp	r3, r6
 8049a56:	b085      	sub	sp, #20
 8049a58:	bfb8      	it	lt
 8049a5a:	3101      	addlt	r1, #1
 8049a5c:	f7ff fe90 	bl	8049780 <_Balloc>
 8049a60:	b930      	cbnz	r0, 8049a70 <__multiply+0x44>
 8049a62:	4602      	mov	r2, r0
 8049a64:	4b44      	ldr	r3, [pc, #272]	; (8049b78 <__multiply+0x14c>)
 8049a66:	4845      	ldr	r0, [pc, #276]	; (8049b7c <__multiply+0x150>)
 8049a68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8049a6c:	f000 fd50 	bl	804a510 <__assert_func>
 8049a70:	f100 0514 	add.w	r5, r0, #20
 8049a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8049a78:	462b      	mov	r3, r5
 8049a7a:	2200      	movs	r2, #0
 8049a7c:	4543      	cmp	r3, r8
 8049a7e:	d321      	bcc.n	8049ac4 <__multiply+0x98>
 8049a80:	f104 0314 	add.w	r3, r4, #20
 8049a84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8049a88:	f109 0314 	add.w	r3, r9, #20
 8049a8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8049a90:	9202      	str	r2, [sp, #8]
 8049a92:	1b3a      	subs	r2, r7, r4
 8049a94:	3a15      	subs	r2, #21
 8049a96:	f022 0203 	bic.w	r2, r2, #3
 8049a9a:	3204      	adds	r2, #4
 8049a9c:	f104 0115 	add.w	r1, r4, #21
 8049aa0:	428f      	cmp	r7, r1
 8049aa2:	bf38      	it	cc
 8049aa4:	2204      	movcc	r2, #4
 8049aa6:	9201      	str	r2, [sp, #4]
 8049aa8:	9a02      	ldr	r2, [sp, #8]
 8049aaa:	9303      	str	r3, [sp, #12]
 8049aac:	429a      	cmp	r2, r3
 8049aae:	d80c      	bhi.n	8049aca <__multiply+0x9e>
 8049ab0:	2e00      	cmp	r6, #0
 8049ab2:	dd03      	ble.n	8049abc <__multiply+0x90>
 8049ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8049ab8:	2b00      	cmp	r3, #0
 8049aba:	d05b      	beq.n	8049b74 <__multiply+0x148>
 8049abc:	6106      	str	r6, [r0, #16]
 8049abe:	b005      	add	sp, #20
 8049ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049ac4:	f843 2b04 	str.w	r2, [r3], #4
 8049ac8:	e7d8      	b.n	8049a7c <__multiply+0x50>
 8049aca:	f8b3 a000 	ldrh.w	sl, [r3]
 8049ace:	f1ba 0f00 	cmp.w	sl, #0
 8049ad2:	d024      	beq.n	8049b1e <__multiply+0xf2>
 8049ad4:	f104 0e14 	add.w	lr, r4, #20
 8049ad8:	46a9      	mov	r9, r5
 8049ada:	f04f 0c00 	mov.w	ip, #0
 8049ade:	f85e 2b04 	ldr.w	r2, [lr], #4
 8049ae2:	f8d9 1000 	ldr.w	r1, [r9]
 8049ae6:	fa1f fb82 	uxth.w	fp, r2
 8049aea:	b289      	uxth	r1, r1
 8049aec:	fb0a 110b 	mla	r1, sl, fp, r1
 8049af0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8049af4:	f8d9 2000 	ldr.w	r2, [r9]
 8049af8:	4461      	add	r1, ip
 8049afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8049afe:	fb0a c20b 	mla	r2, sl, fp, ip
 8049b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8049b06:	b289      	uxth	r1, r1
 8049b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8049b0c:	4577      	cmp	r7, lr
 8049b0e:	f849 1b04 	str.w	r1, [r9], #4
 8049b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8049b16:	d8e2      	bhi.n	8049ade <__multiply+0xb2>
 8049b18:	9a01      	ldr	r2, [sp, #4]
 8049b1a:	f845 c002 	str.w	ip, [r5, r2]
 8049b1e:	9a03      	ldr	r2, [sp, #12]
 8049b20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8049b24:	3304      	adds	r3, #4
 8049b26:	f1b9 0f00 	cmp.w	r9, #0
 8049b2a:	d021      	beq.n	8049b70 <__multiply+0x144>
 8049b2c:	6829      	ldr	r1, [r5, #0]
 8049b2e:	f104 0c14 	add.w	ip, r4, #20
 8049b32:	46ae      	mov	lr, r5
 8049b34:	f04f 0a00 	mov.w	sl, #0
 8049b38:	f8bc b000 	ldrh.w	fp, [ip]
 8049b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8049b40:	fb09 220b 	mla	r2, r9, fp, r2
 8049b44:	4452      	add	r2, sl
 8049b46:	b289      	uxth	r1, r1
 8049b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8049b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8049b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8049b54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8049b58:	f8be 1000 	ldrh.w	r1, [lr]
 8049b5c:	fb09 110a 	mla	r1, r9, sl, r1
 8049b60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8049b64:	4567      	cmp	r7, ip
 8049b66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8049b6a:	d8e5      	bhi.n	8049b38 <__multiply+0x10c>
 8049b6c:	9a01      	ldr	r2, [sp, #4]
 8049b6e:	50a9      	str	r1, [r5, r2]
 8049b70:	3504      	adds	r5, #4
 8049b72:	e799      	b.n	8049aa8 <__multiply+0x7c>
 8049b74:	3e01      	subs	r6, #1
 8049b76:	e79b      	b.n	8049ab0 <__multiply+0x84>
 8049b78:	0804b101 	.word	0x0804b101
 8049b7c:	0804b172 	.word	0x0804b172

08049b80 <__pow5mult>:
 8049b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8049b84:	4615      	mov	r5, r2
 8049b86:	f012 0203 	ands.w	r2, r2, #3
 8049b8a:	4606      	mov	r6, r0
 8049b8c:	460f      	mov	r7, r1
 8049b8e:	d007      	beq.n	8049ba0 <__pow5mult+0x20>
 8049b90:	4c25      	ldr	r4, [pc, #148]	; (8049c28 <__pow5mult+0xa8>)
 8049b92:	3a01      	subs	r2, #1
 8049b94:	2300      	movs	r3, #0
 8049b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8049b9a:	f7ff fe53 	bl	8049844 <__multadd>
 8049b9e:	4607      	mov	r7, r0
 8049ba0:	10ad      	asrs	r5, r5, #2
 8049ba2:	d03d      	beq.n	8049c20 <__pow5mult+0xa0>
 8049ba4:	69f4      	ldr	r4, [r6, #28]
 8049ba6:	b97c      	cbnz	r4, 8049bc8 <__pow5mult+0x48>
 8049ba8:	2010      	movs	r0, #16
 8049baa:	f7fc fe1b 	bl	80467e4 <malloc>
 8049bae:	4602      	mov	r2, r0
 8049bb0:	61f0      	str	r0, [r6, #28]
 8049bb2:	b928      	cbnz	r0, 8049bc0 <__pow5mult+0x40>
 8049bb4:	4b1d      	ldr	r3, [pc, #116]	; (8049c2c <__pow5mult+0xac>)
 8049bb6:	481e      	ldr	r0, [pc, #120]	; (8049c30 <__pow5mult+0xb0>)
 8049bb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8049bbc:	f000 fca8 	bl	804a510 <__assert_func>
 8049bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8049bc4:	6004      	str	r4, [r0, #0]
 8049bc6:	60c4      	str	r4, [r0, #12]
 8049bc8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8049bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8049bd0:	b94c      	cbnz	r4, 8049be6 <__pow5mult+0x66>
 8049bd2:	f240 2171 	movw	r1, #625	; 0x271
 8049bd6:	4630      	mov	r0, r6
 8049bd8:	f7ff ff12 	bl	8049a00 <__i2b>
 8049bdc:	2300      	movs	r3, #0
 8049bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8049be2:	4604      	mov	r4, r0
 8049be4:	6003      	str	r3, [r0, #0]
 8049be6:	f04f 0900 	mov.w	r9, #0
 8049bea:	07eb      	lsls	r3, r5, #31
 8049bec:	d50a      	bpl.n	8049c04 <__pow5mult+0x84>
 8049bee:	4639      	mov	r1, r7
 8049bf0:	4622      	mov	r2, r4
 8049bf2:	4630      	mov	r0, r6
 8049bf4:	f7ff ff1a 	bl	8049a2c <__multiply>
 8049bf8:	4639      	mov	r1, r7
 8049bfa:	4680      	mov	r8, r0
 8049bfc:	4630      	mov	r0, r6
 8049bfe:	f7ff fdff 	bl	8049800 <_Bfree>
 8049c02:	4647      	mov	r7, r8
 8049c04:	106d      	asrs	r5, r5, #1
 8049c06:	d00b      	beq.n	8049c20 <__pow5mult+0xa0>
 8049c08:	6820      	ldr	r0, [r4, #0]
 8049c0a:	b938      	cbnz	r0, 8049c1c <__pow5mult+0x9c>
 8049c0c:	4622      	mov	r2, r4
 8049c0e:	4621      	mov	r1, r4
 8049c10:	4630      	mov	r0, r6
 8049c12:	f7ff ff0b 	bl	8049a2c <__multiply>
 8049c16:	6020      	str	r0, [r4, #0]
 8049c18:	f8c0 9000 	str.w	r9, [r0]
 8049c1c:	4604      	mov	r4, r0
 8049c1e:	e7e4      	b.n	8049bea <__pow5mult+0x6a>
 8049c20:	4638      	mov	r0, r7
 8049c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8049c26:	bf00      	nop
 8049c28:	0804b2c0 	.word	0x0804b2c0
 8049c2c:	0804b092 	.word	0x0804b092
 8049c30:	0804b172 	.word	0x0804b172

08049c34 <__lshift>:
 8049c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049c38:	460c      	mov	r4, r1
 8049c3a:	6849      	ldr	r1, [r1, #4]
 8049c3c:	6923      	ldr	r3, [r4, #16]
 8049c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8049c42:	68a3      	ldr	r3, [r4, #8]
 8049c44:	4607      	mov	r7, r0
 8049c46:	4691      	mov	r9, r2
 8049c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8049c4c:	f108 0601 	add.w	r6, r8, #1
 8049c50:	42b3      	cmp	r3, r6
 8049c52:	db0b      	blt.n	8049c6c <__lshift+0x38>
 8049c54:	4638      	mov	r0, r7
 8049c56:	f7ff fd93 	bl	8049780 <_Balloc>
 8049c5a:	4605      	mov	r5, r0
 8049c5c:	b948      	cbnz	r0, 8049c72 <__lshift+0x3e>
 8049c5e:	4602      	mov	r2, r0
 8049c60:	4b28      	ldr	r3, [pc, #160]	; (8049d04 <__lshift+0xd0>)
 8049c62:	4829      	ldr	r0, [pc, #164]	; (8049d08 <__lshift+0xd4>)
 8049c64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8049c68:	f000 fc52 	bl	804a510 <__assert_func>
 8049c6c:	3101      	adds	r1, #1
 8049c6e:	005b      	lsls	r3, r3, #1
 8049c70:	e7ee      	b.n	8049c50 <__lshift+0x1c>
 8049c72:	2300      	movs	r3, #0
 8049c74:	f100 0114 	add.w	r1, r0, #20
 8049c78:	f100 0210 	add.w	r2, r0, #16
 8049c7c:	4618      	mov	r0, r3
 8049c7e:	4553      	cmp	r3, sl
 8049c80:	db33      	blt.n	8049cea <__lshift+0xb6>
 8049c82:	6920      	ldr	r0, [r4, #16]
 8049c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8049c88:	f104 0314 	add.w	r3, r4, #20
 8049c8c:	f019 091f 	ands.w	r9, r9, #31
 8049c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8049c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8049c98:	d02b      	beq.n	8049cf2 <__lshift+0xbe>
 8049c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8049c9e:	468a      	mov	sl, r1
 8049ca0:	2200      	movs	r2, #0
 8049ca2:	6818      	ldr	r0, [r3, #0]
 8049ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8049ca8:	4310      	orrs	r0, r2
 8049caa:	f84a 0b04 	str.w	r0, [sl], #4
 8049cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8049cb2:	459c      	cmp	ip, r3
 8049cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8049cb8:	d8f3      	bhi.n	8049ca2 <__lshift+0x6e>
 8049cba:	ebac 0304 	sub.w	r3, ip, r4
 8049cbe:	3b15      	subs	r3, #21
 8049cc0:	f023 0303 	bic.w	r3, r3, #3
 8049cc4:	3304      	adds	r3, #4
 8049cc6:	f104 0015 	add.w	r0, r4, #21
 8049cca:	4584      	cmp	ip, r0
 8049ccc:	bf38      	it	cc
 8049cce:	2304      	movcc	r3, #4
 8049cd0:	50ca      	str	r2, [r1, r3]
 8049cd2:	b10a      	cbz	r2, 8049cd8 <__lshift+0xa4>
 8049cd4:	f108 0602 	add.w	r6, r8, #2
 8049cd8:	3e01      	subs	r6, #1
 8049cda:	4638      	mov	r0, r7
 8049cdc:	612e      	str	r6, [r5, #16]
 8049cde:	4621      	mov	r1, r4
 8049ce0:	f7ff fd8e 	bl	8049800 <_Bfree>
 8049ce4:	4628      	mov	r0, r5
 8049ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8049cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8049cee:	3301      	adds	r3, #1
 8049cf0:	e7c5      	b.n	8049c7e <__lshift+0x4a>
 8049cf2:	3904      	subs	r1, #4
 8049cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8049cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8049cfc:	459c      	cmp	ip, r3
 8049cfe:	d8f9      	bhi.n	8049cf4 <__lshift+0xc0>
 8049d00:	e7ea      	b.n	8049cd8 <__lshift+0xa4>
 8049d02:	bf00      	nop
 8049d04:	0804b101 	.word	0x0804b101
 8049d08:	0804b172 	.word	0x0804b172

08049d0c <__mcmp>:
 8049d0c:	b530      	push	{r4, r5, lr}
 8049d0e:	6902      	ldr	r2, [r0, #16]
 8049d10:	690c      	ldr	r4, [r1, #16]
 8049d12:	1b12      	subs	r2, r2, r4
 8049d14:	d10e      	bne.n	8049d34 <__mcmp+0x28>
 8049d16:	f100 0314 	add.w	r3, r0, #20
 8049d1a:	3114      	adds	r1, #20
 8049d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8049d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8049d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8049d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8049d2c:	42a5      	cmp	r5, r4
 8049d2e:	d003      	beq.n	8049d38 <__mcmp+0x2c>
 8049d30:	d305      	bcc.n	8049d3e <__mcmp+0x32>
 8049d32:	2201      	movs	r2, #1
 8049d34:	4610      	mov	r0, r2
 8049d36:	bd30      	pop	{r4, r5, pc}
 8049d38:	4283      	cmp	r3, r0
 8049d3a:	d3f3      	bcc.n	8049d24 <__mcmp+0x18>
 8049d3c:	e7fa      	b.n	8049d34 <__mcmp+0x28>
 8049d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8049d42:	e7f7      	b.n	8049d34 <__mcmp+0x28>

08049d44 <__mdiff>:
 8049d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049d48:	460c      	mov	r4, r1
 8049d4a:	4606      	mov	r6, r0
 8049d4c:	4611      	mov	r1, r2
 8049d4e:	4620      	mov	r0, r4
 8049d50:	4690      	mov	r8, r2
 8049d52:	f7ff ffdb 	bl	8049d0c <__mcmp>
 8049d56:	1e05      	subs	r5, r0, #0
 8049d58:	d110      	bne.n	8049d7c <__mdiff+0x38>
 8049d5a:	4629      	mov	r1, r5
 8049d5c:	4630      	mov	r0, r6
 8049d5e:	f7ff fd0f 	bl	8049780 <_Balloc>
 8049d62:	b930      	cbnz	r0, 8049d72 <__mdiff+0x2e>
 8049d64:	4b3a      	ldr	r3, [pc, #232]	; (8049e50 <__mdiff+0x10c>)
 8049d66:	4602      	mov	r2, r0
 8049d68:	f240 2137 	movw	r1, #567	; 0x237
 8049d6c:	4839      	ldr	r0, [pc, #228]	; (8049e54 <__mdiff+0x110>)
 8049d6e:	f000 fbcf 	bl	804a510 <__assert_func>
 8049d72:	2301      	movs	r3, #1
 8049d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8049d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8049d7c:	bfa4      	itt	ge
 8049d7e:	4643      	movge	r3, r8
 8049d80:	46a0      	movge	r8, r4
 8049d82:	4630      	mov	r0, r6
 8049d84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8049d88:	bfa6      	itte	ge
 8049d8a:	461c      	movge	r4, r3
 8049d8c:	2500      	movge	r5, #0
 8049d8e:	2501      	movlt	r5, #1
 8049d90:	f7ff fcf6 	bl	8049780 <_Balloc>
 8049d94:	b920      	cbnz	r0, 8049da0 <__mdiff+0x5c>
 8049d96:	4b2e      	ldr	r3, [pc, #184]	; (8049e50 <__mdiff+0x10c>)
 8049d98:	4602      	mov	r2, r0
 8049d9a:	f240 2145 	movw	r1, #581	; 0x245
 8049d9e:	e7e5      	b.n	8049d6c <__mdiff+0x28>
 8049da0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8049da4:	6926      	ldr	r6, [r4, #16]
 8049da6:	60c5      	str	r5, [r0, #12]
 8049da8:	f104 0914 	add.w	r9, r4, #20
 8049dac:	f108 0514 	add.w	r5, r8, #20
 8049db0:	f100 0e14 	add.w	lr, r0, #20
 8049db4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8049db8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8049dbc:	f108 0210 	add.w	r2, r8, #16
 8049dc0:	46f2      	mov	sl, lr
 8049dc2:	2100      	movs	r1, #0
 8049dc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8049dc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8049dcc:	fa11 f88b 	uxtah	r8, r1, fp
 8049dd0:	b299      	uxth	r1, r3
 8049dd2:	0c1b      	lsrs	r3, r3, #16
 8049dd4:	eba8 0801 	sub.w	r8, r8, r1
 8049dd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8049ddc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8049de0:	fa1f f888 	uxth.w	r8, r8
 8049de4:	1419      	asrs	r1, r3, #16
 8049de6:	454e      	cmp	r6, r9
 8049de8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8049dec:	f84a 3b04 	str.w	r3, [sl], #4
 8049df0:	d8e8      	bhi.n	8049dc4 <__mdiff+0x80>
 8049df2:	1b33      	subs	r3, r6, r4
 8049df4:	3b15      	subs	r3, #21
 8049df6:	f023 0303 	bic.w	r3, r3, #3
 8049dfa:	3304      	adds	r3, #4
 8049dfc:	3415      	adds	r4, #21
 8049dfe:	42a6      	cmp	r6, r4
 8049e00:	bf38      	it	cc
 8049e02:	2304      	movcc	r3, #4
 8049e04:	441d      	add	r5, r3
 8049e06:	4473      	add	r3, lr
 8049e08:	469e      	mov	lr, r3
 8049e0a:	462e      	mov	r6, r5
 8049e0c:	4566      	cmp	r6, ip
 8049e0e:	d30e      	bcc.n	8049e2e <__mdiff+0xea>
 8049e10:	f10c 0203 	add.w	r2, ip, #3
 8049e14:	1b52      	subs	r2, r2, r5
 8049e16:	f022 0203 	bic.w	r2, r2, #3
 8049e1a:	3d03      	subs	r5, #3
 8049e1c:	45ac      	cmp	ip, r5
 8049e1e:	bf38      	it	cc
 8049e20:	2200      	movcc	r2, #0
 8049e22:	4413      	add	r3, r2
 8049e24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8049e28:	b17a      	cbz	r2, 8049e4a <__mdiff+0x106>
 8049e2a:	6107      	str	r7, [r0, #16]
 8049e2c:	e7a4      	b.n	8049d78 <__mdiff+0x34>
 8049e2e:	f856 8b04 	ldr.w	r8, [r6], #4
 8049e32:	fa11 f288 	uxtah	r2, r1, r8
 8049e36:	1414      	asrs	r4, r2, #16
 8049e38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8049e3c:	b292      	uxth	r2, r2
 8049e3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8049e42:	f84e 2b04 	str.w	r2, [lr], #4
 8049e46:	1421      	asrs	r1, r4, #16
 8049e48:	e7e0      	b.n	8049e0c <__mdiff+0xc8>
 8049e4a:	3f01      	subs	r7, #1
 8049e4c:	e7ea      	b.n	8049e24 <__mdiff+0xe0>
 8049e4e:	bf00      	nop
 8049e50:	0804b101 	.word	0x0804b101
 8049e54:	0804b172 	.word	0x0804b172

08049e58 <__ulp>:
 8049e58:	b082      	sub	sp, #8
 8049e5a:	ed8d 0b00 	vstr	d0, [sp]
 8049e5e:	9a01      	ldr	r2, [sp, #4]
 8049e60:	4b0f      	ldr	r3, [pc, #60]	; (8049ea0 <__ulp+0x48>)
 8049e62:	4013      	ands	r3, r2
 8049e64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8049e68:	2b00      	cmp	r3, #0
 8049e6a:	dc08      	bgt.n	8049e7e <__ulp+0x26>
 8049e6c:	425b      	negs	r3, r3
 8049e6e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8049e72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8049e76:	da04      	bge.n	8049e82 <__ulp+0x2a>
 8049e78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8049e7c:	4113      	asrs	r3, r2
 8049e7e:	2200      	movs	r2, #0
 8049e80:	e008      	b.n	8049e94 <__ulp+0x3c>
 8049e82:	f1a2 0314 	sub.w	r3, r2, #20
 8049e86:	2b1e      	cmp	r3, #30
 8049e88:	bfda      	itte	le
 8049e8a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8049e8e:	40da      	lsrle	r2, r3
 8049e90:	2201      	movgt	r2, #1
 8049e92:	2300      	movs	r3, #0
 8049e94:	4619      	mov	r1, r3
 8049e96:	4610      	mov	r0, r2
 8049e98:	ec41 0b10 	vmov	d0, r0, r1
 8049e9c:	b002      	add	sp, #8
 8049e9e:	4770      	bx	lr
 8049ea0:	7ff00000 	.word	0x7ff00000

08049ea4 <__b2d>:
 8049ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8049ea8:	6906      	ldr	r6, [r0, #16]
 8049eaa:	f100 0814 	add.w	r8, r0, #20
 8049eae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8049eb2:	1f37      	subs	r7, r6, #4
 8049eb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8049eb8:	4610      	mov	r0, r2
 8049eba:	f7ff fd53 	bl	8049964 <__hi0bits>
 8049ebe:	f1c0 0320 	rsb	r3, r0, #32
 8049ec2:	280a      	cmp	r0, #10
 8049ec4:	600b      	str	r3, [r1, #0]
 8049ec6:	491b      	ldr	r1, [pc, #108]	; (8049f34 <__b2d+0x90>)
 8049ec8:	dc15      	bgt.n	8049ef6 <__b2d+0x52>
 8049eca:	f1c0 0c0b 	rsb	ip, r0, #11
 8049ece:	fa22 f30c 	lsr.w	r3, r2, ip
 8049ed2:	45b8      	cmp	r8, r7
 8049ed4:	ea43 0501 	orr.w	r5, r3, r1
 8049ed8:	bf34      	ite	cc
 8049eda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8049ede:	2300      	movcs	r3, #0
 8049ee0:	3015      	adds	r0, #21
 8049ee2:	fa02 f000 	lsl.w	r0, r2, r0
 8049ee6:	fa23 f30c 	lsr.w	r3, r3, ip
 8049eea:	4303      	orrs	r3, r0
 8049eec:	461c      	mov	r4, r3
 8049eee:	ec45 4b10 	vmov	d0, r4, r5
 8049ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8049ef6:	45b8      	cmp	r8, r7
 8049ef8:	bf3a      	itte	cc
 8049efa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8049efe:	f1a6 0708 	subcc.w	r7, r6, #8
 8049f02:	2300      	movcs	r3, #0
 8049f04:	380b      	subs	r0, #11
 8049f06:	d012      	beq.n	8049f2e <__b2d+0x8a>
 8049f08:	f1c0 0120 	rsb	r1, r0, #32
 8049f0c:	fa23 f401 	lsr.w	r4, r3, r1
 8049f10:	4082      	lsls	r2, r0
 8049f12:	4322      	orrs	r2, r4
 8049f14:	4547      	cmp	r7, r8
 8049f16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8049f1a:	bf8c      	ite	hi
 8049f1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8049f20:	2200      	movls	r2, #0
 8049f22:	4083      	lsls	r3, r0
 8049f24:	40ca      	lsrs	r2, r1
 8049f26:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8049f2a:	4313      	orrs	r3, r2
 8049f2c:	e7de      	b.n	8049eec <__b2d+0x48>
 8049f2e:	ea42 0501 	orr.w	r5, r2, r1
 8049f32:	e7db      	b.n	8049eec <__b2d+0x48>
 8049f34:	3ff00000 	.word	0x3ff00000

08049f38 <__d2b>:
 8049f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8049f3c:	460f      	mov	r7, r1
 8049f3e:	2101      	movs	r1, #1
 8049f40:	ec59 8b10 	vmov	r8, r9, d0
 8049f44:	4616      	mov	r6, r2
 8049f46:	f7ff fc1b 	bl	8049780 <_Balloc>
 8049f4a:	4604      	mov	r4, r0
 8049f4c:	b930      	cbnz	r0, 8049f5c <__d2b+0x24>
 8049f4e:	4602      	mov	r2, r0
 8049f50:	4b24      	ldr	r3, [pc, #144]	; (8049fe4 <__d2b+0xac>)
 8049f52:	4825      	ldr	r0, [pc, #148]	; (8049fe8 <__d2b+0xb0>)
 8049f54:	f240 310f 	movw	r1, #783	; 0x30f
 8049f58:	f000 fada 	bl	804a510 <__assert_func>
 8049f5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8049f60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8049f64:	bb2d      	cbnz	r5, 8049fb2 <__d2b+0x7a>
 8049f66:	9301      	str	r3, [sp, #4]
 8049f68:	f1b8 0300 	subs.w	r3, r8, #0
 8049f6c:	d026      	beq.n	8049fbc <__d2b+0x84>
 8049f6e:	4668      	mov	r0, sp
 8049f70:	9300      	str	r3, [sp, #0]
 8049f72:	f7ff fd17 	bl	80499a4 <__lo0bits>
 8049f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8049f7a:	b1e8      	cbz	r0, 8049fb8 <__d2b+0x80>
 8049f7c:	f1c0 0320 	rsb	r3, r0, #32
 8049f80:	fa02 f303 	lsl.w	r3, r2, r3
 8049f84:	430b      	orrs	r3, r1
 8049f86:	40c2      	lsrs	r2, r0
 8049f88:	6163      	str	r3, [r4, #20]
 8049f8a:	9201      	str	r2, [sp, #4]
 8049f8c:	9b01      	ldr	r3, [sp, #4]
 8049f8e:	61a3      	str	r3, [r4, #24]
 8049f90:	2b00      	cmp	r3, #0
 8049f92:	bf14      	ite	ne
 8049f94:	2202      	movne	r2, #2
 8049f96:	2201      	moveq	r2, #1
 8049f98:	6122      	str	r2, [r4, #16]
 8049f9a:	b1bd      	cbz	r5, 8049fcc <__d2b+0x94>
 8049f9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8049fa0:	4405      	add	r5, r0
 8049fa2:	603d      	str	r5, [r7, #0]
 8049fa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8049fa8:	6030      	str	r0, [r6, #0]
 8049faa:	4620      	mov	r0, r4
 8049fac:	b003      	add	sp, #12
 8049fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8049fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8049fb6:	e7d6      	b.n	8049f66 <__d2b+0x2e>
 8049fb8:	6161      	str	r1, [r4, #20]
 8049fba:	e7e7      	b.n	8049f8c <__d2b+0x54>
 8049fbc:	a801      	add	r0, sp, #4
 8049fbe:	f7ff fcf1 	bl	80499a4 <__lo0bits>
 8049fc2:	9b01      	ldr	r3, [sp, #4]
 8049fc4:	6163      	str	r3, [r4, #20]
 8049fc6:	3020      	adds	r0, #32
 8049fc8:	2201      	movs	r2, #1
 8049fca:	e7e5      	b.n	8049f98 <__d2b+0x60>
 8049fcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8049fd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8049fd4:	6038      	str	r0, [r7, #0]
 8049fd6:	6918      	ldr	r0, [r3, #16]
 8049fd8:	f7ff fcc4 	bl	8049964 <__hi0bits>
 8049fdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8049fe0:	e7e2      	b.n	8049fa8 <__d2b+0x70>
 8049fe2:	bf00      	nop
 8049fe4:	0804b101 	.word	0x0804b101
 8049fe8:	0804b172 	.word	0x0804b172

08049fec <__ratio>:
 8049fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8049ff0:	4688      	mov	r8, r1
 8049ff2:	4669      	mov	r1, sp
 8049ff4:	4681      	mov	r9, r0
 8049ff6:	f7ff ff55 	bl	8049ea4 <__b2d>
 8049ffa:	a901      	add	r1, sp, #4
 8049ffc:	4640      	mov	r0, r8
 8049ffe:	ec55 4b10 	vmov	r4, r5, d0
 804a002:	f7ff ff4f 	bl	8049ea4 <__b2d>
 804a006:	f8d9 3010 	ldr.w	r3, [r9, #16]
 804a00a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 804a00e:	eba3 0c02 	sub.w	ip, r3, r2
 804a012:	e9dd 3200 	ldrd	r3, r2, [sp]
 804a016:	1a9b      	subs	r3, r3, r2
 804a018:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 804a01c:	ec51 0b10 	vmov	r0, r1, d0
 804a020:	2b00      	cmp	r3, #0
 804a022:	bfd6      	itet	le
 804a024:	460a      	movle	r2, r1
 804a026:	462a      	movgt	r2, r5
 804a028:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 804a02c:	468b      	mov	fp, r1
 804a02e:	462f      	mov	r7, r5
 804a030:	bfd4      	ite	le
 804a032:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 804a036:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 804a03a:	4620      	mov	r0, r4
 804a03c:	ee10 2a10 	vmov	r2, s0
 804a040:	465b      	mov	r3, fp
 804a042:	4639      	mov	r1, r7
 804a044:	f7f6 fc12 	bl	804086c <__aeabi_ddiv>
 804a048:	ec41 0b10 	vmov	d0, r0, r1
 804a04c:	b003      	add	sp, #12
 804a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0804a052 <__copybits>:
 804a052:	3901      	subs	r1, #1
 804a054:	b570      	push	{r4, r5, r6, lr}
 804a056:	1149      	asrs	r1, r1, #5
 804a058:	6914      	ldr	r4, [r2, #16]
 804a05a:	3101      	adds	r1, #1
 804a05c:	f102 0314 	add.w	r3, r2, #20
 804a060:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 804a064:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 804a068:	1f05      	subs	r5, r0, #4
 804a06a:	42a3      	cmp	r3, r4
 804a06c:	d30c      	bcc.n	804a088 <__copybits+0x36>
 804a06e:	1aa3      	subs	r3, r4, r2
 804a070:	3b11      	subs	r3, #17
 804a072:	f023 0303 	bic.w	r3, r3, #3
 804a076:	3211      	adds	r2, #17
 804a078:	42a2      	cmp	r2, r4
 804a07a:	bf88      	it	hi
 804a07c:	2300      	movhi	r3, #0
 804a07e:	4418      	add	r0, r3
 804a080:	2300      	movs	r3, #0
 804a082:	4288      	cmp	r0, r1
 804a084:	d305      	bcc.n	804a092 <__copybits+0x40>
 804a086:	bd70      	pop	{r4, r5, r6, pc}
 804a088:	f853 6b04 	ldr.w	r6, [r3], #4
 804a08c:	f845 6f04 	str.w	r6, [r5, #4]!
 804a090:	e7eb      	b.n	804a06a <__copybits+0x18>
 804a092:	f840 3b04 	str.w	r3, [r0], #4
 804a096:	e7f4      	b.n	804a082 <__copybits+0x30>

0804a098 <__any_on>:
 804a098:	f100 0214 	add.w	r2, r0, #20
 804a09c:	6900      	ldr	r0, [r0, #16]
 804a09e:	114b      	asrs	r3, r1, #5
 804a0a0:	4298      	cmp	r0, r3
 804a0a2:	b510      	push	{r4, lr}
 804a0a4:	db11      	blt.n	804a0ca <__any_on+0x32>
 804a0a6:	dd0a      	ble.n	804a0be <__any_on+0x26>
 804a0a8:	f011 011f 	ands.w	r1, r1, #31
 804a0ac:	d007      	beq.n	804a0be <__any_on+0x26>
 804a0ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 804a0b2:	fa24 f001 	lsr.w	r0, r4, r1
 804a0b6:	fa00 f101 	lsl.w	r1, r0, r1
 804a0ba:	428c      	cmp	r4, r1
 804a0bc:	d10b      	bne.n	804a0d6 <__any_on+0x3e>
 804a0be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 804a0c2:	4293      	cmp	r3, r2
 804a0c4:	d803      	bhi.n	804a0ce <__any_on+0x36>
 804a0c6:	2000      	movs	r0, #0
 804a0c8:	bd10      	pop	{r4, pc}
 804a0ca:	4603      	mov	r3, r0
 804a0cc:	e7f7      	b.n	804a0be <__any_on+0x26>
 804a0ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 804a0d2:	2900      	cmp	r1, #0
 804a0d4:	d0f5      	beq.n	804a0c2 <__any_on+0x2a>
 804a0d6:	2001      	movs	r0, #1
 804a0d8:	e7f6      	b.n	804a0c8 <__any_on+0x30>

0804a0da <_malloc_usable_size_r>:
 804a0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804a0de:	1f18      	subs	r0, r3, #4
 804a0e0:	2b00      	cmp	r3, #0
 804a0e2:	bfbc      	itt	lt
 804a0e4:	580b      	ldrlt	r3, [r1, r0]
 804a0e6:	18c0      	addlt	r0, r0, r3
 804a0e8:	4770      	bx	lr

0804a0ea <__ascii_wctomb>:
 804a0ea:	b149      	cbz	r1, 804a100 <__ascii_wctomb+0x16>
 804a0ec:	2aff      	cmp	r2, #255	; 0xff
 804a0ee:	bf85      	ittet	hi
 804a0f0:	238a      	movhi	r3, #138	; 0x8a
 804a0f2:	6003      	strhi	r3, [r0, #0]
 804a0f4:	700a      	strbls	r2, [r1, #0]
 804a0f6:	f04f 30ff 	movhi.w	r0, #4294967295
 804a0fa:	bf98      	it	ls
 804a0fc:	2001      	movls	r0, #1
 804a0fe:	4770      	bx	lr
 804a100:	4608      	mov	r0, r1
 804a102:	4770      	bx	lr

0804a104 <__ssputs_r>:
 804a104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804a108:	688e      	ldr	r6, [r1, #8]
 804a10a:	461f      	mov	r7, r3
 804a10c:	42be      	cmp	r6, r7
 804a10e:	680b      	ldr	r3, [r1, #0]
 804a110:	4682      	mov	sl, r0
 804a112:	460c      	mov	r4, r1
 804a114:	4690      	mov	r8, r2
 804a116:	d82c      	bhi.n	804a172 <__ssputs_r+0x6e>
 804a118:	898a      	ldrh	r2, [r1, #12]
 804a11a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804a11e:	d026      	beq.n	804a16e <__ssputs_r+0x6a>
 804a120:	6965      	ldr	r5, [r4, #20]
 804a122:	6909      	ldr	r1, [r1, #16]
 804a124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804a128:	eba3 0901 	sub.w	r9, r3, r1
 804a12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804a130:	1c7b      	adds	r3, r7, #1
 804a132:	444b      	add	r3, r9
 804a134:	106d      	asrs	r5, r5, #1
 804a136:	429d      	cmp	r5, r3
 804a138:	bf38      	it	cc
 804a13a:	461d      	movcc	r5, r3
 804a13c:	0553      	lsls	r3, r2, #21
 804a13e:	d527      	bpl.n	804a190 <__ssputs_r+0x8c>
 804a140:	4629      	mov	r1, r5
 804a142:	f7fc fb7f 	bl	8046844 <_malloc_r>
 804a146:	4606      	mov	r6, r0
 804a148:	b360      	cbz	r0, 804a1a4 <__ssputs_r+0xa0>
 804a14a:	6921      	ldr	r1, [r4, #16]
 804a14c:	464a      	mov	r2, r9
 804a14e:	f7fe f8d1 	bl	80482f4 <memcpy>
 804a152:	89a3      	ldrh	r3, [r4, #12]
 804a154:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804a158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804a15c:	81a3      	strh	r3, [r4, #12]
 804a15e:	6126      	str	r6, [r4, #16]
 804a160:	6165      	str	r5, [r4, #20]
 804a162:	444e      	add	r6, r9
 804a164:	eba5 0509 	sub.w	r5, r5, r9
 804a168:	6026      	str	r6, [r4, #0]
 804a16a:	60a5      	str	r5, [r4, #8]
 804a16c:	463e      	mov	r6, r7
 804a16e:	42be      	cmp	r6, r7
 804a170:	d900      	bls.n	804a174 <__ssputs_r+0x70>
 804a172:	463e      	mov	r6, r7
 804a174:	6820      	ldr	r0, [r4, #0]
 804a176:	4632      	mov	r2, r6
 804a178:	4641      	mov	r1, r8
 804a17a:	f7fd ffca 	bl	8048112 <memmove>
 804a17e:	68a3      	ldr	r3, [r4, #8]
 804a180:	1b9b      	subs	r3, r3, r6
 804a182:	60a3      	str	r3, [r4, #8]
 804a184:	6823      	ldr	r3, [r4, #0]
 804a186:	4433      	add	r3, r6
 804a188:	6023      	str	r3, [r4, #0]
 804a18a:	2000      	movs	r0, #0
 804a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804a190:	462a      	mov	r2, r5
 804a192:	f7fc fbeb 	bl	804696c <_realloc_r>
 804a196:	4606      	mov	r6, r0
 804a198:	2800      	cmp	r0, #0
 804a19a:	d1e0      	bne.n	804a15e <__ssputs_r+0x5a>
 804a19c:	6921      	ldr	r1, [r4, #16]
 804a19e:	4650      	mov	r0, sl
 804a1a0:	f7fe ff38 	bl	8049014 <_free_r>
 804a1a4:	230c      	movs	r3, #12
 804a1a6:	f8ca 3000 	str.w	r3, [sl]
 804a1aa:	89a3      	ldrh	r3, [r4, #12]
 804a1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a1b0:	81a3      	strh	r3, [r4, #12]
 804a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 804a1b6:	e7e9      	b.n	804a18c <__ssputs_r+0x88>

0804a1b8 <_svfiprintf_r>:
 804a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a1bc:	4698      	mov	r8, r3
 804a1be:	898b      	ldrh	r3, [r1, #12]
 804a1c0:	061b      	lsls	r3, r3, #24
 804a1c2:	b09d      	sub	sp, #116	; 0x74
 804a1c4:	4607      	mov	r7, r0
 804a1c6:	460d      	mov	r5, r1
 804a1c8:	4614      	mov	r4, r2
 804a1ca:	d50e      	bpl.n	804a1ea <_svfiprintf_r+0x32>
 804a1cc:	690b      	ldr	r3, [r1, #16]
 804a1ce:	b963      	cbnz	r3, 804a1ea <_svfiprintf_r+0x32>
 804a1d0:	2140      	movs	r1, #64	; 0x40
 804a1d2:	f7fc fb37 	bl	8046844 <_malloc_r>
 804a1d6:	6028      	str	r0, [r5, #0]
 804a1d8:	6128      	str	r0, [r5, #16]
 804a1da:	b920      	cbnz	r0, 804a1e6 <_svfiprintf_r+0x2e>
 804a1dc:	230c      	movs	r3, #12
 804a1de:	603b      	str	r3, [r7, #0]
 804a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 804a1e4:	e0d0      	b.n	804a388 <_svfiprintf_r+0x1d0>
 804a1e6:	2340      	movs	r3, #64	; 0x40
 804a1e8:	616b      	str	r3, [r5, #20]
 804a1ea:	2300      	movs	r3, #0
 804a1ec:	9309      	str	r3, [sp, #36]	; 0x24
 804a1ee:	2320      	movs	r3, #32
 804a1f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804a1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 804a1f8:	2330      	movs	r3, #48	; 0x30
 804a1fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 804a3a0 <_svfiprintf_r+0x1e8>
 804a1fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804a202:	f04f 0901 	mov.w	r9, #1
 804a206:	4623      	mov	r3, r4
 804a208:	469a      	mov	sl, r3
 804a20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804a20e:	b10a      	cbz	r2, 804a214 <_svfiprintf_r+0x5c>
 804a210:	2a25      	cmp	r2, #37	; 0x25
 804a212:	d1f9      	bne.n	804a208 <_svfiprintf_r+0x50>
 804a214:	ebba 0b04 	subs.w	fp, sl, r4
 804a218:	d00b      	beq.n	804a232 <_svfiprintf_r+0x7a>
 804a21a:	465b      	mov	r3, fp
 804a21c:	4622      	mov	r2, r4
 804a21e:	4629      	mov	r1, r5
 804a220:	4638      	mov	r0, r7
 804a222:	f7ff ff6f 	bl	804a104 <__ssputs_r>
 804a226:	3001      	adds	r0, #1
 804a228:	f000 80a9 	beq.w	804a37e <_svfiprintf_r+0x1c6>
 804a22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804a22e:	445a      	add	r2, fp
 804a230:	9209      	str	r2, [sp, #36]	; 0x24
 804a232:	f89a 3000 	ldrb.w	r3, [sl]
 804a236:	2b00      	cmp	r3, #0
 804a238:	f000 80a1 	beq.w	804a37e <_svfiprintf_r+0x1c6>
 804a23c:	2300      	movs	r3, #0
 804a23e:	f04f 32ff 	mov.w	r2, #4294967295
 804a242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804a246:	f10a 0a01 	add.w	sl, sl, #1
 804a24a:	9304      	str	r3, [sp, #16]
 804a24c:	9307      	str	r3, [sp, #28]
 804a24e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804a252:	931a      	str	r3, [sp, #104]	; 0x68
 804a254:	4654      	mov	r4, sl
 804a256:	2205      	movs	r2, #5
 804a258:	f814 1b01 	ldrb.w	r1, [r4], #1
 804a25c:	4850      	ldr	r0, [pc, #320]	; (804a3a0 <_svfiprintf_r+0x1e8>)
 804a25e:	f7f5 ffc7 	bl	80401f0 <memchr>
 804a262:	9a04      	ldr	r2, [sp, #16]
 804a264:	b9d8      	cbnz	r0, 804a29e <_svfiprintf_r+0xe6>
 804a266:	06d0      	lsls	r0, r2, #27
 804a268:	bf44      	itt	mi
 804a26a:	2320      	movmi	r3, #32
 804a26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804a270:	0711      	lsls	r1, r2, #28
 804a272:	bf44      	itt	mi
 804a274:	232b      	movmi	r3, #43	; 0x2b
 804a276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804a27a:	f89a 3000 	ldrb.w	r3, [sl]
 804a27e:	2b2a      	cmp	r3, #42	; 0x2a
 804a280:	d015      	beq.n	804a2ae <_svfiprintf_r+0xf6>
 804a282:	9a07      	ldr	r2, [sp, #28]
 804a284:	4654      	mov	r4, sl
 804a286:	2000      	movs	r0, #0
 804a288:	f04f 0c0a 	mov.w	ip, #10
 804a28c:	4621      	mov	r1, r4
 804a28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 804a292:	3b30      	subs	r3, #48	; 0x30
 804a294:	2b09      	cmp	r3, #9
 804a296:	d94d      	bls.n	804a334 <_svfiprintf_r+0x17c>
 804a298:	b1b0      	cbz	r0, 804a2c8 <_svfiprintf_r+0x110>
 804a29a:	9207      	str	r2, [sp, #28]
 804a29c:	e014      	b.n	804a2c8 <_svfiprintf_r+0x110>
 804a29e:	eba0 0308 	sub.w	r3, r0, r8
 804a2a2:	fa09 f303 	lsl.w	r3, r9, r3
 804a2a6:	4313      	orrs	r3, r2
 804a2a8:	9304      	str	r3, [sp, #16]
 804a2aa:	46a2      	mov	sl, r4
 804a2ac:	e7d2      	b.n	804a254 <_svfiprintf_r+0x9c>
 804a2ae:	9b03      	ldr	r3, [sp, #12]
 804a2b0:	1d19      	adds	r1, r3, #4
 804a2b2:	681b      	ldr	r3, [r3, #0]
 804a2b4:	9103      	str	r1, [sp, #12]
 804a2b6:	2b00      	cmp	r3, #0
 804a2b8:	bfbb      	ittet	lt
 804a2ba:	425b      	neglt	r3, r3
 804a2bc:	f042 0202 	orrlt.w	r2, r2, #2
 804a2c0:	9307      	strge	r3, [sp, #28]
 804a2c2:	9307      	strlt	r3, [sp, #28]
 804a2c4:	bfb8      	it	lt
 804a2c6:	9204      	strlt	r2, [sp, #16]
 804a2c8:	7823      	ldrb	r3, [r4, #0]
 804a2ca:	2b2e      	cmp	r3, #46	; 0x2e
 804a2cc:	d10c      	bne.n	804a2e8 <_svfiprintf_r+0x130>
 804a2ce:	7863      	ldrb	r3, [r4, #1]
 804a2d0:	2b2a      	cmp	r3, #42	; 0x2a
 804a2d2:	d134      	bne.n	804a33e <_svfiprintf_r+0x186>
 804a2d4:	9b03      	ldr	r3, [sp, #12]
 804a2d6:	1d1a      	adds	r2, r3, #4
 804a2d8:	681b      	ldr	r3, [r3, #0]
 804a2da:	9203      	str	r2, [sp, #12]
 804a2dc:	2b00      	cmp	r3, #0
 804a2de:	bfb8      	it	lt
 804a2e0:	f04f 33ff 	movlt.w	r3, #4294967295
 804a2e4:	3402      	adds	r4, #2
 804a2e6:	9305      	str	r3, [sp, #20]
 804a2e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 804a3b0 <_svfiprintf_r+0x1f8>
 804a2ec:	7821      	ldrb	r1, [r4, #0]
 804a2ee:	2203      	movs	r2, #3
 804a2f0:	4650      	mov	r0, sl
 804a2f2:	f7f5 ff7d 	bl	80401f0 <memchr>
 804a2f6:	b138      	cbz	r0, 804a308 <_svfiprintf_r+0x150>
 804a2f8:	9b04      	ldr	r3, [sp, #16]
 804a2fa:	eba0 000a 	sub.w	r0, r0, sl
 804a2fe:	2240      	movs	r2, #64	; 0x40
 804a300:	4082      	lsls	r2, r0
 804a302:	4313      	orrs	r3, r2
 804a304:	3401      	adds	r4, #1
 804a306:	9304      	str	r3, [sp, #16]
 804a308:	f814 1b01 	ldrb.w	r1, [r4], #1
 804a30c:	4825      	ldr	r0, [pc, #148]	; (804a3a4 <_svfiprintf_r+0x1ec>)
 804a30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804a312:	2206      	movs	r2, #6
 804a314:	f7f5 ff6c 	bl	80401f0 <memchr>
 804a318:	2800      	cmp	r0, #0
 804a31a:	d038      	beq.n	804a38e <_svfiprintf_r+0x1d6>
 804a31c:	4b22      	ldr	r3, [pc, #136]	; (804a3a8 <_svfiprintf_r+0x1f0>)
 804a31e:	bb1b      	cbnz	r3, 804a368 <_svfiprintf_r+0x1b0>
 804a320:	9b03      	ldr	r3, [sp, #12]
 804a322:	3307      	adds	r3, #7
 804a324:	f023 0307 	bic.w	r3, r3, #7
 804a328:	3308      	adds	r3, #8
 804a32a:	9303      	str	r3, [sp, #12]
 804a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a32e:	4433      	add	r3, r6
 804a330:	9309      	str	r3, [sp, #36]	; 0x24
 804a332:	e768      	b.n	804a206 <_svfiprintf_r+0x4e>
 804a334:	fb0c 3202 	mla	r2, ip, r2, r3
 804a338:	460c      	mov	r4, r1
 804a33a:	2001      	movs	r0, #1
 804a33c:	e7a6      	b.n	804a28c <_svfiprintf_r+0xd4>
 804a33e:	2300      	movs	r3, #0
 804a340:	3401      	adds	r4, #1
 804a342:	9305      	str	r3, [sp, #20]
 804a344:	4619      	mov	r1, r3
 804a346:	f04f 0c0a 	mov.w	ip, #10
 804a34a:	4620      	mov	r0, r4
 804a34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 804a350:	3a30      	subs	r2, #48	; 0x30
 804a352:	2a09      	cmp	r2, #9
 804a354:	d903      	bls.n	804a35e <_svfiprintf_r+0x1a6>
 804a356:	2b00      	cmp	r3, #0
 804a358:	d0c6      	beq.n	804a2e8 <_svfiprintf_r+0x130>
 804a35a:	9105      	str	r1, [sp, #20]
 804a35c:	e7c4      	b.n	804a2e8 <_svfiprintf_r+0x130>
 804a35e:	fb0c 2101 	mla	r1, ip, r1, r2
 804a362:	4604      	mov	r4, r0
 804a364:	2301      	movs	r3, #1
 804a366:	e7f0      	b.n	804a34a <_svfiprintf_r+0x192>
 804a368:	ab03      	add	r3, sp, #12
 804a36a:	9300      	str	r3, [sp, #0]
 804a36c:	462a      	mov	r2, r5
 804a36e:	4b0f      	ldr	r3, [pc, #60]	; (804a3ac <_svfiprintf_r+0x1f4>)
 804a370:	a904      	add	r1, sp, #16
 804a372:	4638      	mov	r0, r7
 804a374:	f7fd f9e4 	bl	8047740 <_printf_float>
 804a378:	1c42      	adds	r2, r0, #1
 804a37a:	4606      	mov	r6, r0
 804a37c:	d1d6      	bne.n	804a32c <_svfiprintf_r+0x174>
 804a37e:	89ab      	ldrh	r3, [r5, #12]
 804a380:	065b      	lsls	r3, r3, #25
 804a382:	f53f af2d 	bmi.w	804a1e0 <_svfiprintf_r+0x28>
 804a386:	9809      	ldr	r0, [sp, #36]	; 0x24
 804a388:	b01d      	add	sp, #116	; 0x74
 804a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a38e:	ab03      	add	r3, sp, #12
 804a390:	9300      	str	r3, [sp, #0]
 804a392:	462a      	mov	r2, r5
 804a394:	4b05      	ldr	r3, [pc, #20]	; (804a3ac <_svfiprintf_r+0x1f4>)
 804a396:	a904      	add	r1, sp, #16
 804a398:	4638      	mov	r0, r7
 804a39a:	f7fd fc75 	bl	8047c88 <_printf_i>
 804a39e:	e7eb      	b.n	804a378 <_svfiprintf_r+0x1c0>
 804a3a0:	0804b2cc 	.word	0x0804b2cc
 804a3a4:	0804b2d6 	.word	0x0804b2d6
 804a3a8:	08047741 	.word	0x08047741
 804a3ac:	0804a105 	.word	0x0804a105
 804a3b0:	0804b2d2 	.word	0x0804b2d2

0804a3b4 <__sflush_r>:
 804a3b4:	898a      	ldrh	r2, [r1, #12]
 804a3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804a3ba:	4605      	mov	r5, r0
 804a3bc:	0710      	lsls	r0, r2, #28
 804a3be:	460c      	mov	r4, r1
 804a3c0:	d458      	bmi.n	804a474 <__sflush_r+0xc0>
 804a3c2:	684b      	ldr	r3, [r1, #4]
 804a3c4:	2b00      	cmp	r3, #0
 804a3c6:	dc05      	bgt.n	804a3d4 <__sflush_r+0x20>
 804a3c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804a3ca:	2b00      	cmp	r3, #0
 804a3cc:	dc02      	bgt.n	804a3d4 <__sflush_r+0x20>
 804a3ce:	2000      	movs	r0, #0
 804a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804a3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804a3d6:	2e00      	cmp	r6, #0
 804a3d8:	d0f9      	beq.n	804a3ce <__sflush_r+0x1a>
 804a3da:	2300      	movs	r3, #0
 804a3dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804a3e0:	682f      	ldr	r7, [r5, #0]
 804a3e2:	6a21      	ldr	r1, [r4, #32]
 804a3e4:	602b      	str	r3, [r5, #0]
 804a3e6:	d032      	beq.n	804a44e <__sflush_r+0x9a>
 804a3e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804a3ea:	89a3      	ldrh	r3, [r4, #12]
 804a3ec:	075a      	lsls	r2, r3, #29
 804a3ee:	d505      	bpl.n	804a3fc <__sflush_r+0x48>
 804a3f0:	6863      	ldr	r3, [r4, #4]
 804a3f2:	1ac0      	subs	r0, r0, r3
 804a3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804a3f6:	b10b      	cbz	r3, 804a3fc <__sflush_r+0x48>
 804a3f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a3fa:	1ac0      	subs	r0, r0, r3
 804a3fc:	2300      	movs	r3, #0
 804a3fe:	4602      	mov	r2, r0
 804a400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804a402:	6a21      	ldr	r1, [r4, #32]
 804a404:	4628      	mov	r0, r5
 804a406:	47b0      	blx	r6
 804a408:	1c43      	adds	r3, r0, #1
 804a40a:	89a3      	ldrh	r3, [r4, #12]
 804a40c:	d106      	bne.n	804a41c <__sflush_r+0x68>
 804a40e:	6829      	ldr	r1, [r5, #0]
 804a410:	291d      	cmp	r1, #29
 804a412:	d82b      	bhi.n	804a46c <__sflush_r+0xb8>
 804a414:	4a29      	ldr	r2, [pc, #164]	; (804a4bc <__sflush_r+0x108>)
 804a416:	410a      	asrs	r2, r1
 804a418:	07d6      	lsls	r6, r2, #31
 804a41a:	d427      	bmi.n	804a46c <__sflush_r+0xb8>
 804a41c:	2200      	movs	r2, #0
 804a41e:	6062      	str	r2, [r4, #4]
 804a420:	04d9      	lsls	r1, r3, #19
 804a422:	6922      	ldr	r2, [r4, #16]
 804a424:	6022      	str	r2, [r4, #0]
 804a426:	d504      	bpl.n	804a432 <__sflush_r+0x7e>
 804a428:	1c42      	adds	r2, r0, #1
 804a42a:	d101      	bne.n	804a430 <__sflush_r+0x7c>
 804a42c:	682b      	ldr	r3, [r5, #0]
 804a42e:	b903      	cbnz	r3, 804a432 <__sflush_r+0x7e>
 804a430:	6560      	str	r0, [r4, #84]	; 0x54
 804a432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804a434:	602f      	str	r7, [r5, #0]
 804a436:	2900      	cmp	r1, #0
 804a438:	d0c9      	beq.n	804a3ce <__sflush_r+0x1a>
 804a43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804a43e:	4299      	cmp	r1, r3
 804a440:	d002      	beq.n	804a448 <__sflush_r+0x94>
 804a442:	4628      	mov	r0, r5
 804a444:	f7fe fde6 	bl	8049014 <_free_r>
 804a448:	2000      	movs	r0, #0
 804a44a:	6360      	str	r0, [r4, #52]	; 0x34
 804a44c:	e7c0      	b.n	804a3d0 <__sflush_r+0x1c>
 804a44e:	2301      	movs	r3, #1
 804a450:	4628      	mov	r0, r5
 804a452:	47b0      	blx	r6
 804a454:	1c41      	adds	r1, r0, #1
 804a456:	d1c8      	bne.n	804a3ea <__sflush_r+0x36>
 804a458:	682b      	ldr	r3, [r5, #0]
 804a45a:	2b00      	cmp	r3, #0
 804a45c:	d0c5      	beq.n	804a3ea <__sflush_r+0x36>
 804a45e:	2b1d      	cmp	r3, #29
 804a460:	d001      	beq.n	804a466 <__sflush_r+0xb2>
 804a462:	2b16      	cmp	r3, #22
 804a464:	d101      	bne.n	804a46a <__sflush_r+0xb6>
 804a466:	602f      	str	r7, [r5, #0]
 804a468:	e7b1      	b.n	804a3ce <__sflush_r+0x1a>
 804a46a:	89a3      	ldrh	r3, [r4, #12]
 804a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a470:	81a3      	strh	r3, [r4, #12]
 804a472:	e7ad      	b.n	804a3d0 <__sflush_r+0x1c>
 804a474:	690f      	ldr	r7, [r1, #16]
 804a476:	2f00      	cmp	r7, #0
 804a478:	d0a9      	beq.n	804a3ce <__sflush_r+0x1a>
 804a47a:	0793      	lsls	r3, r2, #30
 804a47c:	680e      	ldr	r6, [r1, #0]
 804a47e:	bf08      	it	eq
 804a480:	694b      	ldreq	r3, [r1, #20]
 804a482:	600f      	str	r7, [r1, #0]
 804a484:	bf18      	it	ne
 804a486:	2300      	movne	r3, #0
 804a488:	eba6 0807 	sub.w	r8, r6, r7
 804a48c:	608b      	str	r3, [r1, #8]
 804a48e:	f1b8 0f00 	cmp.w	r8, #0
 804a492:	dd9c      	ble.n	804a3ce <__sflush_r+0x1a>
 804a494:	6a21      	ldr	r1, [r4, #32]
 804a496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804a498:	4643      	mov	r3, r8
 804a49a:	463a      	mov	r2, r7
 804a49c:	4628      	mov	r0, r5
 804a49e:	47b0      	blx	r6
 804a4a0:	2800      	cmp	r0, #0
 804a4a2:	dc06      	bgt.n	804a4b2 <__sflush_r+0xfe>
 804a4a4:	89a3      	ldrh	r3, [r4, #12]
 804a4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a4aa:	81a3      	strh	r3, [r4, #12]
 804a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 804a4b0:	e78e      	b.n	804a3d0 <__sflush_r+0x1c>
 804a4b2:	4407      	add	r7, r0
 804a4b4:	eba8 0800 	sub.w	r8, r8, r0
 804a4b8:	e7e9      	b.n	804a48e <__sflush_r+0xda>
 804a4ba:	bf00      	nop
 804a4bc:	dfbffffe 	.word	0xdfbffffe

0804a4c0 <_fflush_r>:
 804a4c0:	b538      	push	{r3, r4, r5, lr}
 804a4c2:	690b      	ldr	r3, [r1, #16]
 804a4c4:	4605      	mov	r5, r0
 804a4c6:	460c      	mov	r4, r1
 804a4c8:	b913      	cbnz	r3, 804a4d0 <_fflush_r+0x10>
 804a4ca:	2500      	movs	r5, #0
 804a4cc:	4628      	mov	r0, r5
 804a4ce:	bd38      	pop	{r3, r4, r5, pc}
 804a4d0:	b118      	cbz	r0, 804a4da <_fflush_r+0x1a>
 804a4d2:	6a03      	ldr	r3, [r0, #32]
 804a4d4:	b90b      	cbnz	r3, 804a4da <_fflush_r+0x1a>
 804a4d6:	f7fd fd73 	bl	8047fc0 <__sinit>
 804a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804a4de:	2b00      	cmp	r3, #0
 804a4e0:	d0f3      	beq.n	804a4ca <_fflush_r+0xa>
 804a4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804a4e4:	07d0      	lsls	r0, r2, #31
 804a4e6:	d404      	bmi.n	804a4f2 <_fflush_r+0x32>
 804a4e8:	0599      	lsls	r1, r3, #22
 804a4ea:	d402      	bmi.n	804a4f2 <_fflush_r+0x32>
 804a4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804a4ee:	f7fd feff 	bl	80482f0 <__retarget_lock_acquire_recursive>
 804a4f2:	4628      	mov	r0, r5
 804a4f4:	4621      	mov	r1, r4
 804a4f6:	f7ff ff5d 	bl	804a3b4 <__sflush_r>
 804a4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804a4fc:	07da      	lsls	r2, r3, #31
 804a4fe:	4605      	mov	r5, r0
 804a500:	d4e4      	bmi.n	804a4cc <_fflush_r+0xc>
 804a502:	89a3      	ldrh	r3, [r4, #12]
 804a504:	059b      	lsls	r3, r3, #22
 804a506:	d4e1      	bmi.n	804a4cc <_fflush_r+0xc>
 804a508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804a50a:	f7fd fef2 	bl	80482f2 <__retarget_lock_release_recursive>
 804a50e:	e7dd      	b.n	804a4cc <_fflush_r+0xc>

0804a510 <__assert_func>:
 804a510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 804a512:	4614      	mov	r4, r2
 804a514:	461a      	mov	r2, r3
 804a516:	4b09      	ldr	r3, [pc, #36]	; (804a53c <__assert_func+0x2c>)
 804a518:	681b      	ldr	r3, [r3, #0]
 804a51a:	4605      	mov	r5, r0
 804a51c:	68d8      	ldr	r0, [r3, #12]
 804a51e:	b14c      	cbz	r4, 804a534 <__assert_func+0x24>
 804a520:	4b07      	ldr	r3, [pc, #28]	; (804a540 <__assert_func+0x30>)
 804a522:	9100      	str	r1, [sp, #0]
 804a524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804a528:	4906      	ldr	r1, [pc, #24]	; (804a544 <__assert_func+0x34>)
 804a52a:	462b      	mov	r3, r5
 804a52c:	f000 f824 	bl	804a578 <fiprintf>
 804a530:	f000 f834 	bl	804a59c <abort>
 804a534:	4b04      	ldr	r3, [pc, #16]	; (804a548 <__assert_func+0x38>)
 804a536:	461c      	mov	r4, r3
 804a538:	e7f3      	b.n	804a522 <__assert_func+0x12>
 804a53a:	bf00      	nop
 804a53c:	200001f4 	.word	0x200001f4
 804a540:	0804b2dd 	.word	0x0804b2dd
 804a544:	0804b2ea 	.word	0x0804b2ea
 804a548:	0804b318 	.word	0x0804b318

0804a54c <_calloc_r>:
 804a54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804a54e:	fba1 2402 	umull	r2, r4, r1, r2
 804a552:	b94c      	cbnz	r4, 804a568 <_calloc_r+0x1c>
 804a554:	4611      	mov	r1, r2
 804a556:	9201      	str	r2, [sp, #4]
 804a558:	f7fc f974 	bl	8046844 <_malloc_r>
 804a55c:	9a01      	ldr	r2, [sp, #4]
 804a55e:	4605      	mov	r5, r0
 804a560:	b930      	cbnz	r0, 804a570 <_calloc_r+0x24>
 804a562:	4628      	mov	r0, r5
 804a564:	b003      	add	sp, #12
 804a566:	bd30      	pop	{r4, r5, pc}
 804a568:	220c      	movs	r2, #12
 804a56a:	6002      	str	r2, [r0, #0]
 804a56c:	2500      	movs	r5, #0
 804a56e:	e7f8      	b.n	804a562 <_calloc_r+0x16>
 804a570:	4621      	mov	r1, r4
 804a572:	f7fd fde8 	bl	8048146 <memset>
 804a576:	e7f4      	b.n	804a562 <_calloc_r+0x16>

0804a578 <fiprintf>:
 804a578:	b40e      	push	{r1, r2, r3}
 804a57a:	b503      	push	{r0, r1, lr}
 804a57c:	4601      	mov	r1, r0
 804a57e:	ab03      	add	r3, sp, #12
 804a580:	4805      	ldr	r0, [pc, #20]	; (804a598 <fiprintf+0x20>)
 804a582:	f853 2b04 	ldr.w	r2, [r3], #4
 804a586:	6800      	ldr	r0, [r0, #0]
 804a588:	9301      	str	r3, [sp, #4]
 804a58a:	f000 f837 	bl	804a5fc <_vfiprintf_r>
 804a58e:	b002      	add	sp, #8
 804a590:	f85d eb04 	ldr.w	lr, [sp], #4
 804a594:	b003      	add	sp, #12
 804a596:	4770      	bx	lr
 804a598:	200001f4 	.word	0x200001f4

0804a59c <abort>:
 804a59c:	b508      	push	{r3, lr}
 804a59e:	2006      	movs	r0, #6
 804a5a0:	f000 fa04 	bl	804a9ac <raise>
 804a5a4:	2001      	movs	r0, #1
 804a5a6:	f7f9 fa8f 	bl	8043ac8 <_exit>

0804a5aa <__sfputc_r>:
 804a5aa:	6893      	ldr	r3, [r2, #8]
 804a5ac:	3b01      	subs	r3, #1
 804a5ae:	2b00      	cmp	r3, #0
 804a5b0:	b410      	push	{r4}
 804a5b2:	6093      	str	r3, [r2, #8]
 804a5b4:	da08      	bge.n	804a5c8 <__sfputc_r+0x1e>
 804a5b6:	6994      	ldr	r4, [r2, #24]
 804a5b8:	42a3      	cmp	r3, r4
 804a5ba:	db01      	blt.n	804a5c0 <__sfputc_r+0x16>
 804a5bc:	290a      	cmp	r1, #10
 804a5be:	d103      	bne.n	804a5c8 <__sfputc_r+0x1e>
 804a5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a5c4:	f000 b934 	b.w	804a830 <__swbuf_r>
 804a5c8:	6813      	ldr	r3, [r2, #0]
 804a5ca:	1c58      	adds	r0, r3, #1
 804a5cc:	6010      	str	r0, [r2, #0]
 804a5ce:	7019      	strb	r1, [r3, #0]
 804a5d0:	4608      	mov	r0, r1
 804a5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 804a5d6:	4770      	bx	lr

0804a5d8 <__sfputs_r>:
 804a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a5da:	4606      	mov	r6, r0
 804a5dc:	460f      	mov	r7, r1
 804a5de:	4614      	mov	r4, r2
 804a5e0:	18d5      	adds	r5, r2, r3
 804a5e2:	42ac      	cmp	r4, r5
 804a5e4:	d101      	bne.n	804a5ea <__sfputs_r+0x12>
 804a5e6:	2000      	movs	r0, #0
 804a5e8:	e007      	b.n	804a5fa <__sfputs_r+0x22>
 804a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 804a5ee:	463a      	mov	r2, r7
 804a5f0:	4630      	mov	r0, r6
 804a5f2:	f7ff ffda 	bl	804a5aa <__sfputc_r>
 804a5f6:	1c43      	adds	r3, r0, #1
 804a5f8:	d1f3      	bne.n	804a5e2 <__sfputs_r+0xa>
 804a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0804a5fc <_vfiprintf_r>:
 804a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804a600:	460d      	mov	r5, r1
 804a602:	b09d      	sub	sp, #116	; 0x74
 804a604:	4614      	mov	r4, r2
 804a606:	4698      	mov	r8, r3
 804a608:	4606      	mov	r6, r0
 804a60a:	b118      	cbz	r0, 804a614 <_vfiprintf_r+0x18>
 804a60c:	6a03      	ldr	r3, [r0, #32]
 804a60e:	b90b      	cbnz	r3, 804a614 <_vfiprintf_r+0x18>
 804a610:	f7fd fcd6 	bl	8047fc0 <__sinit>
 804a614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804a616:	07d9      	lsls	r1, r3, #31
 804a618:	d405      	bmi.n	804a626 <_vfiprintf_r+0x2a>
 804a61a:	89ab      	ldrh	r3, [r5, #12]
 804a61c:	059a      	lsls	r2, r3, #22
 804a61e:	d402      	bmi.n	804a626 <_vfiprintf_r+0x2a>
 804a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804a622:	f7fd fe65 	bl	80482f0 <__retarget_lock_acquire_recursive>
 804a626:	89ab      	ldrh	r3, [r5, #12]
 804a628:	071b      	lsls	r3, r3, #28
 804a62a:	d501      	bpl.n	804a630 <_vfiprintf_r+0x34>
 804a62c:	692b      	ldr	r3, [r5, #16]
 804a62e:	b99b      	cbnz	r3, 804a658 <_vfiprintf_r+0x5c>
 804a630:	4629      	mov	r1, r5
 804a632:	4630      	mov	r0, r6
 804a634:	f000 f93a 	bl	804a8ac <__swsetup_r>
 804a638:	b170      	cbz	r0, 804a658 <_vfiprintf_r+0x5c>
 804a63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804a63c:	07dc      	lsls	r4, r3, #31
 804a63e:	d504      	bpl.n	804a64a <_vfiprintf_r+0x4e>
 804a640:	f04f 30ff 	mov.w	r0, #4294967295
 804a644:	b01d      	add	sp, #116	; 0x74
 804a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804a64a:	89ab      	ldrh	r3, [r5, #12]
 804a64c:	0598      	lsls	r0, r3, #22
 804a64e:	d4f7      	bmi.n	804a640 <_vfiprintf_r+0x44>
 804a650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804a652:	f7fd fe4e 	bl	80482f2 <__retarget_lock_release_recursive>
 804a656:	e7f3      	b.n	804a640 <_vfiprintf_r+0x44>
 804a658:	2300      	movs	r3, #0
 804a65a:	9309      	str	r3, [sp, #36]	; 0x24
 804a65c:	2320      	movs	r3, #32
 804a65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804a662:	f8cd 800c 	str.w	r8, [sp, #12]
 804a666:	2330      	movs	r3, #48	; 0x30
 804a668:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 804a81c <_vfiprintf_r+0x220>
 804a66c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804a670:	f04f 0901 	mov.w	r9, #1
 804a674:	4623      	mov	r3, r4
 804a676:	469a      	mov	sl, r3
 804a678:	f813 2b01 	ldrb.w	r2, [r3], #1
 804a67c:	b10a      	cbz	r2, 804a682 <_vfiprintf_r+0x86>
 804a67e:	2a25      	cmp	r2, #37	; 0x25
 804a680:	d1f9      	bne.n	804a676 <_vfiprintf_r+0x7a>
 804a682:	ebba 0b04 	subs.w	fp, sl, r4
 804a686:	d00b      	beq.n	804a6a0 <_vfiprintf_r+0xa4>
 804a688:	465b      	mov	r3, fp
 804a68a:	4622      	mov	r2, r4
 804a68c:	4629      	mov	r1, r5
 804a68e:	4630      	mov	r0, r6
 804a690:	f7ff ffa2 	bl	804a5d8 <__sfputs_r>
 804a694:	3001      	adds	r0, #1
 804a696:	f000 80a9 	beq.w	804a7ec <_vfiprintf_r+0x1f0>
 804a69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804a69c:	445a      	add	r2, fp
 804a69e:	9209      	str	r2, [sp, #36]	; 0x24
 804a6a0:	f89a 3000 	ldrb.w	r3, [sl]
 804a6a4:	2b00      	cmp	r3, #0
 804a6a6:	f000 80a1 	beq.w	804a7ec <_vfiprintf_r+0x1f0>
 804a6aa:	2300      	movs	r3, #0
 804a6ac:	f04f 32ff 	mov.w	r2, #4294967295
 804a6b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804a6b4:	f10a 0a01 	add.w	sl, sl, #1
 804a6b8:	9304      	str	r3, [sp, #16]
 804a6ba:	9307      	str	r3, [sp, #28]
 804a6bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804a6c0:	931a      	str	r3, [sp, #104]	; 0x68
 804a6c2:	4654      	mov	r4, sl
 804a6c4:	2205      	movs	r2, #5
 804a6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 804a6ca:	4854      	ldr	r0, [pc, #336]	; (804a81c <_vfiprintf_r+0x220>)
 804a6cc:	f7f5 fd90 	bl	80401f0 <memchr>
 804a6d0:	9a04      	ldr	r2, [sp, #16]
 804a6d2:	b9d8      	cbnz	r0, 804a70c <_vfiprintf_r+0x110>
 804a6d4:	06d1      	lsls	r1, r2, #27
 804a6d6:	bf44      	itt	mi
 804a6d8:	2320      	movmi	r3, #32
 804a6da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804a6de:	0713      	lsls	r3, r2, #28
 804a6e0:	bf44      	itt	mi
 804a6e2:	232b      	movmi	r3, #43	; 0x2b
 804a6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804a6e8:	f89a 3000 	ldrb.w	r3, [sl]
 804a6ec:	2b2a      	cmp	r3, #42	; 0x2a
 804a6ee:	d015      	beq.n	804a71c <_vfiprintf_r+0x120>
 804a6f0:	9a07      	ldr	r2, [sp, #28]
 804a6f2:	4654      	mov	r4, sl
 804a6f4:	2000      	movs	r0, #0
 804a6f6:	f04f 0c0a 	mov.w	ip, #10
 804a6fa:	4621      	mov	r1, r4
 804a6fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 804a700:	3b30      	subs	r3, #48	; 0x30
 804a702:	2b09      	cmp	r3, #9
 804a704:	d94d      	bls.n	804a7a2 <_vfiprintf_r+0x1a6>
 804a706:	b1b0      	cbz	r0, 804a736 <_vfiprintf_r+0x13a>
 804a708:	9207      	str	r2, [sp, #28]
 804a70a:	e014      	b.n	804a736 <_vfiprintf_r+0x13a>
 804a70c:	eba0 0308 	sub.w	r3, r0, r8
 804a710:	fa09 f303 	lsl.w	r3, r9, r3
 804a714:	4313      	orrs	r3, r2
 804a716:	9304      	str	r3, [sp, #16]
 804a718:	46a2      	mov	sl, r4
 804a71a:	e7d2      	b.n	804a6c2 <_vfiprintf_r+0xc6>
 804a71c:	9b03      	ldr	r3, [sp, #12]
 804a71e:	1d19      	adds	r1, r3, #4
 804a720:	681b      	ldr	r3, [r3, #0]
 804a722:	9103      	str	r1, [sp, #12]
 804a724:	2b00      	cmp	r3, #0
 804a726:	bfbb      	ittet	lt
 804a728:	425b      	neglt	r3, r3
 804a72a:	f042 0202 	orrlt.w	r2, r2, #2
 804a72e:	9307      	strge	r3, [sp, #28]
 804a730:	9307      	strlt	r3, [sp, #28]
 804a732:	bfb8      	it	lt
 804a734:	9204      	strlt	r2, [sp, #16]
 804a736:	7823      	ldrb	r3, [r4, #0]
 804a738:	2b2e      	cmp	r3, #46	; 0x2e
 804a73a:	d10c      	bne.n	804a756 <_vfiprintf_r+0x15a>
 804a73c:	7863      	ldrb	r3, [r4, #1]
 804a73e:	2b2a      	cmp	r3, #42	; 0x2a
 804a740:	d134      	bne.n	804a7ac <_vfiprintf_r+0x1b0>
 804a742:	9b03      	ldr	r3, [sp, #12]
 804a744:	1d1a      	adds	r2, r3, #4
 804a746:	681b      	ldr	r3, [r3, #0]
 804a748:	9203      	str	r2, [sp, #12]
 804a74a:	2b00      	cmp	r3, #0
 804a74c:	bfb8      	it	lt
 804a74e:	f04f 33ff 	movlt.w	r3, #4294967295
 804a752:	3402      	adds	r4, #2
 804a754:	9305      	str	r3, [sp, #20]
 804a756:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 804a82c <_vfiprintf_r+0x230>
 804a75a:	7821      	ldrb	r1, [r4, #0]
 804a75c:	2203      	movs	r2, #3
 804a75e:	4650      	mov	r0, sl
 804a760:	f7f5 fd46 	bl	80401f0 <memchr>
 804a764:	b138      	cbz	r0, 804a776 <_vfiprintf_r+0x17a>
 804a766:	9b04      	ldr	r3, [sp, #16]
 804a768:	eba0 000a 	sub.w	r0, r0, sl
 804a76c:	2240      	movs	r2, #64	; 0x40
 804a76e:	4082      	lsls	r2, r0
 804a770:	4313      	orrs	r3, r2
 804a772:	3401      	adds	r4, #1
 804a774:	9304      	str	r3, [sp, #16]
 804a776:	f814 1b01 	ldrb.w	r1, [r4], #1
 804a77a:	4829      	ldr	r0, [pc, #164]	; (804a820 <_vfiprintf_r+0x224>)
 804a77c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804a780:	2206      	movs	r2, #6
 804a782:	f7f5 fd35 	bl	80401f0 <memchr>
 804a786:	2800      	cmp	r0, #0
 804a788:	d03f      	beq.n	804a80a <_vfiprintf_r+0x20e>
 804a78a:	4b26      	ldr	r3, [pc, #152]	; (804a824 <_vfiprintf_r+0x228>)
 804a78c:	bb1b      	cbnz	r3, 804a7d6 <_vfiprintf_r+0x1da>
 804a78e:	9b03      	ldr	r3, [sp, #12]
 804a790:	3307      	adds	r3, #7
 804a792:	f023 0307 	bic.w	r3, r3, #7
 804a796:	3308      	adds	r3, #8
 804a798:	9303      	str	r3, [sp, #12]
 804a79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804a79c:	443b      	add	r3, r7
 804a79e:	9309      	str	r3, [sp, #36]	; 0x24
 804a7a0:	e768      	b.n	804a674 <_vfiprintf_r+0x78>
 804a7a2:	fb0c 3202 	mla	r2, ip, r2, r3
 804a7a6:	460c      	mov	r4, r1
 804a7a8:	2001      	movs	r0, #1
 804a7aa:	e7a6      	b.n	804a6fa <_vfiprintf_r+0xfe>
 804a7ac:	2300      	movs	r3, #0
 804a7ae:	3401      	adds	r4, #1
 804a7b0:	9305      	str	r3, [sp, #20]
 804a7b2:	4619      	mov	r1, r3
 804a7b4:	f04f 0c0a 	mov.w	ip, #10
 804a7b8:	4620      	mov	r0, r4
 804a7ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 804a7be:	3a30      	subs	r2, #48	; 0x30
 804a7c0:	2a09      	cmp	r2, #9
 804a7c2:	d903      	bls.n	804a7cc <_vfiprintf_r+0x1d0>
 804a7c4:	2b00      	cmp	r3, #0
 804a7c6:	d0c6      	beq.n	804a756 <_vfiprintf_r+0x15a>
 804a7c8:	9105      	str	r1, [sp, #20]
 804a7ca:	e7c4      	b.n	804a756 <_vfiprintf_r+0x15a>
 804a7cc:	fb0c 2101 	mla	r1, ip, r1, r2
 804a7d0:	4604      	mov	r4, r0
 804a7d2:	2301      	movs	r3, #1
 804a7d4:	e7f0      	b.n	804a7b8 <_vfiprintf_r+0x1bc>
 804a7d6:	ab03      	add	r3, sp, #12
 804a7d8:	9300      	str	r3, [sp, #0]
 804a7da:	462a      	mov	r2, r5
 804a7dc:	4b12      	ldr	r3, [pc, #72]	; (804a828 <_vfiprintf_r+0x22c>)
 804a7de:	a904      	add	r1, sp, #16
 804a7e0:	4630      	mov	r0, r6
 804a7e2:	f7fc ffad 	bl	8047740 <_printf_float>
 804a7e6:	4607      	mov	r7, r0
 804a7e8:	1c78      	adds	r0, r7, #1
 804a7ea:	d1d6      	bne.n	804a79a <_vfiprintf_r+0x19e>
 804a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804a7ee:	07d9      	lsls	r1, r3, #31
 804a7f0:	d405      	bmi.n	804a7fe <_vfiprintf_r+0x202>
 804a7f2:	89ab      	ldrh	r3, [r5, #12]
 804a7f4:	059a      	lsls	r2, r3, #22
 804a7f6:	d402      	bmi.n	804a7fe <_vfiprintf_r+0x202>
 804a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804a7fa:	f7fd fd7a 	bl	80482f2 <__retarget_lock_release_recursive>
 804a7fe:	89ab      	ldrh	r3, [r5, #12]
 804a800:	065b      	lsls	r3, r3, #25
 804a802:	f53f af1d 	bmi.w	804a640 <_vfiprintf_r+0x44>
 804a806:	9809      	ldr	r0, [sp, #36]	; 0x24
 804a808:	e71c      	b.n	804a644 <_vfiprintf_r+0x48>
 804a80a:	ab03      	add	r3, sp, #12
 804a80c:	9300      	str	r3, [sp, #0]
 804a80e:	462a      	mov	r2, r5
 804a810:	4b05      	ldr	r3, [pc, #20]	; (804a828 <_vfiprintf_r+0x22c>)
 804a812:	a904      	add	r1, sp, #16
 804a814:	4630      	mov	r0, r6
 804a816:	f7fd fa37 	bl	8047c88 <_printf_i>
 804a81a:	e7e4      	b.n	804a7e6 <_vfiprintf_r+0x1ea>
 804a81c:	0804b2cc 	.word	0x0804b2cc
 804a820:	0804b2d6 	.word	0x0804b2d6
 804a824:	08047741 	.word	0x08047741
 804a828:	0804a5d9 	.word	0x0804a5d9
 804a82c:	0804b2d2 	.word	0x0804b2d2

0804a830 <__swbuf_r>:
 804a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804a832:	460e      	mov	r6, r1
 804a834:	4614      	mov	r4, r2
 804a836:	4605      	mov	r5, r0
 804a838:	b118      	cbz	r0, 804a842 <__swbuf_r+0x12>
 804a83a:	6a03      	ldr	r3, [r0, #32]
 804a83c:	b90b      	cbnz	r3, 804a842 <__swbuf_r+0x12>
 804a83e:	f7fd fbbf 	bl	8047fc0 <__sinit>
 804a842:	69a3      	ldr	r3, [r4, #24]
 804a844:	60a3      	str	r3, [r4, #8]
 804a846:	89a3      	ldrh	r3, [r4, #12]
 804a848:	071a      	lsls	r2, r3, #28
 804a84a:	d525      	bpl.n	804a898 <__swbuf_r+0x68>
 804a84c:	6923      	ldr	r3, [r4, #16]
 804a84e:	b31b      	cbz	r3, 804a898 <__swbuf_r+0x68>
 804a850:	6823      	ldr	r3, [r4, #0]
 804a852:	6922      	ldr	r2, [r4, #16]
 804a854:	1a98      	subs	r0, r3, r2
 804a856:	6963      	ldr	r3, [r4, #20]
 804a858:	b2f6      	uxtb	r6, r6
 804a85a:	4283      	cmp	r3, r0
 804a85c:	4637      	mov	r7, r6
 804a85e:	dc04      	bgt.n	804a86a <__swbuf_r+0x3a>
 804a860:	4621      	mov	r1, r4
 804a862:	4628      	mov	r0, r5
 804a864:	f7ff fe2c 	bl	804a4c0 <_fflush_r>
 804a868:	b9e0      	cbnz	r0, 804a8a4 <__swbuf_r+0x74>
 804a86a:	68a3      	ldr	r3, [r4, #8]
 804a86c:	3b01      	subs	r3, #1
 804a86e:	60a3      	str	r3, [r4, #8]
 804a870:	6823      	ldr	r3, [r4, #0]
 804a872:	1c5a      	adds	r2, r3, #1
 804a874:	6022      	str	r2, [r4, #0]
 804a876:	701e      	strb	r6, [r3, #0]
 804a878:	6962      	ldr	r2, [r4, #20]
 804a87a:	1c43      	adds	r3, r0, #1
 804a87c:	429a      	cmp	r2, r3
 804a87e:	d004      	beq.n	804a88a <__swbuf_r+0x5a>
 804a880:	89a3      	ldrh	r3, [r4, #12]
 804a882:	07db      	lsls	r3, r3, #31
 804a884:	d506      	bpl.n	804a894 <__swbuf_r+0x64>
 804a886:	2e0a      	cmp	r6, #10
 804a888:	d104      	bne.n	804a894 <__swbuf_r+0x64>
 804a88a:	4621      	mov	r1, r4
 804a88c:	4628      	mov	r0, r5
 804a88e:	f7ff fe17 	bl	804a4c0 <_fflush_r>
 804a892:	b938      	cbnz	r0, 804a8a4 <__swbuf_r+0x74>
 804a894:	4638      	mov	r0, r7
 804a896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804a898:	4621      	mov	r1, r4
 804a89a:	4628      	mov	r0, r5
 804a89c:	f000 f806 	bl	804a8ac <__swsetup_r>
 804a8a0:	2800      	cmp	r0, #0
 804a8a2:	d0d5      	beq.n	804a850 <__swbuf_r+0x20>
 804a8a4:	f04f 37ff 	mov.w	r7, #4294967295
 804a8a8:	e7f4      	b.n	804a894 <__swbuf_r+0x64>
	...

0804a8ac <__swsetup_r>:
 804a8ac:	b538      	push	{r3, r4, r5, lr}
 804a8ae:	4b2a      	ldr	r3, [pc, #168]	; (804a958 <__swsetup_r+0xac>)
 804a8b0:	4605      	mov	r5, r0
 804a8b2:	6818      	ldr	r0, [r3, #0]
 804a8b4:	460c      	mov	r4, r1
 804a8b6:	b118      	cbz	r0, 804a8c0 <__swsetup_r+0x14>
 804a8b8:	6a03      	ldr	r3, [r0, #32]
 804a8ba:	b90b      	cbnz	r3, 804a8c0 <__swsetup_r+0x14>
 804a8bc:	f7fd fb80 	bl	8047fc0 <__sinit>
 804a8c0:	89a3      	ldrh	r3, [r4, #12]
 804a8c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804a8c6:	0718      	lsls	r0, r3, #28
 804a8c8:	d422      	bmi.n	804a910 <__swsetup_r+0x64>
 804a8ca:	06d9      	lsls	r1, r3, #27
 804a8cc:	d407      	bmi.n	804a8de <__swsetup_r+0x32>
 804a8ce:	2309      	movs	r3, #9
 804a8d0:	602b      	str	r3, [r5, #0]
 804a8d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804a8d6:	81a3      	strh	r3, [r4, #12]
 804a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 804a8dc:	e034      	b.n	804a948 <__swsetup_r+0x9c>
 804a8de:	0758      	lsls	r0, r3, #29
 804a8e0:	d512      	bpl.n	804a908 <__swsetup_r+0x5c>
 804a8e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804a8e4:	b141      	cbz	r1, 804a8f8 <__swsetup_r+0x4c>
 804a8e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804a8ea:	4299      	cmp	r1, r3
 804a8ec:	d002      	beq.n	804a8f4 <__swsetup_r+0x48>
 804a8ee:	4628      	mov	r0, r5
 804a8f0:	f7fe fb90 	bl	8049014 <_free_r>
 804a8f4:	2300      	movs	r3, #0
 804a8f6:	6363      	str	r3, [r4, #52]	; 0x34
 804a8f8:	89a3      	ldrh	r3, [r4, #12]
 804a8fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804a8fe:	81a3      	strh	r3, [r4, #12]
 804a900:	2300      	movs	r3, #0
 804a902:	6063      	str	r3, [r4, #4]
 804a904:	6923      	ldr	r3, [r4, #16]
 804a906:	6023      	str	r3, [r4, #0]
 804a908:	89a3      	ldrh	r3, [r4, #12]
 804a90a:	f043 0308 	orr.w	r3, r3, #8
 804a90e:	81a3      	strh	r3, [r4, #12]
 804a910:	6923      	ldr	r3, [r4, #16]
 804a912:	b94b      	cbnz	r3, 804a928 <__swsetup_r+0x7c>
 804a914:	89a3      	ldrh	r3, [r4, #12]
 804a916:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804a91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804a91e:	d003      	beq.n	804a928 <__swsetup_r+0x7c>
 804a920:	4621      	mov	r1, r4
 804a922:	4628      	mov	r0, r5
 804a924:	f000 f884 	bl	804aa30 <__smakebuf_r>
 804a928:	89a0      	ldrh	r0, [r4, #12]
 804a92a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804a92e:	f010 0301 	ands.w	r3, r0, #1
 804a932:	d00a      	beq.n	804a94a <__swsetup_r+0x9e>
 804a934:	2300      	movs	r3, #0
 804a936:	60a3      	str	r3, [r4, #8]
 804a938:	6963      	ldr	r3, [r4, #20]
 804a93a:	425b      	negs	r3, r3
 804a93c:	61a3      	str	r3, [r4, #24]
 804a93e:	6923      	ldr	r3, [r4, #16]
 804a940:	b943      	cbnz	r3, 804a954 <__swsetup_r+0xa8>
 804a942:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804a946:	d1c4      	bne.n	804a8d2 <__swsetup_r+0x26>
 804a948:	bd38      	pop	{r3, r4, r5, pc}
 804a94a:	0781      	lsls	r1, r0, #30
 804a94c:	bf58      	it	pl
 804a94e:	6963      	ldrpl	r3, [r4, #20]
 804a950:	60a3      	str	r3, [r4, #8]
 804a952:	e7f4      	b.n	804a93e <__swsetup_r+0x92>
 804a954:	2000      	movs	r0, #0
 804a956:	e7f7      	b.n	804a948 <__swsetup_r+0x9c>
 804a958:	200001f4 	.word	0x200001f4

0804a95c <_raise_r>:
 804a95c:	291f      	cmp	r1, #31
 804a95e:	b538      	push	{r3, r4, r5, lr}
 804a960:	4604      	mov	r4, r0
 804a962:	460d      	mov	r5, r1
 804a964:	d904      	bls.n	804a970 <_raise_r+0x14>
 804a966:	2316      	movs	r3, #22
 804a968:	6003      	str	r3, [r0, #0]
 804a96a:	f04f 30ff 	mov.w	r0, #4294967295
 804a96e:	bd38      	pop	{r3, r4, r5, pc}
 804a970:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 804a972:	b112      	cbz	r2, 804a97a <_raise_r+0x1e>
 804a974:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 804a978:	b94b      	cbnz	r3, 804a98e <_raise_r+0x32>
 804a97a:	4620      	mov	r0, r4
 804a97c:	f000 f830 	bl	804a9e0 <_getpid_r>
 804a980:	462a      	mov	r2, r5
 804a982:	4601      	mov	r1, r0
 804a984:	4620      	mov	r0, r4
 804a986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 804a98a:	f000 b817 	b.w	804a9bc <_kill_r>
 804a98e:	2b01      	cmp	r3, #1
 804a990:	d00a      	beq.n	804a9a8 <_raise_r+0x4c>
 804a992:	1c59      	adds	r1, r3, #1
 804a994:	d103      	bne.n	804a99e <_raise_r+0x42>
 804a996:	2316      	movs	r3, #22
 804a998:	6003      	str	r3, [r0, #0]
 804a99a:	2001      	movs	r0, #1
 804a99c:	e7e7      	b.n	804a96e <_raise_r+0x12>
 804a99e:	2400      	movs	r4, #0
 804a9a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 804a9a4:	4628      	mov	r0, r5
 804a9a6:	4798      	blx	r3
 804a9a8:	2000      	movs	r0, #0
 804a9aa:	e7e0      	b.n	804a96e <_raise_r+0x12>

0804a9ac <raise>:
 804a9ac:	4b02      	ldr	r3, [pc, #8]	; (804a9b8 <raise+0xc>)
 804a9ae:	4601      	mov	r1, r0
 804a9b0:	6818      	ldr	r0, [r3, #0]
 804a9b2:	f7ff bfd3 	b.w	804a95c <_raise_r>
 804a9b6:	bf00      	nop
 804a9b8:	200001f4 	.word	0x200001f4

0804a9bc <_kill_r>:
 804a9bc:	b538      	push	{r3, r4, r5, lr}
 804a9be:	4d07      	ldr	r5, [pc, #28]	; (804a9dc <_kill_r+0x20>)
 804a9c0:	2300      	movs	r3, #0
 804a9c2:	4604      	mov	r4, r0
 804a9c4:	4608      	mov	r0, r1
 804a9c6:	4611      	mov	r1, r2
 804a9c8:	602b      	str	r3, [r5, #0]
 804a9ca:	f7f9 f86d 	bl	8043aa8 <_kill>
 804a9ce:	1c43      	adds	r3, r0, #1
 804a9d0:	d102      	bne.n	804a9d8 <_kill_r+0x1c>
 804a9d2:	682b      	ldr	r3, [r5, #0]
 804a9d4:	b103      	cbz	r3, 804a9d8 <_kill_r+0x1c>
 804a9d6:	6023      	str	r3, [r4, #0]
 804a9d8:	bd38      	pop	{r3, r4, r5, pc}
 804a9da:	bf00      	nop
 804a9dc:	200038f4 	.word	0x200038f4

0804a9e0 <_getpid_r>:
 804a9e0:	f7f9 b85a 	b.w	8043a98 <_getpid>

0804a9e4 <__swhatbuf_r>:
 804a9e4:	b570      	push	{r4, r5, r6, lr}
 804a9e6:	460c      	mov	r4, r1
 804a9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804a9ec:	2900      	cmp	r1, #0
 804a9ee:	b096      	sub	sp, #88	; 0x58
 804a9f0:	4615      	mov	r5, r2
 804a9f2:	461e      	mov	r6, r3
 804a9f4:	da0d      	bge.n	804aa12 <__swhatbuf_r+0x2e>
 804a9f6:	89a3      	ldrh	r3, [r4, #12]
 804a9f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 804a9fc:	f04f 0100 	mov.w	r1, #0
 804aa00:	bf0c      	ite	eq
 804aa02:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 804aa06:	2340      	movne	r3, #64	; 0x40
 804aa08:	2000      	movs	r0, #0
 804aa0a:	6031      	str	r1, [r6, #0]
 804aa0c:	602b      	str	r3, [r5, #0]
 804aa0e:	b016      	add	sp, #88	; 0x58
 804aa10:	bd70      	pop	{r4, r5, r6, pc}
 804aa12:	466a      	mov	r2, sp
 804aa14:	f000 f848 	bl	804aaa8 <_fstat_r>
 804aa18:	2800      	cmp	r0, #0
 804aa1a:	dbec      	blt.n	804a9f6 <__swhatbuf_r+0x12>
 804aa1c:	9901      	ldr	r1, [sp, #4]
 804aa1e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 804aa22:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 804aa26:	4259      	negs	r1, r3
 804aa28:	4159      	adcs	r1, r3
 804aa2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804aa2e:	e7eb      	b.n	804aa08 <__swhatbuf_r+0x24>

0804aa30 <__smakebuf_r>:
 804aa30:	898b      	ldrh	r3, [r1, #12]
 804aa32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804aa34:	079d      	lsls	r5, r3, #30
 804aa36:	4606      	mov	r6, r0
 804aa38:	460c      	mov	r4, r1
 804aa3a:	d507      	bpl.n	804aa4c <__smakebuf_r+0x1c>
 804aa3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804aa40:	6023      	str	r3, [r4, #0]
 804aa42:	6123      	str	r3, [r4, #16]
 804aa44:	2301      	movs	r3, #1
 804aa46:	6163      	str	r3, [r4, #20]
 804aa48:	b002      	add	sp, #8
 804aa4a:	bd70      	pop	{r4, r5, r6, pc}
 804aa4c:	ab01      	add	r3, sp, #4
 804aa4e:	466a      	mov	r2, sp
 804aa50:	f7ff ffc8 	bl	804a9e4 <__swhatbuf_r>
 804aa54:	9900      	ldr	r1, [sp, #0]
 804aa56:	4605      	mov	r5, r0
 804aa58:	4630      	mov	r0, r6
 804aa5a:	f7fb fef3 	bl	8046844 <_malloc_r>
 804aa5e:	b948      	cbnz	r0, 804aa74 <__smakebuf_r+0x44>
 804aa60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804aa64:	059a      	lsls	r2, r3, #22
 804aa66:	d4ef      	bmi.n	804aa48 <__smakebuf_r+0x18>
 804aa68:	f023 0303 	bic.w	r3, r3, #3
 804aa6c:	f043 0302 	orr.w	r3, r3, #2
 804aa70:	81a3      	strh	r3, [r4, #12]
 804aa72:	e7e3      	b.n	804aa3c <__smakebuf_r+0xc>
 804aa74:	89a3      	ldrh	r3, [r4, #12]
 804aa76:	6020      	str	r0, [r4, #0]
 804aa78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804aa7c:	81a3      	strh	r3, [r4, #12]
 804aa7e:	9b00      	ldr	r3, [sp, #0]
 804aa80:	6163      	str	r3, [r4, #20]
 804aa82:	9b01      	ldr	r3, [sp, #4]
 804aa84:	6120      	str	r0, [r4, #16]
 804aa86:	b15b      	cbz	r3, 804aaa0 <__smakebuf_r+0x70>
 804aa88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804aa8c:	4630      	mov	r0, r6
 804aa8e:	f000 f81d 	bl	804aacc <_isatty_r>
 804aa92:	b128      	cbz	r0, 804aaa0 <__smakebuf_r+0x70>
 804aa94:	89a3      	ldrh	r3, [r4, #12]
 804aa96:	f023 0303 	bic.w	r3, r3, #3
 804aa9a:	f043 0301 	orr.w	r3, r3, #1
 804aa9e:	81a3      	strh	r3, [r4, #12]
 804aaa0:	89a3      	ldrh	r3, [r4, #12]
 804aaa2:	431d      	orrs	r5, r3
 804aaa4:	81a5      	strh	r5, [r4, #12]
 804aaa6:	e7cf      	b.n	804aa48 <__smakebuf_r+0x18>

0804aaa8 <_fstat_r>:
 804aaa8:	b538      	push	{r3, r4, r5, lr}
 804aaaa:	4d07      	ldr	r5, [pc, #28]	; (804aac8 <_fstat_r+0x20>)
 804aaac:	2300      	movs	r3, #0
 804aaae:	4604      	mov	r4, r0
 804aab0:	4608      	mov	r0, r1
 804aab2:	4611      	mov	r1, r2
 804aab4:	602b      	str	r3, [r5, #0]
 804aab6:	f7f9 f856 	bl	8043b66 <_fstat>
 804aaba:	1c43      	adds	r3, r0, #1
 804aabc:	d102      	bne.n	804aac4 <_fstat_r+0x1c>
 804aabe:	682b      	ldr	r3, [r5, #0]
 804aac0:	b103      	cbz	r3, 804aac4 <_fstat_r+0x1c>
 804aac2:	6023      	str	r3, [r4, #0]
 804aac4:	bd38      	pop	{r3, r4, r5, pc}
 804aac6:	bf00      	nop
 804aac8:	200038f4 	.word	0x200038f4

0804aacc <_isatty_r>:
 804aacc:	b538      	push	{r3, r4, r5, lr}
 804aace:	4d06      	ldr	r5, [pc, #24]	; (804aae8 <_isatty_r+0x1c>)
 804aad0:	2300      	movs	r3, #0
 804aad2:	4604      	mov	r4, r0
 804aad4:	4608      	mov	r0, r1
 804aad6:	602b      	str	r3, [r5, #0]
 804aad8:	f7f9 f855 	bl	8043b86 <_isatty>
 804aadc:	1c43      	adds	r3, r0, #1
 804aade:	d102      	bne.n	804aae6 <_isatty_r+0x1a>
 804aae0:	682b      	ldr	r3, [r5, #0]
 804aae2:	b103      	cbz	r3, 804aae6 <_isatty_r+0x1a>
 804aae4:	6023      	str	r3, [r4, #0]
 804aae6:	bd38      	pop	{r3, r4, r5, pc}
 804aae8:	200038f4 	.word	0x200038f4

0804aaec <_init>:
 804aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804aaee:	bf00      	nop
 804aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804aaf2:	bc08      	pop	{r3}
 804aaf4:	469e      	mov	lr, r3
 804aaf6:	4770      	bx	lr

0804aaf8 <_fini>:
 804aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804aafa:	bf00      	nop
 804aafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804aafe:	bc08      	pop	{r3}
 804ab00:	469e      	mov	lr, r3
 804ab02:	4770      	bx	lr
