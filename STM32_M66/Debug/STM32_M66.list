
STM32_M66.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08030000  08030000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a430  08030190  08030190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0803a5c0  0803a5c0  0001a5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ad64  0803ad64  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0803ad64  0803ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ad6c  0803ad6c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ad6c  0803ad6c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ad70  0803ad70  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0803ad74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cb48  200001ec  0803af60  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000cd34  0803af60  0002cd34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c0d  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d00  00000000  00000000  00031e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00034b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2b  00000000  00000000  00035d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f7b  00000000  00000000  00036b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014f9f  00000000  00000000  00059aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc469  00000000  00000000  0006ea8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ffc  00000000  00000000  0013aef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00140ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08030190 <__do_global_dtors_aux>:
 8030190:	b510      	push	{r4, lr}
 8030192:	4c05      	ldr	r4, [pc, #20]	; (80301a8 <__do_global_dtors_aux+0x18>)
 8030194:	7823      	ldrb	r3, [r4, #0]
 8030196:	b933      	cbnz	r3, 80301a6 <__do_global_dtors_aux+0x16>
 8030198:	4b04      	ldr	r3, [pc, #16]	; (80301ac <__do_global_dtors_aux+0x1c>)
 803019a:	b113      	cbz	r3, 80301a2 <__do_global_dtors_aux+0x12>
 803019c:	4804      	ldr	r0, [pc, #16]	; (80301b0 <__do_global_dtors_aux+0x20>)
 803019e:	f3af 8000 	nop.w
 80301a2:	2301      	movs	r3, #1
 80301a4:	7023      	strb	r3, [r4, #0]
 80301a6:	bd10      	pop	{r4, pc}
 80301a8:	200001ec 	.word	0x200001ec
 80301ac:	00000000 	.word	0x00000000
 80301b0:	0803a5a8 	.word	0x0803a5a8

080301b4 <frame_dummy>:
 80301b4:	b508      	push	{r3, lr}
 80301b6:	4b03      	ldr	r3, [pc, #12]	; (80301c4 <frame_dummy+0x10>)
 80301b8:	b11b      	cbz	r3, 80301c2 <frame_dummy+0xe>
 80301ba:	4903      	ldr	r1, [pc, #12]	; (80301c8 <frame_dummy+0x14>)
 80301bc:	4803      	ldr	r0, [pc, #12]	; (80301cc <frame_dummy+0x18>)
 80301be:	f3af 8000 	nop.w
 80301c2:	bd08      	pop	{r3, pc}
 80301c4:	00000000 	.word	0x00000000
 80301c8:	200001f0 	.word	0x200001f0
 80301cc:	0803a5a8 	.word	0x0803a5a8

080301d0 <strcmp>:
 80301d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80301d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80301d8:	2a01      	cmp	r2, #1
 80301da:	bf28      	it	cs
 80301dc:	429a      	cmpcs	r2, r3
 80301de:	d0f7      	beq.n	80301d0 <strcmp>
 80301e0:	1ad0      	subs	r0, r2, r3
 80301e2:	4770      	bx	lr
	...

080301f0 <memchr>:
 80301f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80301f4:	2a10      	cmp	r2, #16
 80301f6:	db2b      	blt.n	8030250 <memchr+0x60>
 80301f8:	f010 0f07 	tst.w	r0, #7
 80301fc:	d008      	beq.n	8030210 <memchr+0x20>
 80301fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8030202:	3a01      	subs	r2, #1
 8030204:	428b      	cmp	r3, r1
 8030206:	d02d      	beq.n	8030264 <memchr+0x74>
 8030208:	f010 0f07 	tst.w	r0, #7
 803020c:	b342      	cbz	r2, 8030260 <memchr+0x70>
 803020e:	d1f6      	bne.n	80301fe <memchr+0xe>
 8030210:	b4f0      	push	{r4, r5, r6, r7}
 8030212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8030216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 803021a:	f022 0407 	bic.w	r4, r2, #7
 803021e:	f07f 0700 	mvns.w	r7, #0
 8030222:	2300      	movs	r3, #0
 8030224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8030228:	3c08      	subs	r4, #8
 803022a:	ea85 0501 	eor.w	r5, r5, r1
 803022e:	ea86 0601 	eor.w	r6, r6, r1
 8030232:	fa85 f547 	uadd8	r5, r5, r7
 8030236:	faa3 f587 	sel	r5, r3, r7
 803023a:	fa86 f647 	uadd8	r6, r6, r7
 803023e:	faa5 f687 	sel	r6, r5, r7
 8030242:	b98e      	cbnz	r6, 8030268 <memchr+0x78>
 8030244:	d1ee      	bne.n	8030224 <memchr+0x34>
 8030246:	bcf0      	pop	{r4, r5, r6, r7}
 8030248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 803024c:	f002 0207 	and.w	r2, r2, #7
 8030250:	b132      	cbz	r2, 8030260 <memchr+0x70>
 8030252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8030256:	3a01      	subs	r2, #1
 8030258:	ea83 0301 	eor.w	r3, r3, r1
 803025c:	b113      	cbz	r3, 8030264 <memchr+0x74>
 803025e:	d1f8      	bne.n	8030252 <memchr+0x62>
 8030260:	2000      	movs	r0, #0
 8030262:	4770      	bx	lr
 8030264:	3801      	subs	r0, #1
 8030266:	4770      	bx	lr
 8030268:	2d00      	cmp	r5, #0
 803026a:	bf06      	itte	eq
 803026c:	4635      	moveq	r5, r6
 803026e:	3803      	subeq	r0, #3
 8030270:	3807      	subne	r0, #7
 8030272:	f015 0f01 	tst.w	r5, #1
 8030276:	d107      	bne.n	8030288 <memchr+0x98>
 8030278:	3001      	adds	r0, #1
 803027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 803027e:	bf02      	ittt	eq
 8030280:	3001      	addeq	r0, #1
 8030282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8030286:	3001      	addeq	r0, #1
 8030288:	bcf0      	pop	{r4, r5, r6, r7}
 803028a:	3801      	subs	r0, #1
 803028c:	4770      	bx	lr
 803028e:	bf00      	nop

08030290 <strlen>:
 8030290:	4603      	mov	r3, r0
 8030292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030296:	2a00      	cmp	r2, #0
 8030298:	d1fb      	bne.n	8030292 <strlen+0x2>
 803029a:	1a18      	subs	r0, r3, r0
 803029c:	3801      	subs	r0, #1
 803029e:	4770      	bx	lr

080302a0 <__aeabi_drsub>:
 80302a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80302a4:	e002      	b.n	80302ac <__adddf3>
 80302a6:	bf00      	nop

080302a8 <__aeabi_dsub>:
 80302a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080302ac <__adddf3>:
 80302ac:	b530      	push	{r4, r5, lr}
 80302ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80302b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80302b6:	ea94 0f05 	teq	r4, r5
 80302ba:	bf08      	it	eq
 80302bc:	ea90 0f02 	teqeq	r0, r2
 80302c0:	bf1f      	itttt	ne
 80302c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80302c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80302ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80302ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80302d2:	f000 80e2 	beq.w	803049a <__adddf3+0x1ee>
 80302d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80302da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80302de:	bfb8      	it	lt
 80302e0:	426d      	neglt	r5, r5
 80302e2:	dd0c      	ble.n	80302fe <__adddf3+0x52>
 80302e4:	442c      	add	r4, r5
 80302e6:	ea80 0202 	eor.w	r2, r0, r2
 80302ea:	ea81 0303 	eor.w	r3, r1, r3
 80302ee:	ea82 0000 	eor.w	r0, r2, r0
 80302f2:	ea83 0101 	eor.w	r1, r3, r1
 80302f6:	ea80 0202 	eor.w	r2, r0, r2
 80302fa:	ea81 0303 	eor.w	r3, r1, r3
 80302fe:	2d36      	cmp	r5, #54	; 0x36
 8030300:	bf88      	it	hi
 8030302:	bd30      	pophi	{r4, r5, pc}
 8030304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8030308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 803030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8030310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8030314:	d002      	beq.n	803031c <__adddf3+0x70>
 8030316:	4240      	negs	r0, r0
 8030318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 803031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8030320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8030324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8030328:	d002      	beq.n	8030330 <__adddf3+0x84>
 803032a:	4252      	negs	r2, r2
 803032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8030330:	ea94 0f05 	teq	r4, r5
 8030334:	f000 80a7 	beq.w	8030486 <__adddf3+0x1da>
 8030338:	f1a4 0401 	sub.w	r4, r4, #1
 803033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8030340:	db0d      	blt.n	803035e <__adddf3+0xb2>
 8030342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8030346:	fa22 f205 	lsr.w	r2, r2, r5
 803034a:	1880      	adds	r0, r0, r2
 803034c:	f141 0100 	adc.w	r1, r1, #0
 8030350:	fa03 f20e 	lsl.w	r2, r3, lr
 8030354:	1880      	adds	r0, r0, r2
 8030356:	fa43 f305 	asr.w	r3, r3, r5
 803035a:	4159      	adcs	r1, r3
 803035c:	e00e      	b.n	803037c <__adddf3+0xd0>
 803035e:	f1a5 0520 	sub.w	r5, r5, #32
 8030362:	f10e 0e20 	add.w	lr, lr, #32
 8030366:	2a01      	cmp	r2, #1
 8030368:	fa03 fc0e 	lsl.w	ip, r3, lr
 803036c:	bf28      	it	cs
 803036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8030372:	fa43 f305 	asr.w	r3, r3, r5
 8030376:	18c0      	adds	r0, r0, r3
 8030378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 803037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8030380:	d507      	bpl.n	8030392 <__adddf3+0xe6>
 8030382:	f04f 0e00 	mov.w	lr, #0
 8030386:	f1dc 0c00 	rsbs	ip, ip, #0
 803038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 803038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8030392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8030396:	d31b      	bcc.n	80303d0 <__adddf3+0x124>
 8030398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 803039c:	d30c      	bcc.n	80303b8 <__adddf3+0x10c>
 803039e:	0849      	lsrs	r1, r1, #1
 80303a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80303a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80303a8:	f104 0401 	add.w	r4, r4, #1
 80303ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80303b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80303b4:	f080 809a 	bcs.w	80304ec <__adddf3+0x240>
 80303b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80303bc:	bf08      	it	eq
 80303be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80303c2:	f150 0000 	adcs.w	r0, r0, #0
 80303c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80303ca:	ea41 0105 	orr.w	r1, r1, r5
 80303ce:	bd30      	pop	{r4, r5, pc}
 80303d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80303d4:	4140      	adcs	r0, r0
 80303d6:	eb41 0101 	adc.w	r1, r1, r1
 80303da:	3c01      	subs	r4, #1
 80303dc:	bf28      	it	cs
 80303de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80303e2:	d2e9      	bcs.n	80303b8 <__adddf3+0x10c>
 80303e4:	f091 0f00 	teq	r1, #0
 80303e8:	bf04      	itt	eq
 80303ea:	4601      	moveq	r1, r0
 80303ec:	2000      	moveq	r0, #0
 80303ee:	fab1 f381 	clz	r3, r1
 80303f2:	bf08      	it	eq
 80303f4:	3320      	addeq	r3, #32
 80303f6:	f1a3 030b 	sub.w	r3, r3, #11
 80303fa:	f1b3 0220 	subs.w	r2, r3, #32
 80303fe:	da0c      	bge.n	803041a <__adddf3+0x16e>
 8030400:	320c      	adds	r2, #12
 8030402:	dd08      	ble.n	8030416 <__adddf3+0x16a>
 8030404:	f102 0c14 	add.w	ip, r2, #20
 8030408:	f1c2 020c 	rsb	r2, r2, #12
 803040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8030410:	fa21 f102 	lsr.w	r1, r1, r2
 8030414:	e00c      	b.n	8030430 <__adddf3+0x184>
 8030416:	f102 0214 	add.w	r2, r2, #20
 803041a:	bfd8      	it	le
 803041c:	f1c2 0c20 	rsble	ip, r2, #32
 8030420:	fa01 f102 	lsl.w	r1, r1, r2
 8030424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8030428:	bfdc      	itt	le
 803042a:	ea41 010c 	orrle.w	r1, r1, ip
 803042e:	4090      	lslle	r0, r2
 8030430:	1ae4      	subs	r4, r4, r3
 8030432:	bfa2      	ittt	ge
 8030434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8030438:	4329      	orrge	r1, r5
 803043a:	bd30      	popge	{r4, r5, pc}
 803043c:	ea6f 0404 	mvn.w	r4, r4
 8030440:	3c1f      	subs	r4, #31
 8030442:	da1c      	bge.n	803047e <__adddf3+0x1d2>
 8030444:	340c      	adds	r4, #12
 8030446:	dc0e      	bgt.n	8030466 <__adddf3+0x1ba>
 8030448:	f104 0414 	add.w	r4, r4, #20
 803044c:	f1c4 0220 	rsb	r2, r4, #32
 8030450:	fa20 f004 	lsr.w	r0, r0, r4
 8030454:	fa01 f302 	lsl.w	r3, r1, r2
 8030458:	ea40 0003 	orr.w	r0, r0, r3
 803045c:	fa21 f304 	lsr.w	r3, r1, r4
 8030460:	ea45 0103 	orr.w	r1, r5, r3
 8030464:	bd30      	pop	{r4, r5, pc}
 8030466:	f1c4 040c 	rsb	r4, r4, #12
 803046a:	f1c4 0220 	rsb	r2, r4, #32
 803046e:	fa20 f002 	lsr.w	r0, r0, r2
 8030472:	fa01 f304 	lsl.w	r3, r1, r4
 8030476:	ea40 0003 	orr.w	r0, r0, r3
 803047a:	4629      	mov	r1, r5
 803047c:	bd30      	pop	{r4, r5, pc}
 803047e:	fa21 f004 	lsr.w	r0, r1, r4
 8030482:	4629      	mov	r1, r5
 8030484:	bd30      	pop	{r4, r5, pc}
 8030486:	f094 0f00 	teq	r4, #0
 803048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 803048e:	bf06      	itte	eq
 8030490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8030494:	3401      	addeq	r4, #1
 8030496:	3d01      	subne	r5, #1
 8030498:	e74e      	b.n	8030338 <__adddf3+0x8c>
 803049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 803049e:	bf18      	it	ne
 80304a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80304a4:	d029      	beq.n	80304fa <__adddf3+0x24e>
 80304a6:	ea94 0f05 	teq	r4, r5
 80304aa:	bf08      	it	eq
 80304ac:	ea90 0f02 	teqeq	r0, r2
 80304b0:	d005      	beq.n	80304be <__adddf3+0x212>
 80304b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80304b6:	bf04      	itt	eq
 80304b8:	4619      	moveq	r1, r3
 80304ba:	4610      	moveq	r0, r2
 80304bc:	bd30      	pop	{r4, r5, pc}
 80304be:	ea91 0f03 	teq	r1, r3
 80304c2:	bf1e      	ittt	ne
 80304c4:	2100      	movne	r1, #0
 80304c6:	2000      	movne	r0, #0
 80304c8:	bd30      	popne	{r4, r5, pc}
 80304ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80304ce:	d105      	bne.n	80304dc <__adddf3+0x230>
 80304d0:	0040      	lsls	r0, r0, #1
 80304d2:	4149      	adcs	r1, r1
 80304d4:	bf28      	it	cs
 80304d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80304da:	bd30      	pop	{r4, r5, pc}
 80304dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80304e0:	bf3c      	itt	cc
 80304e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80304e6:	bd30      	popcc	{r4, r5, pc}
 80304e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80304ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80304f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80304f4:	f04f 0000 	mov.w	r0, #0
 80304f8:	bd30      	pop	{r4, r5, pc}
 80304fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80304fe:	bf1a      	itte	ne
 8030500:	4619      	movne	r1, r3
 8030502:	4610      	movne	r0, r2
 8030504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8030508:	bf1c      	itt	ne
 803050a:	460b      	movne	r3, r1
 803050c:	4602      	movne	r2, r0
 803050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8030512:	bf06      	itte	eq
 8030514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8030518:	ea91 0f03 	teqeq	r1, r3
 803051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8030520:	bd30      	pop	{r4, r5, pc}
 8030522:	bf00      	nop

08030524 <__aeabi_ui2d>:
 8030524:	f090 0f00 	teq	r0, #0
 8030528:	bf04      	itt	eq
 803052a:	2100      	moveq	r1, #0
 803052c:	4770      	bxeq	lr
 803052e:	b530      	push	{r4, r5, lr}
 8030530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8030534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8030538:	f04f 0500 	mov.w	r5, #0
 803053c:	f04f 0100 	mov.w	r1, #0
 8030540:	e750      	b.n	80303e4 <__adddf3+0x138>
 8030542:	bf00      	nop

08030544 <__aeabi_i2d>:
 8030544:	f090 0f00 	teq	r0, #0
 8030548:	bf04      	itt	eq
 803054a:	2100      	moveq	r1, #0
 803054c:	4770      	bxeq	lr
 803054e:	b530      	push	{r4, r5, lr}
 8030550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8030554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8030558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 803055c:	bf48      	it	mi
 803055e:	4240      	negmi	r0, r0
 8030560:	f04f 0100 	mov.w	r1, #0
 8030564:	e73e      	b.n	80303e4 <__adddf3+0x138>
 8030566:	bf00      	nop

08030568 <__aeabi_f2d>:
 8030568:	0042      	lsls	r2, r0, #1
 803056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 803056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8030572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8030576:	bf1f      	itttt	ne
 8030578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 803057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8030580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8030584:	4770      	bxne	lr
 8030586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 803058a:	bf08      	it	eq
 803058c:	4770      	bxeq	lr
 803058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8030592:	bf04      	itt	eq
 8030594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8030598:	4770      	bxeq	lr
 803059a:	b530      	push	{r4, r5, lr}
 803059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80305a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80305a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80305a8:	e71c      	b.n	80303e4 <__adddf3+0x138>
 80305aa:	bf00      	nop

080305ac <__aeabi_ul2d>:
 80305ac:	ea50 0201 	orrs.w	r2, r0, r1
 80305b0:	bf08      	it	eq
 80305b2:	4770      	bxeq	lr
 80305b4:	b530      	push	{r4, r5, lr}
 80305b6:	f04f 0500 	mov.w	r5, #0
 80305ba:	e00a      	b.n	80305d2 <__aeabi_l2d+0x16>

080305bc <__aeabi_l2d>:
 80305bc:	ea50 0201 	orrs.w	r2, r0, r1
 80305c0:	bf08      	it	eq
 80305c2:	4770      	bxeq	lr
 80305c4:	b530      	push	{r4, r5, lr}
 80305c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80305ca:	d502      	bpl.n	80305d2 <__aeabi_l2d+0x16>
 80305cc:	4240      	negs	r0, r0
 80305ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80305d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80305d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80305da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80305de:	f43f aed8 	beq.w	8030392 <__adddf3+0xe6>
 80305e2:	f04f 0203 	mov.w	r2, #3
 80305e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80305ea:	bf18      	it	ne
 80305ec:	3203      	addne	r2, #3
 80305ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80305f2:	bf18      	it	ne
 80305f4:	3203      	addne	r2, #3
 80305f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80305fa:	f1c2 0320 	rsb	r3, r2, #32
 80305fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8030602:	fa20 f002 	lsr.w	r0, r0, r2
 8030606:	fa01 fe03 	lsl.w	lr, r1, r3
 803060a:	ea40 000e 	orr.w	r0, r0, lr
 803060e:	fa21 f102 	lsr.w	r1, r1, r2
 8030612:	4414      	add	r4, r2
 8030614:	e6bd      	b.n	8030392 <__adddf3+0xe6>
 8030616:	bf00      	nop

08030618 <__aeabi_dmul>:
 8030618:	b570      	push	{r4, r5, r6, lr}
 803061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 803061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8030622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8030626:	bf1d      	ittte	ne
 8030628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 803062c:	ea94 0f0c 	teqne	r4, ip
 8030630:	ea95 0f0c 	teqne	r5, ip
 8030634:	f000 f8de 	bleq	80307f4 <__aeabi_dmul+0x1dc>
 8030638:	442c      	add	r4, r5
 803063a:	ea81 0603 	eor.w	r6, r1, r3
 803063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8030642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8030646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 803064a:	bf18      	it	ne
 803064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8030650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8030654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8030658:	d038      	beq.n	80306cc <__aeabi_dmul+0xb4>
 803065a:	fba0 ce02 	umull	ip, lr, r0, r2
 803065e:	f04f 0500 	mov.w	r5, #0
 8030662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8030666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 803066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 803066e:	f04f 0600 	mov.w	r6, #0
 8030672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8030676:	f09c 0f00 	teq	ip, #0
 803067a:	bf18      	it	ne
 803067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8030680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8030684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8030688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 803068c:	d204      	bcs.n	8030698 <__aeabi_dmul+0x80>
 803068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8030692:	416d      	adcs	r5, r5
 8030694:	eb46 0606 	adc.w	r6, r6, r6
 8030698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 803069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80306a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80306a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80306a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80306ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80306b0:	bf88      	it	hi
 80306b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80306b6:	d81e      	bhi.n	80306f6 <__aeabi_dmul+0xde>
 80306b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80306bc:	bf08      	it	eq
 80306be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80306c2:	f150 0000 	adcs.w	r0, r0, #0
 80306c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80306ca:	bd70      	pop	{r4, r5, r6, pc}
 80306cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80306d0:	ea46 0101 	orr.w	r1, r6, r1
 80306d4:	ea40 0002 	orr.w	r0, r0, r2
 80306d8:	ea81 0103 	eor.w	r1, r1, r3
 80306dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80306e0:	bfc2      	ittt	gt
 80306e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80306e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80306ea:	bd70      	popgt	{r4, r5, r6, pc}
 80306ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80306f0:	f04f 0e00 	mov.w	lr, #0
 80306f4:	3c01      	subs	r4, #1
 80306f6:	f300 80ab 	bgt.w	8030850 <__aeabi_dmul+0x238>
 80306fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80306fe:	bfde      	ittt	le
 8030700:	2000      	movle	r0, #0
 8030702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8030706:	bd70      	pople	{r4, r5, r6, pc}
 8030708:	f1c4 0400 	rsb	r4, r4, #0
 803070c:	3c20      	subs	r4, #32
 803070e:	da35      	bge.n	803077c <__aeabi_dmul+0x164>
 8030710:	340c      	adds	r4, #12
 8030712:	dc1b      	bgt.n	803074c <__aeabi_dmul+0x134>
 8030714:	f104 0414 	add.w	r4, r4, #20
 8030718:	f1c4 0520 	rsb	r5, r4, #32
 803071c:	fa00 f305 	lsl.w	r3, r0, r5
 8030720:	fa20 f004 	lsr.w	r0, r0, r4
 8030724:	fa01 f205 	lsl.w	r2, r1, r5
 8030728:	ea40 0002 	orr.w	r0, r0, r2
 803072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8030730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8030734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8030738:	fa21 f604 	lsr.w	r6, r1, r4
 803073c:	eb42 0106 	adc.w	r1, r2, r6
 8030740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8030744:	bf08      	it	eq
 8030746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 803074a:	bd70      	pop	{r4, r5, r6, pc}
 803074c:	f1c4 040c 	rsb	r4, r4, #12
 8030750:	f1c4 0520 	rsb	r5, r4, #32
 8030754:	fa00 f304 	lsl.w	r3, r0, r4
 8030758:	fa20 f005 	lsr.w	r0, r0, r5
 803075c:	fa01 f204 	lsl.w	r2, r1, r4
 8030760:	ea40 0002 	orr.w	r0, r0, r2
 8030764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8030768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 803076c:	f141 0100 	adc.w	r1, r1, #0
 8030770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8030774:	bf08      	it	eq
 8030776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 803077a:	bd70      	pop	{r4, r5, r6, pc}
 803077c:	f1c4 0520 	rsb	r5, r4, #32
 8030780:	fa00 f205 	lsl.w	r2, r0, r5
 8030784:	ea4e 0e02 	orr.w	lr, lr, r2
 8030788:	fa20 f304 	lsr.w	r3, r0, r4
 803078c:	fa01 f205 	lsl.w	r2, r1, r5
 8030790:	ea43 0302 	orr.w	r3, r3, r2
 8030794:	fa21 f004 	lsr.w	r0, r1, r4
 8030798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 803079c:	fa21 f204 	lsr.w	r2, r1, r4
 80307a0:	ea20 0002 	bic.w	r0, r0, r2
 80307a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80307a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80307ac:	bf08      	it	eq
 80307ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80307b2:	bd70      	pop	{r4, r5, r6, pc}
 80307b4:	f094 0f00 	teq	r4, #0
 80307b8:	d10f      	bne.n	80307da <__aeabi_dmul+0x1c2>
 80307ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80307be:	0040      	lsls	r0, r0, #1
 80307c0:	eb41 0101 	adc.w	r1, r1, r1
 80307c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80307c8:	bf08      	it	eq
 80307ca:	3c01      	subeq	r4, #1
 80307cc:	d0f7      	beq.n	80307be <__aeabi_dmul+0x1a6>
 80307ce:	ea41 0106 	orr.w	r1, r1, r6
 80307d2:	f095 0f00 	teq	r5, #0
 80307d6:	bf18      	it	ne
 80307d8:	4770      	bxne	lr
 80307da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80307de:	0052      	lsls	r2, r2, #1
 80307e0:	eb43 0303 	adc.w	r3, r3, r3
 80307e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80307e8:	bf08      	it	eq
 80307ea:	3d01      	subeq	r5, #1
 80307ec:	d0f7      	beq.n	80307de <__aeabi_dmul+0x1c6>
 80307ee:	ea43 0306 	orr.w	r3, r3, r6
 80307f2:	4770      	bx	lr
 80307f4:	ea94 0f0c 	teq	r4, ip
 80307f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80307fc:	bf18      	it	ne
 80307fe:	ea95 0f0c 	teqne	r5, ip
 8030802:	d00c      	beq.n	803081e <__aeabi_dmul+0x206>
 8030804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8030808:	bf18      	it	ne
 803080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 803080e:	d1d1      	bne.n	80307b4 <__aeabi_dmul+0x19c>
 8030810:	ea81 0103 	eor.w	r1, r1, r3
 8030814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8030818:	f04f 0000 	mov.w	r0, #0
 803081c:	bd70      	pop	{r4, r5, r6, pc}
 803081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8030822:	bf06      	itte	eq
 8030824:	4610      	moveq	r0, r2
 8030826:	4619      	moveq	r1, r3
 8030828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 803082c:	d019      	beq.n	8030862 <__aeabi_dmul+0x24a>
 803082e:	ea94 0f0c 	teq	r4, ip
 8030832:	d102      	bne.n	803083a <__aeabi_dmul+0x222>
 8030834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8030838:	d113      	bne.n	8030862 <__aeabi_dmul+0x24a>
 803083a:	ea95 0f0c 	teq	r5, ip
 803083e:	d105      	bne.n	803084c <__aeabi_dmul+0x234>
 8030840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8030844:	bf1c      	itt	ne
 8030846:	4610      	movne	r0, r2
 8030848:	4619      	movne	r1, r3
 803084a:	d10a      	bne.n	8030862 <__aeabi_dmul+0x24a>
 803084c:	ea81 0103 	eor.w	r1, r1, r3
 8030850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8030854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8030858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 803085c:	f04f 0000 	mov.w	r0, #0
 8030860:	bd70      	pop	{r4, r5, r6, pc}
 8030862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8030866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 803086a:	bd70      	pop	{r4, r5, r6, pc}

0803086c <__aeabi_ddiv>:
 803086c:	b570      	push	{r4, r5, r6, lr}
 803086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8030872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8030876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 803087a:	bf1d      	ittte	ne
 803087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8030880:	ea94 0f0c 	teqne	r4, ip
 8030884:	ea95 0f0c 	teqne	r5, ip
 8030888:	f000 f8a7 	bleq	80309da <__aeabi_ddiv+0x16e>
 803088c:	eba4 0405 	sub.w	r4, r4, r5
 8030890:	ea81 0e03 	eor.w	lr, r1, r3
 8030894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8030898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 803089c:	f000 8088 	beq.w	80309b0 <__aeabi_ddiv+0x144>
 80308a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80308a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80308a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80308ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80308b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80308b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80308b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80308bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80308c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80308c4:	429d      	cmp	r5, r3
 80308c6:	bf08      	it	eq
 80308c8:	4296      	cmpeq	r6, r2
 80308ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80308ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80308d2:	d202      	bcs.n	80308da <__aeabi_ddiv+0x6e>
 80308d4:	085b      	lsrs	r3, r3, #1
 80308d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80308da:	1ab6      	subs	r6, r6, r2
 80308dc:	eb65 0503 	sbc.w	r5, r5, r3
 80308e0:	085b      	lsrs	r3, r3, #1
 80308e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80308e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80308ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80308ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80308f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80308f6:	bf22      	ittt	cs
 80308f8:	1ab6      	subcs	r6, r6, r2
 80308fa:	4675      	movcs	r5, lr
 80308fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8030900:	085b      	lsrs	r3, r3, #1
 8030902:	ea4f 0232 	mov.w	r2, r2, rrx
 8030906:	ebb6 0e02 	subs.w	lr, r6, r2
 803090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 803090e:	bf22      	ittt	cs
 8030910:	1ab6      	subcs	r6, r6, r2
 8030912:	4675      	movcs	r5, lr
 8030914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8030918:	085b      	lsrs	r3, r3, #1
 803091a:	ea4f 0232 	mov.w	r2, r2, rrx
 803091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8030922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8030926:	bf22      	ittt	cs
 8030928:	1ab6      	subcs	r6, r6, r2
 803092a:	4675      	movcs	r5, lr
 803092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8030930:	085b      	lsrs	r3, r3, #1
 8030932:	ea4f 0232 	mov.w	r2, r2, rrx
 8030936:	ebb6 0e02 	subs.w	lr, r6, r2
 803093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 803093e:	bf22      	ittt	cs
 8030940:	1ab6      	subcs	r6, r6, r2
 8030942:	4675      	movcs	r5, lr
 8030944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8030948:	ea55 0e06 	orrs.w	lr, r5, r6
 803094c:	d018      	beq.n	8030980 <__aeabi_ddiv+0x114>
 803094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8030952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8030956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 803095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 803095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8030962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8030966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 803096a:	d1c0      	bne.n	80308ee <__aeabi_ddiv+0x82>
 803096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8030970:	d10b      	bne.n	803098a <__aeabi_ddiv+0x11e>
 8030972:	ea41 0100 	orr.w	r1, r1, r0
 8030976:	f04f 0000 	mov.w	r0, #0
 803097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 803097e:	e7b6      	b.n	80308ee <__aeabi_ddiv+0x82>
 8030980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8030984:	bf04      	itt	eq
 8030986:	4301      	orreq	r1, r0
 8030988:	2000      	moveq	r0, #0
 803098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 803098e:	bf88      	it	hi
 8030990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8030994:	f63f aeaf 	bhi.w	80306f6 <__aeabi_dmul+0xde>
 8030998:	ebb5 0c03 	subs.w	ip, r5, r3
 803099c:	bf04      	itt	eq
 803099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80309a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80309a6:	f150 0000 	adcs.w	r0, r0, #0
 80309aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80309ae:	bd70      	pop	{r4, r5, r6, pc}
 80309b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80309b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80309b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80309bc:	bfc2      	ittt	gt
 80309be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80309c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80309c6:	bd70      	popgt	{r4, r5, r6, pc}
 80309c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80309cc:	f04f 0e00 	mov.w	lr, #0
 80309d0:	3c01      	subs	r4, #1
 80309d2:	e690      	b.n	80306f6 <__aeabi_dmul+0xde>
 80309d4:	ea45 0e06 	orr.w	lr, r5, r6
 80309d8:	e68d      	b.n	80306f6 <__aeabi_dmul+0xde>
 80309da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80309de:	ea94 0f0c 	teq	r4, ip
 80309e2:	bf08      	it	eq
 80309e4:	ea95 0f0c 	teqeq	r5, ip
 80309e8:	f43f af3b 	beq.w	8030862 <__aeabi_dmul+0x24a>
 80309ec:	ea94 0f0c 	teq	r4, ip
 80309f0:	d10a      	bne.n	8030a08 <__aeabi_ddiv+0x19c>
 80309f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80309f6:	f47f af34 	bne.w	8030862 <__aeabi_dmul+0x24a>
 80309fa:	ea95 0f0c 	teq	r5, ip
 80309fe:	f47f af25 	bne.w	803084c <__aeabi_dmul+0x234>
 8030a02:	4610      	mov	r0, r2
 8030a04:	4619      	mov	r1, r3
 8030a06:	e72c      	b.n	8030862 <__aeabi_dmul+0x24a>
 8030a08:	ea95 0f0c 	teq	r5, ip
 8030a0c:	d106      	bne.n	8030a1c <__aeabi_ddiv+0x1b0>
 8030a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8030a12:	f43f aefd 	beq.w	8030810 <__aeabi_dmul+0x1f8>
 8030a16:	4610      	mov	r0, r2
 8030a18:	4619      	mov	r1, r3
 8030a1a:	e722      	b.n	8030862 <__aeabi_dmul+0x24a>
 8030a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8030a20:	bf18      	it	ne
 8030a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8030a26:	f47f aec5 	bne.w	80307b4 <__aeabi_dmul+0x19c>
 8030a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8030a2e:	f47f af0d 	bne.w	803084c <__aeabi_dmul+0x234>
 8030a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8030a36:	f47f aeeb 	bne.w	8030810 <__aeabi_dmul+0x1f8>
 8030a3a:	e712      	b.n	8030862 <__aeabi_dmul+0x24a>

08030a3c <__gedf2>:
 8030a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8030a40:	e006      	b.n	8030a50 <__cmpdf2+0x4>
 8030a42:	bf00      	nop

08030a44 <__ledf2>:
 8030a44:	f04f 0c01 	mov.w	ip, #1
 8030a48:	e002      	b.n	8030a50 <__cmpdf2+0x4>
 8030a4a:	bf00      	nop

08030a4c <__cmpdf2>:
 8030a4c:	f04f 0c01 	mov.w	ip, #1
 8030a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8030a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8030a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8030a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8030a60:	bf18      	it	ne
 8030a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8030a66:	d01b      	beq.n	8030aa0 <__cmpdf2+0x54>
 8030a68:	b001      	add	sp, #4
 8030a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8030a6e:	bf0c      	ite	eq
 8030a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8030a74:	ea91 0f03 	teqne	r1, r3
 8030a78:	bf02      	ittt	eq
 8030a7a:	ea90 0f02 	teqeq	r0, r2
 8030a7e:	2000      	moveq	r0, #0
 8030a80:	4770      	bxeq	lr
 8030a82:	f110 0f00 	cmn.w	r0, #0
 8030a86:	ea91 0f03 	teq	r1, r3
 8030a8a:	bf58      	it	pl
 8030a8c:	4299      	cmppl	r1, r3
 8030a8e:	bf08      	it	eq
 8030a90:	4290      	cmpeq	r0, r2
 8030a92:	bf2c      	ite	cs
 8030a94:	17d8      	asrcs	r0, r3, #31
 8030a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8030a9a:	f040 0001 	orr.w	r0, r0, #1
 8030a9e:	4770      	bx	lr
 8030aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8030aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8030aa8:	d102      	bne.n	8030ab0 <__cmpdf2+0x64>
 8030aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8030aae:	d107      	bne.n	8030ac0 <__cmpdf2+0x74>
 8030ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8030ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8030ab8:	d1d6      	bne.n	8030a68 <__cmpdf2+0x1c>
 8030aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8030abe:	d0d3      	beq.n	8030a68 <__cmpdf2+0x1c>
 8030ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8030ac4:	4770      	bx	lr
 8030ac6:	bf00      	nop

08030ac8 <__aeabi_cdrcmple>:
 8030ac8:	4684      	mov	ip, r0
 8030aca:	4610      	mov	r0, r2
 8030acc:	4662      	mov	r2, ip
 8030ace:	468c      	mov	ip, r1
 8030ad0:	4619      	mov	r1, r3
 8030ad2:	4663      	mov	r3, ip
 8030ad4:	e000      	b.n	8030ad8 <__aeabi_cdcmpeq>
 8030ad6:	bf00      	nop

08030ad8 <__aeabi_cdcmpeq>:
 8030ad8:	b501      	push	{r0, lr}
 8030ada:	f7ff ffb7 	bl	8030a4c <__cmpdf2>
 8030ade:	2800      	cmp	r0, #0
 8030ae0:	bf48      	it	mi
 8030ae2:	f110 0f00 	cmnmi.w	r0, #0
 8030ae6:	bd01      	pop	{r0, pc}

08030ae8 <__aeabi_dcmpeq>:
 8030ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8030aec:	f7ff fff4 	bl	8030ad8 <__aeabi_cdcmpeq>
 8030af0:	bf0c      	ite	eq
 8030af2:	2001      	moveq	r0, #1
 8030af4:	2000      	movne	r0, #0
 8030af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8030afa:	bf00      	nop

08030afc <__aeabi_dcmplt>:
 8030afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8030b00:	f7ff ffea 	bl	8030ad8 <__aeabi_cdcmpeq>
 8030b04:	bf34      	ite	cc
 8030b06:	2001      	movcc	r0, #1
 8030b08:	2000      	movcs	r0, #0
 8030b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8030b0e:	bf00      	nop

08030b10 <__aeabi_dcmple>:
 8030b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8030b14:	f7ff ffe0 	bl	8030ad8 <__aeabi_cdcmpeq>
 8030b18:	bf94      	ite	ls
 8030b1a:	2001      	movls	r0, #1
 8030b1c:	2000      	movhi	r0, #0
 8030b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8030b22:	bf00      	nop

08030b24 <__aeabi_dcmpge>:
 8030b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8030b28:	f7ff ffce 	bl	8030ac8 <__aeabi_cdrcmple>
 8030b2c:	bf94      	ite	ls
 8030b2e:	2001      	movls	r0, #1
 8030b30:	2000      	movhi	r0, #0
 8030b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8030b36:	bf00      	nop

08030b38 <__aeabi_dcmpgt>:
 8030b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8030b3c:	f7ff ffc4 	bl	8030ac8 <__aeabi_cdrcmple>
 8030b40:	bf34      	ite	cc
 8030b42:	2001      	movcc	r0, #1
 8030b44:	2000      	movcs	r0, #0
 8030b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8030b4a:	bf00      	nop

08030b4c <__aeabi_dcmpun>:
 8030b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8030b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8030b54:	d102      	bne.n	8030b5c <__aeabi_dcmpun+0x10>
 8030b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8030b5a:	d10a      	bne.n	8030b72 <__aeabi_dcmpun+0x26>
 8030b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8030b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8030b64:	d102      	bne.n	8030b6c <__aeabi_dcmpun+0x20>
 8030b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8030b6a:	d102      	bne.n	8030b72 <__aeabi_dcmpun+0x26>
 8030b6c:	f04f 0000 	mov.w	r0, #0
 8030b70:	4770      	bx	lr
 8030b72:	f04f 0001 	mov.w	r0, #1
 8030b76:	4770      	bx	lr

08030b78 <__aeabi_d2iz>:
 8030b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8030b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8030b80:	d215      	bcs.n	8030bae <__aeabi_d2iz+0x36>
 8030b82:	d511      	bpl.n	8030ba8 <__aeabi_d2iz+0x30>
 8030b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8030b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8030b8c:	d912      	bls.n	8030bb4 <__aeabi_d2iz+0x3c>
 8030b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8030b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8030b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8030b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8030b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8030ba2:	bf18      	it	ne
 8030ba4:	4240      	negne	r0, r0
 8030ba6:	4770      	bx	lr
 8030ba8:	f04f 0000 	mov.w	r0, #0
 8030bac:	4770      	bx	lr
 8030bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8030bb2:	d105      	bne.n	8030bc0 <__aeabi_d2iz+0x48>
 8030bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8030bb8:	bf08      	it	eq
 8030bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8030bbe:	4770      	bx	lr
 8030bc0:	f04f 0000 	mov.w	r0, #0
 8030bc4:	4770      	bx	lr
 8030bc6:	bf00      	nop

08030bc8 <__aeabi_d2uiz>:
 8030bc8:	004a      	lsls	r2, r1, #1
 8030bca:	d211      	bcs.n	8030bf0 <__aeabi_d2uiz+0x28>
 8030bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8030bd0:	d211      	bcs.n	8030bf6 <__aeabi_d2uiz+0x2e>
 8030bd2:	d50d      	bpl.n	8030bf0 <__aeabi_d2uiz+0x28>
 8030bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8030bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8030bdc:	d40e      	bmi.n	8030bfc <__aeabi_d2uiz+0x34>
 8030bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8030be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8030be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8030bea:	fa23 f002 	lsr.w	r0, r3, r2
 8030bee:	4770      	bx	lr
 8030bf0:	f04f 0000 	mov.w	r0, #0
 8030bf4:	4770      	bx	lr
 8030bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8030bfa:	d102      	bne.n	8030c02 <__aeabi_d2uiz+0x3a>
 8030bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8030c00:	4770      	bx	lr
 8030c02:	f04f 0000 	mov.w	r0, #0
 8030c06:	4770      	bx	lr

08030c08 <__aeabi_uldivmod>:
 8030c08:	b953      	cbnz	r3, 8030c20 <__aeabi_uldivmod+0x18>
 8030c0a:	b94a      	cbnz	r2, 8030c20 <__aeabi_uldivmod+0x18>
 8030c0c:	2900      	cmp	r1, #0
 8030c0e:	bf08      	it	eq
 8030c10:	2800      	cmpeq	r0, #0
 8030c12:	bf1c      	itt	ne
 8030c14:	f04f 31ff 	movne.w	r1, #4294967295
 8030c18:	f04f 30ff 	movne.w	r0, #4294967295
 8030c1c:	f000 b9a6 	b.w	8030f6c <__aeabi_idiv0>
 8030c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8030c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8030c28:	f000 f83c 	bl	8030ca4 <__udivmoddi4>
 8030c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8030c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8030c34:	b004      	add	sp, #16
 8030c36:	4770      	bx	lr

08030c38 <__aeabi_d2lz>:
 8030c38:	b538      	push	{r3, r4, r5, lr}
 8030c3a:	2200      	movs	r2, #0
 8030c3c:	2300      	movs	r3, #0
 8030c3e:	4604      	mov	r4, r0
 8030c40:	460d      	mov	r5, r1
 8030c42:	f7ff ff5b 	bl	8030afc <__aeabi_dcmplt>
 8030c46:	b928      	cbnz	r0, 8030c54 <__aeabi_d2lz+0x1c>
 8030c48:	4620      	mov	r0, r4
 8030c4a:	4629      	mov	r1, r5
 8030c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030c50:	f000 b80a 	b.w	8030c68 <__aeabi_d2ulz>
 8030c54:	4620      	mov	r0, r4
 8030c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8030c5a:	f000 f805 	bl	8030c68 <__aeabi_d2ulz>
 8030c5e:	4240      	negs	r0, r0
 8030c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8030c64:	bd38      	pop	{r3, r4, r5, pc}
 8030c66:	bf00      	nop

08030c68 <__aeabi_d2ulz>:
 8030c68:	b5d0      	push	{r4, r6, r7, lr}
 8030c6a:	4b0c      	ldr	r3, [pc, #48]	; (8030c9c <__aeabi_d2ulz+0x34>)
 8030c6c:	2200      	movs	r2, #0
 8030c6e:	4606      	mov	r6, r0
 8030c70:	460f      	mov	r7, r1
 8030c72:	f7ff fcd1 	bl	8030618 <__aeabi_dmul>
 8030c76:	f7ff ffa7 	bl	8030bc8 <__aeabi_d2uiz>
 8030c7a:	4604      	mov	r4, r0
 8030c7c:	f7ff fc52 	bl	8030524 <__aeabi_ui2d>
 8030c80:	4b07      	ldr	r3, [pc, #28]	; (8030ca0 <__aeabi_d2ulz+0x38>)
 8030c82:	2200      	movs	r2, #0
 8030c84:	f7ff fcc8 	bl	8030618 <__aeabi_dmul>
 8030c88:	4602      	mov	r2, r0
 8030c8a:	460b      	mov	r3, r1
 8030c8c:	4630      	mov	r0, r6
 8030c8e:	4639      	mov	r1, r7
 8030c90:	f7ff fb0a 	bl	80302a8 <__aeabi_dsub>
 8030c94:	f7ff ff98 	bl	8030bc8 <__aeabi_d2uiz>
 8030c98:	4621      	mov	r1, r4
 8030c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8030c9c:	3df00000 	.word	0x3df00000
 8030ca0:	41f00000 	.word	0x41f00000

08030ca4 <__udivmoddi4>:
 8030ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030ca8:	9e08      	ldr	r6, [sp, #32]
 8030caa:	460d      	mov	r5, r1
 8030cac:	4604      	mov	r4, r0
 8030cae:	460f      	mov	r7, r1
 8030cb0:	2b00      	cmp	r3, #0
 8030cb2:	d14a      	bne.n	8030d4a <__udivmoddi4+0xa6>
 8030cb4:	428a      	cmp	r2, r1
 8030cb6:	4694      	mov	ip, r2
 8030cb8:	d965      	bls.n	8030d86 <__udivmoddi4+0xe2>
 8030cba:	fab2 f382 	clz	r3, r2
 8030cbe:	b143      	cbz	r3, 8030cd2 <__udivmoddi4+0x2e>
 8030cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8030cc4:	f1c3 0220 	rsb	r2, r3, #32
 8030cc8:	409f      	lsls	r7, r3
 8030cca:	fa20 f202 	lsr.w	r2, r0, r2
 8030cce:	4317      	orrs	r7, r2
 8030cd0:	409c      	lsls	r4, r3
 8030cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8030cd6:	fa1f f58c 	uxth.w	r5, ip
 8030cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8030cde:	0c22      	lsrs	r2, r4, #16
 8030ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8030ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8030ce8:	fb01 f005 	mul.w	r0, r1, r5
 8030cec:	4290      	cmp	r0, r2
 8030cee:	d90a      	bls.n	8030d06 <__udivmoddi4+0x62>
 8030cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8030cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8030cf8:	f080 811c 	bcs.w	8030f34 <__udivmoddi4+0x290>
 8030cfc:	4290      	cmp	r0, r2
 8030cfe:	f240 8119 	bls.w	8030f34 <__udivmoddi4+0x290>
 8030d02:	3902      	subs	r1, #2
 8030d04:	4462      	add	r2, ip
 8030d06:	1a12      	subs	r2, r2, r0
 8030d08:	b2a4      	uxth	r4, r4
 8030d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8030d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8030d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8030d16:	fb00 f505 	mul.w	r5, r0, r5
 8030d1a:	42a5      	cmp	r5, r4
 8030d1c:	d90a      	bls.n	8030d34 <__udivmoddi4+0x90>
 8030d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8030d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8030d26:	f080 8107 	bcs.w	8030f38 <__udivmoddi4+0x294>
 8030d2a:	42a5      	cmp	r5, r4
 8030d2c:	f240 8104 	bls.w	8030f38 <__udivmoddi4+0x294>
 8030d30:	4464      	add	r4, ip
 8030d32:	3802      	subs	r0, #2
 8030d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8030d38:	1b64      	subs	r4, r4, r5
 8030d3a:	2100      	movs	r1, #0
 8030d3c:	b11e      	cbz	r6, 8030d46 <__udivmoddi4+0xa2>
 8030d3e:	40dc      	lsrs	r4, r3
 8030d40:	2300      	movs	r3, #0
 8030d42:	e9c6 4300 	strd	r4, r3, [r6]
 8030d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030d4a:	428b      	cmp	r3, r1
 8030d4c:	d908      	bls.n	8030d60 <__udivmoddi4+0xbc>
 8030d4e:	2e00      	cmp	r6, #0
 8030d50:	f000 80ed 	beq.w	8030f2e <__udivmoddi4+0x28a>
 8030d54:	2100      	movs	r1, #0
 8030d56:	e9c6 0500 	strd	r0, r5, [r6]
 8030d5a:	4608      	mov	r0, r1
 8030d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030d60:	fab3 f183 	clz	r1, r3
 8030d64:	2900      	cmp	r1, #0
 8030d66:	d149      	bne.n	8030dfc <__udivmoddi4+0x158>
 8030d68:	42ab      	cmp	r3, r5
 8030d6a:	d302      	bcc.n	8030d72 <__udivmoddi4+0xce>
 8030d6c:	4282      	cmp	r2, r0
 8030d6e:	f200 80f8 	bhi.w	8030f62 <__udivmoddi4+0x2be>
 8030d72:	1a84      	subs	r4, r0, r2
 8030d74:	eb65 0203 	sbc.w	r2, r5, r3
 8030d78:	2001      	movs	r0, #1
 8030d7a:	4617      	mov	r7, r2
 8030d7c:	2e00      	cmp	r6, #0
 8030d7e:	d0e2      	beq.n	8030d46 <__udivmoddi4+0xa2>
 8030d80:	e9c6 4700 	strd	r4, r7, [r6]
 8030d84:	e7df      	b.n	8030d46 <__udivmoddi4+0xa2>
 8030d86:	b902      	cbnz	r2, 8030d8a <__udivmoddi4+0xe6>
 8030d88:	deff      	udf	#255	; 0xff
 8030d8a:	fab2 f382 	clz	r3, r2
 8030d8e:	2b00      	cmp	r3, #0
 8030d90:	f040 8090 	bne.w	8030eb4 <__udivmoddi4+0x210>
 8030d94:	1a8a      	subs	r2, r1, r2
 8030d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8030d9a:	fa1f fe8c 	uxth.w	lr, ip
 8030d9e:	2101      	movs	r1, #1
 8030da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8030da4:	fb07 2015 	mls	r0, r7, r5, r2
 8030da8:	0c22      	lsrs	r2, r4, #16
 8030daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8030dae:	fb0e f005 	mul.w	r0, lr, r5
 8030db2:	4290      	cmp	r0, r2
 8030db4:	d908      	bls.n	8030dc8 <__udivmoddi4+0x124>
 8030db6:	eb1c 0202 	adds.w	r2, ip, r2
 8030dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8030dbe:	d202      	bcs.n	8030dc6 <__udivmoddi4+0x122>
 8030dc0:	4290      	cmp	r0, r2
 8030dc2:	f200 80cb 	bhi.w	8030f5c <__udivmoddi4+0x2b8>
 8030dc6:	4645      	mov	r5, r8
 8030dc8:	1a12      	subs	r2, r2, r0
 8030dca:	b2a4      	uxth	r4, r4
 8030dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8030dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8030dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8030dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8030ddc:	45a6      	cmp	lr, r4
 8030dde:	d908      	bls.n	8030df2 <__udivmoddi4+0x14e>
 8030de0:	eb1c 0404 	adds.w	r4, ip, r4
 8030de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8030de8:	d202      	bcs.n	8030df0 <__udivmoddi4+0x14c>
 8030dea:	45a6      	cmp	lr, r4
 8030dec:	f200 80bb 	bhi.w	8030f66 <__udivmoddi4+0x2c2>
 8030df0:	4610      	mov	r0, r2
 8030df2:	eba4 040e 	sub.w	r4, r4, lr
 8030df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8030dfa:	e79f      	b.n	8030d3c <__udivmoddi4+0x98>
 8030dfc:	f1c1 0720 	rsb	r7, r1, #32
 8030e00:	408b      	lsls	r3, r1
 8030e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8030e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8030e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8030e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8030e12:	40fd      	lsrs	r5, r7
 8030e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8030e18:	4323      	orrs	r3, r4
 8030e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8030e1e:	fa1f fe8c 	uxth.w	lr, ip
 8030e22:	fb09 5518 	mls	r5, r9, r8, r5
 8030e26:	0c1c      	lsrs	r4, r3, #16
 8030e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8030e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8030e30:	42a5      	cmp	r5, r4
 8030e32:	fa02 f201 	lsl.w	r2, r2, r1
 8030e36:	fa00 f001 	lsl.w	r0, r0, r1
 8030e3a:	d90b      	bls.n	8030e54 <__udivmoddi4+0x1b0>
 8030e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8030e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8030e44:	f080 8088 	bcs.w	8030f58 <__udivmoddi4+0x2b4>
 8030e48:	42a5      	cmp	r5, r4
 8030e4a:	f240 8085 	bls.w	8030f58 <__udivmoddi4+0x2b4>
 8030e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8030e52:	4464      	add	r4, ip
 8030e54:	1b64      	subs	r4, r4, r5
 8030e56:	b29d      	uxth	r5, r3
 8030e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8030e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8030e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8030e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8030e68:	45a6      	cmp	lr, r4
 8030e6a:	d908      	bls.n	8030e7e <__udivmoddi4+0x1da>
 8030e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8030e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8030e74:	d26c      	bcs.n	8030f50 <__udivmoddi4+0x2ac>
 8030e76:	45a6      	cmp	lr, r4
 8030e78:	d96a      	bls.n	8030f50 <__udivmoddi4+0x2ac>
 8030e7a:	3b02      	subs	r3, #2
 8030e7c:	4464      	add	r4, ip
 8030e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8030e82:	fba3 9502 	umull	r9, r5, r3, r2
 8030e86:	eba4 040e 	sub.w	r4, r4, lr
 8030e8a:	42ac      	cmp	r4, r5
 8030e8c:	46c8      	mov	r8, r9
 8030e8e:	46ae      	mov	lr, r5
 8030e90:	d356      	bcc.n	8030f40 <__udivmoddi4+0x29c>
 8030e92:	d053      	beq.n	8030f3c <__udivmoddi4+0x298>
 8030e94:	b156      	cbz	r6, 8030eac <__udivmoddi4+0x208>
 8030e96:	ebb0 0208 	subs.w	r2, r0, r8
 8030e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8030e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8030ea2:	40ca      	lsrs	r2, r1
 8030ea4:	40cc      	lsrs	r4, r1
 8030ea6:	4317      	orrs	r7, r2
 8030ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8030eac:	4618      	mov	r0, r3
 8030eae:	2100      	movs	r1, #0
 8030eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030eb4:	f1c3 0120 	rsb	r1, r3, #32
 8030eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8030ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8030ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8030ec4:	409d      	lsls	r5, r3
 8030ec6:	432a      	orrs	r2, r5
 8030ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8030ecc:	fa1f fe8c 	uxth.w	lr, ip
 8030ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8030ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8030ed8:	0c11      	lsrs	r1, r2, #16
 8030eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8030ede:	fb00 f50e 	mul.w	r5, r0, lr
 8030ee2:	428d      	cmp	r5, r1
 8030ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8030ee8:	d908      	bls.n	8030efc <__udivmoddi4+0x258>
 8030eea:	eb1c 0101 	adds.w	r1, ip, r1
 8030eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8030ef2:	d22f      	bcs.n	8030f54 <__udivmoddi4+0x2b0>
 8030ef4:	428d      	cmp	r5, r1
 8030ef6:	d92d      	bls.n	8030f54 <__udivmoddi4+0x2b0>
 8030ef8:	3802      	subs	r0, #2
 8030efa:	4461      	add	r1, ip
 8030efc:	1b49      	subs	r1, r1, r5
 8030efe:	b292      	uxth	r2, r2
 8030f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8030f04:	fb07 1115 	mls	r1, r7, r5, r1
 8030f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8030f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8030f10:	4291      	cmp	r1, r2
 8030f12:	d908      	bls.n	8030f26 <__udivmoddi4+0x282>
 8030f14:	eb1c 0202 	adds.w	r2, ip, r2
 8030f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8030f1c:	d216      	bcs.n	8030f4c <__udivmoddi4+0x2a8>
 8030f1e:	4291      	cmp	r1, r2
 8030f20:	d914      	bls.n	8030f4c <__udivmoddi4+0x2a8>
 8030f22:	3d02      	subs	r5, #2
 8030f24:	4462      	add	r2, ip
 8030f26:	1a52      	subs	r2, r2, r1
 8030f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8030f2c:	e738      	b.n	8030da0 <__udivmoddi4+0xfc>
 8030f2e:	4631      	mov	r1, r6
 8030f30:	4630      	mov	r0, r6
 8030f32:	e708      	b.n	8030d46 <__udivmoddi4+0xa2>
 8030f34:	4639      	mov	r1, r7
 8030f36:	e6e6      	b.n	8030d06 <__udivmoddi4+0x62>
 8030f38:	4610      	mov	r0, r2
 8030f3a:	e6fb      	b.n	8030d34 <__udivmoddi4+0x90>
 8030f3c:	4548      	cmp	r0, r9
 8030f3e:	d2a9      	bcs.n	8030e94 <__udivmoddi4+0x1f0>
 8030f40:	ebb9 0802 	subs.w	r8, r9, r2
 8030f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8030f48:	3b01      	subs	r3, #1
 8030f4a:	e7a3      	b.n	8030e94 <__udivmoddi4+0x1f0>
 8030f4c:	4645      	mov	r5, r8
 8030f4e:	e7ea      	b.n	8030f26 <__udivmoddi4+0x282>
 8030f50:	462b      	mov	r3, r5
 8030f52:	e794      	b.n	8030e7e <__udivmoddi4+0x1da>
 8030f54:	4640      	mov	r0, r8
 8030f56:	e7d1      	b.n	8030efc <__udivmoddi4+0x258>
 8030f58:	46d0      	mov	r8, sl
 8030f5a:	e77b      	b.n	8030e54 <__udivmoddi4+0x1b0>
 8030f5c:	3d02      	subs	r5, #2
 8030f5e:	4462      	add	r2, ip
 8030f60:	e732      	b.n	8030dc8 <__udivmoddi4+0x124>
 8030f62:	4608      	mov	r0, r1
 8030f64:	e70a      	b.n	8030d7c <__udivmoddi4+0xd8>
 8030f66:	4464      	add	r4, ip
 8030f68:	3802      	subs	r0, #2
 8030f6a:	e742      	b.n	8030df2 <__udivmoddi4+0x14e>

08030f6c <__aeabi_idiv0>:
 8030f6c:	4770      	bx	lr
 8030f6e:	bf00      	nop

08030f70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8030f70:	b480      	push	{r7}
 8030f72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8030f74:	f3bf 8f4f 	dsb	sy
}
 8030f78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8030f7a:	4b06      	ldr	r3, [pc, #24]	; (8030f94 <__NVIC_SystemReset+0x24>)
 8030f7c:	68db      	ldr	r3, [r3, #12]
 8030f7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8030f82:	4904      	ldr	r1, [pc, #16]	; (8030f94 <__NVIC_SystemReset+0x24>)
 8030f84:	4b04      	ldr	r3, [pc, #16]	; (8030f98 <__NVIC_SystemReset+0x28>)
 8030f86:	4313      	orrs	r3, r2
 8030f88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8030f8a:	f3bf 8f4f 	dsb	sy
}
 8030f8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8030f90:	bf00      	nop
 8030f92:	e7fd      	b.n	8030f90 <__NVIC_SystemReset+0x20>
 8030f94:	e000ed00 	.word	0xe000ed00
 8030f98:	05fa0004 	.word	0x05fa0004

08030f9c <Initialize_Modem>:
//	HAL_Delay(1000);
//
//}
//Have to work on certificate configuration.
void Initialize_Modem(void)
{
 8030f9c:	b580      	push	{r7, lr}
 8030f9e:	af00      	add	r7, sp, #0
//    {
//        return; // If we didn't get an OK, exit
//    }

    // Reset state
    at_state = AT_IDLE;
 8030fa0:	4b4d      	ldr	r3, [pc, #308]	; (80310d8 <Initialize_Modem+0x13c>)
 8030fa2:	2200      	movs	r2, #0
 8030fa4:	701a      	strb	r2, [r3, #0]

    // Proceed with other commands using the same pattern
    send_at_command("AT", "OK");
 8030fa6:	494d      	ldr	r1, [pc, #308]	; (80310dc <Initialize_Modem+0x140>)
 8030fa8:	484d      	ldr	r0, [pc, #308]	; (80310e0 <Initialize_Modem+0x144>)
 8030faa:	f000 fd8d 	bl	8031ac8 <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8030fae:	bf00      	nop
 8030fb0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8030fb4:	b29b      	uxth	r3, r3
 8030fb6:	4618      	mov	r0, r3
 8030fb8:	f000 fdb0 	bl	8031b1c <check_at_command_response>
 8030fbc:	4603      	mov	r3, r0
 8030fbe:	2b01      	cmp	r3, #1
 8030fc0:	d0f6      	beq.n	8030fb0 <Initialize_Modem+0x14>
    if(at_state != AT_RESPONSE_RECEIVED)
 8030fc2:	4b45      	ldr	r3, [pc, #276]	; (80310d8 <Initialize_Modem+0x13c>)
 8030fc4:	781b      	ldrb	r3, [r3, #0]
 8030fc6:	2b02      	cmp	r3, #2
 8030fc8:	d177      	bne.n	80310ba <Initialize_Modem+0x11e>
        return;
    }



    send_at_command("AT+CPIN?", "+CPIN: READY");
 8030fca:	4946      	ldr	r1, [pc, #280]	; (80310e4 <Initialize_Modem+0x148>)
 8030fcc:	4846      	ldr	r0, [pc, #280]	; (80310e8 <Initialize_Modem+0x14c>)
 8030fce:	f000 fd7b 	bl	8031ac8 <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8030fd2:	bf00      	nop
 8030fd4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8030fd8:	b29b      	uxth	r3, r3
 8030fda:	4618      	mov	r0, r3
 8030fdc:	f000 fd9e 	bl	8031b1c <check_at_command_response>
 8030fe0:	4603      	mov	r3, r0
 8030fe2:	2b01      	cmp	r3, #1
 8030fe4:	d0f6      	beq.n	8030fd4 <Initialize_Modem+0x38>
    if(at_state != AT_RESPONSE_RECEIVED)
 8030fe6:	4b3c      	ldr	r3, [pc, #240]	; (80310d8 <Initialize_Modem+0x13c>)
 8030fe8:	781b      	ldrb	r3, [r3, #0]
 8030fea:	2b02      	cmp	r3, #2
 8030fec:	d167      	bne.n	80310be <Initialize_Modem+0x122>
        return;
    }



     send_at_command("AT+CREG?", "+CREG: 0,1");
 8030fee:	493f      	ldr	r1, [pc, #252]	; (80310ec <Initialize_Modem+0x150>)
 8030ff0:	483f      	ldr	r0, [pc, #252]	; (80310f0 <Initialize_Modem+0x154>)
 8030ff2:	f000 fd69 	bl	8031ac8 <send_at_command>
     while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8030ff6:	bf00      	nop
 8030ff8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8030ffc:	b29b      	uxth	r3, r3
 8030ffe:	4618      	mov	r0, r3
 8031000:	f000 fd8c 	bl	8031b1c <check_at_command_response>
 8031004:	4603      	mov	r3, r0
 8031006:	2b01      	cmp	r3, #1
 8031008:	d0f6      	beq.n	8030ff8 <Initialize_Modem+0x5c>
     if(at_state != AT_RESPONSE_RECEIVED)
 803100a:	4b33      	ldr	r3, [pc, #204]	; (80310d8 <Initialize_Modem+0x13c>)
 803100c:	781b      	ldrb	r3, [r3, #0]
 803100e:	2b02      	cmp	r3, #2
 8031010:	d157      	bne.n	80310c2 <Initialize_Modem+0x126>
         return;
     }



      send_at_command("AT+QICSGP=1,\"airtelgprs.com\"", "OK");
 8031012:	4932      	ldr	r1, [pc, #200]	; (80310dc <Initialize_Modem+0x140>)
 8031014:	4837      	ldr	r0, [pc, #220]	; (80310f4 <Initialize_Modem+0x158>)
 8031016:	f000 fd57 	bl	8031ac8 <send_at_command>
      while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 803101a:	bf00      	nop
 803101c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8031020:	b29b      	uxth	r3, r3
 8031022:	4618      	mov	r0, r3
 8031024:	f000 fd7a 	bl	8031b1c <check_at_command_response>
 8031028:	4603      	mov	r3, r0
 803102a:	2b01      	cmp	r3, #1
 803102c:	d0f6      	beq.n	803101c <Initialize_Modem+0x80>
      if(at_state != AT_RESPONSE_RECEIVED)
 803102e:	4b2a      	ldr	r3, [pc, #168]	; (80310d8 <Initialize_Modem+0x13c>)
 8031030:	781b      	ldrb	r3, [r3, #0]
 8031032:	2b02      	cmp	r3, #2
 8031034:	d147      	bne.n	80310c6 <Initialize_Modem+0x12a>
          return;
      }



       send_at_command("AT+QICSGP?", "+QICSGP: 1");
 8031036:	4930      	ldr	r1, [pc, #192]	; (80310f8 <Initialize_Modem+0x15c>)
 8031038:	4830      	ldr	r0, [pc, #192]	; (80310fc <Initialize_Modem+0x160>)
 803103a:	f000 fd45 	bl	8031ac8 <send_at_command>
       while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 803103e:	bf00      	nop
 8031040:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8031044:	b29b      	uxth	r3, r3
 8031046:	4618      	mov	r0, r3
 8031048:	f000 fd68 	bl	8031b1c <check_at_command_response>
 803104c:	4603      	mov	r3, r0
 803104e:	2b01      	cmp	r3, #1
 8031050:	d0f6      	beq.n	8031040 <Initialize_Modem+0xa4>
       if(at_state != AT_RESPONSE_RECEIVED)
 8031052:	4b21      	ldr	r3, [pc, #132]	; (80310d8 <Initialize_Modem+0x13c>)
 8031054:	781b      	ldrb	r3, [r3, #0]
 8031056:	2b02      	cmp	r3, #2
 8031058:	d137      	bne.n	80310ca <Initialize_Modem+0x12e>
           return;
       }



        send_at_command("AT+QIREGAPP", "OK");
 803105a:	4920      	ldr	r1, [pc, #128]	; (80310dc <Initialize_Modem+0x140>)
 803105c:	4828      	ldr	r0, [pc, #160]	; (8031100 <Initialize_Modem+0x164>)
 803105e:	f000 fd33 	bl	8031ac8 <send_at_command>
        while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8031062:	bf00      	nop
 8031064:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8031068:	b29b      	uxth	r3, r3
 803106a:	4618      	mov	r0, r3
 803106c:	f000 fd56 	bl	8031b1c <check_at_command_response>
 8031070:	4603      	mov	r3, r0
 8031072:	2b01      	cmp	r3, #1
 8031074:	d0f6      	beq.n	8031064 <Initialize_Modem+0xc8>
        if(at_state != AT_RESPONSE_RECEIVED)
 8031076:	4b18      	ldr	r3, [pc, #96]	; (80310d8 <Initialize_Modem+0x13c>)
 8031078:	781b      	ldrb	r3, [r3, #0]
 803107a:	2b02      	cmp	r3, #2
 803107c:	d127      	bne.n	80310ce <Initialize_Modem+0x132>
            return;
        }
//        HAL_Delay(DELAY);


         send_at_command("AT+QIACT", "OK");
 803107e:	4917      	ldr	r1, [pc, #92]	; (80310dc <Initialize_Modem+0x140>)
 8031080:	4820      	ldr	r0, [pc, #128]	; (8031104 <Initialize_Modem+0x168>)
 8031082:	f000 fd21 	bl	8031ac8 <send_at_command>
         while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8031086:	bf00      	nop
 8031088:	f44f 7396 	mov.w	r3, #300	; 0x12c
 803108c:	b29b      	uxth	r3, r3
 803108e:	4618      	mov	r0, r3
 8031090:	f000 fd44 	bl	8031b1c <check_at_command_response>
 8031094:	4603      	mov	r3, r0
 8031096:	2b01      	cmp	r3, #1
 8031098:	d0f6      	beq.n	8031088 <Initialize_Modem+0xec>
         if(at_state != AT_RESPONSE_RECEIVED)
 803109a:	4b0f      	ldr	r3, [pc, #60]	; (80310d8 <Initialize_Modem+0x13c>)
 803109c:	781b      	ldrb	r3, [r3, #0]
 803109e:	2b02      	cmp	r3, #2
 80310a0:	d117      	bne.n	80310d2 <Initialize_Modem+0x136>
         {
             return;
         }
         HAL_Delay(1000);
 80310a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80310a6:	f002 fbd7 	bl	8033858 <HAL_Delay>


//         HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QILOCIP\r\n", strlen("AT+QILOCIP\r\n"), 1000);
         UART_Send("AT+QILOCIP\r\n");
 80310aa:	4817      	ldr	r0, [pc, #92]	; (8031108 <Initialize_Modem+0x16c>)
 80310ac:	f000 fd72 	bl	8031b94 <UART_Send>
         HAL_Delay(1000);
 80310b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80310b4:	f002 fbd0 	bl	8033858 <HAL_Delay>
 80310b8:	e00c      	b.n	80310d4 <Initialize_Modem+0x138>
        return;
 80310ba:	bf00      	nop
 80310bc:	e00a      	b.n	80310d4 <Initialize_Modem+0x138>
        return;
 80310be:	bf00      	nop
 80310c0:	e008      	b.n	80310d4 <Initialize_Modem+0x138>
         return;
 80310c2:	bf00      	nop
 80310c4:	e006      	b.n	80310d4 <Initialize_Modem+0x138>
          return;
 80310c6:	bf00      	nop
 80310c8:	e004      	b.n	80310d4 <Initialize_Modem+0x138>
           return;
 80310ca:	bf00      	nop
 80310cc:	e002      	b.n	80310d4 <Initialize_Modem+0x138>
            return;
 80310ce:	bf00      	nop
 80310d0:	e000      	b.n	80310d4 <Initialize_Modem+0x138>
             return;
 80310d2:	bf00      	nop




}
 80310d4:	bd80      	pop	{r7, pc}
 80310d6:	bf00      	nop
 80310d8:	2000ca7a 	.word	0x2000ca7a
 80310dc:	0803a5c0 	.word	0x0803a5c0
 80310e0:	0803a5c4 	.word	0x0803a5c4
 80310e4:	0803a5c8 	.word	0x0803a5c8
 80310e8:	0803a5d8 	.word	0x0803a5d8
 80310ec:	0803a5e4 	.word	0x0803a5e4
 80310f0:	0803a5f0 	.word	0x0803a5f0
 80310f4:	0803a5fc 	.word	0x0803a5fc
 80310f8:	0803a61c 	.word	0x0803a61c
 80310fc:	0803a628 	.word	0x0803a628
 8031100:	0803a634 	.word	0x0803a634
 8031104:	0803a640 	.word	0x0803a640
 8031108:	0803a64c 	.word	0x0803a64c

0803110c <SSL_Config>:


void SSL_Config(void){
 803110c:	b580      	push	{r7, lr}
 803110e:	af00      	add	r7, sp, #0
EiBeaDGu2GFxU3xMC4Pco1+qoetbHse8Sw5FF4dgWLoPvax2694XQG2nPk4kZ1go\n\
FSFcEE0C9x2LB5Busc2qSAEaxuZOmQ4NJZX40Sh/23Bx5j/uR4nP9eY=\n\
-----END RSA PRIVATE KEY-----\r\n";
#endif

	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTCFG=\"SSL\",0,1,2\r\n", strlen("AT+QMTCFG=\"SSL\",0,1,2\r\n"), 1000);
 8031110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031114:	2217      	movs	r2, #23
 8031116:	492b      	ldr	r1, [pc, #172]	; (80311c4 <SSL_Config+0xb8>)
 8031118:	482b      	ldr	r0, [pc, #172]	; (80311c8 <SSL_Config+0xbc>)
 803111a:	f004 f8a5 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 803111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031122:	f002 fb99 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSECWRITE=\"user_key.pem\",1679,100\r\n", strlen("AT+QSECWRITE=\"user_key.pem\",1679,100\r\n"), 1000);
	HAL_Delay(300);
	HAL_UART_Transmit(&huart2, (uint8_t *)Usr_KEY, strlen(Usr_KEY), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
#endif
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n", strlen("AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n"), 1000);
 8031126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803112a:	2224      	movs	r2, #36	; 0x24
 803112c:	4927      	ldr	r1, [pc, #156]	; (80311cc <SSL_Config+0xc0>)
 803112e:	4826      	ldr	r0, [pc, #152]	; (80311c8 <SSL_Config+0xbc>)
 8031130:	f004 f89a 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8031134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031138:	f002 fb8e 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n", strlen("AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n"), 1000);
 803113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031140:	2228      	movs	r2, #40	; 0x28
 8031142:	4923      	ldr	r1, [pc, #140]	; (80311d0 <SSL_Config+0xc4>)
 8031144:	4820      	ldr	r0, [pc, #128]	; (80311c8 <SSL_Config+0xbc>)
 8031146:	f004 f88f 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 803114a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803114e:	f002 fb83 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n", strlen("AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n"), 1000);
 8031152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031156:	2229      	movs	r2, #41	; 0x29
 8031158:	491e      	ldr	r1, [pc, #120]	; (80311d4 <SSL_Config+0xc8>)
 803115a:	481b      	ldr	r0, [pc, #108]	; (80311c8 <SSL_Config+0xbc>)
 803115c:	f004 f884 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8031160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031164:	f002 fb78 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"seclevel\",2,2\r\n", strlen("AT+QSSLCFG=\"seclevel\",2,2\r\n"), 1000);
 8031168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803116c:	221b      	movs	r2, #27
 803116e:	491a      	ldr	r1, [pc, #104]	; (80311d8 <SSL_Config+0xcc>)
 8031170:	4815      	ldr	r0, [pc, #84]	; (80311c8 <SSL_Config+0xbc>)
 8031172:	f004 f879 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8031176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 803117a:	f002 fb6d 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"sslversion\",2,4\r\n", strlen("AT+QSSLCFG=\"sslversion\",2,4\r\n"), 1000);
 803117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031182:	221d      	movs	r2, #29
 8031184:	4915      	ldr	r1, [pc, #84]	; (80311dc <SSL_Config+0xd0>)
 8031186:	4810      	ldr	r0, [pc, #64]	; (80311c8 <SSL_Config+0xbc>)
 8031188:	f004 f86e 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 803118c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8031190:	f002 fb62 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n", strlen("AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n"), 1000);
 8031194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031198:	2225      	movs	r2, #37	; 0x25
 803119a:	4911      	ldr	r1, [pc, #68]	; (80311e0 <SSL_Config+0xd4>)
 803119c:	480a      	ldr	r0, [pc, #40]	; (80311c8 <SSL_Config+0xbc>)
 803119e:	f004 f863 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80311a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80311a6:	f002 fb57 	bl	8033858 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ignorertctime\",1\r\n", strlen("AT+QSSLCFG=\"ignorertctime\",1\r\n"), 1000);
 80311aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80311ae:	221e      	movs	r2, #30
 80311b0:	490c      	ldr	r1, [pc, #48]	; (80311e4 <SSL_Config+0xd8>)
 80311b2:	4805      	ldr	r0, [pc, #20]	; (80311c8 <SSL_Config+0xbc>)
 80311b4:	f004 f858 	bl	8035268 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80311b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80311bc:	f002 fb4c 	bl	8033858 <HAL_Delay>

}
 80311c0:	bf00      	nop
 80311c2:	bd80      	pop	{r7, pc}
 80311c4:	0803a65c 	.word	0x0803a65c
 80311c8:	2000cb38 	.word	0x2000cb38
 80311cc:	0803a674 	.word	0x0803a674
 80311d0:	0803a69c 	.word	0x0803a69c
 80311d4:	0803a6c8 	.word	0x0803a6c8
 80311d8:	0803a6f4 	.word	0x0803a6f4
 80311dc:	0803a710 	.word	0x0803a710
 80311e0:	0803a730 	.word	0x0803a730
 80311e4:	0803a758 	.word	0x0803a758

080311e8 <AWS_MQTT>:

const char* mqtt_broker = "a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com";
const char* client_id = "M66";
const char* topic = "$aws/things/M66/shadow";
void AWS_MQTT(void){
 80311e8:	b580      	push	{r7, lr}
 80311ea:	b0e0      	sub	sp, #384	; 0x180
 80311ec:	af00      	add	r7, sp, #0


//	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTOPEN=0,\"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com\",8883\r\n",74 , 1000);
	char mqtt_open_command[128];
	sprintf(mqtt_open_command, "AT+QMTOPEN=0,\"%s\",8883", mqtt_broker);
 80311ee:	4b31      	ldr	r3, [pc, #196]	; (80312b4 <AWS_MQTT+0xcc>)
 80311f0:	681a      	ldr	r2, [r3, #0]
 80311f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80311f6:	4930      	ldr	r1, [pc, #192]	; (80312b8 <AWS_MQTT+0xd0>)
 80311f8:	4618      	mov	r0, r3
 80311fa:	f006 fc83 	bl	8037b04 <siprintf>
	send_at_command(mqtt_open_command,"+QMTOPEN: 0,0");
 80311fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8031202:	492e      	ldr	r1, [pc, #184]	; (80312bc <AWS_MQTT+0xd4>)
 8031204:	4618      	mov	r0, r3
 8031206:	f000 fc5f 	bl	8031ac8 <send_at_command>
    while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 803120a:	bf00      	nop
 803120c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8031210:	b29b      	uxth	r3, r3
 8031212:	4618      	mov	r0, r3
 8031214:	f000 fc82 	bl	8031b1c <check_at_command_response>
 8031218:	4603      	mov	r3, r0
 803121a:	2b01      	cmp	r3, #1
 803121c:	d0f6      	beq.n	803120c <AWS_MQTT+0x24>
    if(at_state != AT_RESPONSE_RECEIVED)
 803121e:	4b28      	ldr	r3, [pc, #160]	; (80312c0 <AWS_MQTT+0xd8>)
 8031220:	781b      	ldrb	r3, [r3, #0]
 8031222:	2b02      	cmp	r3, #2
 8031224:	d13c      	bne.n	80312a0 <AWS_MQTT+0xb8>
//	UART_Send(mqtt_open_command);
//	HAL_Delay(LONG_DELAY);
//	send_at_command("AT+QMTOPEN=0,\"%s\",1883\r\n", mqtt_broker);
//	send_at_command("AT+QMTCONN=0,\"%s\"\r\n", client_id);
	char mqtt_conn_command[128];
	sprintf(mqtt_conn_command, "AT+QMTCONN=0,\"%s\"", client_id);
 8031226:	4b27      	ldr	r3, [pc, #156]	; (80312c4 <AWS_MQTT+0xdc>)
 8031228:	681a      	ldr	r2, [r3, #0]
 803122a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 803122e:	4926      	ldr	r1, [pc, #152]	; (80312c8 <AWS_MQTT+0xe0>)
 8031230:	4618      	mov	r0, r3
 8031232:	f006 fc67 	bl	8037b04 <siprintf>
	send_at_command(mqtt_conn_command, "+QMTCONN: 0,0,0");
 8031236:	f107 0380 	add.w	r3, r7, #128	; 0x80
 803123a:	4924      	ldr	r1, [pc, #144]	; (80312cc <AWS_MQTT+0xe4>)
 803123c:	4618      	mov	r0, r3
 803123e:	f000 fc43 	bl	8031ac8 <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 8031242:	bf00      	nop
 8031244:	f242 7310 	movw	r3, #10000	; 0x2710
 8031248:	b29b      	uxth	r3, r3
 803124a:	4618      	mov	r0, r3
 803124c:	f000 fc66 	bl	8031b1c <check_at_command_response>
 8031250:	4603      	mov	r3, r0
 8031252:	2b01      	cmp	r3, #1
 8031254:	d0f6      	beq.n	8031244 <AWS_MQTT+0x5c>
    if(at_state != AT_RESPONSE_RECEIVED)
 8031256:	4b1a      	ldr	r3, [pc, #104]	; (80312c0 <AWS_MQTT+0xd8>)
 8031258:	781b      	ldrb	r3, [r3, #0]
 803125a:	2b02      	cmp	r3, #2
 803125c:	d122      	bne.n	80312a4 <AWS_MQTT+0xbc>
    {
        return;
    }
//    UART_Send(mqtt_conn_command);

    at_state = AT_IDLE;
 803125e:	4b18      	ldr	r3, [pc, #96]	; (80312c0 <AWS_MQTT+0xd8>)
 8031260:	2200      	movs	r2, #0
 8031262:	701a      	strb	r2, [r3, #0]
	char mqtt_sub_command[128];
	sprintf(mqtt_sub_command, "AT+QMTSUB=0,1,\"%s\",1", topic);
 8031264:	4b1a      	ldr	r3, [pc, #104]	; (80312d0 <AWS_MQTT+0xe8>)
 8031266:	681a      	ldr	r2, [r3, #0]
 8031268:	463b      	mov	r3, r7
 803126a:	491a      	ldr	r1, [pc, #104]	; (80312d4 <AWS_MQTT+0xec>)
 803126c:	4618      	mov	r0, r3
 803126e:	f006 fc49 	bl	8037b04 <siprintf>
	send_at_command(mqtt_sub_command, "+QMTSUB: 0,1,0,1");
 8031272:	463b      	mov	r3, r7
 8031274:	4918      	ldr	r1, [pc, #96]	; (80312d8 <AWS_MQTT+0xf0>)
 8031276:	4618      	mov	r0, r3
 8031278:	f000 fc26 	bl	8031ac8 <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 803127c:	bf00      	nop
 803127e:	f242 7310 	movw	r3, #10000	; 0x2710
 8031282:	b29b      	uxth	r3, r3
 8031284:	4618      	mov	r0, r3
 8031286:	f000 fc49 	bl	8031b1c <check_at_command_response>
 803128a:	4603      	mov	r3, r0
 803128c:	2b01      	cmp	r3, #1
 803128e:	d0f6      	beq.n	803127e <AWS_MQTT+0x96>
    if(at_state != AT_RESPONSE_RECEIVED)
 8031290:	4b0b      	ldr	r3, [pc, #44]	; (80312c0 <AWS_MQTT+0xd8>)
 8031292:	781b      	ldrb	r3, [r3, #0]
 8031294:	2b02      	cmp	r3, #2
 8031296:	d107      	bne.n	80312a8 <AWS_MQTT+0xc0>
    {
        return;
    }
//	UART_Send(mqtt_sub_command);
    current_mode = MODE_MQTT;
 8031298:	4b10      	ldr	r3, [pc, #64]	; (80312dc <AWS_MQTT+0xf4>)
 803129a:	2201      	movs	r2, #1
 803129c:	701a      	strb	r2, [r3, #0]
 803129e:	e004      	b.n	80312aa <AWS_MQTT+0xc2>
        return;
 80312a0:	bf00      	nop
 80312a2:	e002      	b.n	80312aa <AWS_MQTT+0xc2>
        return;
 80312a4:	bf00      	nop
 80312a6:	e000      	b.n	80312aa <AWS_MQTT+0xc2>
        return;
 80312a8:	bf00      	nop
}
 80312aa:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 80312ae:	46bd      	mov	sp, r7
 80312b0:	bd80      	pop	{r7, pc}
 80312b2:	bf00      	nop
 80312b4:	20000000 	.word	0x20000000
 80312b8:	0803a7c4 	.word	0x0803a7c4
 80312bc:	0803a7dc 	.word	0x0803a7dc
 80312c0:	2000ca7a 	.word	0x2000ca7a
 80312c4:	20000004 	.word	0x20000004
 80312c8:	0803a7ec 	.word	0x0803a7ec
 80312cc:	0803a800 	.word	0x0803a800
 80312d0:	20000008 	.word	0x20000008
 80312d4:	0803a810 	.word	0x0803a810
 80312d8:	0803a828 	.word	0x0803a828
 80312dc:	2000ca70 	.word	0x2000ca70

080312e0 <receive_data>:


//AT+QMTOPEN=0,"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com",8883

uint16_t receive_data(uint8_t* buffer, uint16_t buffer_size) {
 80312e0:	b480      	push	{r7}
 80312e2:	b085      	sub	sp, #20
 80312e4:	af00      	add	r7, sp, #0
 80312e6:	6078      	str	r0, [r7, #4]
 80312e8:	460b      	mov	r3, r1
 80312ea:	807b      	strh	r3, [r7, #2]
    uint16_t bytes_read = 0;
 80312ec:	2300      	movs	r3, #0
 80312ee:	81fb      	strh	r3, [r7, #14]

    while (uart_buffer.read_index != uart_buffer.write_index && bytes_read < buffer_size) {
 80312f0:	e01d      	b.n	803132e <receive_data+0x4e>
        buffer[bytes_read] = uart_buffer.data[uart_buffer.read_index];
 80312f2:	4b18      	ldr	r3, [pc, #96]	; (8031354 <receive_data+0x74>)
 80312f4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80312f8:	4619      	mov	r1, r3
 80312fa:	89fb      	ldrh	r3, [r7, #14]
 80312fc:	687a      	ldr	r2, [r7, #4]
 80312fe:	4413      	add	r3, r2
 8031300:	4a14      	ldr	r2, [pc, #80]	; (8031354 <receive_data+0x74>)
 8031302:	5c52      	ldrb	r2, [r2, r1]
 8031304:	701a      	strb	r2, [r3, #0]
        bytes_read++;
 8031306:	89fb      	ldrh	r3, [r7, #14]
 8031308:	3301      	adds	r3, #1
 803130a:	81fb      	strh	r3, [r7, #14]

        uart_buffer.read_index++;
 803130c:	4b11      	ldr	r3, [pc, #68]	; (8031354 <receive_data+0x74>)
 803130e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8031312:	3301      	adds	r3, #1
 8031314:	b29a      	uxth	r2, r3
 8031316:	4b0f      	ldr	r3, [pc, #60]	; (8031354 <receive_data+0x74>)
 8031318:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        if (uart_buffer.read_index >= UART_BUFFER_SIZE) {
 803131c:	4b0d      	ldr	r3, [pc, #52]	; (8031354 <receive_data+0x74>)
 803131e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8031322:	2bff      	cmp	r3, #255	; 0xff
 8031324:	d903      	bls.n	803132e <receive_data+0x4e>
            uart_buffer.read_index = 0;
 8031326:	4b0b      	ldr	r3, [pc, #44]	; (8031354 <receive_data+0x74>)
 8031328:	2200      	movs	r2, #0
 803132a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    while (uart_buffer.read_index != uart_buffer.write_index && bytes_read < buffer_size) {
 803132e:	4b09      	ldr	r3, [pc, #36]	; (8031354 <receive_data+0x74>)
 8031330:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 8031334:	4b07      	ldr	r3, [pc, #28]	; (8031354 <receive_data+0x74>)
 8031336:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 803133a:	429a      	cmp	r2, r3
 803133c:	d003      	beq.n	8031346 <receive_data+0x66>
 803133e:	89fa      	ldrh	r2, [r7, #14]
 8031340:	887b      	ldrh	r3, [r7, #2]
 8031342:	429a      	cmp	r2, r3
 8031344:	d3d5      	bcc.n	80312f2 <receive_data+0x12>
        }
    }

    return bytes_read;
 8031346:	89fb      	ldrh	r3, [r7, #14]
}
 8031348:	4618      	mov	r0, r3
 803134a:	3714      	adds	r7, #20
 803134c:	46bd      	mov	sp, r7
 803134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031352:	4770      	bx	lr
 8031354:	2000c96c 	.word	0x2000c96c

08031358 <handle_default_byte>:

    // Return the actual number of bytes received
//    return bytes_received;
//}

void handle_default_byte(uint8_t byte) {
 8031358:	b580      	push	{r7, lr}
 803135a:	b082      	sub	sp, #8
 803135c:	af00      	add	r7, sp, #0
 803135e:	4603      	mov	r3, r0
 8031360:	71fb      	strb	r3, [r7, #7]
	receive_buffer[buffer_idx++] = byte;
 8031362:	4b16      	ldr	r3, [pc, #88]	; (80313bc <handle_default_byte+0x64>)
 8031364:	681b      	ldr	r3, [r3, #0]
 8031366:	1c5a      	adds	r2, r3, #1
 8031368:	4914      	ldr	r1, [pc, #80]	; (80313bc <handle_default_byte+0x64>)
 803136a:	600a      	str	r2, [r1, #0]
 803136c:	4914      	ldr	r1, [pc, #80]	; (80313c0 <handle_default_byte+0x68>)
 803136e:	79fa      	ldrb	r2, [r7, #7]
 8031370:	54ca      	strb	r2, [r1, r3]

	    // Null-terminate the buffer for string functions
	    if (buffer_idx < BUFFER_MAX_SIZE) {
 8031372:	4b12      	ldr	r3, [pc, #72]	; (80313bc <handle_default_byte+0x64>)
 8031374:	681b      	ldr	r3, [r3, #0]
 8031376:	2bff      	cmp	r3, #255	; 0xff
 8031378:	d804      	bhi.n	8031384 <handle_default_byte+0x2c>
	        receive_buffer[buffer_idx] = '\0';
 803137a:	4b10      	ldr	r3, [pc, #64]	; (80313bc <handle_default_byte+0x64>)
 803137c:	681b      	ldr	r3, [r3, #0]
 803137e:	4a10      	ldr	r2, [pc, #64]	; (80313c0 <handle_default_byte+0x68>)
 8031380:	2100      	movs	r1, #0
 8031382:	54d1      	strb	r1, [r2, r3]
	    }

	    // Check for end of HTTP response or other markers
	    if (strstr((char*)receive_buffer, "\r\nOK\r\n") != NULL) {
 8031384:	490f      	ldr	r1, [pc, #60]	; (80313c4 <handle_default_byte+0x6c>)
 8031386:	480e      	ldr	r0, [pc, #56]	; (80313c0 <handle_default_byte+0x68>)
 8031388:	f006 fc59 	bl	8037c3e <strstr>
 803138c:	4603      	mov	r3, r0
 803138e:	2b00      	cmp	r3, #0
 8031390:	d002      	beq.n	8031398 <handle_default_byte+0x40>
	        firmware_download_complete = true;
 8031392:	4b0d      	ldr	r3, [pc, #52]	; (80313c8 <handle_default_byte+0x70>)
 8031394:	2201      	movs	r2, #1
 8031396:	701a      	strb	r2, [r3, #0]
	    }

	    // If the buffer is almost full or some other condition arises, you can process or reset
	    if (buffer_idx >= BUFFER_MAX_SIZE - 1) {
 8031398:	4b08      	ldr	r3, [pc, #32]	; (80313bc <handle_default_byte+0x64>)
 803139a:	681b      	ldr	r3, [r3, #0]
 803139c:	2bfe      	cmp	r3, #254	; 0xfe
 803139e:	d908      	bls.n	80313b2 <handle_default_byte+0x5a>
	        // TODO: Handle overflow or reset buffer_idx
	        buffer_idx = 0; // Reset as an example
 80313a0:	4b06      	ldr	r3, [pc, #24]	; (80313bc <handle_default_byte+0x64>)
 80313a2:	2200      	movs	r2, #0
 80313a4:	601a      	str	r2, [r3, #0]
	        memset(receive_buffer, 0, BUFFER_MAX_SIZE); // Clear buffer (if needed)
 80313a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80313aa:	2100      	movs	r1, #0
 80313ac:	4804      	ldr	r0, [pc, #16]	; (80313c0 <handle_default_byte+0x68>)
 80313ae:	f006 fc0c 	bl	8037bca <memset>
	    }
}
 80313b2:	bf00      	nop
 80313b4:	3708      	adds	r7, #8
 80313b6:	46bd      	mov	sp, r7
 80313b8:	bd80      	pop	{r7, pc}
 80313ba:	bf00      	nop
 80313bc:	2000c964 	.word	0x2000c964
 80313c0:	2000c864 	.word	0x2000c864
 80313c4:	0803a83c 	.word	0x0803a83c
 80313c8:	2000c968 	.word	0x2000c968

080313cc <handle_mqtt_byte>:

void handle_mqtt_byte(uint8_t byte) {
 80313cc:	b580      	push	{r7, lr}
 80313ce:	b082      	sub	sp, #8
 80313d0:	af00      	add	r7, sp, #0
 80313d2:	4603      	mov	r3, r0
 80313d4:	71fb      	strb	r3, [r7, #7]
    // Append the received byte to the MQTT buffer
    if (mqtt_buffer_idx < MQTT_BUFFER_SIZE - 1) {
 80313d6:	4b14      	ldr	r3, [pc, #80]	; (8031428 <handle_mqtt_byte+0x5c>)
 80313d8:	681b      	ldr	r3, [r3, #0]
 80313da:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80313de:	d810      	bhi.n	8031402 <handle_mqtt_byte+0x36>
        mqtt_buffer[mqtt_buffer_idx++] = byte;
 80313e0:	4b11      	ldr	r3, [pc, #68]	; (8031428 <handle_mqtt_byte+0x5c>)
 80313e2:	681b      	ldr	r3, [r3, #0]
 80313e4:	1c5a      	adds	r2, r3, #1
 80313e6:	4910      	ldr	r1, [pc, #64]	; (8031428 <handle_mqtt_byte+0x5c>)
 80313e8:	600a      	str	r2, [r1, #0]
 80313ea:	4910      	ldr	r1, [pc, #64]	; (803142c <handle_mqtt_byte+0x60>)
 80313ec:	79fa      	ldrb	r2, [r7, #7]
 80313ee:	54ca      	strb	r2, [r1, r3]
        mqtt_buffer[mqtt_buffer_idx] = '\0'; // Null-terminate for string functions
 80313f0:	4b0d      	ldr	r3, [pc, #52]	; (8031428 <handle_mqtt_byte+0x5c>)
 80313f2:	681b      	ldr	r3, [r3, #0]
 80313f4:	4a0d      	ldr	r2, [pc, #52]	; (803142c <handle_mqtt_byte+0x60>)
 80313f6:	2100      	movs	r1, #0
 80313f8:	54d1      	strb	r1, [r2, r3]
        mqtt_buffer_idx = 0;
        return;
    }

    // Check if we have a complete MQTT message, e.g., by looking for newline
    if (byte == '}') {
 80313fa:	79fb      	ldrb	r3, [r7, #7]
 80313fc:	2b7d      	cmp	r3, #125	; 0x7d
 80313fe:	d10f      	bne.n	8031420 <handle_mqtt_byte+0x54>
 8031400:	e003      	b.n	803140a <handle_mqtt_byte+0x3e>
        mqtt_buffer_idx = 0;
 8031402:	4b09      	ldr	r3, [pc, #36]	; (8031428 <handle_mqtt_byte+0x5c>)
 8031404:	2200      	movs	r2, #0
 8031406:	601a      	str	r2, [r3, #0]
        return;
 8031408:	e00a      	b.n	8031420 <handle_mqtt_byte+0x54>
        // Null-terminate the message for safety
        mqtt_buffer[mqtt_buffer_idx] = '\0';
 803140a:	4b07      	ldr	r3, [pc, #28]	; (8031428 <handle_mqtt_byte+0x5c>)
 803140c:	681b      	ldr	r3, [r3, #0]
 803140e:	4a07      	ldr	r2, [pc, #28]	; (803142c <handle_mqtt_byte+0x60>)
 8031410:	2100      	movs	r1, #0
 8031412:	54d1      	strb	r1, [r2, r3]

        // Handle the complete MQTT message
        handle_mqtt_message((const char*)mqtt_buffer);
 8031414:	4805      	ldr	r0, [pc, #20]	; (803142c <handle_mqtt_byte+0x60>)
 8031416:	f000 f80b 	bl	8031430 <handle_mqtt_message>

        // Reset the MQTT buffer for the next message
        mqtt_buffer_idx = 0;
 803141a:	4b03      	ldr	r3, [pc, #12]	; (8031428 <handle_mqtt_byte+0x5c>)
 803141c:	2200      	movs	r2, #0
 803141e:	601a      	str	r2, [r3, #0]
    }
}
 8031420:	3708      	adds	r7, #8
 8031422:	46bd      	mov	sp, r7
 8031424:	bd80      	pop	{r7, pc}
 8031426:	bf00      	nop
 8031428:	20000508 	.word	0x20000508
 803142c:	20000308 	.word	0x20000308

08031430 <handle_mqtt_message>:

void handle_mqtt_message(const char* message) {
 8031430:	b580      	push	{r7, lr}
 8031432:	b088      	sub	sp, #32
 8031434:	af00      	add	r7, sp, #0
 8031436:	6078      	str	r0, [r7, #4]
    const char* json_start = strchr(message, '{'); // Find the first '{' character
 8031438:	217b      	movs	r1, #123	; 0x7b
 803143a:	6878      	ldr	r0, [r7, #4]
 803143c:	f006 fbcd 	bl	8037bda <strchr>
 8031440:	61f8      	str	r0, [r7, #28]
    cJSON* root = cJSON_Parse(json_start);
 8031442:	69f8      	ldr	r0, [r7, #28]
 8031444:	f001 f91e 	bl	8032684 <cJSON_Parse>
 8031448:	61b8      	str	r0, [r7, #24]

    if (root != NULL) {
 803144a:	69bb      	ldr	r3, [r7, #24]
 803144c:	2b00      	cmp	r3, #0
 803144e:	d02d      	beq.n	80314ac <handle_mqtt_message+0x7c>
        cJSON* messageTypeObj = cJSON_GetObjectItem(root, "message_type");
 8031450:	4918      	ldr	r1, [pc, #96]	; (80314b4 <handle_mqtt_message+0x84>)
 8031452:	69b8      	ldr	r0, [r7, #24]
 8031454:	f001 fc1b 	bl	8032c8e <cJSON_GetObjectItem>
 8031458:	6178      	str	r0, [r7, #20]
        cJSON* firmwareUrlObj = cJSON_GetObjectItem(root, "firmware_url");
 803145a:	4917      	ldr	r1, [pc, #92]	; (80314b8 <handle_mqtt_message+0x88>)
 803145c:	69b8      	ldr	r0, [r7, #24]
 803145e:	f001 fc16 	bl	8032c8e <cJSON_GetObjectItem>
 8031462:	6138      	str	r0, [r7, #16]

        if (messageTypeObj != NULL && firmwareUrlObj != NULL) {
 8031464:	697b      	ldr	r3, [r7, #20]
 8031466:	2b00      	cmp	r3, #0
 8031468:	d01d      	beq.n	80314a6 <handle_mqtt_message+0x76>
 803146a:	693b      	ldr	r3, [r7, #16]
 803146c:	2b00      	cmp	r3, #0
 803146e:	d01a      	beq.n	80314a6 <handle_mqtt_message+0x76>
            const char* message_type = messageTypeObj->valuestring;
 8031470:	697b      	ldr	r3, [r7, #20]
 8031472:	691b      	ldr	r3, [r3, #16]
 8031474:	60fb      	str	r3, [r7, #12]
            if (strcmp(message_type, "update_available") == 0) {
 8031476:	4911      	ldr	r1, [pc, #68]	; (80314bc <handle_mqtt_message+0x8c>)
 8031478:	68f8      	ldr	r0, [r7, #12]
 803147a:	f7fe fea9 	bl	80301d0 <strcmp>
 803147e:	4603      	mov	r3, r0
 8031480:	2b00      	cmp	r3, #0
 8031482:	d110      	bne.n	80314a6 <handle_mqtt_message+0x76>
                // Copy firmware URL to global variable
                strncpy(firmware_url, firmwareUrlObj->valuestring, MAX_URL_LENGTH - 1);
 8031484:	693b      	ldr	r3, [r7, #16]
 8031486:	691b      	ldr	r3, [r3, #16]
 8031488:	22ff      	movs	r2, #255	; 0xff
 803148a:	4619      	mov	r1, r3
 803148c:	480c      	ldr	r0, [pc, #48]	; (80314c0 <handle_mqtt_message+0x90>)
 803148e:	f006 fbc3 	bl	8037c18 <strncpy>
                firmware_url[MAX_URL_LENGTH - 1] = '\0'; // Null-terminate to ensure it's a valid string
 8031492:	4b0b      	ldr	r3, [pc, #44]	; (80314c0 <handle_mqtt_message+0x90>)
 8031494:	2200      	movs	r2, #0
 8031496:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

                // Set the state to begin downloading
                current_mode = MODE_DEFAULT;
 803149a:	4b0a      	ldr	r3, [pc, #40]	; (80314c4 <handle_mqtt_message+0x94>)
 803149c:	2200      	movs	r2, #0
 803149e:	701a      	strb	r2, [r3, #0]
                fwUpdateState = DOWNLOAD_PENDING;
 80314a0:	4b09      	ldr	r3, [pc, #36]	; (80314c8 <handle_mqtt_message+0x98>)
 80314a2:	2201      	movs	r2, #1
 80314a4:	701a      	strb	r2, [r3, #0]
            }
        }
        cJSON_Delete(root);
 80314a6:	69b8      	ldr	r0, [r7, #24]
 80314a8:	f000 fc14 	bl	8031cd4 <cJSON_Delete>
    }
}
 80314ac:	bf00      	nop
 80314ae:	3720      	adds	r7, #32
 80314b0:	46bd      	mov	sp, r7
 80314b2:	bd80      	pop	{r7, pc}
 80314b4:	0803a844 	.word	0x0803a844
 80314b8:	0803a854 	.word	0x0803a854
 80314bc:	0803a864 	.word	0x0803a864
 80314c0:	20000208 	.word	0x20000208
 80314c4:	2000ca70 	.word	0x2000ca70
 80314c8:	2000ca78 	.word	0x2000ca78

080314cc <download_firmware>:
//        return false;
//    }
//}


bool download_firmware(const char* firmware_url) {
 80314cc:	b580      	push	{r7, lr}
 80314ce:	b0c6      	sub	sp, #280	; 0x118
 80314d0:	af00      	add	r7, sp, #0
 80314d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80314d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80314da:	6018      	str	r0, [r3, #0]
	bool result = false; // Default return value
 80314dc:	2300      	movs	r3, #0
 80314de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    switch (current_state) {
 80314e2:	4b8f      	ldr	r3, [pc, #572]	; (8031720 <download_firmware+0x254>)
 80314e4:	781b      	ldrb	r3, [r3, #0]
 80314e6:	2b05      	cmp	r3, #5
 80314e8:	f200 810b 	bhi.w	8031702 <download_firmware+0x236>
 80314ec:	a201      	add	r2, pc, #4	; (adr r2, 80314f4 <download_firmware+0x28>)
 80314ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80314f2:	bf00      	nop
 80314f4:	0803150d 	.word	0x0803150d
 80314f8:	08031557 	.word	0x08031557
 80314fc:	080315c1 	.word	0x080315c1
 8031500:	0803161b 	.word	0x0803161b
 8031504:	080316e1 	.word	0x080316e1
 8031508:	080316f5 	.word	0x080316f5
        case INIT_HTTP:
            send_at_command("AT+QSSLCFG=\"https\",1", "OK");
 803150c:	4985      	ldr	r1, [pc, #532]	; (8031724 <download_firmware+0x258>)
 803150e:	4886      	ldr	r0, [pc, #536]	; (8031728 <download_firmware+0x25c>)
 8031510:	f000 fada 	bl	8031ac8 <send_at_command>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 8031514:	f242 7310 	movw	r3, #10000	; 0x2710
 8031518:	b29b      	uxth	r3, r3
 803151a:	4618      	mov	r0, r3
 803151c:	f000 fafe 	bl	8031b1c <check_at_command_response>
 8031520:	4603      	mov	r3, r0
 8031522:	2b02      	cmp	r3, #2
 8031524:	d106      	bne.n	8031534 <download_firmware+0x68>
                current_state = SET_HTTP_URL;
 8031526:	4b7e      	ldr	r3, [pc, #504]	; (8031720 <download_firmware+0x254>)
 8031528:	2201      	movs	r2, #1
 803152a:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 803152c:	4b7f      	ldr	r3, [pc, #508]	; (803172c <download_firmware+0x260>)
 803152e:	2200      	movs	r2, #0
 8031530:	701a      	strb	r2, [r3, #0]
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
                firmware_download_busy = false;
            }
            break;
 8031532:	e0e8      	b.n	8031706 <download_firmware+0x23a>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 8031534:	f644 6320 	movw	r3, #20000	; 0x4e20
 8031538:	b29b      	uxth	r3, r3
 803153a:	4618      	mov	r0, r3
 803153c:	f000 faee 	bl	8031b1c <check_at_command_response>
 8031540:	4603      	mov	r3, r0
 8031542:	2b03      	cmp	r3, #3
 8031544:	f040 80df 	bne.w	8031706 <download_firmware+0x23a>
                current_state = DOWNLOAD_ERROR;
 8031548:	4b75      	ldr	r3, [pc, #468]	; (8031720 <download_firmware+0x254>)
 803154a:	2205      	movs	r2, #5
 803154c:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 803154e:	4b77      	ldr	r3, [pc, #476]	; (803172c <download_firmware+0x260>)
 8031550:	2200      	movs	r2, #0
 8031552:	701a      	strb	r2, [r3, #0]
            break;
 8031554:	e0d7      	b.n	8031706 <download_firmware+0x23a>

        case SET_HTTP_URL:
            char http_get_command[128];
            sprintf(http_get_command, "AT+QHTTPURL=%d,60", strlen(firmware_url));
 8031556:	f507 738c 	add.w	r3, r7, #280	; 0x118
 803155a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 803155e:	6818      	ldr	r0, [r3, #0]
 8031560:	f7fe fe96 	bl	8030290 <strlen>
 8031564:	4602      	mov	r2, r0
 8031566:	f107 0308 	add.w	r3, r7, #8
 803156a:	4971      	ldr	r1, [pc, #452]	; (8031730 <download_firmware+0x264>)
 803156c:	4618      	mov	r0, r3
 803156e:	f006 fac9 	bl	8037b04 <siprintf>
            send_at_command(http_get_command, "CONNECT");
 8031572:	f107 0308 	add.w	r3, r7, #8
 8031576:	496f      	ldr	r1, [pc, #444]	; (8031734 <download_firmware+0x268>)
 8031578:	4618      	mov	r0, r3
 803157a:	f000 faa5 	bl	8031ac8 <send_at_command>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 803157e:	f242 7310 	movw	r3, #10000	; 0x2710
 8031582:	b29b      	uxth	r3, r3
 8031584:	4618      	mov	r0, r3
 8031586:	f000 fac9 	bl	8031b1c <check_at_command_response>
 803158a:	4603      	mov	r3, r0
 803158c:	2b02      	cmp	r3, #2
 803158e:	d106      	bne.n	803159e <download_firmware+0xd2>
                current_state = INITIATE_HTTP_GET;
 8031590:	4b63      	ldr	r3, [pc, #396]	; (8031720 <download_firmware+0x254>)
 8031592:	2202      	movs	r2, #2
 8031594:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 8031596:	4b65      	ldr	r3, [pc, #404]	; (803172c <download_firmware+0x260>)
 8031598:	2200      	movs	r2, #0
 803159a:	701a      	strb	r2, [r3, #0]
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
                firmware_download_busy = false;
            }
            break;
 803159c:	e0b5      	b.n	803170a <download_firmware+0x23e>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 803159e:	f644 6320 	movw	r3, #20000	; 0x4e20
 80315a2:	b29b      	uxth	r3, r3
 80315a4:	4618      	mov	r0, r3
 80315a6:	f000 fab9 	bl	8031b1c <check_at_command_response>
 80315aa:	4603      	mov	r3, r0
 80315ac:	2b03      	cmp	r3, #3
 80315ae:	f040 80ac 	bne.w	803170a <download_firmware+0x23e>
                current_state = DOWNLOAD_ERROR;
 80315b2:	4b5b      	ldr	r3, [pc, #364]	; (8031720 <download_firmware+0x254>)
 80315b4:	2205      	movs	r2, #5
 80315b6:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 80315b8:	4b5c      	ldr	r3, [pc, #368]	; (803172c <download_firmware+0x260>)
 80315ba:	2200      	movs	r2, #0
 80315bc:	701a      	strb	r2, [r3, #0]
            break;
 80315be:	e0a4      	b.n	803170a <download_firmware+0x23e>

        case INITIATE_HTTP_GET:
            send_at_command(firmware_url, "OK");
 80315c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80315c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80315c8:	4956      	ldr	r1, [pc, #344]	; (8031724 <download_firmware+0x258>)
 80315ca:	6818      	ldr	r0, [r3, #0]
 80315cc:	f000 fa7c 	bl	8031ac8 <send_at_command>
            send_at_command("AT+QHTTPGET=60", "OK");
 80315d0:	4954      	ldr	r1, [pc, #336]	; (8031724 <download_firmware+0x258>)
 80315d2:	4859      	ldr	r0, [pc, #356]	; (8031738 <download_firmware+0x26c>)
 80315d4:	f000 fa78 	bl	8031ac8 <send_at_command>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 80315d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80315dc:	b29b      	uxth	r3, r3
 80315de:	4618      	mov	r0, r3
 80315e0:	f000 fa9c 	bl	8031b1c <check_at_command_response>
 80315e4:	4603      	mov	r3, r0
 80315e6:	2b02      	cmp	r3, #2
 80315e8:	d106      	bne.n	80315f8 <download_firmware+0x12c>
                current_state = RECEIVE_HTTP_RESPONSE;
 80315ea:	4b4d      	ldr	r3, [pc, #308]	; (8031720 <download_firmware+0x254>)
 80315ec:	2203      	movs	r2, #3
 80315ee:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 80315f0:	4b4e      	ldr	r3, [pc, #312]	; (803172c <download_firmware+0x260>)
 80315f2:	2200      	movs	r2, #0
 80315f4:	701a      	strb	r2, [r3, #0]
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
                firmware_download_busy = false;
            }
            break;
 80315f6:	e08a      	b.n	803170e <download_firmware+0x242>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 80315f8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80315fc:	b29b      	uxth	r3, r3
 80315fe:	4618      	mov	r0, r3
 8031600:	f000 fa8c 	bl	8031b1c <check_at_command_response>
 8031604:	4603      	mov	r3, r0
 8031606:	2b03      	cmp	r3, #3
 8031608:	f040 8081 	bne.w	803170e <download_firmware+0x242>
                current_state = DOWNLOAD_ERROR;
 803160c:	4b44      	ldr	r3, [pc, #272]	; (8031720 <download_firmware+0x254>)
 803160e:	2205      	movs	r2, #5
 8031610:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 8031612:	4b46      	ldr	r3, [pc, #280]	; (803172c <download_firmware+0x260>)
 8031614:	2200      	movs	r2, #0
 8031616:	701a      	strb	r2, [r3, #0]
            break;
 8031618:	e079      	b.n	803170e <download_firmware+0x242>


        case RECEIVE_HTTP_RESPONSE:
            HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QHTTPREAD=30\r\n", strlen("AT+QHTTPREAD=30\r\n"), 1000);
 803161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803161e:	2211      	movs	r2, #17
 8031620:	4946      	ldr	r1, [pc, #280]	; (803173c <download_firmware+0x270>)
 8031622:	4847      	ldr	r0, [pc, #284]	; (8031740 <download_firmware+0x274>)
 8031624:	f003 fe20 	bl	8035268 <HAL_UART_Transmit>
            uint8_t receive_buffer[256];
            size_t bytes_received = receive_data(receive_buffer, sizeof(receive_buffer));
 8031628:	f107 0308 	add.w	r3, r7, #8
 803162c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8031630:	4618      	mov	r0, r3
 8031632:	f7ff fe55 	bl	80312e0 <receive_data>
 8031636:	4603      	mov	r3, r0
 8031638:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

            if (bytes_received <= 0) {
 803163c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8031640:	2b00      	cmp	r3, #0
 8031642:	d105      	bne.n	8031650 <download_firmware+0x184>
                current_state = DOWNLOAD_ERROR;
 8031644:	4b36      	ldr	r3, [pc, #216]	; (8031720 <download_firmware+0x254>)
 8031646:	2205      	movs	r2, #5
 8031648:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 803164a:	4b38      	ldr	r3, [pc, #224]	; (803172c <download_firmware+0x260>)
 803164c:	2200      	movs	r2, #0
 803164e:	701a      	strb	r2, [r3, #0]

            }

            char* end_of_response = strstr((char*)receive_buffer, "\r\nOK\r\n");
 8031650:	f107 0308 	add.w	r3, r7, #8
 8031654:	493b      	ldr	r1, [pc, #236]	; (8031744 <download_firmware+0x278>)
 8031656:	4618      	mov	r0, r3
 8031658:	f006 faf1 	bl	8037c3e <strstr>
 803165c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
            size_t response_length = (end_of_response) ? (end_of_response - (char*)receive_buffer) : bytes_received;
 8031660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8031664:	2b00      	cmp	r3, #0
 8031666:	d005      	beq.n	8031674 <download_firmware+0x1a8>
 8031668:	f107 0308 	add.w	r3, r7, #8
 803166c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8031670:	1ad3      	subs	r3, r2, r3
 8031672:	e001      	b.n	8031678 <download_firmware+0x1ac>
 8031674:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8031678:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

            if (firmware_size + response_length > MAX_FIRMWARE_SIZE) {
 803167c:	4b32      	ldr	r3, [pc, #200]	; (8031748 <download_firmware+0x27c>)
 803167e:	681a      	ldr	r2, [r3, #0]
 8031680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8031684:	4413      	add	r3, r2
 8031686:	f24c 3250 	movw	r2, #50000	; 0xc350
 803168a:	4293      	cmp	r3, r2
 803168c:	d905      	bls.n	803169a <download_firmware+0x1ce>
                current_state = DOWNLOAD_ERROR;
 803168e:	4b24      	ldr	r3, [pc, #144]	; (8031720 <download_firmware+0x254>)
 8031690:	2205      	movs	r2, #5
 8031692:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 8031694:	4b25      	ldr	r3, [pc, #148]	; (803172c <download_firmware+0x260>)
 8031696:	2200      	movs	r2, #0
 8031698:	701a      	strb	r2, [r3, #0]

            }

            memcpy(firmware_buffer + firmware_size, receive_buffer, response_length);
 803169a:	4b2b      	ldr	r3, [pc, #172]	; (8031748 <download_firmware+0x27c>)
 803169c:	681b      	ldr	r3, [r3, #0]
 803169e:	4a2b      	ldr	r2, [pc, #172]	; (803174c <download_firmware+0x280>)
 80316a0:	4413      	add	r3, r2
 80316a2:	f107 0108 	add.w	r1, r7, #8
 80316a6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80316aa:	4618      	mov	r0, r3
 80316ac:	f006 fb64 	bl	8037d78 <memcpy>
            firmware_size += response_length;
 80316b0:	4b25      	ldr	r3, [pc, #148]	; (8031748 <download_firmware+0x27c>)
 80316b2:	681a      	ldr	r2, [r3, #0]
 80316b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80316b8:	4413      	add	r3, r2
 80316ba:	4a23      	ldr	r2, [pc, #140]	; (8031748 <download_firmware+0x27c>)
 80316bc:	6013      	str	r3, [r2, #0]

            if (end_of_response) {
 80316be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80316c2:	2b00      	cmp	r3, #0
 80316c4:	d008      	beq.n	80316d8 <download_firmware+0x20c>
                current_state = DOWNLOAD_COMPLETE;
 80316c6:	4b16      	ldr	r3, [pc, #88]	; (8031720 <download_firmware+0x254>)
 80316c8:	2204      	movs	r2, #4
 80316ca:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 80316cc:	4b17      	ldr	r3, [pc, #92]	; (803172c <download_firmware+0x260>)
 80316ce:	2200      	movs	r2, #0
 80316d0:	701a      	strb	r2, [r3, #0]
                result = true; // Indicate completion
 80316d2:	2301      	movs	r3, #1
 80316d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            }
            firmware_download_busy = false;
 80316d8:	4b14      	ldr	r3, [pc, #80]	; (803172c <download_firmware+0x260>)
 80316da:	2200      	movs	r2, #0
 80316dc:	701a      	strb	r2, [r3, #0]
            break;
 80316de:	e017      	b.n	8031710 <download_firmware+0x244>


        case DOWNLOAD_COMPLETE:
            current_state = INIT_HTTP;  // Reset state for next time
 80316e0:	4b0f      	ldr	r3, [pc, #60]	; (8031720 <download_firmware+0x254>)
 80316e2:	2200      	movs	r2, #0
 80316e4:	701a      	strb	r2, [r3, #0]
            firmware_download_busy = false;
 80316e6:	4b11      	ldr	r3, [pc, #68]	; (803172c <download_firmware+0x260>)
 80316e8:	2200      	movs	r2, #0
 80316ea:	701a      	strb	r2, [r3, #0]
            result = true;
 80316ec:	2301      	movs	r3, #1
 80316ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80316f2:	e00d      	b.n	8031710 <download_firmware+0x244>

        case DOWNLOAD_ERROR:
            current_state = INIT_HTTP;  // Reset for next time
 80316f4:	4b0a      	ldr	r3, [pc, #40]	; (8031720 <download_firmware+0x254>)
 80316f6:	2200      	movs	r2, #0
 80316f8:	701a      	strb	r2, [r3, #0]
            firmware_download_busy = false;
 80316fa:	4b0c      	ldr	r3, [pc, #48]	; (803172c <download_firmware+0x260>)
 80316fc:	2200      	movs	r2, #0
 80316fe:	701a      	strb	r2, [r3, #0]
            break;
 8031700:	e006      	b.n	8031710 <download_firmware+0x244>

        default:
            break;
 8031702:	bf00      	nop
 8031704:	e004      	b.n	8031710 <download_firmware+0x244>
            break;
 8031706:	bf00      	nop
 8031708:	e002      	b.n	8031710 <download_firmware+0x244>
            break;
 803170a:	bf00      	nop
 803170c:	e000      	b.n	8031710 <download_firmware+0x244>
            break;
 803170e:	bf00      	nop
    }
    return result;
 8031710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8031714:	4618      	mov	r0, r3
 8031716:	f507 778c 	add.w	r7, r7, #280	; 0x118
 803171a:	46bd      	mov	sp, r7
 803171c:	bd80      	pop	{r7, pc}
 803171e:	bf00      	nop
 8031720:	2000ca79 	.word	0x2000ca79
 8031724:	0803a5c0 	.word	0x0803a5c0
 8031728:	0803a878 	.word	0x0803a878
 803172c:	2000c969 	.word	0x2000c969
 8031730:	0803a890 	.word	0x0803a890
 8031734:	0803a8a4 	.word	0x0803a8a4
 8031738:	0803a8ac 	.word	0x0803a8ac
 803173c:	0803a8bc 	.word	0x0803a8bc
 8031740:	2000cb38 	.word	0x2000cb38
 8031744:	0803a83c 	.word	0x0803a83c
 8031748:	2000c85c 	.word	0x2000c85c
 803174c:	2000050c 	.word	0x2000050c

08031750 <verify_firmware_update>:

// Verify firmware update with CRC
bool verify_firmware_update(uint8_t* firmware_data, size_t firmware_length) {
 8031750:	b580      	push	{r7, lr}
 8031752:	b084      	sub	sp, #16
 8031754:	af00      	add	r7, sp, #0
 8031756:	6078      	str	r0, [r7, #4]
 8031758:	6039      	str	r1, [r7, #0]
    // Ensure that the firmware data pointer is not NULL and that the length is valid
    if (firmware_data == NULL || !is_firmware_size_valid(firmware_length)) {
 803175a:	687b      	ldr	r3, [r7, #4]
 803175c:	2b00      	cmp	r3, #0
 803175e:	d008      	beq.n	8031772 <verify_firmware_update+0x22>
 8031760:	6838      	ldr	r0, [r7, #0]
 8031762:	f000 f827 	bl	80317b4 <is_firmware_size_valid>
 8031766:	4603      	mov	r3, r0
 8031768:	f083 0301 	eor.w	r3, r3, #1
 803176c:	b2db      	uxtb	r3, r3
 803176e:	2b00      	cmp	r3, #0
 8031770:	d004      	beq.n	803177c <verify_firmware_update+0x2c>
    	firmware_verify_busy = false;
 8031772:	4b0f      	ldr	r3, [pc, #60]	; (80317b0 <verify_firmware_update+0x60>)
 8031774:	2200      	movs	r2, #0
 8031776:	701a      	strb	r2, [r3, #0]
        return false;  // Firmware data is invalid
 8031778:	2300      	movs	r3, #0
 803177a:	e015      	b.n	80317a8 <verify_firmware_update+0x58>
    }

    // Extract the CRC value from the end of the firmware data
    uint32_t received_crc = extract_received_crc(firmware_data, firmware_length);
 803177c:	6839      	ldr	r1, [r7, #0]
 803177e:	6878      	ldr	r0, [r7, #4]
 8031780:	f000 f828 	bl	80317d4 <extract_received_crc>
 8031784:	60f8      	str	r0, [r7, #12]

    // Calculate CRC for the received firmware data (excluding the CRC field)
    uint32_t calculated_crc = calculate_crc32(firmware_data, firmware_length - sizeof(uint32_t));
 8031786:	683b      	ldr	r3, [r7, #0]
 8031788:	3b04      	subs	r3, #4
 803178a:	4619      	mov	r1, r3
 803178c:	6878      	ldr	r0, [r7, #4]
 803178e:	f000 f833 	bl	80317f8 <calculate_crc32>
 8031792:	60b8      	str	r0, [r7, #8]

    // Compare the received and calculated CRC values
    firmware_verify_busy = false;
 8031794:	4b06      	ldr	r3, [pc, #24]	; (80317b0 <verify_firmware_update+0x60>)
 8031796:	2200      	movs	r2, #0
 8031798:	701a      	strb	r2, [r3, #0]
    return (received_crc == calculated_crc);
 803179a:	68fa      	ldr	r2, [r7, #12]
 803179c:	68bb      	ldr	r3, [r7, #8]
 803179e:	429a      	cmp	r2, r3
 80317a0:	bf0c      	ite	eq
 80317a2:	2301      	moveq	r3, #1
 80317a4:	2300      	movne	r3, #0
 80317a6:	b2db      	uxtb	r3, r3
}
 80317a8:	4618      	mov	r0, r3
 80317aa:	3710      	adds	r7, #16
 80317ac:	46bd      	mov	sp, r7
 80317ae:	bd80      	pop	{r7, pc}
 80317b0:	2000c96a 	.word	0x2000c96a

080317b4 <is_firmware_size_valid>:

bool is_firmware_size_valid(size_t firmware_length) {
 80317b4:	b480      	push	{r7}
 80317b6:	b083      	sub	sp, #12
 80317b8:	af00      	add	r7, sp, #0
 80317ba:	6078      	str	r0, [r7, #4]
    return firmware_length > sizeof(uint32_t);  // Ensure firmware_length is more than just the CRC size.
 80317bc:	687b      	ldr	r3, [r7, #4]
 80317be:	2b04      	cmp	r3, #4
 80317c0:	bf8c      	ite	hi
 80317c2:	2301      	movhi	r3, #1
 80317c4:	2300      	movls	r3, #0
 80317c6:	b2db      	uxtb	r3, r3
}
 80317c8:	4618      	mov	r0, r3
 80317ca:	370c      	adds	r7, #12
 80317cc:	46bd      	mov	sp, r7
 80317ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80317d2:	4770      	bx	lr

080317d4 <extract_received_crc>:

uint32_t extract_received_crc(uint8_t* firmware_data, size_t firmware_length) {
 80317d4:	b480      	push	{r7}
 80317d6:	b085      	sub	sp, #20
 80317d8:	af00      	add	r7, sp, #0
 80317da:	6078      	str	r0, [r7, #4]
 80317dc:	6039      	str	r1, [r7, #0]
    uint32_t* crc_ptr = (uint32_t*)(firmware_data + firmware_length - sizeof(uint32_t));
 80317de:	683b      	ldr	r3, [r7, #0]
 80317e0:	3b04      	subs	r3, #4
 80317e2:	687a      	ldr	r2, [r7, #4]
 80317e4:	4413      	add	r3, r2
 80317e6:	60fb      	str	r3, [r7, #12]
    return *crc_ptr;
 80317e8:	68fb      	ldr	r3, [r7, #12]
 80317ea:	681b      	ldr	r3, [r3, #0]
}
 80317ec:	4618      	mov	r0, r3
 80317ee:	3714      	adds	r7, #20
 80317f0:	46bd      	mov	sp, r7
 80317f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80317f6:	4770      	bx	lr

080317f8 <calculate_crc32>:


// Function to calculate CRC32 for a buffer
uint32_t calculate_crc32(uint8_t *data, uint32_t size) {
 80317f8:	b480      	push	{r7}
 80317fa:	b087      	sub	sp, #28
 80317fc:	af00      	add	r7, sp, #0
 80317fe:	6078      	str	r0, [r7, #4]
 8031800:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8031802:	f04f 33ff 	mov.w	r3, #4294967295
 8031806:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < size; i++) {
 8031808:	2300      	movs	r3, #0
 803180a:	613b      	str	r3, [r7, #16]
 803180c:	e021      	b.n	8031852 <calculate_crc32+0x5a>
        crc ^= data[i];
 803180e:	687a      	ldr	r2, [r7, #4]
 8031810:	693b      	ldr	r3, [r7, #16]
 8031812:	4413      	add	r3, r2
 8031814:	781b      	ldrb	r3, [r3, #0]
 8031816:	461a      	mov	r2, r3
 8031818:	697b      	ldr	r3, [r7, #20]
 803181a:	4053      	eors	r3, r2
 803181c:	617b      	str	r3, [r7, #20]

        for (uint32_t j = 0; j < 8; j++) {
 803181e:	2300      	movs	r3, #0
 8031820:	60fb      	str	r3, [r7, #12]
 8031822:	e010      	b.n	8031846 <calculate_crc32+0x4e>
            if (crc & 0x00000001) {
 8031824:	697b      	ldr	r3, [r7, #20]
 8031826:	f003 0301 	and.w	r3, r3, #1
 803182a:	2b00      	cmp	r3, #0
 803182c:	d005      	beq.n	803183a <calculate_crc32+0x42>
                crc = (crc >> 1) ^ CRC_POLYNOMIAL;
 803182e:	697b      	ldr	r3, [r7, #20]
 8031830:	085a      	lsrs	r2, r3, #1
 8031832:	4b0e      	ldr	r3, [pc, #56]	; (803186c <calculate_crc32+0x74>)
 8031834:	4053      	eors	r3, r2
 8031836:	617b      	str	r3, [r7, #20]
 8031838:	e002      	b.n	8031840 <calculate_crc32+0x48>
            } else {
                crc = crc >> 1;
 803183a:	697b      	ldr	r3, [r7, #20]
 803183c:	085b      	lsrs	r3, r3, #1
 803183e:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 8; j++) {
 8031840:	68fb      	ldr	r3, [r7, #12]
 8031842:	3301      	adds	r3, #1
 8031844:	60fb      	str	r3, [r7, #12]
 8031846:	68fb      	ldr	r3, [r7, #12]
 8031848:	2b07      	cmp	r3, #7
 803184a:	d9eb      	bls.n	8031824 <calculate_crc32+0x2c>
    for (uint32_t i = 0; i < size; i++) {
 803184c:	693b      	ldr	r3, [r7, #16]
 803184e:	3301      	adds	r3, #1
 8031850:	613b      	str	r3, [r7, #16]
 8031852:	693a      	ldr	r2, [r7, #16]
 8031854:	683b      	ldr	r3, [r7, #0]
 8031856:	429a      	cmp	r2, r3
 8031858:	d3d9      	bcc.n	803180e <calculate_crc32+0x16>
            }
        }
    }

    return ~crc;
 803185a:	697b      	ldr	r3, [r7, #20]
 803185c:	43db      	mvns	r3, r3
}
 803185e:	4618      	mov	r0, r3
 8031860:	371c      	adds	r7, #28
 8031862:	46bd      	mov	sp, r7
 8031864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031868:	4770      	bx	lr
 803186a:	bf00      	nop
 803186c:	edb88320 	.word	0xedb88320

08031870 <write_firmware_to_flash>:

bool write_firmware_to_flash(uint8_t* firmware_data, uint32_t firmware_length) {
 8031870:	b5b0      	push	{r4, r5, r7, lr}
 8031872:	b08c      	sub	sp, #48	; 0x30
 8031874:	af00      	add	r7, sp, #0
 8031876:	6078      	str	r0, [r7, #4]
 8031878:	6039      	str	r1, [r7, #0]
    // Erase the entire TEMP sector
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 803187a:	f002 fa09 	bl	8033c90 <HAL_FLASH_Unlock>
 803187e:	4603      	mov	r3, r0
 8031880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status != HAL_OK) {
 8031884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8031888:	2b00      	cmp	r3, #0
 803188a:	d004      	beq.n	8031896 <write_firmware_to_flash+0x26>
        // Handle flash unlock error
    	firmware_write_busy = false;
 803188c:	4b32      	ldr	r3, [pc, #200]	; (8031958 <write_firmware_to_flash+0xe8>)
 803188e:	2200      	movs	r2, #0
 8031890:	701a      	strb	r2, [r3, #0]
        return false;
 8031892:	2300      	movs	r3, #0
 8031894:	e05b      	b.n	803194e <write_firmware_to_flash+0xde>
    }

    FLASH_EraseInitTypeDef erase_info;
    erase_info.TypeErase = FLASH_TYPEERASE_SECTORS;
 8031896:	2300      	movs	r3, #0
 8031898:	60fb      	str	r3, [r7, #12]
    erase_info.Sector = FLASH_SECTOR_8; // TEMP sector on STM32F4
 803189a:	2308      	movs	r3, #8
 803189c:	617b      	str	r3, [r7, #20]
    erase_info.NbSectors = 1;
 803189e:	2301      	movs	r3, #1
 80318a0:	61bb      	str	r3, [r7, #24]
    erase_info.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Adjust voltage range as needed
 80318a2:	2302      	movs	r3, #2
 80318a4:	61fb      	str	r3, [r7, #28]

    uint32_t error_sector;
    status = HAL_FLASHEx_Erase(&erase_info, &error_sector);
 80318a6:	f107 0208 	add.w	r2, r7, #8
 80318aa:	f107 030c 	add.w	r3, r7, #12
 80318ae:	4611      	mov	r1, r2
 80318b0:	4618      	mov	r0, r3
 80318b2:	f002 fb4f 	bl	8033f54 <HAL_FLASHEx_Erase>
 80318b6:	4603      	mov	r3, r0
 80318b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status != HAL_OK) {
 80318bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80318c0:	2b00      	cmp	r3, #0
 80318c2:	d006      	beq.n	80318d2 <write_firmware_to_flash+0x62>
        // Handle flash erase error
        HAL_FLASH_Lock(); // Lock the flash memory before returning
 80318c4:	f002 fa06 	bl	8033cd4 <HAL_FLASH_Lock>
        firmware_write_busy = false;
 80318c8:	4b23      	ldr	r3, [pc, #140]	; (8031958 <write_firmware_to_flash+0xe8>)
 80318ca:	2200      	movs	r2, #0
 80318cc:	701a      	strb	r2, [r3, #0]
        return false;
 80318ce:	2300      	movs	r3, #0
 80318d0:	e03d      	b.n	803194e <write_firmware_to_flash+0xde>
    }

    // Program the firmware data into flash memory
    uint32_t* flash_address = (uint32_t*)TEMP_START_ADDR;
 80318d2:	4b22      	ldr	r3, [pc, #136]	; (803195c <write_firmware_to_flash+0xec>)
 80318d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t* firmware_data_ptr = (uint32_t*)firmware_data;
 80318d6:	687b      	ldr	r3, [r7, #4]
 80318d8:	62bb      	str	r3, [r7, #40]	; 0x28

    for (size_t i = 0; i < firmware_length; i += 4) {
 80318da:	2300      	movs	r3, #0
 80318dc:	627b      	str	r3, [r7, #36]	; 0x24
 80318de:	e01d      	b.n	803191c <write_firmware_to_flash+0xac>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)flash_address, *firmware_data_ptr) != HAL_OK) {
 80318e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80318e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80318e4:	681b      	ldr	r3, [r3, #0]
 80318e6:	2200      	movs	r2, #0
 80318e8:	461c      	mov	r4, r3
 80318ea:	4615      	mov	r5, r2
 80318ec:	4622      	mov	r2, r4
 80318ee:	462b      	mov	r3, r5
 80318f0:	2002      	movs	r0, #2
 80318f2:	f002 f979 	bl	8033be8 <HAL_FLASH_Program>
 80318f6:	4603      	mov	r3, r0
 80318f8:	2b00      	cmp	r3, #0
 80318fa:	d006      	beq.n	803190a <write_firmware_to_flash+0x9a>
            // Handle flash programming error
            HAL_FLASH_Lock(); // Lock the flash memory before returning
 80318fc:	f002 f9ea 	bl	8033cd4 <HAL_FLASH_Lock>
            firmware_write_busy = false;
 8031900:	4b15      	ldr	r3, [pc, #84]	; (8031958 <write_firmware_to_flash+0xe8>)
 8031902:	2200      	movs	r2, #0
 8031904:	701a      	strb	r2, [r3, #0]
            return false;
 8031906:	2300      	movs	r3, #0
 8031908:	e021      	b.n	803194e <write_firmware_to_flash+0xde>
        }
        flash_address++;
 803190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803190c:	3304      	adds	r3, #4
 803190e:	62fb      	str	r3, [r7, #44]	; 0x2c
        firmware_data_ptr++;
 8031910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031912:	3304      	adds	r3, #4
 8031914:	62bb      	str	r3, [r7, #40]	; 0x28
    for (size_t i = 0; i < firmware_length; i += 4) {
 8031916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031918:	3304      	adds	r3, #4
 803191a:	627b      	str	r3, [r7, #36]	; 0x24
 803191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803191e:	683b      	ldr	r3, [r7, #0]
 8031920:	429a      	cmp	r2, r3
 8031922:	d3dd      	bcc.n	80318e0 <write_firmware_to_flash+0x70>
    }

    // Set the CONFIG flag after successfully writing firmware
    if (!set_update_flag()) {
 8031924:	f000 f81c 	bl	8031960 <set_update_flag>
 8031928:	4603      	mov	r3, r0
 803192a:	f083 0301 	eor.w	r3, r3, #1
 803192e:	b2db      	uxtb	r3, r3
 8031930:	2b00      	cmp	r3, #0
 8031932:	d006      	beq.n	8031942 <write_firmware_to_flash+0xd2>
        HAL_FLASH_Lock();
 8031934:	f002 f9ce 	bl	8033cd4 <HAL_FLASH_Lock>
        firmware_write_busy = false;
 8031938:	4b07      	ldr	r3, [pc, #28]	; (8031958 <write_firmware_to_flash+0xe8>)
 803193a:	2200      	movs	r2, #0
 803193c:	701a      	strb	r2, [r3, #0]
        return false;
 803193e:	2300      	movs	r3, #0
 8031940:	e005      	b.n	803194e <write_firmware_to_flash+0xde>
    }

    // Lock the flash memory after programming
    HAL_FLASH_Lock();
 8031942:	f002 f9c7 	bl	8033cd4 <HAL_FLASH_Lock>
    firmware_write_busy = false;
 8031946:	4b04      	ldr	r3, [pc, #16]	; (8031958 <write_firmware_to_flash+0xe8>)
 8031948:	2200      	movs	r2, #0
 803194a:	701a      	strb	r2, [r3, #0]
    return true; // Return true to indicate success
 803194c:	2301      	movs	r3, #1
}
 803194e:	4618      	mov	r0, r3
 8031950:	3730      	adds	r7, #48	; 0x30
 8031952:	46bd      	mov	sp, r7
 8031954:	bdb0      	pop	{r4, r5, r7, pc}
 8031956:	bf00      	nop
 8031958:	2000c96b 	.word	0x2000c96b
 803195c:	080cb800 	.word	0x080cb800

08031960 <set_update_flag>:

bool set_update_flag(void) {
 8031960:	b580      	push	{r7, lr}
 8031962:	af00      	add	r7, sp, #0
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CONFIG_START_ADDR, UPDATE_FLAG_VALUE) != HAL_OK) {
 8031964:	a309      	add	r3, pc, #36	; (adr r3, 803198c <set_update_flag+0x2c>)
 8031966:	e9d3 2300 	ldrd	r2, r3, [r3]
 803196a:	4907      	ldr	r1, [pc, #28]	; (8031988 <set_update_flag+0x28>)
 803196c:	2002      	movs	r0, #2
 803196e:	f002 f93b 	bl	8033be8 <HAL_FLASH_Program>
 8031972:	4603      	mov	r3, r0
 8031974:	2b00      	cmp	r3, #0
 8031976:	d003      	beq.n	8031980 <set_update_flag+0x20>
        // Handle flash programming error
        HAL_FLASH_Lock(); // Lock the flash memory before returning
 8031978:	f002 f9ac 	bl	8033cd4 <HAL_FLASH_Lock>
        return false;
 803197c:	2300      	movs	r3, #0
 803197e:	e000      	b.n	8031982 <set_update_flag+0x22>
    }
    return true;
 8031980:	2301      	movs	r3, #1
}
 8031982:	4618      	mov	r0, r3
 8031984:	bd80      	pop	{r7, pc}
 8031986:	bf00      	nop
 8031988:	08020000 	.word	0x08020000
 803198c:	deadbeef 	.word	0xdeadbeef
 8031990:	00000000 	.word	0x00000000

08031994 <firmware_update_handler>:


void firmware_update_handler(void)
{
 8031994:	b580      	push	{r7, lr}
 8031996:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 8031998:	4b3e      	ldr	r3, [pc, #248]	; (8031a94 <firmware_update_handler+0x100>)
 803199a:	781b      	ldrb	r3, [r3, #0]
 803199c:	3b01      	subs	r3, #1
 803199e:	2b05      	cmp	r3, #5
 80319a0:	d86e      	bhi.n	8031a80 <firmware_update_handler+0xec>
 80319a2:	a201      	add	r2, pc, #4	; (adr r2, 80319a8 <firmware_update_handler+0x14>)
 80319a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80319a8:	080319c1 	.word	0x080319c1
 80319ac:	080319f5 	.word	0x080319f5
 80319b0:	08031a2f 	.word	0x08031a2f
 80319b4:	08031a69 	.word	0x08031a69
 80319b8:	08031a81 	.word	0x08031a81
 80319bc:	08031a6d 	.word	0x08031a6d
    {
        case DOWNLOAD_PENDING:
            if (!firmware_download_busy) {
 80319c0:	4b35      	ldr	r3, [pc, #212]	; (8031a98 <firmware_update_handler+0x104>)
 80319c2:	781b      	ldrb	r3, [r3, #0]
 80319c4:	f083 0301 	eor.w	r3, r3, #1
 80319c8:	b2db      	uxtb	r3, r3
 80319ca:	2b00      	cmp	r3, #0
 80319cc:	d05a      	beq.n	8031a84 <firmware_update_handler+0xf0>
                firmware_download_busy = true; // Set the flag as we're initiating the download
 80319ce:	4b32      	ldr	r3, [pc, #200]	; (8031a98 <firmware_update_handler+0x104>)
 80319d0:	2201      	movs	r2, #1
 80319d2:	701a      	strb	r2, [r3, #0]
                if (download_firmware(firmware_url)) {
 80319d4:	4831      	ldr	r0, [pc, #196]	; (8031a9c <firmware_update_handler+0x108>)
 80319d6:	f7ff fd79 	bl	80314cc <download_firmware>
 80319da:	4603      	mov	r3, r0
 80319dc:	2b00      	cmp	r3, #0
 80319de:	d005      	beq.n	80319ec <firmware_update_handler+0x58>
                    fwUpdateState = VERIFY_PENDING;
 80319e0:	4b2c      	ldr	r3, [pc, #176]	; (8031a94 <firmware_update_handler+0x100>)
 80319e2:	2202      	movs	r2, #2
 80319e4:	701a      	strb	r2, [r3, #0]
                    resetAction();
 80319e6:	f000 f863 	bl	8031ab0 <resetAction>
                } else {
                    firmware_download_busy = false; // Reset the flag if download fails
                }
            }
            break;
 80319ea:	e04b      	b.n	8031a84 <firmware_update_handler+0xf0>
                    firmware_download_busy = false; // Reset the flag if download fails
 80319ec:	4b2a      	ldr	r3, [pc, #168]	; (8031a98 <firmware_update_handler+0x104>)
 80319ee:	2200      	movs	r2, #0
 80319f0:	701a      	strb	r2, [r3, #0]
            break;
 80319f2:	e047      	b.n	8031a84 <firmware_update_handler+0xf0>

        case VERIFY_PENDING:
            if (!firmware_verify_busy) {
 80319f4:	4b2a      	ldr	r3, [pc, #168]	; (8031aa0 <firmware_update_handler+0x10c>)
 80319f6:	781b      	ldrb	r3, [r3, #0]
 80319f8:	f083 0301 	eor.w	r3, r3, #1
 80319fc:	b2db      	uxtb	r3, r3
 80319fe:	2b00      	cmp	r3, #0
 8031a00:	d042      	beq.n	8031a88 <firmware_update_handler+0xf4>
                firmware_verify_busy = true;
 8031a02:	4b27      	ldr	r3, [pc, #156]	; (8031aa0 <firmware_update_handler+0x10c>)
 8031a04:	2201      	movs	r2, #1
 8031a06:	701a      	strb	r2, [r3, #0]
                if (verify_firmware_update(firmware_buffer, firmware_size)) {
 8031a08:	4b26      	ldr	r3, [pc, #152]	; (8031aa4 <firmware_update_handler+0x110>)
 8031a0a:	681b      	ldr	r3, [r3, #0]
 8031a0c:	4619      	mov	r1, r3
 8031a0e:	4826      	ldr	r0, [pc, #152]	; (8031aa8 <firmware_update_handler+0x114>)
 8031a10:	f7ff fe9e 	bl	8031750 <verify_firmware_update>
 8031a14:	4603      	mov	r3, r0
 8031a16:	2b00      	cmp	r3, #0
 8031a18:	d005      	beq.n	8031a26 <firmware_update_handler+0x92>
                    fwUpdateState = WRITE_PENDING;
 8031a1a:	4b1e      	ldr	r3, [pc, #120]	; (8031a94 <firmware_update_handler+0x100>)
 8031a1c:	2203      	movs	r2, #3
 8031a1e:	701a      	strb	r2, [r3, #0]
                    resetAction();
 8031a20:	f000 f846 	bl	8031ab0 <resetAction>
                } else {
                    firmware_verify_busy = false; // Reset the flag if verification fails
                }
            }
            break;
 8031a24:	e030      	b.n	8031a88 <firmware_update_handler+0xf4>
                    firmware_verify_busy = false; // Reset the flag if verification fails
 8031a26:	4b1e      	ldr	r3, [pc, #120]	; (8031aa0 <firmware_update_handler+0x10c>)
 8031a28:	2200      	movs	r2, #0
 8031a2a:	701a      	strb	r2, [r3, #0]
            break;
 8031a2c:	e02c      	b.n	8031a88 <firmware_update_handler+0xf4>

        case WRITE_PENDING:
            if (!firmware_write_busy) {
 8031a2e:	4b1f      	ldr	r3, [pc, #124]	; (8031aac <firmware_update_handler+0x118>)
 8031a30:	781b      	ldrb	r3, [r3, #0]
 8031a32:	f083 0301 	eor.w	r3, r3, #1
 8031a36:	b2db      	uxtb	r3, r3
 8031a38:	2b00      	cmp	r3, #0
 8031a3a:	d027      	beq.n	8031a8c <firmware_update_handler+0xf8>
                firmware_write_busy = true;
 8031a3c:	4b1b      	ldr	r3, [pc, #108]	; (8031aac <firmware_update_handler+0x118>)
 8031a3e:	2201      	movs	r2, #1
 8031a40:	701a      	strb	r2, [r3, #0]
                if (write_firmware_to_flash(firmware_buffer, firmware_size)) {
 8031a42:	4b18      	ldr	r3, [pc, #96]	; (8031aa4 <firmware_update_handler+0x110>)
 8031a44:	681b      	ldr	r3, [r3, #0]
 8031a46:	4619      	mov	r1, r3
 8031a48:	4817      	ldr	r0, [pc, #92]	; (8031aa8 <firmware_update_handler+0x114>)
 8031a4a:	f7ff ff11 	bl	8031870 <write_firmware_to_flash>
 8031a4e:	4603      	mov	r3, r0
 8031a50:	2b00      	cmp	r3, #0
 8031a52:	d005      	beq.n	8031a60 <firmware_update_handler+0xcc>
                    fwUpdateState = RESET_PENDING;
 8031a54:	4b0f      	ldr	r3, [pc, #60]	; (8031a94 <firmware_update_handler+0x100>)
 8031a56:	2204      	movs	r2, #4
 8031a58:	701a      	strb	r2, [r3, #0]
                    resetAction();
 8031a5a:	f000 f829 	bl	8031ab0 <resetAction>
                } else {
                    firmware_write_busy = false; // Reset the flag if writing fails
                }
            }
            break;
 8031a5e:	e015      	b.n	8031a8c <firmware_update_handler+0xf8>
                    firmware_write_busy = false; // Reset the flag if writing fails
 8031a60:	4b12      	ldr	r3, [pc, #72]	; (8031aac <firmware_update_handler+0x118>)
 8031a62:	2200      	movs	r2, #0
 8031a64:	701a      	strb	r2, [r3, #0]
            break;
 8031a66:	e011      	b.n	8031a8c <firmware_update_handler+0xf8>

        case RESET_PENDING:
            NVIC_SystemReset();
 8031a68:	f7ff fa82 	bl	8030f70 <__NVIC_SystemReset>
            break;

        case ERROR_STATE:
            // Handle error, etc.
            // Reset all flags as we're in an error state
            firmware_download_busy = false;
 8031a6c:	4b0a      	ldr	r3, [pc, #40]	; (8031a98 <firmware_update_handler+0x104>)
 8031a6e:	2200      	movs	r2, #0
 8031a70:	701a      	strb	r2, [r3, #0]
            firmware_verify_busy = false;
 8031a72:	4b0b      	ldr	r3, [pc, #44]	; (8031aa0 <firmware_update_handler+0x10c>)
 8031a74:	2200      	movs	r2, #0
 8031a76:	701a      	strb	r2, [r3, #0]
            firmware_write_busy = false;
 8031a78:	4b0c      	ldr	r3, [pc, #48]	; (8031aac <firmware_update_handler+0x118>)
 8031a7a:	2200      	movs	r2, #0
 8031a7c:	701a      	strb	r2, [r3, #0]
            break;
 8031a7e:	e006      	b.n	8031a8e <firmware_update_handler+0xfa>

        default:
            /* IDLE, ACTION_IN_PROGRESS, or other states. No operation. */
            break;
 8031a80:	bf00      	nop
 8031a82:	e004      	b.n	8031a8e <firmware_update_handler+0xfa>
            break;
 8031a84:	bf00      	nop
 8031a86:	e002      	b.n	8031a8e <firmware_update_handler+0xfa>
            break;
 8031a88:	bf00      	nop
 8031a8a:	e000      	b.n	8031a8e <firmware_update_handler+0xfa>
            break;
 8031a8c:	bf00      	nop
    }
}
 8031a8e:	bf00      	nop
 8031a90:	bd80      	pop	{r7, pc}
 8031a92:	bf00      	nop
 8031a94:	2000ca78 	.word	0x2000ca78
 8031a98:	2000c969 	.word	0x2000c969
 8031a9c:	20000208 	.word	0x20000208
 8031aa0:	2000c96a 	.word	0x2000c96a
 8031aa4:	2000c85c 	.word	0x2000c85c
 8031aa8:	2000050c 	.word	0x2000050c
 8031aac:	2000c96b 	.word	0x2000c96b

08031ab0 <resetAction>:

void resetAction() {
 8031ab0:	b480      	push	{r7}
 8031ab2:	af00      	add	r7, sp, #0
    retry_count = 0;
 8031ab4:	4b03      	ldr	r3, [pc, #12]	; (8031ac4 <resetAction+0x14>)
 8031ab6:	2200      	movs	r2, #0
 8031ab8:	601a      	str	r2, [r3, #0]
}
 8031aba:	bf00      	nop
 8031abc:	46bd      	mov	sp, r7
 8031abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ac2:	4770      	bx	lr
 8031ac4:	2000ca74 	.word	0x2000ca74

08031ac8 <send_at_command>:
// Assuming extern definitions



// Function to send AT command to Quectel M66
void send_at_command(const char* command, const char* expected_resp) {
 8031ac8:	b580      	push	{r7, lr}
 8031aca:	b082      	sub	sp, #8
 8031acc:	af00      	add	r7, sp, #0
 8031ace:	6078      	str	r0, [r7, #4]
 8031ad0:	6039      	str	r1, [r7, #0]
	if (at_state == AT_IDLE || AT_RESPONSE_RECEIVED) {
	        // Clear UART buffer
	        memset(uart_buffer.data, 0, UART_BUFFER_SIZE);
 8031ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031ad6:	2100      	movs	r1, #0
 8031ad8:	480b      	ldr	r0, [pc, #44]	; (8031b08 <send_at_command+0x40>)
 8031ada:	f006 f876 	bl	8037bca <memset>

	        // Send the AT command
	        UART_Send(command);
 8031ade:	6878      	ldr	r0, [r7, #4]
 8031ae0:	f000 f858 	bl	8031b94 <UART_Send>
	        UART_Send("\r\n");
 8031ae4:	4809      	ldr	r0, [pc, #36]	; (8031b0c <send_at_command+0x44>)
 8031ae6:	f000 f855 	bl	8031b94 <UART_Send>

	        // Set the state to waiting for a response
	        at_state = AT_WAITING_RESPONSE;
 8031aea:	4b09      	ldr	r3, [pc, #36]	; (8031b10 <send_at_command+0x48>)
 8031aec:	2201      	movs	r2, #1
 8031aee:	701a      	strb	r2, [r3, #0]
	        expected_at_response = expected_resp;
 8031af0:	4a08      	ldr	r2, [pc, #32]	; (8031b14 <send_at_command+0x4c>)
 8031af2:	683b      	ldr	r3, [r7, #0]
 8031af4:	6013      	str	r3, [r2, #0]

	        // Capture the current time (however you measure time in your system)
	        at_command_start_time = get_system_time();  // This function needs to be implemented based on your system
 8031af6:	f000 f863 	bl	8031bc0 <get_system_time>
 8031afa:	4603      	mov	r3, r0
 8031afc:	4a06      	ldr	r2, [pc, #24]	; (8031b18 <send_at_command+0x50>)
 8031afe:	6013      	str	r3, [r2, #0]
	    }

}
 8031b00:	bf00      	nop
 8031b02:	3708      	adds	r7, #8
 8031b04:	46bd      	mov	sp, r7
 8031b06:	bd80      	pop	{r7, pc}
 8031b08:	2000c96c 	.word	0x2000c96c
 8031b0c:	0803a8d0 	.word	0x0803a8d0
 8031b10:	2000ca7a 	.word	0x2000ca7a
 8031b14:	2000ca7c 	.word	0x2000ca7c
 8031b18:	2000ca80 	.word	0x2000ca80

08031b1c <check_at_command_response>:
at_command_state_t check_at_command_response(uint16_t timeout) {
 8031b1c:	b580      	push	{r7, lr}
 8031b1e:	b084      	sub	sp, #16
 8031b20:	af00      	add	r7, sp, #0
 8031b22:	4603      	mov	r3, r0
 8031b24:	80fb      	strh	r3, [r7, #6]
    if (at_state == AT_WAITING_RESPONSE) {
 8031b26:	4b16      	ldr	r3, [pc, #88]	; (8031b80 <check_at_command_response+0x64>)
 8031b28:	781b      	ldrb	r3, [r3, #0]
 8031b2a:	2b01      	cmp	r3, #1
 8031b2c:	d121      	bne.n	8031b72 <check_at_command_response+0x56>
        if (data_received_flag) {
 8031b2e:	4b15      	ldr	r3, [pc, #84]	; (8031b84 <check_at_command_response+0x68>)
 8031b30:	781b      	ldrb	r3, [r3, #0]
 8031b32:	b2db      	uxtb	r3, r3
 8031b34:	2b00      	cmp	r3, #0
 8031b36:	d00f      	beq.n	8031b58 <check_at_command_response+0x3c>
            if (strstr((char*)receive_buffer, expected_at_response) != NULL) {
 8031b38:	4b13      	ldr	r3, [pc, #76]	; (8031b88 <check_at_command_response+0x6c>)
 8031b3a:	681b      	ldr	r3, [r3, #0]
 8031b3c:	4619      	mov	r1, r3
 8031b3e:	4813      	ldr	r0, [pc, #76]	; (8031b8c <check_at_command_response+0x70>)
 8031b40:	f006 f87d 	bl	8037c3e <strstr>
 8031b44:	4603      	mov	r3, r0
 8031b46:	2b00      	cmp	r3, #0
 8031b48:	d002      	beq.n	8031b50 <check_at_command_response+0x34>
                at_state = AT_RESPONSE_RECEIVED;
 8031b4a:	4b0d      	ldr	r3, [pc, #52]	; (8031b80 <check_at_command_response+0x64>)
 8031b4c:	2202      	movs	r2, #2
 8031b4e:	701a      	strb	r2, [r3, #0]

            }

            // Reset the flag after processing
            data_received_flag = false;
 8031b50:	4b0c      	ldr	r3, [pc, #48]	; (8031b84 <check_at_command_response+0x68>)
 8031b52:	2200      	movs	r2, #0
 8031b54:	701a      	strb	r2, [r3, #0]
 8031b56:	e00c      	b.n	8031b72 <check_at_command_response+0x56>
        } else {
            uint32_t current_time = get_system_time(); // Needs your implementation
 8031b58:	f000 f832 	bl	8031bc0 <get_system_time>
 8031b5c:	60f8      	str	r0, [r7, #12]
            if ((current_time - at_command_start_time) >= timeout) {
 8031b5e:	4b0c      	ldr	r3, [pc, #48]	; (8031b90 <check_at_command_response+0x74>)
 8031b60:	681b      	ldr	r3, [r3, #0]
 8031b62:	68fa      	ldr	r2, [r7, #12]
 8031b64:	1ad2      	subs	r2, r2, r3
 8031b66:	88fb      	ldrh	r3, [r7, #6]
 8031b68:	429a      	cmp	r2, r3
 8031b6a:	d302      	bcc.n	8031b72 <check_at_command_response+0x56>
                at_state = AT_RESPONSE_TIMEOUT;
 8031b6c:	4b04      	ldr	r3, [pc, #16]	; (8031b80 <check_at_command_response+0x64>)
 8031b6e:	2203      	movs	r2, #3
 8031b70:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return at_state;
 8031b72:	4b03      	ldr	r3, [pc, #12]	; (8031b80 <check_at_command_response+0x64>)
 8031b74:	781b      	ldrb	r3, [r3, #0]
}
 8031b76:	4618      	mov	r0, r3
 8031b78:	3710      	adds	r7, #16
 8031b7a:	46bd      	mov	sp, r7
 8031b7c:	bd80      	pop	{r7, pc}
 8031b7e:	bf00      	nop
 8031b80:	2000ca7a 	.word	0x2000ca7a
 8031b84:	2000c860 	.word	0x2000c860
 8031b88:	2000ca7c 	.word	0x2000ca7c
 8031b8c:	2000c864 	.word	0x2000c864
 8031b90:	2000ca80 	.word	0x2000ca80

08031b94 <UART_Send>:

void UART_Send(const char* str) {
 8031b94:	b580      	push	{r7, lr}
 8031b96:	b082      	sub	sp, #8
 8031b98:	af00      	add	r7, sp, #0
 8031b9a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);  // Transmitting via UART2 in this example
 8031b9c:	6878      	ldr	r0, [r7, #4]
 8031b9e:	f7fe fb77 	bl	8030290 <strlen>
 8031ba2:	4603      	mov	r3, r0
 8031ba4:	b29a      	uxth	r2, r3
 8031ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8031baa:	6879      	ldr	r1, [r7, #4]
 8031bac:	4803      	ldr	r0, [pc, #12]	; (8031bbc <UART_Send+0x28>)
 8031bae:	f003 fb5b 	bl	8035268 <HAL_UART_Transmit>
}
 8031bb2:	bf00      	nop
 8031bb4:	3708      	adds	r7, #8
 8031bb6:	46bd      	mov	sp, r7
 8031bb8:	bd80      	pop	{r7, pc}
 8031bba:	bf00      	nop
 8031bbc:	2000cb38 	.word	0x2000cb38

08031bc0 <get_system_time>:

uint32_t get_system_time(void) {
 8031bc0:	b580      	push	{r7, lr}
 8031bc2:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // Returns the system tick count since start-up
 8031bc4:	f001 fe3c 	bl	8033840 <HAL_GetTick>
 8031bc8:	4603      	mov	r3, r0
}
 8031bca:	4618      	mov	r0, r3
 8031bcc:	bd80      	pop	{r7, pc}
	...

08031bd0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8031bd0:	b480      	push	{r7}
 8031bd2:	b085      	sub	sp, #20
 8031bd4:	af00      	add	r7, sp, #0
 8031bd6:	6078      	str	r0, [r7, #4]
 8031bd8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8031bda:	687b      	ldr	r3, [r7, #4]
 8031bdc:	2b00      	cmp	r3, #0
 8031bde:	d002      	beq.n	8031be6 <case_insensitive_strcmp+0x16>
 8031be0:	683b      	ldr	r3, [r7, #0]
 8031be2:	2b00      	cmp	r3, #0
 8031be4:	d101      	bne.n	8031bea <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8031be6:	2301      	movs	r3, #1
 8031be8:	e056      	b.n	8031c98 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8031bea:	687a      	ldr	r2, [r7, #4]
 8031bec:	683b      	ldr	r3, [r7, #0]
 8031bee:	429a      	cmp	r2, r3
 8031bf0:	d10d      	bne.n	8031c0e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8031bf2:	2300      	movs	r3, #0
 8031bf4:	e050      	b.n	8031c98 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8031bf6:	687b      	ldr	r3, [r7, #4]
 8031bf8:	781b      	ldrb	r3, [r3, #0]
 8031bfa:	2b00      	cmp	r3, #0
 8031bfc:	d101      	bne.n	8031c02 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8031bfe:	2300      	movs	r3, #0
 8031c00:	e04a      	b.n	8031c98 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8031c02:	687b      	ldr	r3, [r7, #4]
 8031c04:	3301      	adds	r3, #1
 8031c06:	607b      	str	r3, [r7, #4]
 8031c08:	683b      	ldr	r3, [r7, #0]
 8031c0a:	3301      	adds	r3, #1
 8031c0c:	603b      	str	r3, [r7, #0]
 8031c0e:	687b      	ldr	r3, [r7, #4]
 8031c10:	781b      	ldrb	r3, [r3, #0]
 8031c12:	73fb      	strb	r3, [r7, #15]
 8031c14:	7bfb      	ldrb	r3, [r7, #15]
 8031c16:	3301      	adds	r3, #1
 8031c18:	4a22      	ldr	r2, [pc, #136]	; (8031ca4 <case_insensitive_strcmp+0xd4>)
 8031c1a:	4413      	add	r3, r2
 8031c1c:	781b      	ldrb	r3, [r3, #0]
 8031c1e:	f003 0303 	and.w	r3, r3, #3
 8031c22:	2b01      	cmp	r3, #1
 8031c24:	d103      	bne.n	8031c2e <case_insensitive_strcmp+0x5e>
 8031c26:	7bfb      	ldrb	r3, [r7, #15]
 8031c28:	f103 0220 	add.w	r2, r3, #32
 8031c2c:	e000      	b.n	8031c30 <case_insensitive_strcmp+0x60>
 8031c2e:	7bfa      	ldrb	r2, [r7, #15]
 8031c30:	683b      	ldr	r3, [r7, #0]
 8031c32:	781b      	ldrb	r3, [r3, #0]
 8031c34:	73bb      	strb	r3, [r7, #14]
 8031c36:	7bbb      	ldrb	r3, [r7, #14]
 8031c38:	3301      	adds	r3, #1
 8031c3a:	491a      	ldr	r1, [pc, #104]	; (8031ca4 <case_insensitive_strcmp+0xd4>)
 8031c3c:	440b      	add	r3, r1
 8031c3e:	781b      	ldrb	r3, [r3, #0]
 8031c40:	f003 0303 	and.w	r3, r3, #3
 8031c44:	2b01      	cmp	r3, #1
 8031c46:	d102      	bne.n	8031c4e <case_insensitive_strcmp+0x7e>
 8031c48:	7bbb      	ldrb	r3, [r7, #14]
 8031c4a:	3320      	adds	r3, #32
 8031c4c:	e000      	b.n	8031c50 <case_insensitive_strcmp+0x80>
 8031c4e:	7bbb      	ldrb	r3, [r7, #14]
 8031c50:	429a      	cmp	r2, r3
 8031c52:	d0d0      	beq.n	8031bf6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8031c54:	687b      	ldr	r3, [r7, #4]
 8031c56:	781b      	ldrb	r3, [r3, #0]
 8031c58:	737b      	strb	r3, [r7, #13]
 8031c5a:	7b7b      	ldrb	r3, [r7, #13]
 8031c5c:	3301      	adds	r3, #1
 8031c5e:	4a11      	ldr	r2, [pc, #68]	; (8031ca4 <case_insensitive_strcmp+0xd4>)
 8031c60:	4413      	add	r3, r2
 8031c62:	781b      	ldrb	r3, [r3, #0]
 8031c64:	f003 0303 	and.w	r3, r3, #3
 8031c68:	2b01      	cmp	r3, #1
 8031c6a:	d103      	bne.n	8031c74 <case_insensitive_strcmp+0xa4>
 8031c6c:	7b7b      	ldrb	r3, [r7, #13]
 8031c6e:	f103 0220 	add.w	r2, r3, #32
 8031c72:	e000      	b.n	8031c76 <case_insensitive_strcmp+0xa6>
 8031c74:	7b7a      	ldrb	r2, [r7, #13]
 8031c76:	683b      	ldr	r3, [r7, #0]
 8031c78:	781b      	ldrb	r3, [r3, #0]
 8031c7a:	733b      	strb	r3, [r7, #12]
 8031c7c:	7b3b      	ldrb	r3, [r7, #12]
 8031c7e:	3301      	adds	r3, #1
 8031c80:	4908      	ldr	r1, [pc, #32]	; (8031ca4 <case_insensitive_strcmp+0xd4>)
 8031c82:	440b      	add	r3, r1
 8031c84:	781b      	ldrb	r3, [r3, #0]
 8031c86:	f003 0303 	and.w	r3, r3, #3
 8031c8a:	2b01      	cmp	r3, #1
 8031c8c:	d102      	bne.n	8031c94 <case_insensitive_strcmp+0xc4>
 8031c8e:	7b3b      	ldrb	r3, [r7, #12]
 8031c90:	3320      	adds	r3, #32
 8031c92:	e000      	b.n	8031c96 <case_insensitive_strcmp+0xc6>
 8031c94:	7b3b      	ldrb	r3, [r7, #12]
 8031c96:	1ad3      	subs	r3, r2, r3
}
 8031c98:	4618      	mov	r0, r3
 8031c9a:	3714      	adds	r7, #20
 8031c9c:	46bd      	mov	sp, r7
 8031c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ca2:	4770      	bx	lr
 8031ca4:	0803a990 	.word	0x0803a990

08031ca8 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8031ca8:	b580      	push	{r7, lr}
 8031caa:	b084      	sub	sp, #16
 8031cac:	af00      	add	r7, sp, #0
 8031cae:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8031cb0:	687b      	ldr	r3, [r7, #4]
 8031cb2:	681b      	ldr	r3, [r3, #0]
 8031cb4:	2028      	movs	r0, #40	; 0x28
 8031cb6:	4798      	blx	r3
 8031cb8:	60f8      	str	r0, [r7, #12]
    if (node)
 8031cba:	68fb      	ldr	r3, [r7, #12]
 8031cbc:	2b00      	cmp	r3, #0
 8031cbe:	d004      	beq.n	8031cca <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8031cc0:	2228      	movs	r2, #40	; 0x28
 8031cc2:	2100      	movs	r1, #0
 8031cc4:	68f8      	ldr	r0, [r7, #12]
 8031cc6:	f005 ff80 	bl	8037bca <memset>
    }

    return node;
 8031cca:	68fb      	ldr	r3, [r7, #12]
}
 8031ccc:	4618      	mov	r0, r3
 8031cce:	3710      	adds	r7, #16
 8031cd0:	46bd      	mov	sp, r7
 8031cd2:	bd80      	pop	{r7, pc}

08031cd4 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8031cd4:	b580      	push	{r7, lr}
 8031cd6:	b084      	sub	sp, #16
 8031cd8:	af00      	add	r7, sp, #0
 8031cda:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8031cdc:	2300      	movs	r3, #0
 8031cde:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8031ce0:	e037      	b.n	8031d52 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8031ce2:	687b      	ldr	r3, [r7, #4]
 8031ce4:	681b      	ldr	r3, [r3, #0]
 8031ce6:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8031ce8:	687b      	ldr	r3, [r7, #4]
 8031cea:	68db      	ldr	r3, [r3, #12]
 8031cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031cf0:	2b00      	cmp	r3, #0
 8031cf2:	d108      	bne.n	8031d06 <cJSON_Delete+0x32>
 8031cf4:	687b      	ldr	r3, [r7, #4]
 8031cf6:	689b      	ldr	r3, [r3, #8]
 8031cf8:	2b00      	cmp	r3, #0
 8031cfa:	d004      	beq.n	8031d06 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8031cfc:	687b      	ldr	r3, [r7, #4]
 8031cfe:	689b      	ldr	r3, [r3, #8]
 8031d00:	4618      	mov	r0, r3
 8031d02:	f7ff ffe7 	bl	8031cd4 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8031d06:	687b      	ldr	r3, [r7, #4]
 8031d08:	68db      	ldr	r3, [r3, #12]
 8031d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031d0e:	2b00      	cmp	r3, #0
 8031d10:	d109      	bne.n	8031d26 <cJSON_Delete+0x52>
 8031d12:	687b      	ldr	r3, [r7, #4]
 8031d14:	691b      	ldr	r3, [r3, #16]
 8031d16:	2b00      	cmp	r3, #0
 8031d18:	d005      	beq.n	8031d26 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8031d1a:	4b12      	ldr	r3, [pc, #72]	; (8031d64 <cJSON_Delete+0x90>)
 8031d1c:	685b      	ldr	r3, [r3, #4]
 8031d1e:	687a      	ldr	r2, [r7, #4]
 8031d20:	6912      	ldr	r2, [r2, #16]
 8031d22:	4610      	mov	r0, r2
 8031d24:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8031d26:	687b      	ldr	r3, [r7, #4]
 8031d28:	68db      	ldr	r3, [r3, #12]
 8031d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031d2e:	2b00      	cmp	r3, #0
 8031d30:	d109      	bne.n	8031d46 <cJSON_Delete+0x72>
 8031d32:	687b      	ldr	r3, [r7, #4]
 8031d34:	6a1b      	ldr	r3, [r3, #32]
 8031d36:	2b00      	cmp	r3, #0
 8031d38:	d005      	beq.n	8031d46 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8031d3a:	4b0a      	ldr	r3, [pc, #40]	; (8031d64 <cJSON_Delete+0x90>)
 8031d3c:	685b      	ldr	r3, [r3, #4]
 8031d3e:	687a      	ldr	r2, [r7, #4]
 8031d40:	6a12      	ldr	r2, [r2, #32]
 8031d42:	4610      	mov	r0, r2
 8031d44:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8031d46:	4b07      	ldr	r3, [pc, #28]	; (8031d64 <cJSON_Delete+0x90>)
 8031d48:	685b      	ldr	r3, [r3, #4]
 8031d4a:	6878      	ldr	r0, [r7, #4]
 8031d4c:	4798      	blx	r3
        item = next;
 8031d4e:	68fb      	ldr	r3, [r7, #12]
 8031d50:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8031d52:	687b      	ldr	r3, [r7, #4]
 8031d54:	2b00      	cmp	r3, #0
 8031d56:	d1c4      	bne.n	8031ce2 <cJSON_Delete+0xe>
    }
}
 8031d58:	bf00      	nop
 8031d5a:	bf00      	nop
 8031d5c:	3710      	adds	r7, #16
 8031d5e:	46bd      	mov	sp, r7
 8031d60:	bd80      	pop	{r7, pc}
 8031d62:	bf00      	nop
 8031d64:	2000000c 	.word	0x2000000c

08031d68 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8031d68:	b480      	push	{r7}
 8031d6a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8031d6c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8031d6e:	4618      	mov	r0, r3
 8031d70:	46bd      	mov	sp, r7
 8031d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d76:	4770      	bx	lr

08031d78 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8031d78:	b580      	push	{r7, lr}
 8031d7a:	b098      	sub	sp, #96	; 0x60
 8031d7c:	af00      	add	r7, sp, #0
 8031d7e:	6078      	str	r0, [r7, #4]
 8031d80:	6039      	str	r1, [r7, #0]
    double number = 0;
 8031d82:	f04f 0200 	mov.w	r2, #0
 8031d86:	f04f 0300 	mov.w	r3, #0
 8031d8a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8031d8e:	2300      	movs	r3, #0
 8031d90:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8031d92:	f7ff ffe9 	bl	8031d68 <get_decimal_point>
 8031d96:	4603      	mov	r3, r0
 8031d98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8031d9c:	2300      	movs	r3, #0
 8031d9e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8031da0:	683b      	ldr	r3, [r7, #0]
 8031da2:	2b00      	cmp	r3, #0
 8031da4:	d003      	beq.n	8031dae <parse_number+0x36>
 8031da6:	683b      	ldr	r3, [r7, #0]
 8031da8:	681b      	ldr	r3, [r3, #0]
 8031daa:	2b00      	cmp	r3, #0
 8031dac:	d101      	bne.n	8031db2 <parse_number+0x3a>
    {
        return false;
 8031dae:	2300      	movs	r3, #0
 8031db0:	e0a0      	b.n	8031ef4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8031db2:	2300      	movs	r3, #0
 8031db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8031db6:	e03d      	b.n	8031e34 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8031db8:	683b      	ldr	r3, [r7, #0]
 8031dba:	681a      	ldr	r2, [r3, #0]
 8031dbc:	683b      	ldr	r3, [r7, #0]
 8031dbe:	6899      	ldr	r1, [r3, #8]
 8031dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031dc2:	440b      	add	r3, r1
 8031dc4:	4413      	add	r3, r2
 8031dc6:	781b      	ldrb	r3, [r3, #0]
 8031dc8:	2b45      	cmp	r3, #69	; 0x45
 8031dca:	dc17      	bgt.n	8031dfc <parse_number+0x84>
 8031dcc:	2b2b      	cmp	r3, #43	; 0x2b
 8031dce:	db40      	blt.n	8031e52 <parse_number+0xda>
 8031dd0:	3b2b      	subs	r3, #43	; 0x2b
 8031dd2:	2201      	movs	r2, #1
 8031dd4:	409a      	lsls	r2, r3
 8031dd6:	4b4c      	ldr	r3, [pc, #304]	; (8031f08 <parse_number+0x190>)
 8031dd8:	4013      	ands	r3, r2
 8031dda:	2b00      	cmp	r3, #0
 8031ddc:	bf14      	ite	ne
 8031dde:	2301      	movne	r3, #1
 8031de0:	2300      	moveq	r3, #0
 8031de2:	b2db      	uxtb	r3, r3
 8031de4:	2b00      	cmp	r3, #0
 8031de6:	d10b      	bne.n	8031e00 <parse_number+0x88>
 8031de8:	f002 0308 	and.w	r3, r2, #8
 8031dec:	2b00      	cmp	r3, #0
 8031dee:	bf14      	ite	ne
 8031df0:	2301      	movne	r3, #1
 8031df2:	2300      	moveq	r3, #0
 8031df4:	b2db      	uxtb	r3, r3
 8031df6:	2b00      	cmp	r3, #0
 8031df8:	d111      	bne.n	8031e1e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8031dfa:	e02a      	b.n	8031e52 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8031dfc:	2b65      	cmp	r3, #101	; 0x65
 8031dfe:	d128      	bne.n	8031e52 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8031e00:	683b      	ldr	r3, [r7, #0]
 8031e02:	681a      	ldr	r2, [r3, #0]
 8031e04:	683b      	ldr	r3, [r7, #0]
 8031e06:	6899      	ldr	r1, [r3, #8]
 8031e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e0a:	440b      	add	r3, r1
 8031e0c:	4413      	add	r3, r2
 8031e0e:	7819      	ldrb	r1, [r3, #0]
 8031e10:	f107 0208 	add.w	r2, r7, #8
 8031e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e16:	4413      	add	r3, r2
 8031e18:	460a      	mov	r2, r1
 8031e1a:	701a      	strb	r2, [r3, #0]
                break;
 8031e1c:	e007      	b.n	8031e2e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8031e1e:	f107 0208 	add.w	r2, r7, #8
 8031e22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e24:	4413      	add	r3, r2
 8031e26:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8031e2a:	701a      	strb	r2, [r3, #0]
                break;
 8031e2c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8031e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e30:	3301      	adds	r3, #1
 8031e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8031e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e36:	2b3e      	cmp	r3, #62	; 0x3e
 8031e38:	d80d      	bhi.n	8031e56 <parse_number+0xde>
 8031e3a:	683b      	ldr	r3, [r7, #0]
 8031e3c:	2b00      	cmp	r3, #0
 8031e3e:	d00a      	beq.n	8031e56 <parse_number+0xde>
 8031e40:	683b      	ldr	r3, [r7, #0]
 8031e42:	689a      	ldr	r2, [r3, #8]
 8031e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e46:	441a      	add	r2, r3
 8031e48:	683b      	ldr	r3, [r7, #0]
 8031e4a:	685b      	ldr	r3, [r3, #4]
 8031e4c:	429a      	cmp	r2, r3
 8031e4e:	d3b3      	bcc.n	8031db8 <parse_number+0x40>
        }
    }
loop_end:
 8031e50:	e001      	b.n	8031e56 <parse_number+0xde>
                goto loop_end;
 8031e52:	bf00      	nop
 8031e54:	e000      	b.n	8031e58 <parse_number+0xe0>
loop_end:
 8031e56:	bf00      	nop
    number_c_string[i] = '\0';
 8031e58:	f107 0208 	add.w	r2, r7, #8
 8031e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8031e5e:	4413      	add	r3, r2
 8031e60:	2200      	movs	r2, #0
 8031e62:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8031e64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8031e68:	f107 0308 	add.w	r3, r7, #8
 8031e6c:	4611      	mov	r1, r2
 8031e6e:	4618      	mov	r0, r3
 8031e70:	f005 f926 	bl	80370c0 <strtod>
 8031e74:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8031e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8031e7a:	f107 0308 	add.w	r3, r7, #8
 8031e7e:	429a      	cmp	r2, r3
 8031e80:	d101      	bne.n	8031e86 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8031e82:	2300      	movs	r3, #0
 8031e84:	e036      	b.n	8031ef4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8031e86:	6879      	ldr	r1, [r7, #4]
 8031e88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8031e8c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8031e90:	a31b      	add	r3, pc, #108	; (adr r3, 8031f00 <parse_number+0x188>)
 8031e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8031e9a:	f7fe fe43 	bl	8030b24 <__aeabi_dcmpge>
 8031e9e:	4603      	mov	r3, r0
 8031ea0:	2b00      	cmp	r3, #0
 8031ea2:	d004      	beq.n	8031eae <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8031ea4:	687b      	ldr	r3, [r7, #4]
 8031ea6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8031eaa:	615a      	str	r2, [r3, #20]
 8031eac:	e015      	b.n	8031eda <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8031eae:	f04f 0200 	mov.w	r2, #0
 8031eb2:	4b16      	ldr	r3, [pc, #88]	; (8031f0c <parse_number+0x194>)
 8031eb4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8031eb8:	f7fe fe2a 	bl	8030b10 <__aeabi_dcmple>
 8031ebc:	4603      	mov	r3, r0
 8031ebe:	2b00      	cmp	r3, #0
 8031ec0:	d004      	beq.n	8031ecc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8031ec2:	687b      	ldr	r3, [r7, #4]
 8031ec4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8031ec8:	615a      	str	r2, [r3, #20]
 8031eca:	e006      	b.n	8031eda <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8031ecc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8031ed0:	f7fe fe52 	bl	8030b78 <__aeabi_d2iz>
 8031ed4:	4602      	mov	r2, r0
 8031ed6:	687b      	ldr	r3, [r7, #4]
 8031ed8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8031eda:	687b      	ldr	r3, [r7, #4]
 8031edc:	2208      	movs	r2, #8
 8031ede:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8031ee0:	683b      	ldr	r3, [r7, #0]
 8031ee2:	689b      	ldr	r3, [r3, #8]
 8031ee4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8031ee6:	f107 0208 	add.w	r2, r7, #8
 8031eea:	1a8a      	subs	r2, r1, r2
 8031eec:	441a      	add	r2, r3
 8031eee:	683b      	ldr	r3, [r7, #0]
 8031ef0:	609a      	str	r2, [r3, #8]
    return true;
 8031ef2:	2301      	movs	r3, #1
}
 8031ef4:	4618      	mov	r0, r3
 8031ef6:	3760      	adds	r7, #96	; 0x60
 8031ef8:	46bd      	mov	sp, r7
 8031efa:	bd80      	pop	{r7, pc}
 8031efc:	f3af 8000 	nop.w
 8031f00:	ffc00000 	.word	0xffc00000
 8031f04:	41dfffff 	.word	0x41dfffff
 8031f08:	04007fe5 	.word	0x04007fe5
 8031f0c:	c1e00000 	.word	0xc1e00000

08031f10 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8031f10:	b480      	push	{r7}
 8031f12:	b085      	sub	sp, #20
 8031f14:	af00      	add	r7, sp, #0
 8031f16:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8031f18:	2300      	movs	r3, #0
 8031f1a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8031f1c:	2300      	movs	r3, #0
 8031f1e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8031f20:	2300      	movs	r3, #0
 8031f22:	60bb      	str	r3, [r7, #8]
 8031f24:	e04c      	b.n	8031fc0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8031f26:	687a      	ldr	r2, [r7, #4]
 8031f28:	68bb      	ldr	r3, [r7, #8]
 8031f2a:	4413      	add	r3, r2
 8031f2c:	781b      	ldrb	r3, [r3, #0]
 8031f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8031f30:	d90f      	bls.n	8031f52 <parse_hex4+0x42>
 8031f32:	687a      	ldr	r2, [r7, #4]
 8031f34:	68bb      	ldr	r3, [r7, #8]
 8031f36:	4413      	add	r3, r2
 8031f38:	781b      	ldrb	r3, [r3, #0]
 8031f3a:	2b39      	cmp	r3, #57	; 0x39
 8031f3c:	d809      	bhi.n	8031f52 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8031f3e:	687a      	ldr	r2, [r7, #4]
 8031f40:	68bb      	ldr	r3, [r7, #8]
 8031f42:	4413      	add	r3, r2
 8031f44:	781b      	ldrb	r3, [r3, #0]
 8031f46:	461a      	mov	r2, r3
 8031f48:	68fb      	ldr	r3, [r7, #12]
 8031f4a:	4413      	add	r3, r2
 8031f4c:	3b30      	subs	r3, #48	; 0x30
 8031f4e:	60fb      	str	r3, [r7, #12]
 8031f50:	e02d      	b.n	8031fae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8031f52:	687a      	ldr	r2, [r7, #4]
 8031f54:	68bb      	ldr	r3, [r7, #8]
 8031f56:	4413      	add	r3, r2
 8031f58:	781b      	ldrb	r3, [r3, #0]
 8031f5a:	2b40      	cmp	r3, #64	; 0x40
 8031f5c:	d90f      	bls.n	8031f7e <parse_hex4+0x6e>
 8031f5e:	687a      	ldr	r2, [r7, #4]
 8031f60:	68bb      	ldr	r3, [r7, #8]
 8031f62:	4413      	add	r3, r2
 8031f64:	781b      	ldrb	r3, [r3, #0]
 8031f66:	2b46      	cmp	r3, #70	; 0x46
 8031f68:	d809      	bhi.n	8031f7e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8031f6a:	687a      	ldr	r2, [r7, #4]
 8031f6c:	68bb      	ldr	r3, [r7, #8]
 8031f6e:	4413      	add	r3, r2
 8031f70:	781b      	ldrb	r3, [r3, #0]
 8031f72:	461a      	mov	r2, r3
 8031f74:	68fb      	ldr	r3, [r7, #12]
 8031f76:	4413      	add	r3, r2
 8031f78:	3b37      	subs	r3, #55	; 0x37
 8031f7a:	60fb      	str	r3, [r7, #12]
 8031f7c:	e017      	b.n	8031fae <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8031f7e:	687a      	ldr	r2, [r7, #4]
 8031f80:	68bb      	ldr	r3, [r7, #8]
 8031f82:	4413      	add	r3, r2
 8031f84:	781b      	ldrb	r3, [r3, #0]
 8031f86:	2b60      	cmp	r3, #96	; 0x60
 8031f88:	d90f      	bls.n	8031faa <parse_hex4+0x9a>
 8031f8a:	687a      	ldr	r2, [r7, #4]
 8031f8c:	68bb      	ldr	r3, [r7, #8]
 8031f8e:	4413      	add	r3, r2
 8031f90:	781b      	ldrb	r3, [r3, #0]
 8031f92:	2b66      	cmp	r3, #102	; 0x66
 8031f94:	d809      	bhi.n	8031faa <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8031f96:	687a      	ldr	r2, [r7, #4]
 8031f98:	68bb      	ldr	r3, [r7, #8]
 8031f9a:	4413      	add	r3, r2
 8031f9c:	781b      	ldrb	r3, [r3, #0]
 8031f9e:	461a      	mov	r2, r3
 8031fa0:	68fb      	ldr	r3, [r7, #12]
 8031fa2:	4413      	add	r3, r2
 8031fa4:	3b57      	subs	r3, #87	; 0x57
 8031fa6:	60fb      	str	r3, [r7, #12]
 8031fa8:	e001      	b.n	8031fae <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8031faa:	2300      	movs	r3, #0
 8031fac:	e00c      	b.n	8031fc8 <parse_hex4+0xb8>
        }

        if (i < 3)
 8031fae:	68bb      	ldr	r3, [r7, #8]
 8031fb0:	2b02      	cmp	r3, #2
 8031fb2:	d802      	bhi.n	8031fba <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8031fb4:	68fb      	ldr	r3, [r7, #12]
 8031fb6:	011b      	lsls	r3, r3, #4
 8031fb8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8031fba:	68bb      	ldr	r3, [r7, #8]
 8031fbc:	3301      	adds	r3, #1
 8031fbe:	60bb      	str	r3, [r7, #8]
 8031fc0:	68bb      	ldr	r3, [r7, #8]
 8031fc2:	2b03      	cmp	r3, #3
 8031fc4:	d9af      	bls.n	8031f26 <parse_hex4+0x16>
        }
    }

    return h;
 8031fc6:	68fb      	ldr	r3, [r7, #12]
}
 8031fc8:	4618      	mov	r0, r3
 8031fca:	3714      	adds	r7, #20
 8031fcc:	46bd      	mov	sp, r7
 8031fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fd2:	4770      	bx	lr

08031fd4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8031fd4:	b580      	push	{r7, lr}
 8031fd6:	b08a      	sub	sp, #40	; 0x28
 8031fd8:	af00      	add	r7, sp, #0
 8031fda:	60f8      	str	r0, [r7, #12]
 8031fdc:	60b9      	str	r1, [r7, #8]
 8031fde:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8031fe0:	2300      	movs	r3, #0
 8031fe2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8031fe4:	2300      	movs	r3, #0
 8031fe6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8031fe8:	68fb      	ldr	r3, [r7, #12]
 8031fea:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8031fec:	2300      	movs	r3, #0
 8031fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8031ff2:	2300      	movs	r3, #0
 8031ff4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8031ff8:	2300      	movs	r3, #0
 8031ffa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8031ffe:	2300      	movs	r3, #0
 8032000:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8032004:	68ba      	ldr	r2, [r7, #8]
 8032006:	69bb      	ldr	r3, [r7, #24]
 8032008:	1ad3      	subs	r3, r2, r3
 803200a:	2b05      	cmp	r3, #5
 803200c:	f340 80b7 	ble.w	803217e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8032010:	69bb      	ldr	r3, [r7, #24]
 8032012:	3302      	adds	r3, #2
 8032014:	4618      	mov	r0, r3
 8032016:	f7ff ff7b 	bl	8031f10 <parse_hex4>
 803201a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 803201c:	69fb      	ldr	r3, [r7, #28]
 803201e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8032022:	d304      	bcc.n	803202e <utf16_literal_to_utf8+0x5a>
 8032024:	69fb      	ldr	r3, [r7, #28]
 8032026:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 803202a:	f0c0 80aa 	bcc.w	8032182 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 803202e:	69fb      	ldr	r3, [r7, #28]
 8032030:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8032034:	d337      	bcc.n	80320a6 <utf16_literal_to_utf8+0xd2>
 8032036:	69fb      	ldr	r3, [r7, #28]
 8032038:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 803203c:	d233      	bcs.n	80320a6 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 803203e:	69bb      	ldr	r3, [r7, #24]
 8032040:	3306      	adds	r3, #6
 8032042:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8032044:	2300      	movs	r3, #0
 8032046:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8032048:	230c      	movs	r3, #12
 803204a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 803204e:	68ba      	ldr	r2, [r7, #8]
 8032050:	697b      	ldr	r3, [r7, #20]
 8032052:	1ad3      	subs	r3, r2, r3
 8032054:	2b05      	cmp	r3, #5
 8032056:	f340 8096 	ble.w	8032186 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 803205a:	697b      	ldr	r3, [r7, #20]
 803205c:	781b      	ldrb	r3, [r3, #0]
 803205e:	2b5c      	cmp	r3, #92	; 0x5c
 8032060:	f040 8093 	bne.w	803218a <utf16_literal_to_utf8+0x1b6>
 8032064:	697b      	ldr	r3, [r7, #20]
 8032066:	3301      	adds	r3, #1
 8032068:	781b      	ldrb	r3, [r3, #0]
 803206a:	2b75      	cmp	r3, #117	; 0x75
 803206c:	f040 808d 	bne.w	803218a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8032070:	697b      	ldr	r3, [r7, #20]
 8032072:	3302      	adds	r3, #2
 8032074:	4618      	mov	r0, r3
 8032076:	f7ff ff4b 	bl	8031f10 <parse_hex4>
 803207a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 803207c:	693b      	ldr	r3, [r7, #16]
 803207e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8032082:	f0c0 8084 	bcc.w	803218e <utf16_literal_to_utf8+0x1ba>
 8032086:	693b      	ldr	r3, [r7, #16]
 8032088:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 803208c:	d27f      	bcs.n	803218e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 803208e:	69fb      	ldr	r3, [r7, #28]
 8032090:	029a      	lsls	r2, r3, #10
 8032092:	4b43      	ldr	r3, [pc, #268]	; (80321a0 <utf16_literal_to_utf8+0x1cc>)
 8032094:	4013      	ands	r3, r2
 8032096:	693a      	ldr	r2, [r7, #16]
 8032098:	f3c2 0209 	ubfx	r2, r2, #0, #10
 803209c:	4313      	orrs	r3, r2
 803209e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80320a2:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80320a4:	e004      	b.n	80320b0 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80320a6:	2306      	movs	r3, #6
 80320a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80320ac:	69fb      	ldr	r3, [r7, #28]
 80320ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80320b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80320b2:	2b7f      	cmp	r3, #127	; 0x7f
 80320b4:	d803      	bhi.n	80320be <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80320b6:	2301      	movs	r3, #1
 80320b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80320bc:	e01f      	b.n	80320fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 80320be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80320c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80320c4:	d206      	bcs.n	80320d4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80320c6:	2302      	movs	r3, #2
 80320c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80320cc:	23c0      	movs	r3, #192	; 0xc0
 80320ce:	f887 3020 	strb.w	r3, [r7, #32]
 80320d2:	e014      	b.n	80320fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80320d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80320d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80320da:	d206      	bcs.n	80320ea <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80320dc:	2303      	movs	r3, #3
 80320de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80320e2:	23e0      	movs	r3, #224	; 0xe0
 80320e4:	f887 3020 	strb.w	r3, [r7, #32]
 80320e8:	e009      	b.n	80320fe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80320ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80320ec:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80320f0:	d24f      	bcs.n	8032192 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80320f2:	2304      	movs	r3, #4
 80320f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80320f8:	23f0      	movs	r3, #240	; 0xf0
 80320fa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80320fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8032102:	3b01      	subs	r3, #1
 8032104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8032108:	e015      	b.n	8032136 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 803210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803210c:	b2db      	uxtb	r3, r3
 803210e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032112:	b2da      	uxtb	r2, r3
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	6819      	ldr	r1, [r3, #0]
 8032118:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 803211c:	440b      	add	r3, r1
 803211e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8032122:	b2d2      	uxtb	r2, r2
 8032124:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8032126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032128:	099b      	lsrs	r3, r3, #6
 803212a:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 803212c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8032130:	3b01      	subs	r3, #1
 8032132:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8032136:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 803213a:	2b00      	cmp	r3, #0
 803213c:	d1e5      	bne.n	803210a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 803213e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8032142:	2b01      	cmp	r3, #1
 8032144:	d909      	bls.n	803215a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8032146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032148:	b2d9      	uxtb	r1, r3
 803214a:	687b      	ldr	r3, [r7, #4]
 803214c:	681b      	ldr	r3, [r3, #0]
 803214e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8032152:	430a      	orrs	r2, r1
 8032154:	b2d2      	uxtb	r2, r2
 8032156:	701a      	strb	r2, [r3, #0]
 8032158:	e007      	b.n	803216a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 803215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803215c:	b2da      	uxtb	r2, r3
 803215e:	687b      	ldr	r3, [r7, #4]
 8032160:	681b      	ldr	r3, [r3, #0]
 8032162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8032166:	b2d2      	uxtb	r2, r2
 8032168:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 803216a:	687b      	ldr	r3, [r7, #4]
 803216c:	681a      	ldr	r2, [r3, #0]
 803216e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8032172:	441a      	add	r2, r3
 8032174:	687b      	ldr	r3, [r7, #4]
 8032176:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8032178:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 803217c:	e00b      	b.n	8032196 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 803217e:	bf00      	nop
 8032180:	e008      	b.n	8032194 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8032182:	bf00      	nop
 8032184:	e006      	b.n	8032194 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8032186:	bf00      	nop
 8032188:	e004      	b.n	8032194 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 803218a:	bf00      	nop
 803218c:	e002      	b.n	8032194 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 803218e:	bf00      	nop
 8032190:	e000      	b.n	8032194 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8032192:	bf00      	nop

fail:
    return 0;
 8032194:	2300      	movs	r3, #0
}
 8032196:	4618      	mov	r0, r3
 8032198:	3728      	adds	r7, #40	; 0x28
 803219a:	46bd      	mov	sp, r7
 803219c:	bd80      	pop	{r7, pc}
 803219e:	bf00      	nop
 80321a0:	000ffc00 	.word	0x000ffc00

080321a4 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80321a4:	b580      	push	{r7, lr}
 80321a6:	b08a      	sub	sp, #40	; 0x28
 80321a8:	af00      	add	r7, sp, #0
 80321aa:	6078      	str	r0, [r7, #4]
 80321ac:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80321ae:	683b      	ldr	r3, [r7, #0]
 80321b0:	681a      	ldr	r2, [r3, #0]
 80321b2:	683b      	ldr	r3, [r7, #0]
 80321b4:	689b      	ldr	r3, [r3, #8]
 80321b6:	3301      	adds	r3, #1
 80321b8:	4413      	add	r3, r2
 80321ba:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 80321bc:	683b      	ldr	r3, [r7, #0]
 80321be:	681a      	ldr	r2, [r3, #0]
 80321c0:	683b      	ldr	r3, [r7, #0]
 80321c2:	689b      	ldr	r3, [r3, #8]
 80321c4:	3301      	adds	r3, #1
 80321c6:	4413      	add	r3, r2
 80321c8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80321ca:	2300      	movs	r3, #0
 80321cc:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80321ce:	2300      	movs	r3, #0
 80321d0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80321d2:	683b      	ldr	r3, [r7, #0]
 80321d4:	681a      	ldr	r2, [r3, #0]
 80321d6:	683b      	ldr	r3, [r7, #0]
 80321d8:	689b      	ldr	r3, [r3, #8]
 80321da:	4413      	add	r3, r2
 80321dc:	781b      	ldrb	r3, [r3, #0]
 80321de:	2b22      	cmp	r3, #34	; 0x22
 80321e0:	f040 8103 	bne.w	80323ea <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80321e4:	2300      	movs	r3, #0
 80321e6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80321e8:	2300      	movs	r3, #0
 80321ea:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80321ec:	e017      	b.n	803221e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80321ee:	6a3b      	ldr	r3, [r7, #32]
 80321f0:	781b      	ldrb	r3, [r3, #0]
 80321f2:	2b5c      	cmp	r3, #92	; 0x5c
 80321f4:	d110      	bne.n	8032218 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80321f6:	6a3b      	ldr	r3, [r7, #32]
 80321f8:	1c5a      	adds	r2, r3, #1
 80321fa:	683b      	ldr	r3, [r7, #0]
 80321fc:	681b      	ldr	r3, [r3, #0]
 80321fe:	1ad3      	subs	r3, r2, r3
 8032200:	461a      	mov	r2, r3
 8032202:	683b      	ldr	r3, [r7, #0]
 8032204:	685b      	ldr	r3, [r3, #4]
 8032206:	429a      	cmp	r2, r3
 8032208:	f080 80f1 	bcs.w	80323ee <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 803220c:	69bb      	ldr	r3, [r7, #24]
 803220e:	3301      	adds	r3, #1
 8032210:	61bb      	str	r3, [r7, #24]
                input_end++;
 8032212:	6a3b      	ldr	r3, [r7, #32]
 8032214:	3301      	adds	r3, #1
 8032216:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8032218:	6a3b      	ldr	r3, [r7, #32]
 803221a:	3301      	adds	r3, #1
 803221c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 803221e:	683b      	ldr	r3, [r7, #0]
 8032220:	681b      	ldr	r3, [r3, #0]
 8032222:	6a3a      	ldr	r2, [r7, #32]
 8032224:	1ad3      	subs	r3, r2, r3
 8032226:	461a      	mov	r2, r3
 8032228:	683b      	ldr	r3, [r7, #0]
 803222a:	685b      	ldr	r3, [r3, #4]
 803222c:	429a      	cmp	r2, r3
 803222e:	d203      	bcs.n	8032238 <parse_string+0x94>
 8032230:	6a3b      	ldr	r3, [r7, #32]
 8032232:	781b      	ldrb	r3, [r3, #0]
 8032234:	2b22      	cmp	r3, #34	; 0x22
 8032236:	d1da      	bne.n	80321ee <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8032238:	683b      	ldr	r3, [r7, #0]
 803223a:	681b      	ldr	r3, [r3, #0]
 803223c:	6a3a      	ldr	r2, [r7, #32]
 803223e:	1ad3      	subs	r3, r2, r3
 8032240:	461a      	mov	r2, r3
 8032242:	683b      	ldr	r3, [r7, #0]
 8032244:	685b      	ldr	r3, [r3, #4]
 8032246:	429a      	cmp	r2, r3
 8032248:	f080 80d3 	bcs.w	80323f2 <parse_string+0x24e>
 803224c:	6a3b      	ldr	r3, [r7, #32]
 803224e:	781b      	ldrb	r3, [r3, #0]
 8032250:	2b22      	cmp	r3, #34	; 0x22
 8032252:	f040 80ce 	bne.w	80323f2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8032256:	683b      	ldr	r3, [r7, #0]
 8032258:	681a      	ldr	r2, [r3, #0]
 803225a:	683b      	ldr	r3, [r7, #0]
 803225c:	689b      	ldr	r3, [r3, #8]
 803225e:	4413      	add	r3, r2
 8032260:	6a3a      	ldr	r2, [r7, #32]
 8032262:	1ad3      	subs	r3, r2, r3
 8032264:	461a      	mov	r2, r3
 8032266:	69bb      	ldr	r3, [r7, #24]
 8032268:	1ad3      	subs	r3, r2, r3
 803226a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 803226c:	683b      	ldr	r3, [r7, #0]
 803226e:	691b      	ldr	r3, [r3, #16]
 8032270:	693a      	ldr	r2, [r7, #16]
 8032272:	3201      	adds	r2, #1
 8032274:	4610      	mov	r0, r2
 8032276:	4798      	blx	r3
 8032278:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 803227a:	69fb      	ldr	r3, [r7, #28]
 803227c:	2b00      	cmp	r3, #0
 803227e:	f000 80ba 	beq.w	80323f6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8032282:	69fb      	ldr	r3, [r7, #28]
 8032284:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8032286:	e094      	b.n	80323b2 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8032288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803228a:	781b      	ldrb	r3, [r3, #0]
 803228c:	2b5c      	cmp	r3, #92	; 0x5c
 803228e:	d008      	beq.n	80322a2 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8032290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032292:	1c53      	adds	r3, r2, #1
 8032294:	627b      	str	r3, [r7, #36]	; 0x24
 8032296:	68fb      	ldr	r3, [r7, #12]
 8032298:	1c59      	adds	r1, r3, #1
 803229a:	60f9      	str	r1, [r7, #12]
 803229c:	7812      	ldrb	r2, [r2, #0]
 803229e:	701a      	strb	r2, [r3, #0]
 80322a0:	e087      	b.n	80323b2 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80322a2:	2302      	movs	r3, #2
 80322a4:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80322a6:	6a3a      	ldr	r2, [r7, #32]
 80322a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80322aa:	1ad3      	subs	r3, r2, r3
 80322ac:	2b00      	cmp	r3, #0
 80322ae:	f340 80a4 	ble.w	80323fa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80322b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80322b4:	3301      	adds	r3, #1
 80322b6:	781b      	ldrb	r3, [r3, #0]
 80322b8:	2b75      	cmp	r3, #117	; 0x75
 80322ba:	f300 80a0 	bgt.w	80323fe <parse_string+0x25a>
 80322be:	2b5c      	cmp	r3, #92	; 0x5c
 80322c0:	da04      	bge.n	80322cc <parse_string+0x128>
 80322c2:	2b22      	cmp	r3, #34	; 0x22
 80322c4:	d05c      	beq.n	8032380 <parse_string+0x1dc>
 80322c6:	2b2f      	cmp	r3, #47	; 0x2f
 80322c8:	d05a      	beq.n	8032380 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 80322ca:	e098      	b.n	80323fe <parse_string+0x25a>
            switch (input_pointer[1])
 80322cc:	3b5c      	subs	r3, #92	; 0x5c
 80322ce:	2b19      	cmp	r3, #25
 80322d0:	f200 8095 	bhi.w	80323fe <parse_string+0x25a>
 80322d4:	a201      	add	r2, pc, #4	; (adr r2, 80322dc <parse_string+0x138>)
 80322d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80322da:	bf00      	nop
 80322dc:	08032381 	.word	0x08032381
 80322e0:	080323ff 	.word	0x080323ff
 80322e4:	080323ff 	.word	0x080323ff
 80322e8:	080323ff 	.word	0x080323ff
 80322ec:	080323ff 	.word	0x080323ff
 80322f0:	080323ff 	.word	0x080323ff
 80322f4:	08032345 	.word	0x08032345
 80322f8:	080323ff 	.word	0x080323ff
 80322fc:	080323ff 	.word	0x080323ff
 8032300:	080323ff 	.word	0x080323ff
 8032304:	08032351 	.word	0x08032351
 8032308:	080323ff 	.word	0x080323ff
 803230c:	080323ff 	.word	0x080323ff
 8032310:	080323ff 	.word	0x080323ff
 8032314:	080323ff 	.word	0x080323ff
 8032318:	080323ff 	.word	0x080323ff
 803231c:	080323ff 	.word	0x080323ff
 8032320:	080323ff 	.word	0x080323ff
 8032324:	0803235d 	.word	0x0803235d
 8032328:	080323ff 	.word	0x080323ff
 803232c:	080323ff 	.word	0x080323ff
 8032330:	080323ff 	.word	0x080323ff
 8032334:	08032369 	.word	0x08032369
 8032338:	080323ff 	.word	0x080323ff
 803233c:	08032375 	.word	0x08032375
 8032340:	08032391 	.word	0x08032391
                    *output_pointer++ = '\b';
 8032344:	68fb      	ldr	r3, [r7, #12]
 8032346:	1c5a      	adds	r2, r3, #1
 8032348:	60fa      	str	r2, [r7, #12]
 803234a:	2208      	movs	r2, #8
 803234c:	701a      	strb	r2, [r3, #0]
                    break;
 803234e:	e02c      	b.n	80323aa <parse_string+0x206>
                    *output_pointer++ = '\f';
 8032350:	68fb      	ldr	r3, [r7, #12]
 8032352:	1c5a      	adds	r2, r3, #1
 8032354:	60fa      	str	r2, [r7, #12]
 8032356:	220c      	movs	r2, #12
 8032358:	701a      	strb	r2, [r3, #0]
                    break;
 803235a:	e026      	b.n	80323aa <parse_string+0x206>
                    *output_pointer++ = '\n';
 803235c:	68fb      	ldr	r3, [r7, #12]
 803235e:	1c5a      	adds	r2, r3, #1
 8032360:	60fa      	str	r2, [r7, #12]
 8032362:	220a      	movs	r2, #10
 8032364:	701a      	strb	r2, [r3, #0]
                    break;
 8032366:	e020      	b.n	80323aa <parse_string+0x206>
                    *output_pointer++ = '\r';
 8032368:	68fb      	ldr	r3, [r7, #12]
 803236a:	1c5a      	adds	r2, r3, #1
 803236c:	60fa      	str	r2, [r7, #12]
 803236e:	220d      	movs	r2, #13
 8032370:	701a      	strb	r2, [r3, #0]
                    break;
 8032372:	e01a      	b.n	80323aa <parse_string+0x206>
                    *output_pointer++ = '\t';
 8032374:	68fb      	ldr	r3, [r7, #12]
 8032376:	1c5a      	adds	r2, r3, #1
 8032378:	60fa      	str	r2, [r7, #12]
 803237a:	2209      	movs	r2, #9
 803237c:	701a      	strb	r2, [r3, #0]
                    break;
 803237e:	e014      	b.n	80323aa <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8032380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032382:	1c5a      	adds	r2, r3, #1
 8032384:	68fb      	ldr	r3, [r7, #12]
 8032386:	1c59      	adds	r1, r3, #1
 8032388:	60f9      	str	r1, [r7, #12]
 803238a:	7812      	ldrb	r2, [r2, #0]
 803238c:	701a      	strb	r2, [r3, #0]
                    break;
 803238e:	e00c      	b.n	80323aa <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8032390:	f107 030c 	add.w	r3, r7, #12
 8032394:	461a      	mov	r2, r3
 8032396:	6a39      	ldr	r1, [r7, #32]
 8032398:	6a78      	ldr	r0, [r7, #36]	; 0x24
 803239a:	f7ff fe1b 	bl	8031fd4 <utf16_literal_to_utf8>
 803239e:	4603      	mov	r3, r0
 80323a0:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80323a2:	7dfb      	ldrb	r3, [r7, #23]
 80323a4:	2b00      	cmp	r3, #0
 80323a6:	d02c      	beq.n	8032402 <parse_string+0x25e>
                    break;
 80323a8:	bf00      	nop
            }
            input_pointer += sequence_length;
 80323aa:	7dfb      	ldrb	r3, [r7, #23]
 80323ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80323ae:	4413      	add	r3, r2
 80323b0:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80323b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80323b4:	6a3b      	ldr	r3, [r7, #32]
 80323b6:	429a      	cmp	r2, r3
 80323b8:	f4ff af66 	bcc.w	8032288 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80323bc:	68fb      	ldr	r3, [r7, #12]
 80323be:	2200      	movs	r2, #0
 80323c0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 80323c2:	687b      	ldr	r3, [r7, #4]
 80323c4:	2210      	movs	r2, #16
 80323c6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80323c8:	687b      	ldr	r3, [r7, #4]
 80323ca:	69fa      	ldr	r2, [r7, #28]
 80323cc:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80323ce:	683b      	ldr	r3, [r7, #0]
 80323d0:	681b      	ldr	r3, [r3, #0]
 80323d2:	6a3a      	ldr	r2, [r7, #32]
 80323d4:	1ad3      	subs	r3, r2, r3
 80323d6:	461a      	mov	r2, r3
 80323d8:	683b      	ldr	r3, [r7, #0]
 80323da:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80323dc:	683b      	ldr	r3, [r7, #0]
 80323de:	689b      	ldr	r3, [r3, #8]
 80323e0:	1c5a      	adds	r2, r3, #1
 80323e2:	683b      	ldr	r3, [r7, #0]
 80323e4:	609a      	str	r2, [r3, #8]

    return true;
 80323e6:	2301      	movs	r3, #1
 80323e8:	e01e      	b.n	8032428 <parse_string+0x284>
        goto fail;
 80323ea:	bf00      	nop
 80323ec:	e00a      	b.n	8032404 <parse_string+0x260>
                    goto fail;
 80323ee:	bf00      	nop
 80323f0:	e008      	b.n	8032404 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 80323f2:	bf00      	nop
 80323f4:	e006      	b.n	8032404 <parse_string+0x260>
            goto fail; /* allocation failure */
 80323f6:	bf00      	nop
 80323f8:	e004      	b.n	8032404 <parse_string+0x260>
                goto fail;
 80323fa:	bf00      	nop
 80323fc:	e002      	b.n	8032404 <parse_string+0x260>
                    goto fail;
 80323fe:	bf00      	nop
 8032400:	e000      	b.n	8032404 <parse_string+0x260>
                        goto fail;
 8032402:	bf00      	nop

fail:
    if (output != NULL)
 8032404:	69fb      	ldr	r3, [r7, #28]
 8032406:	2b00      	cmp	r3, #0
 8032408:	d003      	beq.n	8032412 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 803240a:	683b      	ldr	r3, [r7, #0]
 803240c:	695b      	ldr	r3, [r3, #20]
 803240e:	69f8      	ldr	r0, [r7, #28]
 8032410:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8032412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032414:	2b00      	cmp	r3, #0
 8032416:	d006      	beq.n	8032426 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8032418:	683b      	ldr	r3, [r7, #0]
 803241a:	681b      	ldr	r3, [r3, #0]
 803241c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803241e:	1ad3      	subs	r3, r2, r3
 8032420:	461a      	mov	r2, r3
 8032422:	683b      	ldr	r3, [r7, #0]
 8032424:	609a      	str	r2, [r3, #8]
    }

    return false;
 8032426:	2300      	movs	r3, #0
}
 8032428:	4618      	mov	r0, r3
 803242a:	3728      	adds	r7, #40	; 0x28
 803242c:	46bd      	mov	sp, r7
 803242e:	bd80      	pop	{r7, pc}

08032430 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8032430:	b480      	push	{r7}
 8032432:	b083      	sub	sp, #12
 8032434:	af00      	add	r7, sp, #0
 8032436:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8032438:	687b      	ldr	r3, [r7, #4]
 803243a:	2b00      	cmp	r3, #0
 803243c:	d003      	beq.n	8032446 <buffer_skip_whitespace+0x16>
 803243e:	687b      	ldr	r3, [r7, #4]
 8032440:	681b      	ldr	r3, [r3, #0]
 8032442:	2b00      	cmp	r3, #0
 8032444:	d101      	bne.n	803244a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8032446:	2300      	movs	r3, #0
 8032448:	e02c      	b.n	80324a4 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 803244a:	687b      	ldr	r3, [r7, #4]
 803244c:	2b00      	cmp	r3, #0
 803244e:	d005      	beq.n	803245c <buffer_skip_whitespace+0x2c>
 8032450:	687b      	ldr	r3, [r7, #4]
 8032452:	689a      	ldr	r2, [r3, #8]
 8032454:	687b      	ldr	r3, [r7, #4]
 8032456:	685b      	ldr	r3, [r3, #4]
 8032458:	429a      	cmp	r2, r3
 803245a:	d306      	bcc.n	803246a <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 803245c:	687b      	ldr	r3, [r7, #4]
 803245e:	e021      	b.n	80324a4 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8032460:	687b      	ldr	r3, [r7, #4]
 8032462:	689b      	ldr	r3, [r3, #8]
 8032464:	1c5a      	adds	r2, r3, #1
 8032466:	687b      	ldr	r3, [r7, #4]
 8032468:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 803246a:	687b      	ldr	r3, [r7, #4]
 803246c:	2b00      	cmp	r3, #0
 803246e:	d00d      	beq.n	803248c <buffer_skip_whitespace+0x5c>
 8032470:	687b      	ldr	r3, [r7, #4]
 8032472:	689a      	ldr	r2, [r3, #8]
 8032474:	687b      	ldr	r3, [r7, #4]
 8032476:	685b      	ldr	r3, [r3, #4]
 8032478:	429a      	cmp	r2, r3
 803247a:	d207      	bcs.n	803248c <buffer_skip_whitespace+0x5c>
 803247c:	687b      	ldr	r3, [r7, #4]
 803247e:	681a      	ldr	r2, [r3, #0]
 8032480:	687b      	ldr	r3, [r7, #4]
 8032482:	689b      	ldr	r3, [r3, #8]
 8032484:	4413      	add	r3, r2
 8032486:	781b      	ldrb	r3, [r3, #0]
 8032488:	2b20      	cmp	r3, #32
 803248a:	d9e9      	bls.n	8032460 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 803248c:	687b      	ldr	r3, [r7, #4]
 803248e:	689a      	ldr	r2, [r3, #8]
 8032490:	687b      	ldr	r3, [r7, #4]
 8032492:	685b      	ldr	r3, [r3, #4]
 8032494:	429a      	cmp	r2, r3
 8032496:	d104      	bne.n	80324a2 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8032498:	687b      	ldr	r3, [r7, #4]
 803249a:	689b      	ldr	r3, [r3, #8]
 803249c:	1e5a      	subs	r2, r3, #1
 803249e:	687b      	ldr	r3, [r7, #4]
 80324a0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80324a2:	687b      	ldr	r3, [r7, #4]
}
 80324a4:	4618      	mov	r0, r3
 80324a6:	370c      	adds	r7, #12
 80324a8:	46bd      	mov	sp, r7
 80324aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324ae:	4770      	bx	lr

080324b0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80324b0:	b580      	push	{r7, lr}
 80324b2:	b082      	sub	sp, #8
 80324b4:	af00      	add	r7, sp, #0
 80324b6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80324b8:	687b      	ldr	r3, [r7, #4]
 80324ba:	2b00      	cmp	r3, #0
 80324bc:	d007      	beq.n	80324ce <skip_utf8_bom+0x1e>
 80324be:	687b      	ldr	r3, [r7, #4]
 80324c0:	681b      	ldr	r3, [r3, #0]
 80324c2:	2b00      	cmp	r3, #0
 80324c4:	d003      	beq.n	80324ce <skip_utf8_bom+0x1e>
 80324c6:	687b      	ldr	r3, [r7, #4]
 80324c8:	689b      	ldr	r3, [r3, #8]
 80324ca:	2b00      	cmp	r3, #0
 80324cc:	d001      	beq.n	80324d2 <skip_utf8_bom+0x22>
    {
        return NULL;
 80324ce:	2300      	movs	r3, #0
 80324d0:	e01c      	b.n	803250c <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80324d2:	687b      	ldr	r3, [r7, #4]
 80324d4:	2b00      	cmp	r3, #0
 80324d6:	d018      	beq.n	803250a <skip_utf8_bom+0x5a>
 80324d8:	687b      	ldr	r3, [r7, #4]
 80324da:	689b      	ldr	r3, [r3, #8]
 80324dc:	1d1a      	adds	r2, r3, #4
 80324de:	687b      	ldr	r3, [r7, #4]
 80324e0:	685b      	ldr	r3, [r3, #4]
 80324e2:	429a      	cmp	r2, r3
 80324e4:	d211      	bcs.n	803250a <skip_utf8_bom+0x5a>
 80324e6:	687b      	ldr	r3, [r7, #4]
 80324e8:	681a      	ldr	r2, [r3, #0]
 80324ea:	687b      	ldr	r3, [r7, #4]
 80324ec:	689b      	ldr	r3, [r3, #8]
 80324ee:	4413      	add	r3, r2
 80324f0:	2203      	movs	r2, #3
 80324f2:	4908      	ldr	r1, [pc, #32]	; (8032514 <skip_utf8_bom+0x64>)
 80324f4:	4618      	mov	r0, r3
 80324f6:	f005 fb7d 	bl	8037bf4 <strncmp>
 80324fa:	4603      	mov	r3, r0
 80324fc:	2b00      	cmp	r3, #0
 80324fe:	d104      	bne.n	803250a <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8032500:	687b      	ldr	r3, [r7, #4]
 8032502:	689b      	ldr	r3, [r3, #8]
 8032504:	1cda      	adds	r2, r3, #3
 8032506:	687b      	ldr	r3, [r7, #4]
 8032508:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 803250a:	687b      	ldr	r3, [r7, #4]
}
 803250c:	4618      	mov	r0, r3
 803250e:	3708      	adds	r7, #8
 8032510:	46bd      	mov	sp, r7
 8032512:	bd80      	pop	{r7, pc}
 8032514:	0803a90c 	.word	0x0803a90c

08032518 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8032518:	b580      	push	{r7, lr}
 803251a:	b086      	sub	sp, #24
 803251c:	af00      	add	r7, sp, #0
 803251e:	60f8      	str	r0, [r7, #12]
 8032520:	60b9      	str	r1, [r7, #8]
 8032522:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8032524:	68fb      	ldr	r3, [r7, #12]
 8032526:	2b00      	cmp	r3, #0
 8032528:	d101      	bne.n	803252e <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 803252a:	2300      	movs	r3, #0
 803252c:	e00c      	b.n	8032548 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 803252e:	68f8      	ldr	r0, [r7, #12]
 8032530:	f7fd feae 	bl	8030290 <strlen>
 8032534:	4603      	mov	r3, r0
 8032536:	3301      	adds	r3, #1
 8032538:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 803253a:	687b      	ldr	r3, [r7, #4]
 803253c:	68ba      	ldr	r2, [r7, #8]
 803253e:	6979      	ldr	r1, [r7, #20]
 8032540:	68f8      	ldr	r0, [r7, #12]
 8032542:	f000 f805 	bl	8032550 <cJSON_ParseWithLengthOpts>
 8032546:	4603      	mov	r3, r0
}
 8032548:	4618      	mov	r0, r3
 803254a:	3718      	adds	r7, #24
 803254c:	46bd      	mov	sp, r7
 803254e:	bd80      	pop	{r7, pc}

08032550 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8032550:	b580      	push	{r7, lr}
 8032552:	b08e      	sub	sp, #56	; 0x38
 8032554:	af00      	add	r7, sp, #0
 8032556:	60f8      	str	r0, [r7, #12]
 8032558:	60b9      	str	r1, [r7, #8]
 803255a:	607a      	str	r2, [r7, #4]
 803255c:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 803255e:	f107 0318 	add.w	r3, r7, #24
 8032562:	2200      	movs	r2, #0
 8032564:	601a      	str	r2, [r3, #0]
 8032566:	605a      	str	r2, [r3, #4]
 8032568:	609a      	str	r2, [r3, #8]
 803256a:	60da      	str	r2, [r3, #12]
 803256c:	611a      	str	r2, [r3, #16]
 803256e:	615a      	str	r2, [r3, #20]
 8032570:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8032572:	2300      	movs	r3, #0
 8032574:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8032576:	4b41      	ldr	r3, [pc, #260]	; (803267c <cJSON_ParseWithLengthOpts+0x12c>)
 8032578:	2200      	movs	r2, #0
 803257a:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 803257c:	4b3f      	ldr	r3, [pc, #252]	; (803267c <cJSON_ParseWithLengthOpts+0x12c>)
 803257e:	2200      	movs	r2, #0
 8032580:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8032582:	68fb      	ldr	r3, [r7, #12]
 8032584:	2b00      	cmp	r3, #0
 8032586:	d042      	beq.n	803260e <cJSON_ParseWithLengthOpts+0xbe>
 8032588:	68bb      	ldr	r3, [r7, #8]
 803258a:	2b00      	cmp	r3, #0
 803258c:	d03f      	beq.n	803260e <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 803258e:	68fb      	ldr	r3, [r7, #12]
 8032590:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8032592:	68bb      	ldr	r3, [r7, #8]
 8032594:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8032596:	2300      	movs	r3, #0
 8032598:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 803259a:	4a39      	ldr	r2, [pc, #228]	; (8032680 <cJSON_ParseWithLengthOpts+0x130>)
 803259c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80325a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80325a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80325a6:	4836      	ldr	r0, [pc, #216]	; (8032680 <cJSON_ParseWithLengthOpts+0x130>)
 80325a8:	f7ff fb7e 	bl	8031ca8 <cJSON_New_Item>
 80325ac:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80325ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80325b0:	2b00      	cmp	r3, #0
 80325b2:	d02e      	beq.n	8032612 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80325b4:	f107 0318 	add.w	r3, r7, #24
 80325b8:	4618      	mov	r0, r3
 80325ba:	f7ff ff79 	bl	80324b0 <skip_utf8_bom>
 80325be:	4603      	mov	r3, r0
 80325c0:	4618      	mov	r0, r3
 80325c2:	f7ff ff35 	bl	8032430 <buffer_skip_whitespace>
 80325c6:	4603      	mov	r3, r0
 80325c8:	4619      	mov	r1, r3
 80325ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80325cc:	f000 f868 	bl	80326a0 <parse_value>
 80325d0:	4603      	mov	r3, r0
 80325d2:	2b00      	cmp	r3, #0
 80325d4:	d01f      	beq.n	8032616 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80325d6:	683b      	ldr	r3, [r7, #0]
 80325d8:	2b00      	cmp	r3, #0
 80325da:	d00e      	beq.n	80325fa <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80325dc:	f107 0318 	add.w	r3, r7, #24
 80325e0:	4618      	mov	r0, r3
 80325e2:	f7ff ff25 	bl	8032430 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80325e6:	6a3a      	ldr	r2, [r7, #32]
 80325e8:	69fb      	ldr	r3, [r7, #28]
 80325ea:	429a      	cmp	r2, r3
 80325ec:	d215      	bcs.n	803261a <cJSON_ParseWithLengthOpts+0xca>
 80325ee:	69ba      	ldr	r2, [r7, #24]
 80325f0:	6a3b      	ldr	r3, [r7, #32]
 80325f2:	4413      	add	r3, r2
 80325f4:	781b      	ldrb	r3, [r3, #0]
 80325f6:	2b00      	cmp	r3, #0
 80325f8:	d10f      	bne.n	803261a <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80325fa:	687b      	ldr	r3, [r7, #4]
 80325fc:	2b00      	cmp	r3, #0
 80325fe:	d004      	beq.n	803260a <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8032600:	69ba      	ldr	r2, [r7, #24]
 8032602:	6a3b      	ldr	r3, [r7, #32]
 8032604:	441a      	add	r2, r3
 8032606:	687b      	ldr	r3, [r7, #4]
 8032608:	601a      	str	r2, [r3, #0]
    }

    return item;
 803260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803260c:	e031      	b.n	8032672 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 803260e:	bf00      	nop
 8032610:	e004      	b.n	803261c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8032612:	bf00      	nop
 8032614:	e002      	b.n	803261c <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8032616:	bf00      	nop
 8032618:	e000      	b.n	803261c <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 803261a:	bf00      	nop

fail:
    if (item != NULL)
 803261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803261e:	2b00      	cmp	r3, #0
 8032620:	d002      	beq.n	8032628 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8032622:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8032624:	f7ff fb56 	bl	8031cd4 <cJSON_Delete>
    }

    if (value != NULL)
 8032628:	68fb      	ldr	r3, [r7, #12]
 803262a:	2b00      	cmp	r3, #0
 803262c:	d020      	beq.n	8032670 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 803262e:	68fb      	ldr	r3, [r7, #12]
 8032630:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8032632:	2300      	movs	r3, #0
 8032634:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8032636:	6a3a      	ldr	r2, [r7, #32]
 8032638:	69fb      	ldr	r3, [r7, #28]
 803263a:	429a      	cmp	r2, r3
 803263c:	d202      	bcs.n	8032644 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 803263e:	6a3b      	ldr	r3, [r7, #32]
 8032640:	617b      	str	r3, [r7, #20]
 8032642:	e005      	b.n	8032650 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8032644:	69fb      	ldr	r3, [r7, #28]
 8032646:	2b00      	cmp	r3, #0
 8032648:	d002      	beq.n	8032650 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 803264a:	69fb      	ldr	r3, [r7, #28]
 803264c:	3b01      	subs	r3, #1
 803264e:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8032650:	687b      	ldr	r3, [r7, #4]
 8032652:	2b00      	cmp	r3, #0
 8032654:	d004      	beq.n	8032660 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8032656:	693a      	ldr	r2, [r7, #16]
 8032658:	697b      	ldr	r3, [r7, #20]
 803265a:	441a      	add	r2, r3
 803265c:	687b      	ldr	r3, [r7, #4]
 803265e:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8032660:	4b06      	ldr	r3, [pc, #24]	; (803267c <cJSON_ParseWithLengthOpts+0x12c>)
 8032662:	461a      	mov	r2, r3
 8032664:	f107 0310 	add.w	r3, r7, #16
 8032668:	e893 0003 	ldmia.w	r3, {r0, r1}
 803266c:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8032670:	2300      	movs	r3, #0
}
 8032672:	4618      	mov	r0, r3
 8032674:	3738      	adds	r7, #56	; 0x38
 8032676:	46bd      	mov	sp, r7
 8032678:	bd80      	pop	{r7, pc}
 803267a:	bf00      	nop
 803267c:	2000ca84 	.word	0x2000ca84
 8032680:	2000000c 	.word	0x2000000c

08032684 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8032684:	b580      	push	{r7, lr}
 8032686:	b082      	sub	sp, #8
 8032688:	af00      	add	r7, sp, #0
 803268a:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 803268c:	2200      	movs	r2, #0
 803268e:	2100      	movs	r1, #0
 8032690:	6878      	ldr	r0, [r7, #4]
 8032692:	f7ff ff41 	bl	8032518 <cJSON_ParseWithOpts>
 8032696:	4603      	mov	r3, r0
}
 8032698:	4618      	mov	r0, r3
 803269a:	3708      	adds	r7, #8
 803269c:	46bd      	mov	sp, r7
 803269e:	bd80      	pop	{r7, pc}

080326a0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80326a0:	b580      	push	{r7, lr}
 80326a2:	b082      	sub	sp, #8
 80326a4:	af00      	add	r7, sp, #0
 80326a6:	6078      	str	r0, [r7, #4]
 80326a8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80326aa:	683b      	ldr	r3, [r7, #0]
 80326ac:	2b00      	cmp	r3, #0
 80326ae:	d003      	beq.n	80326b8 <parse_value+0x18>
 80326b0:	683b      	ldr	r3, [r7, #0]
 80326b2:	681b      	ldr	r3, [r3, #0]
 80326b4:	2b00      	cmp	r3, #0
 80326b6:	d101      	bne.n	80326bc <parse_value+0x1c>
    {
        return false; /* no input */
 80326b8:	2300      	movs	r3, #0
 80326ba:	e0d2      	b.n	8032862 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80326bc:	683b      	ldr	r3, [r7, #0]
 80326be:	2b00      	cmp	r3, #0
 80326c0:	d01d      	beq.n	80326fe <parse_value+0x5e>
 80326c2:	683b      	ldr	r3, [r7, #0]
 80326c4:	689b      	ldr	r3, [r3, #8]
 80326c6:	1d1a      	adds	r2, r3, #4
 80326c8:	683b      	ldr	r3, [r7, #0]
 80326ca:	685b      	ldr	r3, [r3, #4]
 80326cc:	429a      	cmp	r2, r3
 80326ce:	d816      	bhi.n	80326fe <parse_value+0x5e>
 80326d0:	683b      	ldr	r3, [r7, #0]
 80326d2:	681a      	ldr	r2, [r3, #0]
 80326d4:	683b      	ldr	r3, [r7, #0]
 80326d6:	689b      	ldr	r3, [r3, #8]
 80326d8:	4413      	add	r3, r2
 80326da:	2204      	movs	r2, #4
 80326dc:	4963      	ldr	r1, [pc, #396]	; (803286c <parse_value+0x1cc>)
 80326de:	4618      	mov	r0, r3
 80326e0:	f005 fa88 	bl	8037bf4 <strncmp>
 80326e4:	4603      	mov	r3, r0
 80326e6:	2b00      	cmp	r3, #0
 80326e8:	d109      	bne.n	80326fe <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80326ea:	687b      	ldr	r3, [r7, #4]
 80326ec:	2204      	movs	r2, #4
 80326ee:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 80326f0:	683b      	ldr	r3, [r7, #0]
 80326f2:	689b      	ldr	r3, [r3, #8]
 80326f4:	1d1a      	adds	r2, r3, #4
 80326f6:	683b      	ldr	r3, [r7, #0]
 80326f8:	609a      	str	r2, [r3, #8]
        return true;
 80326fa:	2301      	movs	r3, #1
 80326fc:	e0b1      	b.n	8032862 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80326fe:	683b      	ldr	r3, [r7, #0]
 8032700:	2b00      	cmp	r3, #0
 8032702:	d01d      	beq.n	8032740 <parse_value+0xa0>
 8032704:	683b      	ldr	r3, [r7, #0]
 8032706:	689b      	ldr	r3, [r3, #8]
 8032708:	1d5a      	adds	r2, r3, #5
 803270a:	683b      	ldr	r3, [r7, #0]
 803270c:	685b      	ldr	r3, [r3, #4]
 803270e:	429a      	cmp	r2, r3
 8032710:	d816      	bhi.n	8032740 <parse_value+0xa0>
 8032712:	683b      	ldr	r3, [r7, #0]
 8032714:	681a      	ldr	r2, [r3, #0]
 8032716:	683b      	ldr	r3, [r7, #0]
 8032718:	689b      	ldr	r3, [r3, #8]
 803271a:	4413      	add	r3, r2
 803271c:	2205      	movs	r2, #5
 803271e:	4954      	ldr	r1, [pc, #336]	; (8032870 <parse_value+0x1d0>)
 8032720:	4618      	mov	r0, r3
 8032722:	f005 fa67 	bl	8037bf4 <strncmp>
 8032726:	4603      	mov	r3, r0
 8032728:	2b00      	cmp	r3, #0
 803272a:	d109      	bne.n	8032740 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 803272c:	687b      	ldr	r3, [r7, #4]
 803272e:	2201      	movs	r2, #1
 8032730:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8032732:	683b      	ldr	r3, [r7, #0]
 8032734:	689b      	ldr	r3, [r3, #8]
 8032736:	1d5a      	adds	r2, r3, #5
 8032738:	683b      	ldr	r3, [r7, #0]
 803273a:	609a      	str	r2, [r3, #8]
        return true;
 803273c:	2301      	movs	r3, #1
 803273e:	e090      	b.n	8032862 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8032740:	683b      	ldr	r3, [r7, #0]
 8032742:	2b00      	cmp	r3, #0
 8032744:	d020      	beq.n	8032788 <parse_value+0xe8>
 8032746:	683b      	ldr	r3, [r7, #0]
 8032748:	689b      	ldr	r3, [r3, #8]
 803274a:	1d1a      	adds	r2, r3, #4
 803274c:	683b      	ldr	r3, [r7, #0]
 803274e:	685b      	ldr	r3, [r3, #4]
 8032750:	429a      	cmp	r2, r3
 8032752:	d819      	bhi.n	8032788 <parse_value+0xe8>
 8032754:	683b      	ldr	r3, [r7, #0]
 8032756:	681a      	ldr	r2, [r3, #0]
 8032758:	683b      	ldr	r3, [r7, #0]
 803275a:	689b      	ldr	r3, [r3, #8]
 803275c:	4413      	add	r3, r2
 803275e:	2204      	movs	r2, #4
 8032760:	4944      	ldr	r1, [pc, #272]	; (8032874 <parse_value+0x1d4>)
 8032762:	4618      	mov	r0, r3
 8032764:	f005 fa46 	bl	8037bf4 <strncmp>
 8032768:	4603      	mov	r3, r0
 803276a:	2b00      	cmp	r3, #0
 803276c:	d10c      	bne.n	8032788 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 803276e:	687b      	ldr	r3, [r7, #4]
 8032770:	2202      	movs	r2, #2
 8032772:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8032774:	687b      	ldr	r3, [r7, #4]
 8032776:	2201      	movs	r2, #1
 8032778:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 803277a:	683b      	ldr	r3, [r7, #0]
 803277c:	689b      	ldr	r3, [r3, #8]
 803277e:	1d1a      	adds	r2, r3, #4
 8032780:	683b      	ldr	r3, [r7, #0]
 8032782:	609a      	str	r2, [r3, #8]
        return true;
 8032784:	2301      	movs	r3, #1
 8032786:	e06c      	b.n	8032862 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8032788:	683b      	ldr	r3, [r7, #0]
 803278a:	2b00      	cmp	r3, #0
 803278c:	d013      	beq.n	80327b6 <parse_value+0x116>
 803278e:	683b      	ldr	r3, [r7, #0]
 8032790:	689a      	ldr	r2, [r3, #8]
 8032792:	683b      	ldr	r3, [r7, #0]
 8032794:	685b      	ldr	r3, [r3, #4]
 8032796:	429a      	cmp	r2, r3
 8032798:	d20d      	bcs.n	80327b6 <parse_value+0x116>
 803279a:	683b      	ldr	r3, [r7, #0]
 803279c:	681a      	ldr	r2, [r3, #0]
 803279e:	683b      	ldr	r3, [r7, #0]
 80327a0:	689b      	ldr	r3, [r3, #8]
 80327a2:	4413      	add	r3, r2
 80327a4:	781b      	ldrb	r3, [r3, #0]
 80327a6:	2b22      	cmp	r3, #34	; 0x22
 80327a8:	d105      	bne.n	80327b6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80327aa:	6839      	ldr	r1, [r7, #0]
 80327ac:	6878      	ldr	r0, [r7, #4]
 80327ae:	f7ff fcf9 	bl	80321a4 <parse_string>
 80327b2:	4603      	mov	r3, r0
 80327b4:	e055      	b.n	8032862 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80327b6:	683b      	ldr	r3, [r7, #0]
 80327b8:	2b00      	cmp	r3, #0
 80327ba:	d023      	beq.n	8032804 <parse_value+0x164>
 80327bc:	683b      	ldr	r3, [r7, #0]
 80327be:	689a      	ldr	r2, [r3, #8]
 80327c0:	683b      	ldr	r3, [r7, #0]
 80327c2:	685b      	ldr	r3, [r3, #4]
 80327c4:	429a      	cmp	r2, r3
 80327c6:	d21d      	bcs.n	8032804 <parse_value+0x164>
 80327c8:	683b      	ldr	r3, [r7, #0]
 80327ca:	681a      	ldr	r2, [r3, #0]
 80327cc:	683b      	ldr	r3, [r7, #0]
 80327ce:	689b      	ldr	r3, [r3, #8]
 80327d0:	4413      	add	r3, r2
 80327d2:	781b      	ldrb	r3, [r3, #0]
 80327d4:	2b2d      	cmp	r3, #45	; 0x2d
 80327d6:	d00f      	beq.n	80327f8 <parse_value+0x158>
 80327d8:	683b      	ldr	r3, [r7, #0]
 80327da:	681a      	ldr	r2, [r3, #0]
 80327dc:	683b      	ldr	r3, [r7, #0]
 80327de:	689b      	ldr	r3, [r3, #8]
 80327e0:	4413      	add	r3, r2
 80327e2:	781b      	ldrb	r3, [r3, #0]
 80327e4:	2b2f      	cmp	r3, #47	; 0x2f
 80327e6:	d90d      	bls.n	8032804 <parse_value+0x164>
 80327e8:	683b      	ldr	r3, [r7, #0]
 80327ea:	681a      	ldr	r2, [r3, #0]
 80327ec:	683b      	ldr	r3, [r7, #0]
 80327ee:	689b      	ldr	r3, [r3, #8]
 80327f0:	4413      	add	r3, r2
 80327f2:	781b      	ldrb	r3, [r3, #0]
 80327f4:	2b39      	cmp	r3, #57	; 0x39
 80327f6:	d805      	bhi.n	8032804 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80327f8:	6839      	ldr	r1, [r7, #0]
 80327fa:	6878      	ldr	r0, [r7, #4]
 80327fc:	f7ff fabc 	bl	8031d78 <parse_number>
 8032800:	4603      	mov	r3, r0
 8032802:	e02e      	b.n	8032862 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8032804:	683b      	ldr	r3, [r7, #0]
 8032806:	2b00      	cmp	r3, #0
 8032808:	d013      	beq.n	8032832 <parse_value+0x192>
 803280a:	683b      	ldr	r3, [r7, #0]
 803280c:	689a      	ldr	r2, [r3, #8]
 803280e:	683b      	ldr	r3, [r7, #0]
 8032810:	685b      	ldr	r3, [r3, #4]
 8032812:	429a      	cmp	r2, r3
 8032814:	d20d      	bcs.n	8032832 <parse_value+0x192>
 8032816:	683b      	ldr	r3, [r7, #0]
 8032818:	681a      	ldr	r2, [r3, #0]
 803281a:	683b      	ldr	r3, [r7, #0]
 803281c:	689b      	ldr	r3, [r3, #8]
 803281e:	4413      	add	r3, r2
 8032820:	781b      	ldrb	r3, [r3, #0]
 8032822:	2b5b      	cmp	r3, #91	; 0x5b
 8032824:	d105      	bne.n	8032832 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8032826:	6839      	ldr	r1, [r7, #0]
 8032828:	6878      	ldr	r0, [r7, #4]
 803282a:	f000 f825 	bl	8032878 <parse_array>
 803282e:	4603      	mov	r3, r0
 8032830:	e017      	b.n	8032862 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8032832:	683b      	ldr	r3, [r7, #0]
 8032834:	2b00      	cmp	r3, #0
 8032836:	d013      	beq.n	8032860 <parse_value+0x1c0>
 8032838:	683b      	ldr	r3, [r7, #0]
 803283a:	689a      	ldr	r2, [r3, #8]
 803283c:	683b      	ldr	r3, [r7, #0]
 803283e:	685b      	ldr	r3, [r3, #4]
 8032840:	429a      	cmp	r2, r3
 8032842:	d20d      	bcs.n	8032860 <parse_value+0x1c0>
 8032844:	683b      	ldr	r3, [r7, #0]
 8032846:	681a      	ldr	r2, [r3, #0]
 8032848:	683b      	ldr	r3, [r7, #0]
 803284a:	689b      	ldr	r3, [r3, #8]
 803284c:	4413      	add	r3, r2
 803284e:	781b      	ldrb	r3, [r3, #0]
 8032850:	2b7b      	cmp	r3, #123	; 0x7b
 8032852:	d105      	bne.n	8032860 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8032854:	6839      	ldr	r1, [r7, #0]
 8032856:	6878      	ldr	r0, [r7, #4]
 8032858:	f000 f8d2 	bl	8032a00 <parse_object>
 803285c:	4603      	mov	r3, r0
 803285e:	e000      	b.n	8032862 <parse_value+0x1c2>
    }

    return false;
 8032860:	2300      	movs	r3, #0
}
 8032862:	4618      	mov	r0, r3
 8032864:	3708      	adds	r7, #8
 8032866:	46bd      	mov	sp, r7
 8032868:	bd80      	pop	{r7, pc}
 803286a:	bf00      	nop
 803286c:	0803a8e0 	.word	0x0803a8e0
 8032870:	0803a910 	.word	0x0803a910
 8032874:	0803a918 	.word	0x0803a918

08032878 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8032878:	b580      	push	{r7, lr}
 803287a:	b086      	sub	sp, #24
 803287c:	af00      	add	r7, sp, #0
 803287e:	6078      	str	r0, [r7, #4]
 8032880:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8032882:	2300      	movs	r3, #0
 8032884:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8032886:	2300      	movs	r3, #0
 8032888:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 803288a:	683b      	ldr	r3, [r7, #0]
 803288c:	68db      	ldr	r3, [r3, #12]
 803288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8032892:	d301      	bcc.n	8032898 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8032894:	2300      	movs	r3, #0
 8032896:	e0af      	b.n	80329f8 <parse_array+0x180>
    }
    input_buffer->depth++;
 8032898:	683b      	ldr	r3, [r7, #0]
 803289a:	68db      	ldr	r3, [r3, #12]
 803289c:	1c5a      	adds	r2, r3, #1
 803289e:	683b      	ldr	r3, [r7, #0]
 80328a0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80328a2:	683b      	ldr	r3, [r7, #0]
 80328a4:	681a      	ldr	r2, [r3, #0]
 80328a6:	683b      	ldr	r3, [r7, #0]
 80328a8:	689b      	ldr	r3, [r3, #8]
 80328aa:	4413      	add	r3, r2
 80328ac:	781b      	ldrb	r3, [r3, #0]
 80328ae:	2b5b      	cmp	r3, #91	; 0x5b
 80328b0:	f040 8094 	bne.w	80329dc <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80328b4:	683b      	ldr	r3, [r7, #0]
 80328b6:	689b      	ldr	r3, [r3, #8]
 80328b8:	1c5a      	adds	r2, r3, #1
 80328ba:	683b      	ldr	r3, [r7, #0]
 80328bc:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80328be:	6838      	ldr	r0, [r7, #0]
 80328c0:	f7ff fdb6 	bl	8032430 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80328c4:	683b      	ldr	r3, [r7, #0]
 80328c6:	2b00      	cmp	r3, #0
 80328c8:	d00d      	beq.n	80328e6 <parse_array+0x6e>
 80328ca:	683b      	ldr	r3, [r7, #0]
 80328cc:	689a      	ldr	r2, [r3, #8]
 80328ce:	683b      	ldr	r3, [r7, #0]
 80328d0:	685b      	ldr	r3, [r3, #4]
 80328d2:	429a      	cmp	r2, r3
 80328d4:	d207      	bcs.n	80328e6 <parse_array+0x6e>
 80328d6:	683b      	ldr	r3, [r7, #0]
 80328d8:	681a      	ldr	r2, [r3, #0]
 80328da:	683b      	ldr	r3, [r7, #0]
 80328dc:	689b      	ldr	r3, [r3, #8]
 80328de:	4413      	add	r3, r2
 80328e0:	781b      	ldrb	r3, [r3, #0]
 80328e2:	2b5d      	cmp	r3, #93	; 0x5d
 80328e4:	d061      	beq.n	80329aa <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80328e6:	683b      	ldr	r3, [r7, #0]
 80328e8:	2b00      	cmp	r3, #0
 80328ea:	d005      	beq.n	80328f8 <parse_array+0x80>
 80328ec:	683b      	ldr	r3, [r7, #0]
 80328ee:	689a      	ldr	r2, [r3, #8]
 80328f0:	683b      	ldr	r3, [r7, #0]
 80328f2:	685b      	ldr	r3, [r3, #4]
 80328f4:	429a      	cmp	r2, r3
 80328f6:	d305      	bcc.n	8032904 <parse_array+0x8c>
    {
        input_buffer->offset--;
 80328f8:	683b      	ldr	r3, [r7, #0]
 80328fa:	689b      	ldr	r3, [r3, #8]
 80328fc:	1e5a      	subs	r2, r3, #1
 80328fe:	683b      	ldr	r3, [r7, #0]
 8032900:	609a      	str	r2, [r3, #8]
        goto fail;
 8032902:	e072      	b.n	80329ea <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8032904:	683b      	ldr	r3, [r7, #0]
 8032906:	689b      	ldr	r3, [r3, #8]
 8032908:	1e5a      	subs	r2, r3, #1
 803290a:	683b      	ldr	r3, [r7, #0]
 803290c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 803290e:	683b      	ldr	r3, [r7, #0]
 8032910:	3310      	adds	r3, #16
 8032912:	4618      	mov	r0, r3
 8032914:	f7ff f9c8 	bl	8031ca8 <cJSON_New_Item>
 8032918:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 803291a:	68fb      	ldr	r3, [r7, #12]
 803291c:	2b00      	cmp	r3, #0
 803291e:	d05f      	beq.n	80329e0 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8032920:	697b      	ldr	r3, [r7, #20]
 8032922:	2b00      	cmp	r3, #0
 8032924:	d104      	bne.n	8032930 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8032926:	68fb      	ldr	r3, [r7, #12]
 8032928:	617b      	str	r3, [r7, #20]
 803292a:	697b      	ldr	r3, [r7, #20]
 803292c:	613b      	str	r3, [r7, #16]
 803292e:	e007      	b.n	8032940 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8032930:	693b      	ldr	r3, [r7, #16]
 8032932:	68fa      	ldr	r2, [r7, #12]
 8032934:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8032936:	68fb      	ldr	r3, [r7, #12]
 8032938:	693a      	ldr	r2, [r7, #16]
 803293a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 803293c:	68fb      	ldr	r3, [r7, #12]
 803293e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8032940:	683b      	ldr	r3, [r7, #0]
 8032942:	689b      	ldr	r3, [r3, #8]
 8032944:	1c5a      	adds	r2, r3, #1
 8032946:	683b      	ldr	r3, [r7, #0]
 8032948:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 803294a:	6838      	ldr	r0, [r7, #0]
 803294c:	f7ff fd70 	bl	8032430 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8032950:	6839      	ldr	r1, [r7, #0]
 8032952:	6938      	ldr	r0, [r7, #16]
 8032954:	f7ff fea4 	bl	80326a0 <parse_value>
 8032958:	4603      	mov	r3, r0
 803295a:	2b00      	cmp	r3, #0
 803295c:	d042      	beq.n	80329e4 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 803295e:	6838      	ldr	r0, [r7, #0]
 8032960:	f7ff fd66 	bl	8032430 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8032964:	683b      	ldr	r3, [r7, #0]
 8032966:	2b00      	cmp	r3, #0
 8032968:	d00d      	beq.n	8032986 <parse_array+0x10e>
 803296a:	683b      	ldr	r3, [r7, #0]
 803296c:	689a      	ldr	r2, [r3, #8]
 803296e:	683b      	ldr	r3, [r7, #0]
 8032970:	685b      	ldr	r3, [r3, #4]
 8032972:	429a      	cmp	r2, r3
 8032974:	d207      	bcs.n	8032986 <parse_array+0x10e>
 8032976:	683b      	ldr	r3, [r7, #0]
 8032978:	681a      	ldr	r2, [r3, #0]
 803297a:	683b      	ldr	r3, [r7, #0]
 803297c:	689b      	ldr	r3, [r3, #8]
 803297e:	4413      	add	r3, r2
 8032980:	781b      	ldrb	r3, [r3, #0]
 8032982:	2b2c      	cmp	r3, #44	; 0x2c
 8032984:	d0c3      	beq.n	803290e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8032986:	683b      	ldr	r3, [r7, #0]
 8032988:	2b00      	cmp	r3, #0
 803298a:	d02d      	beq.n	80329e8 <parse_array+0x170>
 803298c:	683b      	ldr	r3, [r7, #0]
 803298e:	689a      	ldr	r2, [r3, #8]
 8032990:	683b      	ldr	r3, [r7, #0]
 8032992:	685b      	ldr	r3, [r3, #4]
 8032994:	429a      	cmp	r2, r3
 8032996:	d227      	bcs.n	80329e8 <parse_array+0x170>
 8032998:	683b      	ldr	r3, [r7, #0]
 803299a:	681a      	ldr	r2, [r3, #0]
 803299c:	683b      	ldr	r3, [r7, #0]
 803299e:	689b      	ldr	r3, [r3, #8]
 80329a0:	4413      	add	r3, r2
 80329a2:	781b      	ldrb	r3, [r3, #0]
 80329a4:	2b5d      	cmp	r3, #93	; 0x5d
 80329a6:	d11f      	bne.n	80329e8 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80329a8:	e000      	b.n	80329ac <parse_array+0x134>
        goto success;
 80329aa:	bf00      	nop
    input_buffer->depth--;
 80329ac:	683b      	ldr	r3, [r7, #0]
 80329ae:	68db      	ldr	r3, [r3, #12]
 80329b0:	1e5a      	subs	r2, r3, #1
 80329b2:	683b      	ldr	r3, [r7, #0]
 80329b4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80329b6:	697b      	ldr	r3, [r7, #20]
 80329b8:	2b00      	cmp	r3, #0
 80329ba:	d002      	beq.n	80329c2 <parse_array+0x14a>
        head->prev = current_item;
 80329bc:	697b      	ldr	r3, [r7, #20]
 80329be:	693a      	ldr	r2, [r7, #16]
 80329c0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80329c2:	687b      	ldr	r3, [r7, #4]
 80329c4:	2220      	movs	r2, #32
 80329c6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80329c8:	687b      	ldr	r3, [r7, #4]
 80329ca:	697a      	ldr	r2, [r7, #20]
 80329cc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80329ce:	683b      	ldr	r3, [r7, #0]
 80329d0:	689b      	ldr	r3, [r3, #8]
 80329d2:	1c5a      	adds	r2, r3, #1
 80329d4:	683b      	ldr	r3, [r7, #0]
 80329d6:	609a      	str	r2, [r3, #8]

    return true;
 80329d8:	2301      	movs	r3, #1
 80329da:	e00d      	b.n	80329f8 <parse_array+0x180>
        goto fail;
 80329dc:	bf00      	nop
 80329de:	e004      	b.n	80329ea <parse_array+0x172>
            goto fail; /* allocation failure */
 80329e0:	bf00      	nop
 80329e2:	e002      	b.n	80329ea <parse_array+0x172>
            goto fail; /* failed to parse value */
 80329e4:	bf00      	nop
 80329e6:	e000      	b.n	80329ea <parse_array+0x172>
        goto fail; /* expected end of array */
 80329e8:	bf00      	nop

fail:
    if (head != NULL)
 80329ea:	697b      	ldr	r3, [r7, #20]
 80329ec:	2b00      	cmp	r3, #0
 80329ee:	d002      	beq.n	80329f6 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 80329f0:	6978      	ldr	r0, [r7, #20]
 80329f2:	f7ff f96f 	bl	8031cd4 <cJSON_Delete>
    }

    return false;
 80329f6:	2300      	movs	r3, #0
}
 80329f8:	4618      	mov	r0, r3
 80329fa:	3718      	adds	r7, #24
 80329fc:	46bd      	mov	sp, r7
 80329fe:	bd80      	pop	{r7, pc}

08032a00 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8032a00:	b580      	push	{r7, lr}
 8032a02:	b086      	sub	sp, #24
 8032a04:	af00      	add	r7, sp, #0
 8032a06:	6078      	str	r0, [r7, #4]
 8032a08:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8032a0a:	2300      	movs	r3, #0
 8032a0c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8032a0e:	2300      	movs	r3, #0
 8032a10:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8032a12:	683b      	ldr	r3, [r7, #0]
 8032a14:	68db      	ldr	r3, [r3, #12]
 8032a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8032a1a:	d301      	bcc.n	8032a20 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8032a1c:	2300      	movs	r3, #0
 8032a1e:	e0ea      	b.n	8032bf6 <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8032a20:	683b      	ldr	r3, [r7, #0]
 8032a22:	68db      	ldr	r3, [r3, #12]
 8032a24:	1c5a      	adds	r2, r3, #1
 8032a26:	683b      	ldr	r3, [r7, #0]
 8032a28:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8032a2a:	683b      	ldr	r3, [r7, #0]
 8032a2c:	2b00      	cmp	r3, #0
 8032a2e:	f000 80d0 	beq.w	8032bd2 <parse_object+0x1d2>
 8032a32:	683b      	ldr	r3, [r7, #0]
 8032a34:	689a      	ldr	r2, [r3, #8]
 8032a36:	683b      	ldr	r3, [r7, #0]
 8032a38:	685b      	ldr	r3, [r3, #4]
 8032a3a:	429a      	cmp	r2, r3
 8032a3c:	f080 80c9 	bcs.w	8032bd2 <parse_object+0x1d2>
 8032a40:	683b      	ldr	r3, [r7, #0]
 8032a42:	681a      	ldr	r2, [r3, #0]
 8032a44:	683b      	ldr	r3, [r7, #0]
 8032a46:	689b      	ldr	r3, [r3, #8]
 8032a48:	4413      	add	r3, r2
 8032a4a:	781b      	ldrb	r3, [r3, #0]
 8032a4c:	2b7b      	cmp	r3, #123	; 0x7b
 8032a4e:	f040 80c0 	bne.w	8032bd2 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8032a52:	683b      	ldr	r3, [r7, #0]
 8032a54:	689b      	ldr	r3, [r3, #8]
 8032a56:	1c5a      	adds	r2, r3, #1
 8032a58:	683b      	ldr	r3, [r7, #0]
 8032a5a:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8032a5c:	6838      	ldr	r0, [r7, #0]
 8032a5e:	f7ff fce7 	bl	8032430 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8032a62:	683b      	ldr	r3, [r7, #0]
 8032a64:	2b00      	cmp	r3, #0
 8032a66:	d00e      	beq.n	8032a86 <parse_object+0x86>
 8032a68:	683b      	ldr	r3, [r7, #0]
 8032a6a:	689a      	ldr	r2, [r3, #8]
 8032a6c:	683b      	ldr	r3, [r7, #0]
 8032a6e:	685b      	ldr	r3, [r3, #4]
 8032a70:	429a      	cmp	r2, r3
 8032a72:	d208      	bcs.n	8032a86 <parse_object+0x86>
 8032a74:	683b      	ldr	r3, [r7, #0]
 8032a76:	681a      	ldr	r2, [r3, #0]
 8032a78:	683b      	ldr	r3, [r7, #0]
 8032a7a:	689b      	ldr	r3, [r3, #8]
 8032a7c:	4413      	add	r3, r2
 8032a7e:	781b      	ldrb	r3, [r3, #0]
 8032a80:	2b7d      	cmp	r3, #125	; 0x7d
 8032a82:	f000 808d 	beq.w	8032ba0 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8032a86:	683b      	ldr	r3, [r7, #0]
 8032a88:	2b00      	cmp	r3, #0
 8032a8a:	d005      	beq.n	8032a98 <parse_object+0x98>
 8032a8c:	683b      	ldr	r3, [r7, #0]
 8032a8e:	689a      	ldr	r2, [r3, #8]
 8032a90:	683b      	ldr	r3, [r7, #0]
 8032a92:	685b      	ldr	r3, [r3, #4]
 8032a94:	429a      	cmp	r2, r3
 8032a96:	d305      	bcc.n	8032aa4 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8032a98:	683b      	ldr	r3, [r7, #0]
 8032a9a:	689b      	ldr	r3, [r3, #8]
 8032a9c:	1e5a      	subs	r2, r3, #1
 8032a9e:	683b      	ldr	r3, [r7, #0]
 8032aa0:	609a      	str	r2, [r3, #8]
        goto fail;
 8032aa2:	e0a1      	b.n	8032be8 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8032aa4:	683b      	ldr	r3, [r7, #0]
 8032aa6:	689b      	ldr	r3, [r3, #8]
 8032aa8:	1e5a      	subs	r2, r3, #1
 8032aaa:	683b      	ldr	r3, [r7, #0]
 8032aac:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8032aae:	683b      	ldr	r3, [r7, #0]
 8032ab0:	3310      	adds	r3, #16
 8032ab2:	4618      	mov	r0, r3
 8032ab4:	f7ff f8f8 	bl	8031ca8 <cJSON_New_Item>
 8032ab8:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8032aba:	68fb      	ldr	r3, [r7, #12]
 8032abc:	2b00      	cmp	r3, #0
 8032abe:	f000 808a 	beq.w	8032bd6 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8032ac2:	697b      	ldr	r3, [r7, #20]
 8032ac4:	2b00      	cmp	r3, #0
 8032ac6:	d104      	bne.n	8032ad2 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8032ac8:	68fb      	ldr	r3, [r7, #12]
 8032aca:	617b      	str	r3, [r7, #20]
 8032acc:	697b      	ldr	r3, [r7, #20]
 8032ace:	613b      	str	r3, [r7, #16]
 8032ad0:	e007      	b.n	8032ae2 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8032ad2:	693b      	ldr	r3, [r7, #16]
 8032ad4:	68fa      	ldr	r2, [r7, #12]
 8032ad6:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8032ad8:	68fb      	ldr	r3, [r7, #12]
 8032ada:	693a      	ldr	r2, [r7, #16]
 8032adc:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8032ade:	68fb      	ldr	r3, [r7, #12]
 8032ae0:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8032ae2:	683b      	ldr	r3, [r7, #0]
 8032ae4:	689b      	ldr	r3, [r3, #8]
 8032ae6:	1c5a      	adds	r2, r3, #1
 8032ae8:	683b      	ldr	r3, [r7, #0]
 8032aea:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8032aec:	6838      	ldr	r0, [r7, #0]
 8032aee:	f7ff fc9f 	bl	8032430 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8032af2:	6839      	ldr	r1, [r7, #0]
 8032af4:	6938      	ldr	r0, [r7, #16]
 8032af6:	f7ff fb55 	bl	80321a4 <parse_string>
 8032afa:	4603      	mov	r3, r0
 8032afc:	2b00      	cmp	r3, #0
 8032afe:	d06c      	beq.n	8032bda <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8032b00:	6838      	ldr	r0, [r7, #0]
 8032b02:	f7ff fc95 	bl	8032430 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8032b06:	693b      	ldr	r3, [r7, #16]
 8032b08:	691a      	ldr	r2, [r3, #16]
 8032b0a:	693b      	ldr	r3, [r7, #16]
 8032b0c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8032b0e:	693b      	ldr	r3, [r7, #16]
 8032b10:	2200      	movs	r2, #0
 8032b12:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8032b14:	683b      	ldr	r3, [r7, #0]
 8032b16:	2b00      	cmp	r3, #0
 8032b18:	d061      	beq.n	8032bde <parse_object+0x1de>
 8032b1a:	683b      	ldr	r3, [r7, #0]
 8032b1c:	689a      	ldr	r2, [r3, #8]
 8032b1e:	683b      	ldr	r3, [r7, #0]
 8032b20:	685b      	ldr	r3, [r3, #4]
 8032b22:	429a      	cmp	r2, r3
 8032b24:	d25b      	bcs.n	8032bde <parse_object+0x1de>
 8032b26:	683b      	ldr	r3, [r7, #0]
 8032b28:	681a      	ldr	r2, [r3, #0]
 8032b2a:	683b      	ldr	r3, [r7, #0]
 8032b2c:	689b      	ldr	r3, [r3, #8]
 8032b2e:	4413      	add	r3, r2
 8032b30:	781b      	ldrb	r3, [r3, #0]
 8032b32:	2b3a      	cmp	r3, #58	; 0x3a
 8032b34:	d153      	bne.n	8032bde <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8032b36:	683b      	ldr	r3, [r7, #0]
 8032b38:	689b      	ldr	r3, [r3, #8]
 8032b3a:	1c5a      	adds	r2, r3, #1
 8032b3c:	683b      	ldr	r3, [r7, #0]
 8032b3e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8032b40:	6838      	ldr	r0, [r7, #0]
 8032b42:	f7ff fc75 	bl	8032430 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8032b46:	6839      	ldr	r1, [r7, #0]
 8032b48:	6938      	ldr	r0, [r7, #16]
 8032b4a:	f7ff fda9 	bl	80326a0 <parse_value>
 8032b4e:	4603      	mov	r3, r0
 8032b50:	2b00      	cmp	r3, #0
 8032b52:	d046      	beq.n	8032be2 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8032b54:	6838      	ldr	r0, [r7, #0]
 8032b56:	f7ff fc6b 	bl	8032430 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8032b5a:	683b      	ldr	r3, [r7, #0]
 8032b5c:	2b00      	cmp	r3, #0
 8032b5e:	d00d      	beq.n	8032b7c <parse_object+0x17c>
 8032b60:	683b      	ldr	r3, [r7, #0]
 8032b62:	689a      	ldr	r2, [r3, #8]
 8032b64:	683b      	ldr	r3, [r7, #0]
 8032b66:	685b      	ldr	r3, [r3, #4]
 8032b68:	429a      	cmp	r2, r3
 8032b6a:	d207      	bcs.n	8032b7c <parse_object+0x17c>
 8032b6c:	683b      	ldr	r3, [r7, #0]
 8032b6e:	681a      	ldr	r2, [r3, #0]
 8032b70:	683b      	ldr	r3, [r7, #0]
 8032b72:	689b      	ldr	r3, [r3, #8]
 8032b74:	4413      	add	r3, r2
 8032b76:	781b      	ldrb	r3, [r3, #0]
 8032b78:	2b2c      	cmp	r3, #44	; 0x2c
 8032b7a:	d098      	beq.n	8032aae <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8032b7c:	683b      	ldr	r3, [r7, #0]
 8032b7e:	2b00      	cmp	r3, #0
 8032b80:	d031      	beq.n	8032be6 <parse_object+0x1e6>
 8032b82:	683b      	ldr	r3, [r7, #0]
 8032b84:	689a      	ldr	r2, [r3, #8]
 8032b86:	683b      	ldr	r3, [r7, #0]
 8032b88:	685b      	ldr	r3, [r3, #4]
 8032b8a:	429a      	cmp	r2, r3
 8032b8c:	d22b      	bcs.n	8032be6 <parse_object+0x1e6>
 8032b8e:	683b      	ldr	r3, [r7, #0]
 8032b90:	681a      	ldr	r2, [r3, #0]
 8032b92:	683b      	ldr	r3, [r7, #0]
 8032b94:	689b      	ldr	r3, [r3, #8]
 8032b96:	4413      	add	r3, r2
 8032b98:	781b      	ldrb	r3, [r3, #0]
 8032b9a:	2b7d      	cmp	r3, #125	; 0x7d
 8032b9c:	d123      	bne.n	8032be6 <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8032b9e:	e000      	b.n	8032ba2 <parse_object+0x1a2>
        goto success; /* empty object */
 8032ba0:	bf00      	nop
    input_buffer->depth--;
 8032ba2:	683b      	ldr	r3, [r7, #0]
 8032ba4:	68db      	ldr	r3, [r3, #12]
 8032ba6:	1e5a      	subs	r2, r3, #1
 8032ba8:	683b      	ldr	r3, [r7, #0]
 8032baa:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8032bac:	697b      	ldr	r3, [r7, #20]
 8032bae:	2b00      	cmp	r3, #0
 8032bb0:	d002      	beq.n	8032bb8 <parse_object+0x1b8>
        head->prev = current_item;
 8032bb2:	697b      	ldr	r3, [r7, #20]
 8032bb4:	693a      	ldr	r2, [r7, #16]
 8032bb6:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8032bb8:	687b      	ldr	r3, [r7, #4]
 8032bba:	2240      	movs	r2, #64	; 0x40
 8032bbc:	60da      	str	r2, [r3, #12]
    item->child = head;
 8032bbe:	687b      	ldr	r3, [r7, #4]
 8032bc0:	697a      	ldr	r2, [r7, #20]
 8032bc2:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8032bc4:	683b      	ldr	r3, [r7, #0]
 8032bc6:	689b      	ldr	r3, [r3, #8]
 8032bc8:	1c5a      	adds	r2, r3, #1
 8032bca:	683b      	ldr	r3, [r7, #0]
 8032bcc:	609a      	str	r2, [r3, #8]
    return true;
 8032bce:	2301      	movs	r3, #1
 8032bd0:	e011      	b.n	8032bf6 <parse_object+0x1f6>
        goto fail; /* not an object */
 8032bd2:	bf00      	nop
 8032bd4:	e008      	b.n	8032be8 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8032bd6:	bf00      	nop
 8032bd8:	e006      	b.n	8032be8 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8032bda:	bf00      	nop
 8032bdc:	e004      	b.n	8032be8 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8032bde:	bf00      	nop
 8032be0:	e002      	b.n	8032be8 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8032be2:	bf00      	nop
 8032be4:	e000      	b.n	8032be8 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8032be6:	bf00      	nop

fail:
    if (head != NULL)
 8032be8:	697b      	ldr	r3, [r7, #20]
 8032bea:	2b00      	cmp	r3, #0
 8032bec:	d002      	beq.n	8032bf4 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8032bee:	6978      	ldr	r0, [r7, #20]
 8032bf0:	f7ff f870 	bl	8031cd4 <cJSON_Delete>
    }

    return false;
 8032bf4:	2300      	movs	r3, #0
}
 8032bf6:	4618      	mov	r0, r3
 8032bf8:	3718      	adds	r7, #24
 8032bfa:	46bd      	mov	sp, r7
 8032bfc:	bd80      	pop	{r7, pc}

08032bfe <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8032bfe:	b580      	push	{r7, lr}
 8032c00:	b086      	sub	sp, #24
 8032c02:	af00      	add	r7, sp, #0
 8032c04:	60f8      	str	r0, [r7, #12]
 8032c06:	60b9      	str	r1, [r7, #8]
 8032c08:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8032c0a:	2300      	movs	r3, #0
 8032c0c:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8032c0e:	68fb      	ldr	r3, [r7, #12]
 8032c10:	2b00      	cmp	r3, #0
 8032c12:	d002      	beq.n	8032c1a <get_object_item+0x1c>
 8032c14:	68bb      	ldr	r3, [r7, #8]
 8032c16:	2b00      	cmp	r3, #0
 8032c18:	d101      	bne.n	8032c1e <get_object_item+0x20>
    {
        return NULL;
 8032c1a:	2300      	movs	r3, #0
 8032c1c:	e033      	b.n	8032c86 <get_object_item+0x88>
    }

    current_element = object->child;
 8032c1e:	68fb      	ldr	r3, [r7, #12]
 8032c20:	689b      	ldr	r3, [r3, #8]
 8032c22:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8032c24:	687b      	ldr	r3, [r7, #4]
 8032c26:	2b00      	cmp	r3, #0
 8032c28:	d017      	beq.n	8032c5a <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8032c2a:	e002      	b.n	8032c32 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8032c2c:	697b      	ldr	r3, [r7, #20]
 8032c2e:	681b      	ldr	r3, [r3, #0]
 8032c30:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8032c32:	697b      	ldr	r3, [r7, #20]
 8032c34:	2b00      	cmp	r3, #0
 8032c36:	d01c      	beq.n	8032c72 <get_object_item+0x74>
 8032c38:	697b      	ldr	r3, [r7, #20]
 8032c3a:	6a1b      	ldr	r3, [r3, #32]
 8032c3c:	2b00      	cmp	r3, #0
 8032c3e:	d018      	beq.n	8032c72 <get_object_item+0x74>
 8032c40:	697b      	ldr	r3, [r7, #20]
 8032c42:	6a1b      	ldr	r3, [r3, #32]
 8032c44:	4619      	mov	r1, r3
 8032c46:	68b8      	ldr	r0, [r7, #8]
 8032c48:	f7fd fac2 	bl	80301d0 <strcmp>
 8032c4c:	4603      	mov	r3, r0
 8032c4e:	2b00      	cmp	r3, #0
 8032c50:	d1ec      	bne.n	8032c2c <get_object_item+0x2e>
 8032c52:	e00e      	b.n	8032c72 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8032c54:	697b      	ldr	r3, [r7, #20]
 8032c56:	681b      	ldr	r3, [r3, #0]
 8032c58:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8032c5a:	697b      	ldr	r3, [r7, #20]
 8032c5c:	2b00      	cmp	r3, #0
 8032c5e:	d008      	beq.n	8032c72 <get_object_item+0x74>
 8032c60:	697b      	ldr	r3, [r7, #20]
 8032c62:	6a1b      	ldr	r3, [r3, #32]
 8032c64:	4619      	mov	r1, r3
 8032c66:	68b8      	ldr	r0, [r7, #8]
 8032c68:	f7fe ffb2 	bl	8031bd0 <case_insensitive_strcmp>
 8032c6c:	4603      	mov	r3, r0
 8032c6e:	2b00      	cmp	r3, #0
 8032c70:	d1f0      	bne.n	8032c54 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8032c72:	697b      	ldr	r3, [r7, #20]
 8032c74:	2b00      	cmp	r3, #0
 8032c76:	d003      	beq.n	8032c80 <get_object_item+0x82>
 8032c78:	697b      	ldr	r3, [r7, #20]
 8032c7a:	6a1b      	ldr	r3, [r3, #32]
 8032c7c:	2b00      	cmp	r3, #0
 8032c7e:	d101      	bne.n	8032c84 <get_object_item+0x86>
        return NULL;
 8032c80:	2300      	movs	r3, #0
 8032c82:	e000      	b.n	8032c86 <get_object_item+0x88>
    }

    return current_element;
 8032c84:	697b      	ldr	r3, [r7, #20]
}
 8032c86:	4618      	mov	r0, r3
 8032c88:	3718      	adds	r7, #24
 8032c8a:	46bd      	mov	sp, r7
 8032c8c:	bd80      	pop	{r7, pc}

08032c8e <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8032c8e:	b580      	push	{r7, lr}
 8032c90:	b082      	sub	sp, #8
 8032c92:	af00      	add	r7, sp, #0
 8032c94:	6078      	str	r0, [r7, #4]
 8032c96:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8032c98:	2200      	movs	r2, #0
 8032c9a:	6839      	ldr	r1, [r7, #0]
 8032c9c:	6878      	ldr	r0, [r7, #4]
 8032c9e:	f7ff ffae 	bl	8032bfe <get_object_item>
 8032ca2:	4603      	mov	r3, r0
}
 8032ca4:	4618      	mov	r0, r3
 8032ca6:	3708      	adds	r7, #8
 8032ca8:	46bd      	mov	sp, r7
 8032caa:	bd80      	pop	{r7, pc}

08032cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8032cac:	b580      	push	{r7, lr}
 8032cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8032cb0:	f000 fd60 	bl	8033774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8032cb4:	f000 f810 	bl	8032cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8032cb8:	f000 f930 	bl	8032f1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8032cbc:	f000 f876 	bl	8032dac <MX_I2C1_Init>
  MX_SPI1_Init();
 8032cc0:	f000 f8a2 	bl	8032e08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8032cc4:	f000 f8d6 	bl	8032e74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8032cc8:	f000 f8fe 	bl	8032ec8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  modem_setup();
 8032ccc:	f000 fa62 	bl	8033194 <modem_setup>
    /* USER CODE END WHILE */
//	  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx_buffer, 170);

    /* USER CODE BEGIN 3 */

    firmware_update_handler();
 8032cd0:	f7fe fe60 	bl	8031994 <firmware_update_handler>
 8032cd4:	e7fc      	b.n	8032cd0 <main+0x24>
	...

08032cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8032cd8:	b580      	push	{r7, lr}
 8032cda:	b094      	sub	sp, #80	; 0x50
 8032cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8032cde:	f107 0320 	add.w	r3, r7, #32
 8032ce2:	2230      	movs	r2, #48	; 0x30
 8032ce4:	2100      	movs	r1, #0
 8032ce6:	4618      	mov	r0, r3
 8032ce8:	f004 ff6f 	bl	8037bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8032cec:	f107 030c 	add.w	r3, r7, #12
 8032cf0:	2200      	movs	r2, #0
 8032cf2:	601a      	str	r2, [r3, #0]
 8032cf4:	605a      	str	r2, [r3, #4]
 8032cf6:	609a      	str	r2, [r3, #8]
 8032cf8:	60da      	str	r2, [r3, #12]
 8032cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8032cfc:	2300      	movs	r3, #0
 8032cfe:	60bb      	str	r3, [r7, #8]
 8032d00:	4b28      	ldr	r3, [pc, #160]	; (8032da4 <SystemClock_Config+0xcc>)
 8032d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d04:	4a27      	ldr	r2, [pc, #156]	; (8032da4 <SystemClock_Config+0xcc>)
 8032d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8032d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8032d0c:	4b25      	ldr	r3, [pc, #148]	; (8032da4 <SystemClock_Config+0xcc>)
 8032d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8032d14:	60bb      	str	r3, [r7, #8]
 8032d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8032d18:	2300      	movs	r3, #0
 8032d1a:	607b      	str	r3, [r7, #4]
 8032d1c:	4b22      	ldr	r3, [pc, #136]	; (8032da8 <SystemClock_Config+0xd0>)
 8032d1e:	681b      	ldr	r3, [r3, #0]
 8032d20:	4a21      	ldr	r2, [pc, #132]	; (8032da8 <SystemClock_Config+0xd0>)
 8032d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8032d26:	6013      	str	r3, [r2, #0]
 8032d28:	4b1f      	ldr	r3, [pc, #124]	; (8032da8 <SystemClock_Config+0xd0>)
 8032d2a:	681b      	ldr	r3, [r3, #0]
 8032d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8032d30:	607b      	str	r3, [r7, #4]
 8032d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8032d34:	2301      	movs	r3, #1
 8032d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8032d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8032d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8032d3e:	2302      	movs	r3, #2
 8032d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8032d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8032d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8032d48:	2308      	movs	r3, #8
 8032d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8032d4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8032d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8032d52:	2302      	movs	r3, #2
 8032d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8032d56:	2307      	movs	r3, #7
 8032d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8032d5a:	f107 0320 	add.w	r3, r7, #32
 8032d5e:	4618      	mov	r0, r3
 8032d60:	f001 fd14 	bl	803478c <HAL_RCC_OscConfig>
 8032d64:	4603      	mov	r3, r0
 8032d66:	2b00      	cmp	r3, #0
 8032d68:	d001      	beq.n	8032d6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8032d6a:	f000 fa27 	bl	80331bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8032d6e:	230f      	movs	r3, #15
 8032d70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8032d72:	2302      	movs	r3, #2
 8032d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8032d76:	2300      	movs	r3, #0
 8032d78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8032d7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8032d7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8032d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8032d84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8032d86:	f107 030c 	add.w	r3, r7, #12
 8032d8a:	2105      	movs	r1, #5
 8032d8c:	4618      	mov	r0, r3
 8032d8e:	f001 ff75 	bl	8034c7c <HAL_RCC_ClockConfig>
 8032d92:	4603      	mov	r3, r0
 8032d94:	2b00      	cmp	r3, #0
 8032d96:	d001      	beq.n	8032d9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8032d98:	f000 fa10 	bl	80331bc <Error_Handler>
  }
}
 8032d9c:	bf00      	nop
 8032d9e:	3750      	adds	r7, #80	; 0x50
 8032da0:	46bd      	mov	sp, r7
 8032da2:	bd80      	pop	{r7, pc}
 8032da4:	40023800 	.word	0x40023800
 8032da8:	40007000 	.word	0x40007000

08032dac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8032dac:	b580      	push	{r7, lr}
 8032dae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8032db0:	4b12      	ldr	r3, [pc, #72]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032db2:	4a13      	ldr	r2, [pc, #76]	; (8032e00 <MX_I2C1_Init+0x54>)
 8032db4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8032db6:	4b11      	ldr	r3, [pc, #68]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032db8:	4a12      	ldr	r2, [pc, #72]	; (8032e04 <MX_I2C1_Init+0x58>)
 8032dba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8032dbc:	4b0f      	ldr	r3, [pc, #60]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dbe:	2200      	movs	r2, #0
 8032dc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8032dc2:	4b0e      	ldr	r3, [pc, #56]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dc4:	2200      	movs	r2, #0
 8032dc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8032dc8:	4b0c      	ldr	r3, [pc, #48]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8032dce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8032dd0:	4b0a      	ldr	r3, [pc, #40]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dd2:	2200      	movs	r2, #0
 8032dd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8032dd6:	4b09      	ldr	r3, [pc, #36]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dd8:	2200      	movs	r2, #0
 8032dda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8032ddc:	4b07      	ldr	r3, [pc, #28]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dde:	2200      	movs	r2, #0
 8032de0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8032de2:	4b06      	ldr	r3, [pc, #24]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032de4:	2200      	movs	r2, #0
 8032de6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8032de8:	4804      	ldr	r0, [pc, #16]	; (8032dfc <MX_I2C1_Init+0x50>)
 8032dea:	f001 fb8b 	bl	8034504 <HAL_I2C_Init>
 8032dee:	4603      	mov	r3, r0
 8032df0:	2b00      	cmp	r3, #0
 8032df2:	d001      	beq.n	8032df8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8032df4:	f000 f9e2 	bl	80331bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8032df8:	bf00      	nop
 8032dfa:	bd80      	pop	{r7, pc}
 8032dfc:	2000ca8c 	.word	0x2000ca8c
 8032e00:	40005400 	.word	0x40005400
 8032e04:	000186a0 	.word	0x000186a0

08032e08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
	static void MX_SPI1_Init(void)
	{
 8032e08:	b580      	push	{r7, lr}
 8032e0a:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN SPI1_Init 1 */

	  /* USER CODE END SPI1_Init 1 */
	  /* SPI1 parameter configuration*/
	  hspi1.Instance = SPI1;
 8032e0c:	4b17      	ldr	r3, [pc, #92]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e0e:	4a18      	ldr	r2, [pc, #96]	; (8032e70 <MX_SPI1_Init+0x68>)
 8032e10:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 8032e12:	4b16      	ldr	r3, [pc, #88]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8032e18:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8032e1a:	4b14      	ldr	r3, [pc, #80]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e1c:	2200      	movs	r2, #0
 8032e1e:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8032e20:	4b12      	ldr	r3, [pc, #72]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e22:	2200      	movs	r2, #0
 8032e24:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8032e26:	4b11      	ldr	r3, [pc, #68]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e28:	2200      	movs	r2, #0
 8032e2a:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8032e2c:	4b0f      	ldr	r3, [pc, #60]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e2e:	2200      	movs	r2, #0
 8032e30:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8032e32:	4b0e      	ldr	r3, [pc, #56]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8032e38:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8032e3a:	4b0c      	ldr	r3, [pc, #48]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e3c:	2200      	movs	r2, #0
 8032e3e:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8032e40:	4b0a      	ldr	r3, [pc, #40]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e42:	2200      	movs	r2, #0
 8032e44:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8032e46:	4b09      	ldr	r3, [pc, #36]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e48:	2200      	movs	r2, #0
 8032e4a:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8032e4c:	4b07      	ldr	r3, [pc, #28]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e4e:	2200      	movs	r2, #0
 8032e50:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8032e52:	4b06      	ldr	r3, [pc, #24]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e54:	220a      	movs	r2, #10
 8032e56:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8032e58:	4804      	ldr	r0, [pc, #16]	; (8032e6c <MX_SPI1_Init+0x64>)
 8032e5a:	f002 f92f 	bl	80350bc <HAL_SPI_Init>
 8032e5e:	4603      	mov	r3, r0
 8032e60:	2b00      	cmp	r3, #0
 8032e62:	d001      	beq.n	8032e68 <MX_SPI1_Init+0x60>
	  {
		Error_Handler();
 8032e64:	f000 f9aa 	bl	80331bc <Error_Handler>
	  }
	  /* USER CODE BEGIN SPI1_Init 2 */

	  /* USER CODE END SPI1_Init 2 */

	}
 8032e68:	bf00      	nop
 8032e6a:	bd80      	pop	{r7, pc}
 8032e6c:	2000cae0 	.word	0x2000cae0
 8032e70:	40013000 	.word	0x40013000

08032e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8032e74:	b580      	push	{r7, lr}
 8032e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8032e78:	4b11      	ldr	r3, [pc, #68]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e7a:	4a12      	ldr	r2, [pc, #72]	; (8032ec4 <MX_USART2_UART_Init+0x50>)
 8032e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8032e7e:	4b10      	ldr	r3, [pc, #64]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8032e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8032e86:	4b0e      	ldr	r3, [pc, #56]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e88:	2200      	movs	r2, #0
 8032e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8032e8c:	4b0c      	ldr	r3, [pc, #48]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e8e:	2200      	movs	r2, #0
 8032e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8032e92:	4b0b      	ldr	r3, [pc, #44]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e94:	2200      	movs	r2, #0
 8032e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8032e98:	4b09      	ldr	r3, [pc, #36]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032e9a:	220c      	movs	r2, #12
 8032e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8032e9e:	4b08      	ldr	r3, [pc, #32]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032ea0:	2200      	movs	r2, #0
 8032ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8032ea4:	4b06      	ldr	r3, [pc, #24]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032ea6:	2200      	movs	r2, #0
 8032ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8032eaa:	4805      	ldr	r0, [pc, #20]	; (8032ec0 <MX_USART2_UART_Init+0x4c>)
 8032eac:	f002 f98f 	bl	80351ce <HAL_UART_Init>
 8032eb0:	4603      	mov	r3, r0
 8032eb2:	2b00      	cmp	r3, #0
 8032eb4:	d001      	beq.n	8032eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8032eb6:	f000 f981 	bl	80331bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8032eba:	bf00      	nop
 8032ebc:	bd80      	pop	{r7, pc}
 8032ebe:	bf00      	nop
 8032ec0:	2000cb38 	.word	0x2000cb38
 8032ec4:	40004400 	.word	0x40004400

08032ec8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8032ec8:	b580      	push	{r7, lr}
 8032eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8032ecc:	4b11      	ldr	r3, [pc, #68]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032ece:	4a12      	ldr	r2, [pc, #72]	; (8032f18 <MX_USART3_UART_Init+0x50>)
 8032ed0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8032ed2:	4b10      	ldr	r3, [pc, #64]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8032ed8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8032eda:	4b0e      	ldr	r3, [pc, #56]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032edc:	2200      	movs	r2, #0
 8032ede:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8032ee0:	4b0c      	ldr	r3, [pc, #48]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032ee2:	2200      	movs	r2, #0
 8032ee4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8032ee6:	4b0b      	ldr	r3, [pc, #44]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032ee8:	2200      	movs	r2, #0
 8032eea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8032eec:	4b09      	ldr	r3, [pc, #36]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032eee:	220c      	movs	r2, #12
 8032ef0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8032ef2:	4b08      	ldr	r3, [pc, #32]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032ef4:	2200      	movs	r2, #0
 8032ef6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8032ef8:	4b06      	ldr	r3, [pc, #24]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032efa:	2200      	movs	r2, #0
 8032efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8032efe:	4805      	ldr	r0, [pc, #20]	; (8032f14 <MX_USART3_UART_Init+0x4c>)
 8032f00:	f002 f965 	bl	80351ce <HAL_UART_Init>
 8032f04:	4603      	mov	r3, r0
 8032f06:	2b00      	cmp	r3, #0
 8032f08:	d001      	beq.n	8032f0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8032f0a:	f000 f957 	bl	80331bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8032f0e:	bf00      	nop
 8032f10:	bd80      	pop	{r7, pc}
 8032f12:	bf00      	nop
 8032f14:	2000cb7c 	.word	0x2000cb7c
 8032f18:	40004800 	.word	0x40004800

08032f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8032f1c:	b580      	push	{r7, lr}
 8032f1e:	b08c      	sub	sp, #48	; 0x30
 8032f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8032f22:	f107 031c 	add.w	r3, r7, #28
 8032f26:	2200      	movs	r2, #0
 8032f28:	601a      	str	r2, [r3, #0]
 8032f2a:	605a      	str	r2, [r3, #4]
 8032f2c:	609a      	str	r2, [r3, #8]
 8032f2e:	60da      	str	r2, [r3, #12]
 8032f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8032f32:	2300      	movs	r3, #0
 8032f34:	61bb      	str	r3, [r7, #24]
 8032f36:	4b91      	ldr	r3, [pc, #580]	; (803317c <MX_GPIO_Init+0x260>)
 8032f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f3a:	4a90      	ldr	r2, [pc, #576]	; (803317c <MX_GPIO_Init+0x260>)
 8032f3c:	f043 0310 	orr.w	r3, r3, #16
 8032f40:	6313      	str	r3, [r2, #48]	; 0x30
 8032f42:	4b8e      	ldr	r3, [pc, #568]	; (803317c <MX_GPIO_Init+0x260>)
 8032f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f46:	f003 0310 	and.w	r3, r3, #16
 8032f4a:	61bb      	str	r3, [r7, #24]
 8032f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8032f4e:	2300      	movs	r3, #0
 8032f50:	617b      	str	r3, [r7, #20]
 8032f52:	4b8a      	ldr	r3, [pc, #552]	; (803317c <MX_GPIO_Init+0x260>)
 8032f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f56:	4a89      	ldr	r2, [pc, #548]	; (803317c <MX_GPIO_Init+0x260>)
 8032f58:	f043 0304 	orr.w	r3, r3, #4
 8032f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8032f5e:	4b87      	ldr	r3, [pc, #540]	; (803317c <MX_GPIO_Init+0x260>)
 8032f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f62:	f003 0304 	and.w	r3, r3, #4
 8032f66:	617b      	str	r3, [r7, #20]
 8032f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8032f6a:	2300      	movs	r3, #0
 8032f6c:	613b      	str	r3, [r7, #16]
 8032f6e:	4b83      	ldr	r3, [pc, #524]	; (803317c <MX_GPIO_Init+0x260>)
 8032f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f72:	4a82      	ldr	r2, [pc, #520]	; (803317c <MX_GPIO_Init+0x260>)
 8032f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8032f78:	6313      	str	r3, [r2, #48]	; 0x30
 8032f7a:	4b80      	ldr	r3, [pc, #512]	; (803317c <MX_GPIO_Init+0x260>)
 8032f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032f82:	613b      	str	r3, [r7, #16]
 8032f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8032f86:	2300      	movs	r3, #0
 8032f88:	60fb      	str	r3, [r7, #12]
 8032f8a:	4b7c      	ldr	r3, [pc, #496]	; (803317c <MX_GPIO_Init+0x260>)
 8032f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f8e:	4a7b      	ldr	r2, [pc, #492]	; (803317c <MX_GPIO_Init+0x260>)
 8032f90:	f043 0301 	orr.w	r3, r3, #1
 8032f94:	6313      	str	r3, [r2, #48]	; 0x30
 8032f96:	4b79      	ldr	r3, [pc, #484]	; (803317c <MX_GPIO_Init+0x260>)
 8032f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032f9a:	f003 0301 	and.w	r3, r3, #1
 8032f9e:	60fb      	str	r3, [r7, #12]
 8032fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8032fa2:	2300      	movs	r3, #0
 8032fa4:	60bb      	str	r3, [r7, #8]
 8032fa6:	4b75      	ldr	r3, [pc, #468]	; (803317c <MX_GPIO_Init+0x260>)
 8032fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032faa:	4a74      	ldr	r2, [pc, #464]	; (803317c <MX_GPIO_Init+0x260>)
 8032fac:	f043 0302 	orr.w	r3, r3, #2
 8032fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8032fb2:	4b72      	ldr	r3, [pc, #456]	; (803317c <MX_GPIO_Init+0x260>)
 8032fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032fb6:	f003 0302 	and.w	r3, r3, #2
 8032fba:	60bb      	str	r3, [r7, #8]
 8032fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8032fbe:	2300      	movs	r3, #0
 8032fc0:	607b      	str	r3, [r7, #4]
 8032fc2:	4b6e      	ldr	r3, [pc, #440]	; (803317c <MX_GPIO_Init+0x260>)
 8032fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032fc6:	4a6d      	ldr	r2, [pc, #436]	; (803317c <MX_GPIO_Init+0x260>)
 8032fc8:	f043 0308 	orr.w	r3, r3, #8
 8032fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8032fce:	4b6b      	ldr	r3, [pc, #428]	; (803317c <MX_GPIO_Init+0x260>)
 8032fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032fd2:	f003 0308 	and.w	r3, r3, #8
 8032fd6:	607b      	str	r3, [r7, #4]
 8032fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8032fda:	2200      	movs	r2, #0
 8032fdc:	2108      	movs	r1, #8
 8032fde:	4868      	ldr	r0, [pc, #416]	; (8033180 <MX_GPIO_Init+0x264>)
 8032fe0:	f001 fa76 	bl	80344d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8032fe4:	2201      	movs	r2, #1
 8032fe6:	2101      	movs	r1, #1
 8032fe8:	4866      	ldr	r0, [pc, #408]	; (8033184 <MX_GPIO_Init+0x268>)
 8032fea:	f001 fa71 	bl	80344d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8032fee:	2200      	movs	r2, #0
 8032ff0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8032ff4:	4864      	ldr	r0, [pc, #400]	; (8033188 <MX_GPIO_Init+0x26c>)
 8032ff6:	f001 fa6b 	bl	80344d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8032ffa:	2308      	movs	r3, #8
 8032ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8032ffe:	2301      	movs	r3, #1
 8033000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033002:	2300      	movs	r3, #0
 8033004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033006:	2300      	movs	r3, #0
 8033008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 803300a:	f107 031c 	add.w	r3, r7, #28
 803300e:	4619      	mov	r1, r3
 8033010:	485b      	ldr	r0, [pc, #364]	; (8033180 <MX_GPIO_Init+0x264>)
 8033012:	f001 f8c1 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8033016:	2301      	movs	r3, #1
 8033018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 803301a:	2301      	movs	r3, #1
 803301c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803301e:	2300      	movs	r3, #0
 8033020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033022:	2300      	movs	r3, #0
 8033024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8033026:	f107 031c 	add.w	r3, r7, #28
 803302a:	4619      	mov	r1, r3
 803302c:	4855      	ldr	r0, [pc, #340]	; (8033184 <MX_GPIO_Init+0x268>)
 803302e:	f001 f8b3 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8033032:	2308      	movs	r3, #8
 8033034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033036:	2302      	movs	r3, #2
 8033038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803303a:	2300      	movs	r3, #0
 803303c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803303e:	2300      	movs	r3, #0
 8033040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8033042:	2305      	movs	r3, #5
 8033044:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8033046:	f107 031c 	add.w	r3, r7, #28
 803304a:	4619      	mov	r1, r3
 803304c:	484d      	ldr	r0, [pc, #308]	; (8033184 <MX_GPIO_Init+0x268>)
 803304e:	f001 f8a3 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8033052:	2301      	movs	r3, #1
 8033054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8033056:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 803305a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803305c:	2300      	movs	r3, #0
 803305e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8033060:	f107 031c 	add.w	r3, r7, #28
 8033064:	4619      	mov	r1, r3
 8033066:	4849      	ldr	r0, [pc, #292]	; (803318c <MX_GPIO_Init+0x270>)
 8033068:	f001 f896 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 803306c:	2310      	movs	r3, #16
 803306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033070:	2302      	movs	r3, #2
 8033072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033074:	2300      	movs	r3, #0
 8033076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033078:	2300      	movs	r3, #0
 803307a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 803307c:	2306      	movs	r3, #6
 803307e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8033080:	f107 031c 	add.w	r3, r7, #28
 8033084:	4619      	mov	r1, r3
 8033086:	4841      	ldr	r0, [pc, #260]	; (803318c <MX_GPIO_Init+0x270>)
 8033088:	f001 f886 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 803308c:	2304      	movs	r3, #4
 803308e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8033090:	2300      	movs	r3, #0
 8033092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033094:	2300      	movs	r3, #0
 8033096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8033098:	f107 031c 	add.w	r3, r7, #28
 803309c:	4619      	mov	r1, r3
 803309e:	483c      	ldr	r0, [pc, #240]	; (8033190 <MX_GPIO_Init+0x274>)
 80330a0:	f001 f87a 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80330a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80330a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80330aa:	2302      	movs	r3, #2
 80330ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80330ae:	2300      	movs	r3, #0
 80330b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80330b2:	2300      	movs	r3, #0
 80330b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80330b6:	2305      	movs	r3, #5
 80330b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80330ba:	f107 031c 	add.w	r3, r7, #28
 80330be:	4619      	mov	r1, r3
 80330c0:	4833      	ldr	r0, [pc, #204]	; (8033190 <MX_GPIO_Init+0x274>)
 80330c2:	f001 f869 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80330c6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80330ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80330cc:	2301      	movs	r3, #1
 80330ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80330d0:	2300      	movs	r3, #0
 80330d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80330d4:	2300      	movs	r3, #0
 80330d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80330d8:	f107 031c 	add.w	r3, r7, #28
 80330dc:	4619      	mov	r1, r3
 80330de:	482a      	ldr	r0, [pc, #168]	; (8033188 <MX_GPIO_Init+0x26c>)
 80330e0:	f001 f85a 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80330e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80330e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80330ea:	2302      	movs	r3, #2
 80330ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80330ee:	2300      	movs	r3, #0
 80330f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80330f2:	2300      	movs	r3, #0
 80330f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80330f6:	2306      	movs	r3, #6
 80330f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80330fa:	f107 031c 	add.w	r3, r7, #28
 80330fe:	4619      	mov	r1, r3
 8033100:	4820      	ldr	r0, [pc, #128]	; (8033184 <MX_GPIO_Init+0x268>)
 8033102:	f001 f849 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8033106:	f44f 7300 	mov.w	r3, #512	; 0x200
 803310a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 803310c:	2300      	movs	r3, #0
 803310e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033110:	2300      	movs	r3, #0
 8033112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8033114:	f107 031c 	add.w	r3, r7, #28
 8033118:	4619      	mov	r1, r3
 803311a:	481c      	ldr	r0, [pc, #112]	; (803318c <MX_GPIO_Init+0x270>)
 803311c:	f001 f83c 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8033120:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8033124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033126:	2302      	movs	r3, #2
 8033128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803312a:	2300      	movs	r3, #0
 803312c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803312e:	2300      	movs	r3, #0
 8033130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8033132:	230a      	movs	r3, #10
 8033134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033136:	f107 031c 	add.w	r3, r7, #28
 803313a:	4619      	mov	r1, r3
 803313c:	4813      	ldr	r0, [pc, #76]	; (803318c <MX_GPIO_Init+0x270>)
 803313e:	f001 f82b 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8033142:	2320      	movs	r3, #32
 8033144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8033146:	2300      	movs	r3, #0
 8033148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803314a:	2300      	movs	r3, #0
 803314c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 803314e:	f107 031c 	add.w	r3, r7, #28
 8033152:	4619      	mov	r1, r3
 8033154:	480c      	ldr	r0, [pc, #48]	; (8033188 <MX_GPIO_Init+0x26c>)
 8033156:	f001 f81f 	bl	8034198 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 803315a:	2302      	movs	r3, #2
 803315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 803315e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8033162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8033164:	2300      	movs	r3, #0
 8033166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8033168:	f107 031c 	add.w	r3, r7, #28
 803316c:	4619      	mov	r1, r3
 803316e:	4804      	ldr	r0, [pc, #16]	; (8033180 <MX_GPIO_Init+0x264>)
 8033170:	f001 f812 	bl	8034198 <HAL_GPIO_Init>

}
 8033174:	bf00      	nop
 8033176:	3730      	adds	r7, #48	; 0x30
 8033178:	46bd      	mov	sp, r7
 803317a:	bd80      	pop	{r7, pc}
 803317c:	40023800 	.word	0x40023800
 8033180:	40021000 	.word	0x40021000
 8033184:	40020800 	.word	0x40020800
 8033188:	40020c00 	.word	0x40020c00
 803318c:	40020000 	.word	0x40020000
 8033190:	40020400 	.word	0x40020400

08033194 <modem_setup>:

/* USER CODE BEGIN 4 */

void modem_setup(void)
{
 8033194:	b580      	push	{r7, lr}
 8033196:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8033198:	2201      	movs	r2, #1
 803319a:	4906      	ldr	r1, [pc, #24]	; (80331b4 <modem_setup+0x20>)
 803319c:	4806      	ldr	r0, [pc, #24]	; (80331b8 <modem_setup+0x24>)
 803319e:	f002 f8f5 	bl	803538c <HAL_UART_Receive_IT>
    Initialize_Modem();
 80331a2:	f7fd fefb 	bl	8030f9c <Initialize_Modem>
    SSL_Config();
 80331a6:	f7fd ffb1 	bl	803110c <SSL_Config>
    AWS_MQTT();
 80331aa:	f7fe f81d 	bl	80311e8 <AWS_MQTT>
}
 80331ae:	bf00      	nop
 80331b0:	bd80      	pop	{r7, pc}
 80331b2:	bf00      	nop
 80331b4:	2000c861 	.word	0x2000c861
 80331b8:	2000cb38 	.word	0x2000cb38

080331bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80331bc:	b480      	push	{r7}
 80331be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80331c0:	b672      	cpsid	i
}
 80331c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80331c4:	e7fe      	b.n	80331c4 <Error_Handler+0x8>
	...

080331c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80331c8:	b580      	push	{r7, lr}
 80331ca:	b082      	sub	sp, #8
 80331cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80331ce:	2300      	movs	r3, #0
 80331d0:	607b      	str	r3, [r7, #4]
 80331d2:	4b10      	ldr	r3, [pc, #64]	; (8033214 <HAL_MspInit+0x4c>)
 80331d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80331d6:	4a0f      	ldr	r2, [pc, #60]	; (8033214 <HAL_MspInit+0x4c>)
 80331d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80331dc:	6453      	str	r3, [r2, #68]	; 0x44
 80331de:	4b0d      	ldr	r3, [pc, #52]	; (8033214 <HAL_MspInit+0x4c>)
 80331e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80331e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80331e6:	607b      	str	r3, [r7, #4]
 80331e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80331ea:	2300      	movs	r3, #0
 80331ec:	603b      	str	r3, [r7, #0]
 80331ee:	4b09      	ldr	r3, [pc, #36]	; (8033214 <HAL_MspInit+0x4c>)
 80331f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80331f2:	4a08      	ldr	r2, [pc, #32]	; (8033214 <HAL_MspInit+0x4c>)
 80331f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80331f8:	6413      	str	r3, [r2, #64]	; 0x40
 80331fa:	4b06      	ldr	r3, [pc, #24]	; (8033214 <HAL_MspInit+0x4c>)
 80331fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80331fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033202:	603b      	str	r3, [r7, #0]
 8033204:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8033206:	2007      	movs	r0, #7
 8033208:	f000 fc1a 	bl	8033a40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 803320c:	bf00      	nop
 803320e:	3708      	adds	r7, #8
 8033210:	46bd      	mov	sp, r7
 8033212:	bd80      	pop	{r7, pc}
 8033214:	40023800 	.word	0x40023800

08033218 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8033218:	b580      	push	{r7, lr}
 803321a:	b08a      	sub	sp, #40	; 0x28
 803321c:	af00      	add	r7, sp, #0
 803321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033220:	f107 0314 	add.w	r3, r7, #20
 8033224:	2200      	movs	r2, #0
 8033226:	601a      	str	r2, [r3, #0]
 8033228:	605a      	str	r2, [r3, #4]
 803322a:	609a      	str	r2, [r3, #8]
 803322c:	60da      	str	r2, [r3, #12]
 803322e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8033230:	687b      	ldr	r3, [r7, #4]
 8033232:	681b      	ldr	r3, [r3, #0]
 8033234:	4a19      	ldr	r2, [pc, #100]	; (803329c <HAL_I2C_MspInit+0x84>)
 8033236:	4293      	cmp	r3, r2
 8033238:	d12c      	bne.n	8033294 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 803323a:	2300      	movs	r3, #0
 803323c:	613b      	str	r3, [r7, #16]
 803323e:	4b18      	ldr	r3, [pc, #96]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 8033240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033242:	4a17      	ldr	r2, [pc, #92]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 8033244:	f043 0302 	orr.w	r3, r3, #2
 8033248:	6313      	str	r3, [r2, #48]	; 0x30
 803324a:	4b15      	ldr	r3, [pc, #84]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 803324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803324e:	f003 0302 	and.w	r3, r3, #2
 8033252:	613b      	str	r3, [r7, #16]
 8033254:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8033256:	f44f 7310 	mov.w	r3, #576	; 0x240
 803325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 803325c:	2312      	movs	r3, #18
 803325e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8033260:	2301      	movs	r3, #1
 8033262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8033264:	2300      	movs	r3, #0
 8033266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8033268:	2304      	movs	r3, #4
 803326a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 803326c:	f107 0314 	add.w	r3, r7, #20
 8033270:	4619      	mov	r1, r3
 8033272:	480c      	ldr	r0, [pc, #48]	; (80332a4 <HAL_I2C_MspInit+0x8c>)
 8033274:	f000 ff90 	bl	8034198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8033278:	2300      	movs	r3, #0
 803327a:	60fb      	str	r3, [r7, #12]
 803327c:	4b08      	ldr	r3, [pc, #32]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 803327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033280:	4a07      	ldr	r2, [pc, #28]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 8033282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8033286:	6413      	str	r3, [r2, #64]	; 0x40
 8033288:	4b05      	ldr	r3, [pc, #20]	; (80332a0 <HAL_I2C_MspInit+0x88>)
 803328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8033290:	60fb      	str	r3, [r7, #12]
 8033292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8033294:	bf00      	nop
 8033296:	3728      	adds	r7, #40	; 0x28
 8033298:	46bd      	mov	sp, r7
 803329a:	bd80      	pop	{r7, pc}
 803329c:	40005400 	.word	0x40005400
 80332a0:	40023800 	.word	0x40023800
 80332a4:	40020400 	.word	0x40020400

080332a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80332a8:	b580      	push	{r7, lr}
 80332aa:	b08a      	sub	sp, #40	; 0x28
 80332ac:	af00      	add	r7, sp, #0
 80332ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80332b0:	f107 0314 	add.w	r3, r7, #20
 80332b4:	2200      	movs	r2, #0
 80332b6:	601a      	str	r2, [r3, #0]
 80332b8:	605a      	str	r2, [r3, #4]
 80332ba:	609a      	str	r2, [r3, #8]
 80332bc:	60da      	str	r2, [r3, #12]
 80332be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80332c0:	687b      	ldr	r3, [r7, #4]
 80332c2:	681b      	ldr	r3, [r3, #0]
 80332c4:	4a19      	ldr	r2, [pc, #100]	; (803332c <HAL_SPI_MspInit+0x84>)
 80332c6:	4293      	cmp	r3, r2
 80332c8:	d12b      	bne.n	8033322 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80332ca:	2300      	movs	r3, #0
 80332cc:	613b      	str	r3, [r7, #16]
 80332ce:	4b18      	ldr	r3, [pc, #96]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80332d2:	4a17      	ldr	r2, [pc, #92]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80332d8:	6453      	str	r3, [r2, #68]	; 0x44
 80332da:	4b15      	ldr	r3, [pc, #84]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80332de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80332e2:	613b      	str	r3, [r7, #16]
 80332e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80332e6:	2300      	movs	r3, #0
 80332e8:	60fb      	str	r3, [r7, #12]
 80332ea:	4b11      	ldr	r3, [pc, #68]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80332ee:	4a10      	ldr	r2, [pc, #64]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332f0:	f043 0301 	orr.w	r3, r3, #1
 80332f4:	6313      	str	r3, [r2, #48]	; 0x30
 80332f6:	4b0e      	ldr	r3, [pc, #56]	; (8033330 <HAL_SPI_MspInit+0x88>)
 80332f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80332fa:	f003 0301 	and.w	r3, r3, #1
 80332fe:	60fb      	str	r3, [r7, #12]
 8033300:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8033302:	23e0      	movs	r3, #224	; 0xe0
 8033304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033306:	2302      	movs	r3, #2
 8033308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803330a:	2300      	movs	r3, #0
 803330c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803330e:	2300      	movs	r3, #0
 8033310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8033312:	2305      	movs	r3, #5
 8033314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8033316:	f107 0314 	add.w	r3, r7, #20
 803331a:	4619      	mov	r1, r3
 803331c:	4805      	ldr	r0, [pc, #20]	; (8033334 <HAL_SPI_MspInit+0x8c>)
 803331e:	f000 ff3b 	bl	8034198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8033322:	bf00      	nop
 8033324:	3728      	adds	r7, #40	; 0x28
 8033326:	46bd      	mov	sp, r7
 8033328:	bd80      	pop	{r7, pc}
 803332a:	bf00      	nop
 803332c:	40013000 	.word	0x40013000
 8033330:	40023800 	.word	0x40023800
 8033334:	40020000 	.word	0x40020000

08033338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8033338:	b580      	push	{r7, lr}
 803333a:	b08c      	sub	sp, #48	; 0x30
 803333c:	af00      	add	r7, sp, #0
 803333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8033340:	f107 031c 	add.w	r3, r7, #28
 8033344:	2200      	movs	r2, #0
 8033346:	601a      	str	r2, [r3, #0]
 8033348:	605a      	str	r2, [r3, #4]
 803334a:	609a      	str	r2, [r3, #8]
 803334c:	60da      	str	r2, [r3, #12]
 803334e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8033350:	687b      	ldr	r3, [r7, #4]
 8033352:	681b      	ldr	r3, [r3, #0]
 8033354:	4a4a      	ldr	r2, [pc, #296]	; (8033480 <HAL_UART_MspInit+0x148>)
 8033356:	4293      	cmp	r3, r2
 8033358:	d134      	bne.n	80333c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 803335a:	2300      	movs	r3, #0
 803335c:	61bb      	str	r3, [r7, #24]
 803335e:	4b49      	ldr	r3, [pc, #292]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033362:	4a48      	ldr	r2, [pc, #288]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8033368:	6413      	str	r3, [r2, #64]	; 0x40
 803336a:	4b46      	ldr	r3, [pc, #280]	; (8033484 <HAL_UART_MspInit+0x14c>)
 803336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033372:	61bb      	str	r3, [r7, #24]
 8033374:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8033376:	2300      	movs	r3, #0
 8033378:	617b      	str	r3, [r7, #20]
 803337a:	4b42      	ldr	r3, [pc, #264]	; (8033484 <HAL_UART_MspInit+0x14c>)
 803337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803337e:	4a41      	ldr	r2, [pc, #260]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033380:	f043 0301 	orr.w	r3, r3, #1
 8033384:	6313      	str	r3, [r2, #48]	; 0x30
 8033386:	4b3f      	ldr	r3, [pc, #252]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803338a:	f003 0301 	and.w	r3, r3, #1
 803338e:	617b      	str	r3, [r7, #20]
 8033390:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8033392:	230c      	movs	r3, #12
 8033394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033396:	2302      	movs	r3, #2
 8033398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803339a:	2300      	movs	r3, #0
 803339c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803339e:	2303      	movs	r3, #3
 80333a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80333a2:	2307      	movs	r3, #7
 80333a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80333a6:	f107 031c 	add.w	r3, r7, #28
 80333aa:	4619      	mov	r1, r3
 80333ac:	4836      	ldr	r0, [pc, #216]	; (8033488 <HAL_UART_MspInit+0x150>)
 80333ae:	f000 fef3 	bl	8034198 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80333b2:	2200      	movs	r2, #0
 80333b4:	2100      	movs	r1, #0
 80333b6:	2026      	movs	r0, #38	; 0x26
 80333b8:	f000 fb4d 	bl	8033a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80333bc:	2026      	movs	r0, #38	; 0x26
 80333be:	f000 fb66 	bl	8033a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80333c2:	e058      	b.n	8033476 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 80333c4:	687b      	ldr	r3, [r7, #4]
 80333c6:	681b      	ldr	r3, [r3, #0]
 80333c8:	4a30      	ldr	r2, [pc, #192]	; (803348c <HAL_UART_MspInit+0x154>)
 80333ca:	4293      	cmp	r3, r2
 80333cc:	d153      	bne.n	8033476 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80333ce:	2300      	movs	r3, #0
 80333d0:	613b      	str	r3, [r7, #16]
 80333d2:	4b2c      	ldr	r3, [pc, #176]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80333d6:	4a2b      	ldr	r2, [pc, #172]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80333dc:	6413      	str	r3, [r2, #64]	; 0x40
 80333de:	4b29      	ldr	r3, [pc, #164]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80333e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80333e6:	613b      	str	r3, [r7, #16]
 80333e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80333ea:	2300      	movs	r3, #0
 80333ec:	60fb      	str	r3, [r7, #12]
 80333ee:	4b25      	ldr	r3, [pc, #148]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80333f2:	4a24      	ldr	r2, [pc, #144]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333f4:	f043 0302 	orr.w	r3, r3, #2
 80333f8:	6313      	str	r3, [r2, #48]	; 0x30
 80333fa:	4b22      	ldr	r3, [pc, #136]	; (8033484 <HAL_UART_MspInit+0x14c>)
 80333fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80333fe:	f003 0302 	and.w	r3, r3, #2
 8033402:	60fb      	str	r3, [r7, #12]
 8033404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8033406:	2300      	movs	r3, #0
 8033408:	60bb      	str	r3, [r7, #8]
 803340a:	4b1e      	ldr	r3, [pc, #120]	; (8033484 <HAL_UART_MspInit+0x14c>)
 803340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803340e:	4a1d      	ldr	r2, [pc, #116]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033410:	f043 0308 	orr.w	r3, r3, #8
 8033414:	6313      	str	r3, [r2, #48]	; 0x30
 8033416:	4b1b      	ldr	r3, [pc, #108]	; (8033484 <HAL_UART_MspInit+0x14c>)
 8033418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803341a:	f003 0308 	and.w	r3, r3, #8
 803341e:	60bb      	str	r3, [r7, #8]
 8033420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8033422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8033426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8033428:	2302      	movs	r3, #2
 803342a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803342c:	2300      	movs	r3, #0
 803342e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8033430:	2303      	movs	r3, #3
 8033432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8033434:	2307      	movs	r3, #7
 8033436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8033438:	f107 031c 	add.w	r3, r7, #28
 803343c:	4619      	mov	r1, r3
 803343e:	4814      	ldr	r0, [pc, #80]	; (8033490 <HAL_UART_MspInit+0x158>)
 8033440:	f000 feaa 	bl	8034198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8033444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8033448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803344a:	2302      	movs	r3, #2
 803344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803344e:	2300      	movs	r3, #0
 8033450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8033452:	2303      	movs	r3, #3
 8033454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8033456:	2307      	movs	r3, #7
 8033458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 803345a:	f107 031c 	add.w	r3, r7, #28
 803345e:	4619      	mov	r1, r3
 8033460:	480c      	ldr	r0, [pc, #48]	; (8033494 <HAL_UART_MspInit+0x15c>)
 8033462:	f000 fe99 	bl	8034198 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8033466:	2200      	movs	r2, #0
 8033468:	2100      	movs	r1, #0
 803346a:	2027      	movs	r0, #39	; 0x27
 803346c:	f000 faf3 	bl	8033a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8033470:	2027      	movs	r0, #39	; 0x27
 8033472:	f000 fb0c 	bl	8033a8e <HAL_NVIC_EnableIRQ>
}
 8033476:	bf00      	nop
 8033478:	3730      	adds	r7, #48	; 0x30
 803347a:	46bd      	mov	sp, r7
 803347c:	bd80      	pop	{r7, pc}
 803347e:	bf00      	nop
 8033480:	40004400 	.word	0x40004400
 8033484:	40023800 	.word	0x40023800
 8033488:	40020000 	.word	0x40020000
 803348c:	40004800 	.word	0x40004800
 8033490:	40020400 	.word	0x40020400
 8033494:	40020c00 	.word	0x40020c00

08033498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8033498:	b480      	push	{r7}
 803349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 803349c:	e7fe      	b.n	803349c <NMI_Handler+0x4>

0803349e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 803349e:	b480      	push	{r7}
 80334a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80334a2:	e7fe      	b.n	80334a2 <HardFault_Handler+0x4>

080334a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80334a4:	b480      	push	{r7}
 80334a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80334a8:	e7fe      	b.n	80334a8 <MemManage_Handler+0x4>

080334aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80334aa:	b480      	push	{r7}
 80334ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80334ae:	e7fe      	b.n	80334ae <BusFault_Handler+0x4>

080334b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80334b0:	b480      	push	{r7}
 80334b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80334b4:	e7fe      	b.n	80334b4 <UsageFault_Handler+0x4>

080334b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80334b6:	b480      	push	{r7}
 80334b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80334ba:	bf00      	nop
 80334bc:	46bd      	mov	sp, r7
 80334be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80334c2:	4770      	bx	lr

080334c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80334c4:	b480      	push	{r7}
 80334c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80334c8:	bf00      	nop
 80334ca:	46bd      	mov	sp, r7
 80334cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80334d0:	4770      	bx	lr

080334d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80334d2:	b480      	push	{r7}
 80334d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80334d6:	bf00      	nop
 80334d8:	46bd      	mov	sp, r7
 80334da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80334de:	4770      	bx	lr

080334e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80334e0:	b580      	push	{r7, lr}
 80334e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80334e4:	f000 f998 	bl	8033818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80334e8:	bf00      	nop
 80334ea:	bd80      	pop	{r7, pc}

080334ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80334ec:	b580      	push	{r7, lr}
 80334ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80334f0:	4802      	ldr	r0, [pc, #8]	; (80334fc <USART2_IRQHandler+0x10>)
 80334f2:	f001 ff7b 	bl	80353ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80334f6:	bf00      	nop
 80334f8:	bd80      	pop	{r7, pc}
 80334fa:	bf00      	nop
 80334fc:	2000cb38 	.word	0x2000cb38

08033500 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8033500:	b580      	push	{r7, lr}
 8033502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8033504:	4802      	ldr	r0, [pc, #8]	; (8033510 <USART3_IRQHandler+0x10>)
 8033506:	f001 ff71 	bl	80353ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 803350a:	bf00      	nop
 803350c:	bd80      	pop	{r7, pc}
 803350e:	bf00      	nop
 8033510:	2000cb7c 	.word	0x2000cb7c

08033514 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8033514:	b580      	push	{r7, lr}
 8033516:	b082      	sub	sp, #8
 8033518:	af00      	add	r7, sp, #0
 803351a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 803351c:	687b      	ldr	r3, [r7, #4]
 803351e:	681b      	ldr	r3, [r3, #0]
 8033520:	4a0e      	ldr	r2, [pc, #56]	; (803355c <HAL_UART_RxCpltCallback+0x48>)
 8033522:	4293      	cmp	r3, r2
 8033524:	d116      	bne.n	8033554 <HAL_UART_RxCpltCallback+0x40>
        // Process the received byte
        if (current_mode == MODE_MQTT) {
 8033526:	4b0e      	ldr	r3, [pc, #56]	; (8033560 <HAL_UART_RxCpltCallback+0x4c>)
 8033528:	781b      	ldrb	r3, [r3, #0]
 803352a:	2b01      	cmp	r3, #1
 803352c:	d105      	bne.n	803353a <HAL_UART_RxCpltCallback+0x26>
            handle_mqtt_byte(received_byte);
 803352e:	4b0d      	ldr	r3, [pc, #52]	; (8033564 <HAL_UART_RxCpltCallback+0x50>)
 8033530:	781b      	ldrb	r3, [r3, #0]
 8033532:	4618      	mov	r0, r3
 8033534:	f7fd ff4a 	bl	80313cc <handle_mqtt_byte>
 8033538:	e004      	b.n	8033544 <HAL_UART_RxCpltCallback+0x30>
        } else {
            handle_default_byte(received_byte);
 803353a:	4b0a      	ldr	r3, [pc, #40]	; (8033564 <HAL_UART_RxCpltCallback+0x50>)
 803353c:	781b      	ldrb	r3, [r3, #0]
 803353e:	4618      	mov	r0, r3
 8033540:	f7fd ff0a 	bl	8031358 <handle_default_byte>
        }

        // Reactivate the UART receive interrupt
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8033544:	2201      	movs	r2, #1
 8033546:	4907      	ldr	r1, [pc, #28]	; (8033564 <HAL_UART_RxCpltCallback+0x50>)
 8033548:	4807      	ldr	r0, [pc, #28]	; (8033568 <HAL_UART_RxCpltCallback+0x54>)
 803354a:	f001 ff1f 	bl	803538c <HAL_UART_Receive_IT>

        // Indicate that new data has been received
        data_received_flag = true;
 803354e:	4b07      	ldr	r3, [pc, #28]	; (803356c <HAL_UART_RxCpltCallback+0x58>)
 8033550:	2201      	movs	r2, #1
 8033552:	701a      	strb	r2, [r3, #0]
    }
}
 8033554:	bf00      	nop
 8033556:	3708      	adds	r7, #8
 8033558:	46bd      	mov	sp, r7
 803355a:	bd80      	pop	{r7, pc}
 803355c:	40004400 	.word	0x40004400
 8033560:	2000ca70 	.word	0x2000ca70
 8033564:	2000c861 	.word	0x2000c861
 8033568:	2000cb38 	.word	0x2000cb38
 803356c:	2000c860 	.word	0x2000c860

08033570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8033570:	b480      	push	{r7}
 8033572:	af00      	add	r7, sp, #0
  return 1;
 8033574:	2301      	movs	r3, #1
}
 8033576:	4618      	mov	r0, r3
 8033578:	46bd      	mov	sp, r7
 803357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803357e:	4770      	bx	lr

08033580 <_kill>:

int _kill(int pid, int sig)
{
 8033580:	b580      	push	{r7, lr}
 8033582:	b082      	sub	sp, #8
 8033584:	af00      	add	r7, sp, #0
 8033586:	6078      	str	r0, [r7, #4]
 8033588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 803358a:	f004 fbc9 	bl	8037d20 <__errno>
 803358e:	4603      	mov	r3, r0
 8033590:	2216      	movs	r2, #22
 8033592:	601a      	str	r2, [r3, #0]
  return -1;
 8033594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8033598:	4618      	mov	r0, r3
 803359a:	3708      	adds	r7, #8
 803359c:	46bd      	mov	sp, r7
 803359e:	bd80      	pop	{r7, pc}

080335a0 <_exit>:

void _exit (int status)
{
 80335a0:	b580      	push	{r7, lr}
 80335a2:	b082      	sub	sp, #8
 80335a4:	af00      	add	r7, sp, #0
 80335a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80335a8:	f04f 31ff 	mov.w	r1, #4294967295
 80335ac:	6878      	ldr	r0, [r7, #4]
 80335ae:	f7ff ffe7 	bl	8033580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80335b2:	e7fe      	b.n	80335b2 <_exit+0x12>

080335b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80335b4:	b580      	push	{r7, lr}
 80335b6:	b086      	sub	sp, #24
 80335b8:	af00      	add	r7, sp, #0
 80335ba:	60f8      	str	r0, [r7, #12]
 80335bc:	60b9      	str	r1, [r7, #8]
 80335be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80335c0:	2300      	movs	r3, #0
 80335c2:	617b      	str	r3, [r7, #20]
 80335c4:	e00a      	b.n	80335dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80335c6:	f3af 8000 	nop.w
 80335ca:	4601      	mov	r1, r0
 80335cc:	68bb      	ldr	r3, [r7, #8]
 80335ce:	1c5a      	adds	r2, r3, #1
 80335d0:	60ba      	str	r2, [r7, #8]
 80335d2:	b2ca      	uxtb	r2, r1
 80335d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80335d6:	697b      	ldr	r3, [r7, #20]
 80335d8:	3301      	adds	r3, #1
 80335da:	617b      	str	r3, [r7, #20]
 80335dc:	697a      	ldr	r2, [r7, #20]
 80335de:	687b      	ldr	r3, [r7, #4]
 80335e0:	429a      	cmp	r2, r3
 80335e2:	dbf0      	blt.n	80335c6 <_read+0x12>
  }

  return len;
 80335e4:	687b      	ldr	r3, [r7, #4]
}
 80335e6:	4618      	mov	r0, r3
 80335e8:	3718      	adds	r7, #24
 80335ea:	46bd      	mov	sp, r7
 80335ec:	bd80      	pop	{r7, pc}

080335ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80335ee:	b580      	push	{r7, lr}
 80335f0:	b086      	sub	sp, #24
 80335f2:	af00      	add	r7, sp, #0
 80335f4:	60f8      	str	r0, [r7, #12]
 80335f6:	60b9      	str	r1, [r7, #8]
 80335f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80335fa:	2300      	movs	r3, #0
 80335fc:	617b      	str	r3, [r7, #20]
 80335fe:	e009      	b.n	8033614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8033600:	68bb      	ldr	r3, [r7, #8]
 8033602:	1c5a      	adds	r2, r3, #1
 8033604:	60ba      	str	r2, [r7, #8]
 8033606:	781b      	ldrb	r3, [r3, #0]
 8033608:	4618      	mov	r0, r3
 803360a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 803360e:	697b      	ldr	r3, [r7, #20]
 8033610:	3301      	adds	r3, #1
 8033612:	617b      	str	r3, [r7, #20]
 8033614:	697a      	ldr	r2, [r7, #20]
 8033616:	687b      	ldr	r3, [r7, #4]
 8033618:	429a      	cmp	r2, r3
 803361a:	dbf1      	blt.n	8033600 <_write+0x12>
  }
  return len;
 803361c:	687b      	ldr	r3, [r7, #4]
}
 803361e:	4618      	mov	r0, r3
 8033620:	3718      	adds	r7, #24
 8033622:	46bd      	mov	sp, r7
 8033624:	bd80      	pop	{r7, pc}

08033626 <_close>:

int _close(int file)
{
 8033626:	b480      	push	{r7}
 8033628:	b083      	sub	sp, #12
 803362a:	af00      	add	r7, sp, #0
 803362c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 803362e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8033632:	4618      	mov	r0, r3
 8033634:	370c      	adds	r7, #12
 8033636:	46bd      	mov	sp, r7
 8033638:	f85d 7b04 	ldr.w	r7, [sp], #4
 803363c:	4770      	bx	lr

0803363e <_fstat>:


int _fstat(int file, struct stat *st)
{
 803363e:	b480      	push	{r7}
 8033640:	b083      	sub	sp, #12
 8033642:	af00      	add	r7, sp, #0
 8033644:	6078      	str	r0, [r7, #4]
 8033646:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8033648:	683b      	ldr	r3, [r7, #0]
 803364a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 803364e:	605a      	str	r2, [r3, #4]
  return 0;
 8033650:	2300      	movs	r3, #0
}
 8033652:	4618      	mov	r0, r3
 8033654:	370c      	adds	r7, #12
 8033656:	46bd      	mov	sp, r7
 8033658:	f85d 7b04 	ldr.w	r7, [sp], #4
 803365c:	4770      	bx	lr

0803365e <_isatty>:

int _isatty(int file)
{
 803365e:	b480      	push	{r7}
 8033660:	b083      	sub	sp, #12
 8033662:	af00      	add	r7, sp, #0
 8033664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8033666:	2301      	movs	r3, #1
}
 8033668:	4618      	mov	r0, r3
 803366a:	370c      	adds	r7, #12
 803366c:	46bd      	mov	sp, r7
 803366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033672:	4770      	bx	lr

08033674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8033674:	b480      	push	{r7}
 8033676:	b085      	sub	sp, #20
 8033678:	af00      	add	r7, sp, #0
 803367a:	60f8      	str	r0, [r7, #12]
 803367c:	60b9      	str	r1, [r7, #8]
 803367e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8033680:	2300      	movs	r3, #0
}
 8033682:	4618      	mov	r0, r3
 8033684:	3714      	adds	r7, #20
 8033686:	46bd      	mov	sp, r7
 8033688:	f85d 7b04 	ldr.w	r7, [sp], #4
 803368c:	4770      	bx	lr
	...

08033690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8033690:	b580      	push	{r7, lr}
 8033692:	b086      	sub	sp, #24
 8033694:	af00      	add	r7, sp, #0
 8033696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8033698:	4a14      	ldr	r2, [pc, #80]	; (80336ec <_sbrk+0x5c>)
 803369a:	4b15      	ldr	r3, [pc, #84]	; (80336f0 <_sbrk+0x60>)
 803369c:	1ad3      	subs	r3, r2, r3
 803369e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80336a0:	697b      	ldr	r3, [r7, #20]
 80336a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80336a4:	4b13      	ldr	r3, [pc, #76]	; (80336f4 <_sbrk+0x64>)
 80336a6:	681b      	ldr	r3, [r3, #0]
 80336a8:	2b00      	cmp	r3, #0
 80336aa:	d102      	bne.n	80336b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80336ac:	4b11      	ldr	r3, [pc, #68]	; (80336f4 <_sbrk+0x64>)
 80336ae:	4a12      	ldr	r2, [pc, #72]	; (80336f8 <_sbrk+0x68>)
 80336b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80336b2:	4b10      	ldr	r3, [pc, #64]	; (80336f4 <_sbrk+0x64>)
 80336b4:	681a      	ldr	r2, [r3, #0]
 80336b6:	687b      	ldr	r3, [r7, #4]
 80336b8:	4413      	add	r3, r2
 80336ba:	693a      	ldr	r2, [r7, #16]
 80336bc:	429a      	cmp	r2, r3
 80336be:	d207      	bcs.n	80336d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80336c0:	f004 fb2e 	bl	8037d20 <__errno>
 80336c4:	4603      	mov	r3, r0
 80336c6:	220c      	movs	r2, #12
 80336c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80336ca:	f04f 33ff 	mov.w	r3, #4294967295
 80336ce:	e009      	b.n	80336e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80336d0:	4b08      	ldr	r3, [pc, #32]	; (80336f4 <_sbrk+0x64>)
 80336d2:	681b      	ldr	r3, [r3, #0]
 80336d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80336d6:	4b07      	ldr	r3, [pc, #28]	; (80336f4 <_sbrk+0x64>)
 80336d8:	681a      	ldr	r2, [r3, #0]
 80336da:	687b      	ldr	r3, [r7, #4]
 80336dc:	4413      	add	r3, r2
 80336de:	4a05      	ldr	r2, [pc, #20]	; (80336f4 <_sbrk+0x64>)
 80336e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80336e2:	68fb      	ldr	r3, [r7, #12]
}
 80336e4:	4618      	mov	r0, r3
 80336e6:	3718      	adds	r7, #24
 80336e8:	46bd      	mov	sp, r7
 80336ea:	bd80      	pop	{r7, pc}
 80336ec:	20020000 	.word	0x20020000
 80336f0:	00000400 	.word	0x00000400
 80336f4:	2000cbc0 	.word	0x2000cbc0
 80336f8:	2000cd38 	.word	0x2000cd38

080336fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80336fc:	b480      	push	{r7}
 80336fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8033700:	4b06      	ldr	r3, [pc, #24]	; (803371c <SystemInit+0x20>)
 8033702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8033706:	4a05      	ldr	r2, [pc, #20]	; (803371c <SystemInit+0x20>)
 8033708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 803370c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8033710:	bf00      	nop
 8033712:	46bd      	mov	sp, r7
 8033714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033718:	4770      	bx	lr
 803371a:	bf00      	nop
 803371c:	e000ed00 	.word	0xe000ed00

08033720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8033720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8033758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8033724:	480d      	ldr	r0, [pc, #52]	; (803375c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8033726:	490e      	ldr	r1, [pc, #56]	; (8033760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8033728:	4a0e      	ldr	r2, [pc, #56]	; (8033764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 803372a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 803372c:	e002      	b.n	8033734 <LoopCopyDataInit>

0803372e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 803372e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8033730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8033732:	3304      	adds	r3, #4

08033734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8033734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8033736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8033738:	d3f9      	bcc.n	803372e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 803373a:	4a0b      	ldr	r2, [pc, #44]	; (8033768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 803373c:	4c0b      	ldr	r4, [pc, #44]	; (803376c <LoopFillZerobss+0x26>)
  movs r3, #0
 803373e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8033740:	e001      	b.n	8033746 <LoopFillZerobss>

08033742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8033742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8033744:	3204      	adds	r2, #4

08033746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8033746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8033748:	d3fb      	bcc.n	8033742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 803374a:	f7ff ffd7 	bl	80336fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 803374e:	f004 faed 	bl	8037d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8033752:	f7ff faab 	bl	8032cac <main>
  bx  lr    
 8033756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8033758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 803375c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8033760:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8033764:	0803ad74 	.word	0x0803ad74
  ldr r2, =_sbss
 8033768:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 803376c:	2000cd34 	.word	0x2000cd34

08033770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8033770:	e7fe      	b.n	8033770 <ADC_IRQHandler>
	...

08033774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8033774:	b580      	push	{r7, lr}
 8033776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8033778:	4b0e      	ldr	r3, [pc, #56]	; (80337b4 <HAL_Init+0x40>)
 803377a:	681b      	ldr	r3, [r3, #0]
 803377c:	4a0d      	ldr	r2, [pc, #52]	; (80337b4 <HAL_Init+0x40>)
 803377e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8033782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8033784:	4b0b      	ldr	r3, [pc, #44]	; (80337b4 <HAL_Init+0x40>)
 8033786:	681b      	ldr	r3, [r3, #0]
 8033788:	4a0a      	ldr	r2, [pc, #40]	; (80337b4 <HAL_Init+0x40>)
 803378a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 803378e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8033790:	4b08      	ldr	r3, [pc, #32]	; (80337b4 <HAL_Init+0x40>)
 8033792:	681b      	ldr	r3, [r3, #0]
 8033794:	4a07      	ldr	r2, [pc, #28]	; (80337b4 <HAL_Init+0x40>)
 8033796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803379a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 803379c:	2003      	movs	r0, #3
 803379e:	f000 f94f 	bl	8033a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80337a2:	2000      	movs	r0, #0
 80337a4:	f000 f808 	bl	80337b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80337a8:	f7ff fd0e 	bl	80331c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80337ac:	2300      	movs	r3, #0
}
 80337ae:	4618      	mov	r0, r3
 80337b0:	bd80      	pop	{r7, pc}
 80337b2:	bf00      	nop
 80337b4:	40023c00 	.word	0x40023c00

080337b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80337b8:	b580      	push	{r7, lr}
 80337ba:	b082      	sub	sp, #8
 80337bc:	af00      	add	r7, sp, #0
 80337be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80337c0:	4b12      	ldr	r3, [pc, #72]	; (803380c <HAL_InitTick+0x54>)
 80337c2:	681a      	ldr	r2, [r3, #0]
 80337c4:	4b12      	ldr	r3, [pc, #72]	; (8033810 <HAL_InitTick+0x58>)
 80337c6:	781b      	ldrb	r3, [r3, #0]
 80337c8:	4619      	mov	r1, r3
 80337ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80337ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80337d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80337d6:	4618      	mov	r0, r3
 80337d8:	f000 f967 	bl	8033aaa <HAL_SYSTICK_Config>
 80337dc:	4603      	mov	r3, r0
 80337de:	2b00      	cmp	r3, #0
 80337e0:	d001      	beq.n	80337e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80337e2:	2301      	movs	r3, #1
 80337e4:	e00e      	b.n	8033804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80337e6:	687b      	ldr	r3, [r7, #4]
 80337e8:	2b0f      	cmp	r3, #15
 80337ea:	d80a      	bhi.n	8033802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80337ec:	2200      	movs	r2, #0
 80337ee:	6879      	ldr	r1, [r7, #4]
 80337f0:	f04f 30ff 	mov.w	r0, #4294967295
 80337f4:	f000 f92f 	bl	8033a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80337f8:	4a06      	ldr	r2, [pc, #24]	; (8033814 <HAL_InitTick+0x5c>)
 80337fa:	687b      	ldr	r3, [r7, #4]
 80337fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80337fe:	2300      	movs	r3, #0
 8033800:	e000      	b.n	8033804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8033802:	2301      	movs	r3, #1
}
 8033804:	4618      	mov	r0, r3
 8033806:	3708      	adds	r7, #8
 8033808:	46bd      	mov	sp, r7
 803380a:	bd80      	pop	{r7, pc}
 803380c:	20000018 	.word	0x20000018
 8033810:	20000020 	.word	0x20000020
 8033814:	2000001c 	.word	0x2000001c

08033818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8033818:	b480      	push	{r7}
 803381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 803381c:	4b06      	ldr	r3, [pc, #24]	; (8033838 <HAL_IncTick+0x20>)
 803381e:	781b      	ldrb	r3, [r3, #0]
 8033820:	461a      	mov	r2, r3
 8033822:	4b06      	ldr	r3, [pc, #24]	; (803383c <HAL_IncTick+0x24>)
 8033824:	681b      	ldr	r3, [r3, #0]
 8033826:	4413      	add	r3, r2
 8033828:	4a04      	ldr	r2, [pc, #16]	; (803383c <HAL_IncTick+0x24>)
 803382a:	6013      	str	r3, [r2, #0]
}
 803382c:	bf00      	nop
 803382e:	46bd      	mov	sp, r7
 8033830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033834:	4770      	bx	lr
 8033836:	bf00      	nop
 8033838:	20000020 	.word	0x20000020
 803383c:	2000cbc4 	.word	0x2000cbc4

08033840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8033840:	b480      	push	{r7}
 8033842:	af00      	add	r7, sp, #0
  return uwTick;
 8033844:	4b03      	ldr	r3, [pc, #12]	; (8033854 <HAL_GetTick+0x14>)
 8033846:	681b      	ldr	r3, [r3, #0]
}
 8033848:	4618      	mov	r0, r3
 803384a:	46bd      	mov	sp, r7
 803384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033850:	4770      	bx	lr
 8033852:	bf00      	nop
 8033854:	2000cbc4 	.word	0x2000cbc4

08033858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8033858:	b580      	push	{r7, lr}
 803385a:	b084      	sub	sp, #16
 803385c:	af00      	add	r7, sp, #0
 803385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8033860:	f7ff ffee 	bl	8033840 <HAL_GetTick>
 8033864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8033866:	687b      	ldr	r3, [r7, #4]
 8033868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 803386a:	68fb      	ldr	r3, [r7, #12]
 803386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8033870:	d005      	beq.n	803387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8033872:	4b0a      	ldr	r3, [pc, #40]	; (803389c <HAL_Delay+0x44>)
 8033874:	781b      	ldrb	r3, [r3, #0]
 8033876:	461a      	mov	r2, r3
 8033878:	68fb      	ldr	r3, [r7, #12]
 803387a:	4413      	add	r3, r2
 803387c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 803387e:	bf00      	nop
 8033880:	f7ff ffde 	bl	8033840 <HAL_GetTick>
 8033884:	4602      	mov	r2, r0
 8033886:	68bb      	ldr	r3, [r7, #8]
 8033888:	1ad3      	subs	r3, r2, r3
 803388a:	68fa      	ldr	r2, [r7, #12]
 803388c:	429a      	cmp	r2, r3
 803388e:	d8f7      	bhi.n	8033880 <HAL_Delay+0x28>
  {
  }
}
 8033890:	bf00      	nop
 8033892:	bf00      	nop
 8033894:	3710      	adds	r7, #16
 8033896:	46bd      	mov	sp, r7
 8033898:	bd80      	pop	{r7, pc}
 803389a:	bf00      	nop
 803389c:	20000020 	.word	0x20000020

080338a0 <__NVIC_SetPriorityGrouping>:
{
 80338a0:	b480      	push	{r7}
 80338a2:	b085      	sub	sp, #20
 80338a4:	af00      	add	r7, sp, #0
 80338a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80338a8:	687b      	ldr	r3, [r7, #4]
 80338aa:	f003 0307 	and.w	r3, r3, #7
 80338ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80338b0:	4b0c      	ldr	r3, [pc, #48]	; (80338e4 <__NVIC_SetPriorityGrouping+0x44>)
 80338b2:	68db      	ldr	r3, [r3, #12]
 80338b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80338b6:	68ba      	ldr	r2, [r7, #8]
 80338b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80338bc:	4013      	ands	r3, r2
 80338be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80338c0:	68fb      	ldr	r3, [r7, #12]
 80338c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80338c4:	68bb      	ldr	r3, [r7, #8]
 80338c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80338c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80338cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80338d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80338d2:	4a04      	ldr	r2, [pc, #16]	; (80338e4 <__NVIC_SetPriorityGrouping+0x44>)
 80338d4:	68bb      	ldr	r3, [r7, #8]
 80338d6:	60d3      	str	r3, [r2, #12]
}
 80338d8:	bf00      	nop
 80338da:	3714      	adds	r7, #20
 80338dc:	46bd      	mov	sp, r7
 80338de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80338e2:	4770      	bx	lr
 80338e4:	e000ed00 	.word	0xe000ed00

080338e8 <__NVIC_GetPriorityGrouping>:
{
 80338e8:	b480      	push	{r7}
 80338ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80338ec:	4b04      	ldr	r3, [pc, #16]	; (8033900 <__NVIC_GetPriorityGrouping+0x18>)
 80338ee:	68db      	ldr	r3, [r3, #12]
 80338f0:	0a1b      	lsrs	r3, r3, #8
 80338f2:	f003 0307 	and.w	r3, r3, #7
}
 80338f6:	4618      	mov	r0, r3
 80338f8:	46bd      	mov	sp, r7
 80338fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80338fe:	4770      	bx	lr
 8033900:	e000ed00 	.word	0xe000ed00

08033904 <__NVIC_EnableIRQ>:
{
 8033904:	b480      	push	{r7}
 8033906:	b083      	sub	sp, #12
 8033908:	af00      	add	r7, sp, #0
 803390a:	4603      	mov	r3, r0
 803390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8033912:	2b00      	cmp	r3, #0
 8033914:	db0b      	blt.n	803392e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8033916:	79fb      	ldrb	r3, [r7, #7]
 8033918:	f003 021f 	and.w	r2, r3, #31
 803391c:	4907      	ldr	r1, [pc, #28]	; (803393c <__NVIC_EnableIRQ+0x38>)
 803391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8033922:	095b      	lsrs	r3, r3, #5
 8033924:	2001      	movs	r0, #1
 8033926:	fa00 f202 	lsl.w	r2, r0, r2
 803392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 803392e:	bf00      	nop
 8033930:	370c      	adds	r7, #12
 8033932:	46bd      	mov	sp, r7
 8033934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033938:	4770      	bx	lr
 803393a:	bf00      	nop
 803393c:	e000e100 	.word	0xe000e100

08033940 <__NVIC_SetPriority>:
{
 8033940:	b480      	push	{r7}
 8033942:	b083      	sub	sp, #12
 8033944:	af00      	add	r7, sp, #0
 8033946:	4603      	mov	r3, r0
 8033948:	6039      	str	r1, [r7, #0]
 803394a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8033950:	2b00      	cmp	r3, #0
 8033952:	db0a      	blt.n	803396a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8033954:	683b      	ldr	r3, [r7, #0]
 8033956:	b2da      	uxtb	r2, r3
 8033958:	490c      	ldr	r1, [pc, #48]	; (803398c <__NVIC_SetPriority+0x4c>)
 803395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803395e:	0112      	lsls	r2, r2, #4
 8033960:	b2d2      	uxtb	r2, r2
 8033962:	440b      	add	r3, r1
 8033964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8033968:	e00a      	b.n	8033980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 803396a:	683b      	ldr	r3, [r7, #0]
 803396c:	b2da      	uxtb	r2, r3
 803396e:	4908      	ldr	r1, [pc, #32]	; (8033990 <__NVIC_SetPriority+0x50>)
 8033970:	79fb      	ldrb	r3, [r7, #7]
 8033972:	f003 030f 	and.w	r3, r3, #15
 8033976:	3b04      	subs	r3, #4
 8033978:	0112      	lsls	r2, r2, #4
 803397a:	b2d2      	uxtb	r2, r2
 803397c:	440b      	add	r3, r1
 803397e:	761a      	strb	r2, [r3, #24]
}
 8033980:	bf00      	nop
 8033982:	370c      	adds	r7, #12
 8033984:	46bd      	mov	sp, r7
 8033986:	f85d 7b04 	ldr.w	r7, [sp], #4
 803398a:	4770      	bx	lr
 803398c:	e000e100 	.word	0xe000e100
 8033990:	e000ed00 	.word	0xe000ed00

08033994 <NVIC_EncodePriority>:
{
 8033994:	b480      	push	{r7}
 8033996:	b089      	sub	sp, #36	; 0x24
 8033998:	af00      	add	r7, sp, #0
 803399a:	60f8      	str	r0, [r7, #12]
 803399c:	60b9      	str	r1, [r7, #8]
 803399e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80339a0:	68fb      	ldr	r3, [r7, #12]
 80339a2:	f003 0307 	and.w	r3, r3, #7
 80339a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80339a8:	69fb      	ldr	r3, [r7, #28]
 80339aa:	f1c3 0307 	rsb	r3, r3, #7
 80339ae:	2b04      	cmp	r3, #4
 80339b0:	bf28      	it	cs
 80339b2:	2304      	movcs	r3, #4
 80339b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80339b6:	69fb      	ldr	r3, [r7, #28]
 80339b8:	3304      	adds	r3, #4
 80339ba:	2b06      	cmp	r3, #6
 80339bc:	d902      	bls.n	80339c4 <NVIC_EncodePriority+0x30>
 80339be:	69fb      	ldr	r3, [r7, #28]
 80339c0:	3b03      	subs	r3, #3
 80339c2:	e000      	b.n	80339c6 <NVIC_EncodePriority+0x32>
 80339c4:	2300      	movs	r3, #0
 80339c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80339c8:	f04f 32ff 	mov.w	r2, #4294967295
 80339cc:	69bb      	ldr	r3, [r7, #24]
 80339ce:	fa02 f303 	lsl.w	r3, r2, r3
 80339d2:	43da      	mvns	r2, r3
 80339d4:	68bb      	ldr	r3, [r7, #8]
 80339d6:	401a      	ands	r2, r3
 80339d8:	697b      	ldr	r3, [r7, #20]
 80339da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80339dc:	f04f 31ff 	mov.w	r1, #4294967295
 80339e0:	697b      	ldr	r3, [r7, #20]
 80339e2:	fa01 f303 	lsl.w	r3, r1, r3
 80339e6:	43d9      	mvns	r1, r3
 80339e8:	687b      	ldr	r3, [r7, #4]
 80339ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80339ec:	4313      	orrs	r3, r2
}
 80339ee:	4618      	mov	r0, r3
 80339f0:	3724      	adds	r7, #36	; 0x24
 80339f2:	46bd      	mov	sp, r7
 80339f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80339f8:	4770      	bx	lr
	...

080339fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80339fc:	b580      	push	{r7, lr}
 80339fe:	b082      	sub	sp, #8
 8033a00:	af00      	add	r7, sp, #0
 8033a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8033a04:	687b      	ldr	r3, [r7, #4]
 8033a06:	3b01      	subs	r3, #1
 8033a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8033a0c:	d301      	bcc.n	8033a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8033a0e:	2301      	movs	r3, #1
 8033a10:	e00f      	b.n	8033a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8033a12:	4a0a      	ldr	r2, [pc, #40]	; (8033a3c <SysTick_Config+0x40>)
 8033a14:	687b      	ldr	r3, [r7, #4]
 8033a16:	3b01      	subs	r3, #1
 8033a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8033a1a:	210f      	movs	r1, #15
 8033a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8033a20:	f7ff ff8e 	bl	8033940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8033a24:	4b05      	ldr	r3, [pc, #20]	; (8033a3c <SysTick_Config+0x40>)
 8033a26:	2200      	movs	r2, #0
 8033a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8033a2a:	4b04      	ldr	r3, [pc, #16]	; (8033a3c <SysTick_Config+0x40>)
 8033a2c:	2207      	movs	r2, #7
 8033a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8033a30:	2300      	movs	r3, #0
}
 8033a32:	4618      	mov	r0, r3
 8033a34:	3708      	adds	r7, #8
 8033a36:	46bd      	mov	sp, r7
 8033a38:	bd80      	pop	{r7, pc}
 8033a3a:	bf00      	nop
 8033a3c:	e000e010 	.word	0xe000e010

08033a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8033a40:	b580      	push	{r7, lr}
 8033a42:	b082      	sub	sp, #8
 8033a44:	af00      	add	r7, sp, #0
 8033a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8033a48:	6878      	ldr	r0, [r7, #4]
 8033a4a:	f7ff ff29 	bl	80338a0 <__NVIC_SetPriorityGrouping>
}
 8033a4e:	bf00      	nop
 8033a50:	3708      	adds	r7, #8
 8033a52:	46bd      	mov	sp, r7
 8033a54:	bd80      	pop	{r7, pc}

08033a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8033a56:	b580      	push	{r7, lr}
 8033a58:	b086      	sub	sp, #24
 8033a5a:	af00      	add	r7, sp, #0
 8033a5c:	4603      	mov	r3, r0
 8033a5e:	60b9      	str	r1, [r7, #8]
 8033a60:	607a      	str	r2, [r7, #4]
 8033a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8033a64:	2300      	movs	r3, #0
 8033a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8033a68:	f7ff ff3e 	bl	80338e8 <__NVIC_GetPriorityGrouping>
 8033a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8033a6e:	687a      	ldr	r2, [r7, #4]
 8033a70:	68b9      	ldr	r1, [r7, #8]
 8033a72:	6978      	ldr	r0, [r7, #20]
 8033a74:	f7ff ff8e 	bl	8033994 <NVIC_EncodePriority>
 8033a78:	4602      	mov	r2, r0
 8033a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8033a7e:	4611      	mov	r1, r2
 8033a80:	4618      	mov	r0, r3
 8033a82:	f7ff ff5d 	bl	8033940 <__NVIC_SetPriority>
}
 8033a86:	bf00      	nop
 8033a88:	3718      	adds	r7, #24
 8033a8a:	46bd      	mov	sp, r7
 8033a8c:	bd80      	pop	{r7, pc}

08033a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8033a8e:	b580      	push	{r7, lr}
 8033a90:	b082      	sub	sp, #8
 8033a92:	af00      	add	r7, sp, #0
 8033a94:	4603      	mov	r3, r0
 8033a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8033a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8033a9c:	4618      	mov	r0, r3
 8033a9e:	f7ff ff31 	bl	8033904 <__NVIC_EnableIRQ>
}
 8033aa2:	bf00      	nop
 8033aa4:	3708      	adds	r7, #8
 8033aa6:	46bd      	mov	sp, r7
 8033aa8:	bd80      	pop	{r7, pc}

08033aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8033aaa:	b580      	push	{r7, lr}
 8033aac:	b082      	sub	sp, #8
 8033aae:	af00      	add	r7, sp, #0
 8033ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8033ab2:	6878      	ldr	r0, [r7, #4]
 8033ab4:	f7ff ffa2 	bl	80339fc <SysTick_Config>
 8033ab8:	4603      	mov	r3, r0
}
 8033aba:	4618      	mov	r0, r3
 8033abc:	3708      	adds	r7, #8
 8033abe:	46bd      	mov	sp, r7
 8033ac0:	bd80      	pop	{r7, pc}

08033ac2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8033ac2:	b580      	push	{r7, lr}
 8033ac4:	b084      	sub	sp, #16
 8033ac6:	af00      	add	r7, sp, #0
 8033ac8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8033aca:	687b      	ldr	r3, [r7, #4]
 8033acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8033ace:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8033ad0:	f7ff feb6 	bl	8033840 <HAL_GetTick>
 8033ad4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8033ad6:	687b      	ldr	r3, [r7, #4]
 8033ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8033adc:	b2db      	uxtb	r3, r3
 8033ade:	2b02      	cmp	r3, #2
 8033ae0:	d008      	beq.n	8033af4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8033ae2:	687b      	ldr	r3, [r7, #4]
 8033ae4:	2280      	movs	r2, #128	; 0x80
 8033ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8033ae8:	687b      	ldr	r3, [r7, #4]
 8033aea:	2200      	movs	r2, #0
 8033aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8033af0:	2301      	movs	r3, #1
 8033af2:	e052      	b.n	8033b9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8033af4:	687b      	ldr	r3, [r7, #4]
 8033af6:	681b      	ldr	r3, [r3, #0]
 8033af8:	681a      	ldr	r2, [r3, #0]
 8033afa:	687b      	ldr	r3, [r7, #4]
 8033afc:	681b      	ldr	r3, [r3, #0]
 8033afe:	f022 0216 	bic.w	r2, r2, #22
 8033b02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8033b04:	687b      	ldr	r3, [r7, #4]
 8033b06:	681b      	ldr	r3, [r3, #0]
 8033b08:	695a      	ldr	r2, [r3, #20]
 8033b0a:	687b      	ldr	r3, [r7, #4]
 8033b0c:	681b      	ldr	r3, [r3, #0]
 8033b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8033b12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8033b14:	687b      	ldr	r3, [r7, #4]
 8033b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033b18:	2b00      	cmp	r3, #0
 8033b1a:	d103      	bne.n	8033b24 <HAL_DMA_Abort+0x62>
 8033b1c:	687b      	ldr	r3, [r7, #4]
 8033b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8033b20:	2b00      	cmp	r3, #0
 8033b22:	d007      	beq.n	8033b34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8033b24:	687b      	ldr	r3, [r7, #4]
 8033b26:	681b      	ldr	r3, [r3, #0]
 8033b28:	681a      	ldr	r2, [r3, #0]
 8033b2a:	687b      	ldr	r3, [r7, #4]
 8033b2c:	681b      	ldr	r3, [r3, #0]
 8033b2e:	f022 0208 	bic.w	r2, r2, #8
 8033b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8033b34:	687b      	ldr	r3, [r7, #4]
 8033b36:	681b      	ldr	r3, [r3, #0]
 8033b38:	681a      	ldr	r2, [r3, #0]
 8033b3a:	687b      	ldr	r3, [r7, #4]
 8033b3c:	681b      	ldr	r3, [r3, #0]
 8033b3e:	f022 0201 	bic.w	r2, r2, #1
 8033b42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8033b44:	e013      	b.n	8033b6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8033b46:	f7ff fe7b 	bl	8033840 <HAL_GetTick>
 8033b4a:	4602      	mov	r2, r0
 8033b4c:	68bb      	ldr	r3, [r7, #8]
 8033b4e:	1ad3      	subs	r3, r2, r3
 8033b50:	2b05      	cmp	r3, #5
 8033b52:	d90c      	bls.n	8033b6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8033b54:	687b      	ldr	r3, [r7, #4]
 8033b56:	2220      	movs	r2, #32
 8033b58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8033b5a:	687b      	ldr	r3, [r7, #4]
 8033b5c:	2203      	movs	r2, #3
 8033b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8033b62:	687b      	ldr	r3, [r7, #4]
 8033b64:	2200      	movs	r2, #0
 8033b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8033b6a:	2303      	movs	r3, #3
 8033b6c:	e015      	b.n	8033b9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8033b6e:	687b      	ldr	r3, [r7, #4]
 8033b70:	681b      	ldr	r3, [r3, #0]
 8033b72:	681b      	ldr	r3, [r3, #0]
 8033b74:	f003 0301 	and.w	r3, r3, #1
 8033b78:	2b00      	cmp	r3, #0
 8033b7a:	d1e4      	bne.n	8033b46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8033b7c:	687b      	ldr	r3, [r7, #4]
 8033b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033b80:	223f      	movs	r2, #63	; 0x3f
 8033b82:	409a      	lsls	r2, r3
 8033b84:	68fb      	ldr	r3, [r7, #12]
 8033b86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8033b88:	687b      	ldr	r3, [r7, #4]
 8033b8a:	2201      	movs	r2, #1
 8033b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8033b90:	687b      	ldr	r3, [r7, #4]
 8033b92:	2200      	movs	r2, #0
 8033b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8033b98:	2300      	movs	r3, #0
}
 8033b9a:	4618      	mov	r0, r3
 8033b9c:	3710      	adds	r7, #16
 8033b9e:	46bd      	mov	sp, r7
 8033ba0:	bd80      	pop	{r7, pc}

08033ba2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8033ba2:	b480      	push	{r7}
 8033ba4:	b083      	sub	sp, #12
 8033ba6:	af00      	add	r7, sp, #0
 8033ba8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8033baa:	687b      	ldr	r3, [r7, #4]
 8033bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8033bb0:	b2db      	uxtb	r3, r3
 8033bb2:	2b02      	cmp	r3, #2
 8033bb4:	d004      	beq.n	8033bc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8033bb6:	687b      	ldr	r3, [r7, #4]
 8033bb8:	2280      	movs	r2, #128	; 0x80
 8033bba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8033bbc:	2301      	movs	r3, #1
 8033bbe:	e00c      	b.n	8033bda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8033bc0:	687b      	ldr	r3, [r7, #4]
 8033bc2:	2205      	movs	r2, #5
 8033bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8033bc8:	687b      	ldr	r3, [r7, #4]
 8033bca:	681b      	ldr	r3, [r3, #0]
 8033bcc:	681a      	ldr	r2, [r3, #0]
 8033bce:	687b      	ldr	r3, [r7, #4]
 8033bd0:	681b      	ldr	r3, [r3, #0]
 8033bd2:	f022 0201 	bic.w	r2, r2, #1
 8033bd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8033bd8:	2300      	movs	r3, #0
}
 8033bda:	4618      	mov	r0, r3
 8033bdc:	370c      	adds	r7, #12
 8033bde:	46bd      	mov	sp, r7
 8033be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033be4:	4770      	bx	lr
	...

08033be8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8033be8:	b580      	push	{r7, lr}
 8033bea:	b086      	sub	sp, #24
 8033bec:	af00      	add	r7, sp, #0
 8033bee:	60f8      	str	r0, [r7, #12]
 8033bf0:	60b9      	str	r1, [r7, #8]
 8033bf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8033bf6:	2301      	movs	r3, #1
 8033bf8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8033bfa:	4b23      	ldr	r3, [pc, #140]	; (8033c88 <HAL_FLASH_Program+0xa0>)
 8033bfc:	7e1b      	ldrb	r3, [r3, #24]
 8033bfe:	2b01      	cmp	r3, #1
 8033c00:	d101      	bne.n	8033c06 <HAL_FLASH_Program+0x1e>
 8033c02:	2302      	movs	r3, #2
 8033c04:	e03b      	b.n	8033c7e <HAL_FLASH_Program+0x96>
 8033c06:	4b20      	ldr	r3, [pc, #128]	; (8033c88 <HAL_FLASH_Program+0xa0>)
 8033c08:	2201      	movs	r2, #1
 8033c0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033c10:	f000 f870 	bl	8033cf4 <FLASH_WaitForLastOperation>
 8033c14:	4603      	mov	r3, r0
 8033c16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8033c18:	7dfb      	ldrb	r3, [r7, #23]
 8033c1a:	2b00      	cmp	r3, #0
 8033c1c:	d12b      	bne.n	8033c76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8033c1e:	68fb      	ldr	r3, [r7, #12]
 8033c20:	2b00      	cmp	r3, #0
 8033c22:	d105      	bne.n	8033c30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8033c24:	783b      	ldrb	r3, [r7, #0]
 8033c26:	4619      	mov	r1, r3
 8033c28:	68b8      	ldr	r0, [r7, #8]
 8033c2a:	f000 f91b 	bl	8033e64 <FLASH_Program_Byte>
 8033c2e:	e016      	b.n	8033c5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8033c30:	68fb      	ldr	r3, [r7, #12]
 8033c32:	2b01      	cmp	r3, #1
 8033c34:	d105      	bne.n	8033c42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8033c36:	883b      	ldrh	r3, [r7, #0]
 8033c38:	4619      	mov	r1, r3
 8033c3a:	68b8      	ldr	r0, [r7, #8]
 8033c3c:	f000 f8ee 	bl	8033e1c <FLASH_Program_HalfWord>
 8033c40:	e00d      	b.n	8033c5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8033c42:	68fb      	ldr	r3, [r7, #12]
 8033c44:	2b02      	cmp	r3, #2
 8033c46:	d105      	bne.n	8033c54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8033c48:	683b      	ldr	r3, [r7, #0]
 8033c4a:	4619      	mov	r1, r3
 8033c4c:	68b8      	ldr	r0, [r7, #8]
 8033c4e:	f000 f8c3 	bl	8033dd8 <FLASH_Program_Word>
 8033c52:	e004      	b.n	8033c5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8033c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033c58:	68b8      	ldr	r0, [r7, #8]
 8033c5a:	f000 f88b 	bl	8033d74 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033c5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033c62:	f000 f847 	bl	8033cf4 <FLASH_WaitForLastOperation>
 8033c66:	4603      	mov	r3, r0
 8033c68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8033c6a:	4b08      	ldr	r3, [pc, #32]	; (8033c8c <HAL_FLASH_Program+0xa4>)
 8033c6c:	691b      	ldr	r3, [r3, #16]
 8033c6e:	4a07      	ldr	r2, [pc, #28]	; (8033c8c <HAL_FLASH_Program+0xa4>)
 8033c70:	f023 0301 	bic.w	r3, r3, #1
 8033c74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8033c76:	4b04      	ldr	r3, [pc, #16]	; (8033c88 <HAL_FLASH_Program+0xa0>)
 8033c78:	2200      	movs	r2, #0
 8033c7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8033c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8033c7e:	4618      	mov	r0, r3
 8033c80:	3718      	adds	r7, #24
 8033c82:	46bd      	mov	sp, r7
 8033c84:	bd80      	pop	{r7, pc}
 8033c86:	bf00      	nop
 8033c88:	2000cbc8 	.word	0x2000cbc8
 8033c8c:	40023c00 	.word	0x40023c00

08033c90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8033c90:	b480      	push	{r7}
 8033c92:	b083      	sub	sp, #12
 8033c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8033c96:	2300      	movs	r3, #0
 8033c98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8033c9a:	4b0b      	ldr	r3, [pc, #44]	; (8033cc8 <HAL_FLASH_Unlock+0x38>)
 8033c9c:	691b      	ldr	r3, [r3, #16]
 8033c9e:	2b00      	cmp	r3, #0
 8033ca0:	da0b      	bge.n	8033cba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8033ca2:	4b09      	ldr	r3, [pc, #36]	; (8033cc8 <HAL_FLASH_Unlock+0x38>)
 8033ca4:	4a09      	ldr	r2, [pc, #36]	; (8033ccc <HAL_FLASH_Unlock+0x3c>)
 8033ca6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8033ca8:	4b07      	ldr	r3, [pc, #28]	; (8033cc8 <HAL_FLASH_Unlock+0x38>)
 8033caa:	4a09      	ldr	r2, [pc, #36]	; (8033cd0 <HAL_FLASH_Unlock+0x40>)
 8033cac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8033cae:	4b06      	ldr	r3, [pc, #24]	; (8033cc8 <HAL_FLASH_Unlock+0x38>)
 8033cb0:	691b      	ldr	r3, [r3, #16]
 8033cb2:	2b00      	cmp	r3, #0
 8033cb4:	da01      	bge.n	8033cba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8033cb6:	2301      	movs	r3, #1
 8033cb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8033cba:	79fb      	ldrb	r3, [r7, #7]
}
 8033cbc:	4618      	mov	r0, r3
 8033cbe:	370c      	adds	r7, #12
 8033cc0:	46bd      	mov	sp, r7
 8033cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033cc6:	4770      	bx	lr
 8033cc8:	40023c00 	.word	0x40023c00
 8033ccc:	45670123 	.word	0x45670123
 8033cd0:	cdef89ab 	.word	0xcdef89ab

08033cd4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8033cd4:	b480      	push	{r7}
 8033cd6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8033cd8:	4b05      	ldr	r3, [pc, #20]	; (8033cf0 <HAL_FLASH_Lock+0x1c>)
 8033cda:	691b      	ldr	r3, [r3, #16]
 8033cdc:	4a04      	ldr	r2, [pc, #16]	; (8033cf0 <HAL_FLASH_Lock+0x1c>)
 8033cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8033ce2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8033ce4:	2300      	movs	r3, #0
}
 8033ce6:	4618      	mov	r0, r3
 8033ce8:	46bd      	mov	sp, r7
 8033cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033cee:	4770      	bx	lr
 8033cf0:	40023c00 	.word	0x40023c00

08033cf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8033cf4:	b580      	push	{r7, lr}
 8033cf6:	b084      	sub	sp, #16
 8033cf8:	af00      	add	r7, sp, #0
 8033cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8033cfc:	2300      	movs	r3, #0
 8033cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8033d00:	4b1a      	ldr	r3, [pc, #104]	; (8033d6c <FLASH_WaitForLastOperation+0x78>)
 8033d02:	2200      	movs	r2, #0
 8033d04:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8033d06:	f7ff fd9b 	bl	8033840 <HAL_GetTick>
 8033d0a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8033d0c:	e010      	b.n	8033d30 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8033d0e:	687b      	ldr	r3, [r7, #4]
 8033d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8033d14:	d00c      	beq.n	8033d30 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8033d16:	687b      	ldr	r3, [r7, #4]
 8033d18:	2b00      	cmp	r3, #0
 8033d1a:	d007      	beq.n	8033d2c <FLASH_WaitForLastOperation+0x38>
 8033d1c:	f7ff fd90 	bl	8033840 <HAL_GetTick>
 8033d20:	4602      	mov	r2, r0
 8033d22:	68fb      	ldr	r3, [r7, #12]
 8033d24:	1ad3      	subs	r3, r2, r3
 8033d26:	687a      	ldr	r2, [r7, #4]
 8033d28:	429a      	cmp	r2, r3
 8033d2a:	d201      	bcs.n	8033d30 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8033d2c:	2303      	movs	r3, #3
 8033d2e:	e019      	b.n	8033d64 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8033d30:	4b0f      	ldr	r3, [pc, #60]	; (8033d70 <FLASH_WaitForLastOperation+0x7c>)
 8033d32:	68db      	ldr	r3, [r3, #12]
 8033d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8033d38:	2b00      	cmp	r3, #0
 8033d3a:	d1e8      	bne.n	8033d0e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8033d3c:	4b0c      	ldr	r3, [pc, #48]	; (8033d70 <FLASH_WaitForLastOperation+0x7c>)
 8033d3e:	68db      	ldr	r3, [r3, #12]
 8033d40:	f003 0301 	and.w	r3, r3, #1
 8033d44:	2b00      	cmp	r3, #0
 8033d46:	d002      	beq.n	8033d4e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8033d48:	4b09      	ldr	r3, [pc, #36]	; (8033d70 <FLASH_WaitForLastOperation+0x7c>)
 8033d4a:	2201      	movs	r2, #1
 8033d4c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8033d4e:	4b08      	ldr	r3, [pc, #32]	; (8033d70 <FLASH_WaitForLastOperation+0x7c>)
 8033d50:	68db      	ldr	r3, [r3, #12]
 8033d52:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8033d56:	2b00      	cmp	r3, #0
 8033d58:	d003      	beq.n	8033d62 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8033d5a:	f000 f8a5 	bl	8033ea8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8033d5e:	2301      	movs	r3, #1
 8033d60:	e000      	b.n	8033d64 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8033d62:	2300      	movs	r3, #0
  
}  
 8033d64:	4618      	mov	r0, r3
 8033d66:	3710      	adds	r7, #16
 8033d68:	46bd      	mov	sp, r7
 8033d6a:	bd80      	pop	{r7, pc}
 8033d6c:	2000cbc8 	.word	0x2000cbc8
 8033d70:	40023c00 	.word	0x40023c00

08033d74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8033d74:	b480      	push	{r7}
 8033d76:	b085      	sub	sp, #20
 8033d78:	af00      	add	r7, sp, #0
 8033d7a:	60f8      	str	r0, [r7, #12]
 8033d7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033d80:	4b14      	ldr	r3, [pc, #80]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d82:	691b      	ldr	r3, [r3, #16]
 8033d84:	4a13      	ldr	r2, [pc, #76]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033d8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8033d8c:	4b11      	ldr	r3, [pc, #68]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d8e:	691b      	ldr	r3, [r3, #16]
 8033d90:	4a10      	ldr	r2, [pc, #64]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8033d96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8033d98:	4b0e      	ldr	r3, [pc, #56]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d9a:	691b      	ldr	r3, [r3, #16]
 8033d9c:	4a0d      	ldr	r2, [pc, #52]	; (8033dd4 <FLASH_Program_DoubleWord+0x60>)
 8033d9e:	f043 0301 	orr.w	r3, r3, #1
 8033da2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8033da4:	68fb      	ldr	r3, [r7, #12]
 8033da6:	683a      	ldr	r2, [r7, #0]
 8033da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8033daa:	f3bf 8f6f 	isb	sy
}
 8033dae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8033db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8033db4:	f04f 0200 	mov.w	r2, #0
 8033db8:	f04f 0300 	mov.w	r3, #0
 8033dbc:	000a      	movs	r2, r1
 8033dbe:	2300      	movs	r3, #0
 8033dc0:	68f9      	ldr	r1, [r7, #12]
 8033dc2:	3104      	adds	r1, #4
 8033dc4:	4613      	mov	r3, r2
 8033dc6:	600b      	str	r3, [r1, #0]
}
 8033dc8:	bf00      	nop
 8033dca:	3714      	adds	r7, #20
 8033dcc:	46bd      	mov	sp, r7
 8033dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033dd2:	4770      	bx	lr
 8033dd4:	40023c00 	.word	0x40023c00

08033dd8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8033dd8:	b480      	push	{r7}
 8033dda:	b083      	sub	sp, #12
 8033ddc:	af00      	add	r7, sp, #0
 8033dde:	6078      	str	r0, [r7, #4]
 8033de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033de2:	4b0d      	ldr	r3, [pc, #52]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033de4:	691b      	ldr	r3, [r3, #16]
 8033de6:	4a0c      	ldr	r2, [pc, #48]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033dec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8033dee:	4b0a      	ldr	r3, [pc, #40]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033df0:	691b      	ldr	r3, [r3, #16]
 8033df2:	4a09      	ldr	r2, [pc, #36]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8033df8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8033dfa:	4b07      	ldr	r3, [pc, #28]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033dfc:	691b      	ldr	r3, [r3, #16]
 8033dfe:	4a06      	ldr	r2, [pc, #24]	; (8033e18 <FLASH_Program_Word+0x40>)
 8033e00:	f043 0301 	orr.w	r3, r3, #1
 8033e04:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8033e06:	687b      	ldr	r3, [r7, #4]
 8033e08:	683a      	ldr	r2, [r7, #0]
 8033e0a:	601a      	str	r2, [r3, #0]
}
 8033e0c:	bf00      	nop
 8033e0e:	370c      	adds	r7, #12
 8033e10:	46bd      	mov	sp, r7
 8033e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033e16:	4770      	bx	lr
 8033e18:	40023c00 	.word	0x40023c00

08033e1c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8033e1c:	b480      	push	{r7}
 8033e1e:	b083      	sub	sp, #12
 8033e20:	af00      	add	r7, sp, #0
 8033e22:	6078      	str	r0, [r7, #4]
 8033e24:	460b      	mov	r3, r1
 8033e26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033e28:	4b0d      	ldr	r3, [pc, #52]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e2a:	691b      	ldr	r3, [r3, #16]
 8033e2c:	4a0c      	ldr	r2, [pc, #48]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8033e34:	4b0a      	ldr	r3, [pc, #40]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e36:	691b      	ldr	r3, [r3, #16]
 8033e38:	4a09      	ldr	r2, [pc, #36]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033e3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8033e40:	4b07      	ldr	r3, [pc, #28]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e42:	691b      	ldr	r3, [r3, #16]
 8033e44:	4a06      	ldr	r2, [pc, #24]	; (8033e60 <FLASH_Program_HalfWord+0x44>)
 8033e46:	f043 0301 	orr.w	r3, r3, #1
 8033e4a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8033e4c:	687b      	ldr	r3, [r7, #4]
 8033e4e:	887a      	ldrh	r2, [r7, #2]
 8033e50:	801a      	strh	r2, [r3, #0]
}
 8033e52:	bf00      	nop
 8033e54:	370c      	adds	r7, #12
 8033e56:	46bd      	mov	sp, r7
 8033e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033e5c:	4770      	bx	lr
 8033e5e:	bf00      	nop
 8033e60:	40023c00 	.word	0x40023c00

08033e64 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8033e64:	b480      	push	{r7}
 8033e66:	b083      	sub	sp, #12
 8033e68:	af00      	add	r7, sp, #0
 8033e6a:	6078      	str	r0, [r7, #4]
 8033e6c:	460b      	mov	r3, r1
 8033e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033e70:	4b0c      	ldr	r3, [pc, #48]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e72:	691b      	ldr	r3, [r3, #16]
 8033e74:	4a0b      	ldr	r2, [pc, #44]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8033e7c:	4b09      	ldr	r3, [pc, #36]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e7e:	4a09      	ldr	r2, [pc, #36]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e80:	691b      	ldr	r3, [r3, #16]
 8033e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8033e84:	4b07      	ldr	r3, [pc, #28]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e86:	691b      	ldr	r3, [r3, #16]
 8033e88:	4a06      	ldr	r2, [pc, #24]	; (8033ea4 <FLASH_Program_Byte+0x40>)
 8033e8a:	f043 0301 	orr.w	r3, r3, #1
 8033e8e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8033e90:	687b      	ldr	r3, [r7, #4]
 8033e92:	78fa      	ldrb	r2, [r7, #3]
 8033e94:	701a      	strb	r2, [r3, #0]
}
 8033e96:	bf00      	nop
 8033e98:	370c      	adds	r7, #12
 8033e9a:	46bd      	mov	sp, r7
 8033e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033ea0:	4770      	bx	lr
 8033ea2:	bf00      	nop
 8033ea4:	40023c00 	.word	0x40023c00

08033ea8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8033ea8:	b480      	push	{r7}
 8033eaa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8033eac:	4b27      	ldr	r3, [pc, #156]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033eae:	68db      	ldr	r3, [r3, #12]
 8033eb0:	f003 0310 	and.w	r3, r3, #16
 8033eb4:	2b00      	cmp	r3, #0
 8033eb6:	d008      	beq.n	8033eca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8033eb8:	4b25      	ldr	r3, [pc, #148]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033eba:	69db      	ldr	r3, [r3, #28]
 8033ebc:	f043 0310 	orr.w	r3, r3, #16
 8033ec0:	4a23      	ldr	r2, [pc, #140]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033ec2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8033ec4:	4b21      	ldr	r3, [pc, #132]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033ec6:	2210      	movs	r2, #16
 8033ec8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8033eca:	4b20      	ldr	r3, [pc, #128]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033ecc:	68db      	ldr	r3, [r3, #12]
 8033ece:	f003 0320 	and.w	r3, r3, #32
 8033ed2:	2b00      	cmp	r3, #0
 8033ed4:	d008      	beq.n	8033ee8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8033ed6:	4b1e      	ldr	r3, [pc, #120]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033ed8:	69db      	ldr	r3, [r3, #28]
 8033eda:	f043 0308 	orr.w	r3, r3, #8
 8033ede:	4a1c      	ldr	r2, [pc, #112]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033ee0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8033ee2:	4b1a      	ldr	r3, [pc, #104]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033ee4:	2220      	movs	r2, #32
 8033ee6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8033ee8:	4b18      	ldr	r3, [pc, #96]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033eea:	68db      	ldr	r3, [r3, #12]
 8033eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033ef0:	2b00      	cmp	r3, #0
 8033ef2:	d008      	beq.n	8033f06 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8033ef4:	4b16      	ldr	r3, [pc, #88]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033ef6:	69db      	ldr	r3, [r3, #28]
 8033ef8:	f043 0304 	orr.w	r3, r3, #4
 8033efc:	4a14      	ldr	r2, [pc, #80]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033efe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8033f00:	4b12      	ldr	r3, [pc, #72]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033f02:	2240      	movs	r2, #64	; 0x40
 8033f04:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8033f06:	4b11      	ldr	r3, [pc, #68]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033f08:	68db      	ldr	r3, [r3, #12]
 8033f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033f0e:	2b00      	cmp	r3, #0
 8033f10:	d008      	beq.n	8033f24 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8033f12:	4b0f      	ldr	r3, [pc, #60]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033f14:	69db      	ldr	r3, [r3, #28]
 8033f16:	f043 0302 	orr.w	r3, r3, #2
 8033f1a:	4a0d      	ldr	r2, [pc, #52]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033f1c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8033f1e:	4b0b      	ldr	r3, [pc, #44]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033f20:	2280      	movs	r2, #128	; 0x80
 8033f22:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8033f24:	4b09      	ldr	r3, [pc, #36]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033f26:	68db      	ldr	r3, [r3, #12]
 8033f28:	f003 0302 	and.w	r3, r3, #2
 8033f2c:	2b00      	cmp	r3, #0
 8033f2e:	d008      	beq.n	8033f42 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8033f30:	4b07      	ldr	r3, [pc, #28]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033f32:	69db      	ldr	r3, [r3, #28]
 8033f34:	f043 0320 	orr.w	r3, r3, #32
 8033f38:	4a05      	ldr	r2, [pc, #20]	; (8033f50 <FLASH_SetErrorCode+0xa8>)
 8033f3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8033f3c:	4b03      	ldr	r3, [pc, #12]	; (8033f4c <FLASH_SetErrorCode+0xa4>)
 8033f3e:	2202      	movs	r2, #2
 8033f40:	60da      	str	r2, [r3, #12]
  }
}
 8033f42:	bf00      	nop
 8033f44:	46bd      	mov	sp, r7
 8033f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033f4a:	4770      	bx	lr
 8033f4c:	40023c00 	.word	0x40023c00
 8033f50:	2000cbc8 	.word	0x2000cbc8

08033f54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8033f54:	b580      	push	{r7, lr}
 8033f56:	b084      	sub	sp, #16
 8033f58:	af00      	add	r7, sp, #0
 8033f5a:	6078      	str	r0, [r7, #4]
 8033f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8033f5e:	2301      	movs	r3, #1
 8033f60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8033f62:	2300      	movs	r3, #0
 8033f64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8033f66:	4b31      	ldr	r3, [pc, #196]	; (803402c <HAL_FLASHEx_Erase+0xd8>)
 8033f68:	7e1b      	ldrb	r3, [r3, #24]
 8033f6a:	2b01      	cmp	r3, #1
 8033f6c:	d101      	bne.n	8033f72 <HAL_FLASHEx_Erase+0x1e>
 8033f6e:	2302      	movs	r3, #2
 8033f70:	e058      	b.n	8034024 <HAL_FLASHEx_Erase+0xd0>
 8033f72:	4b2e      	ldr	r3, [pc, #184]	; (803402c <HAL_FLASHEx_Erase+0xd8>)
 8033f74:	2201      	movs	r2, #1
 8033f76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033f7c:	f7ff feba 	bl	8033cf4 <FLASH_WaitForLastOperation>
 8033f80:	4603      	mov	r3, r0
 8033f82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8033f84:	7bfb      	ldrb	r3, [r7, #15]
 8033f86:	2b00      	cmp	r3, #0
 8033f88:	d148      	bne.n	803401c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8033f8a:	683b      	ldr	r3, [r7, #0]
 8033f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8033f90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8033f92:	687b      	ldr	r3, [r7, #4]
 8033f94:	681b      	ldr	r3, [r3, #0]
 8033f96:	2b01      	cmp	r3, #1
 8033f98:	d115      	bne.n	8033fc6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8033f9a:	687b      	ldr	r3, [r7, #4]
 8033f9c:	691b      	ldr	r3, [r3, #16]
 8033f9e:	b2da      	uxtb	r2, r3
 8033fa0:	687b      	ldr	r3, [r7, #4]
 8033fa2:	685b      	ldr	r3, [r3, #4]
 8033fa4:	4619      	mov	r1, r3
 8033fa6:	4610      	mov	r0, r2
 8033fa8:	f000 f844 	bl	8034034 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033fb0:	f7ff fea0 	bl	8033cf4 <FLASH_WaitForLastOperation>
 8033fb4:	4603      	mov	r3, r0
 8033fb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8033fb8:	4b1d      	ldr	r3, [pc, #116]	; (8034030 <HAL_FLASHEx_Erase+0xdc>)
 8033fba:	691b      	ldr	r3, [r3, #16]
 8033fbc:	4a1c      	ldr	r2, [pc, #112]	; (8034030 <HAL_FLASHEx_Erase+0xdc>)
 8033fbe:	f023 0304 	bic.w	r3, r3, #4
 8033fc2:	6113      	str	r3, [r2, #16]
 8033fc4:	e028      	b.n	8034018 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8033fc6:	687b      	ldr	r3, [r7, #4]
 8033fc8:	689b      	ldr	r3, [r3, #8]
 8033fca:	60bb      	str	r3, [r7, #8]
 8033fcc:	e01c      	b.n	8034008 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8033fce:	687b      	ldr	r3, [r7, #4]
 8033fd0:	691b      	ldr	r3, [r3, #16]
 8033fd2:	b2db      	uxtb	r3, r3
 8033fd4:	4619      	mov	r1, r3
 8033fd6:	68b8      	ldr	r0, [r7, #8]
 8033fd8:	f000 f850 	bl	803407c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033fe0:	f7ff fe88 	bl	8033cf4 <FLASH_WaitForLastOperation>
 8033fe4:	4603      	mov	r3, r0
 8033fe6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8033fe8:	4b11      	ldr	r3, [pc, #68]	; (8034030 <HAL_FLASHEx_Erase+0xdc>)
 8033fea:	691b      	ldr	r3, [r3, #16]
 8033fec:	4a10      	ldr	r2, [pc, #64]	; (8034030 <HAL_FLASHEx_Erase+0xdc>)
 8033fee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8033ff2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8033ff4:	7bfb      	ldrb	r3, [r7, #15]
 8033ff6:	2b00      	cmp	r3, #0
 8033ff8:	d003      	beq.n	8034002 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8033ffa:	683b      	ldr	r3, [r7, #0]
 8033ffc:	68ba      	ldr	r2, [r7, #8]
 8033ffe:	601a      	str	r2, [r3, #0]
          break;
 8034000:	e00a      	b.n	8034018 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8034002:	68bb      	ldr	r3, [r7, #8]
 8034004:	3301      	adds	r3, #1
 8034006:	60bb      	str	r3, [r7, #8]
 8034008:	687b      	ldr	r3, [r7, #4]
 803400a:	68da      	ldr	r2, [r3, #12]
 803400c:	687b      	ldr	r3, [r7, #4]
 803400e:	689b      	ldr	r3, [r3, #8]
 8034010:	4413      	add	r3, r2
 8034012:	68ba      	ldr	r2, [r7, #8]
 8034014:	429a      	cmp	r2, r3
 8034016:	d3da      	bcc.n	8033fce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8034018:	f000 f878 	bl	803410c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 803401c:	4b03      	ldr	r3, [pc, #12]	; (803402c <HAL_FLASHEx_Erase+0xd8>)
 803401e:	2200      	movs	r2, #0
 8034020:	761a      	strb	r2, [r3, #24]

  return status;
 8034022:	7bfb      	ldrb	r3, [r7, #15]
}
 8034024:	4618      	mov	r0, r3
 8034026:	3710      	adds	r7, #16
 8034028:	46bd      	mov	sp, r7
 803402a:	bd80      	pop	{r7, pc}
 803402c:	2000cbc8 	.word	0x2000cbc8
 8034030:	40023c00 	.word	0x40023c00

08034034 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8034034:	b480      	push	{r7}
 8034036:	b083      	sub	sp, #12
 8034038:	af00      	add	r7, sp, #0
 803403a:	4603      	mov	r3, r0
 803403c:	6039      	str	r1, [r7, #0]
 803403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8034040:	4b0d      	ldr	r3, [pc, #52]	; (8034078 <FLASH_MassErase+0x44>)
 8034042:	691b      	ldr	r3, [r3, #16]
 8034044:	4a0c      	ldr	r2, [pc, #48]	; (8034078 <FLASH_MassErase+0x44>)
 8034046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803404a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 803404c:	4b0a      	ldr	r3, [pc, #40]	; (8034078 <FLASH_MassErase+0x44>)
 803404e:	691b      	ldr	r3, [r3, #16]
 8034050:	4a09      	ldr	r2, [pc, #36]	; (8034078 <FLASH_MassErase+0x44>)
 8034052:	f043 0304 	orr.w	r3, r3, #4
 8034056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8034058:	4b07      	ldr	r3, [pc, #28]	; (8034078 <FLASH_MassErase+0x44>)
 803405a:	691a      	ldr	r2, [r3, #16]
 803405c:	79fb      	ldrb	r3, [r7, #7]
 803405e:	021b      	lsls	r3, r3, #8
 8034060:	4313      	orrs	r3, r2
 8034062:	4a05      	ldr	r2, [pc, #20]	; (8034078 <FLASH_MassErase+0x44>)
 8034064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8034068:	6113      	str	r3, [r2, #16]
}
 803406a:	bf00      	nop
 803406c:	370c      	adds	r7, #12
 803406e:	46bd      	mov	sp, r7
 8034070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034074:	4770      	bx	lr
 8034076:	bf00      	nop
 8034078:	40023c00 	.word	0x40023c00

0803407c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 803407c:	b480      	push	{r7}
 803407e:	b085      	sub	sp, #20
 8034080:	af00      	add	r7, sp, #0
 8034082:	6078      	str	r0, [r7, #4]
 8034084:	460b      	mov	r3, r1
 8034086:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8034088:	2300      	movs	r3, #0
 803408a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 803408c:	78fb      	ldrb	r3, [r7, #3]
 803408e:	2b00      	cmp	r3, #0
 8034090:	d102      	bne.n	8034098 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8034092:	2300      	movs	r3, #0
 8034094:	60fb      	str	r3, [r7, #12]
 8034096:	e010      	b.n	80340ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8034098:	78fb      	ldrb	r3, [r7, #3]
 803409a:	2b01      	cmp	r3, #1
 803409c:	d103      	bne.n	80340a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 803409e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80340a2:	60fb      	str	r3, [r7, #12]
 80340a4:	e009      	b.n	80340ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80340a6:	78fb      	ldrb	r3, [r7, #3]
 80340a8:	2b02      	cmp	r3, #2
 80340aa:	d103      	bne.n	80340b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80340ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80340b0:	60fb      	str	r3, [r7, #12]
 80340b2:	e002      	b.n	80340ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80340b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80340b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80340ba:	4b13      	ldr	r3, [pc, #76]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340bc:	691b      	ldr	r3, [r3, #16]
 80340be:	4a12      	ldr	r2, [pc, #72]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80340c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80340c6:	4b10      	ldr	r3, [pc, #64]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340c8:	691a      	ldr	r2, [r3, #16]
 80340ca:	490f      	ldr	r1, [pc, #60]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340cc:	68fb      	ldr	r3, [r7, #12]
 80340ce:	4313      	orrs	r3, r2
 80340d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80340d2:	4b0d      	ldr	r3, [pc, #52]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340d4:	691b      	ldr	r3, [r3, #16]
 80340d6:	4a0c      	ldr	r2, [pc, #48]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80340dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80340de:	4b0a      	ldr	r3, [pc, #40]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340e0:	691a      	ldr	r2, [r3, #16]
 80340e2:	687b      	ldr	r3, [r7, #4]
 80340e4:	00db      	lsls	r3, r3, #3
 80340e6:	4313      	orrs	r3, r2
 80340e8:	4a07      	ldr	r2, [pc, #28]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340ea:	f043 0302 	orr.w	r3, r3, #2
 80340ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80340f0:	4b05      	ldr	r3, [pc, #20]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340f2:	691b      	ldr	r3, [r3, #16]
 80340f4:	4a04      	ldr	r2, [pc, #16]	; (8034108 <FLASH_Erase_Sector+0x8c>)
 80340f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80340fa:	6113      	str	r3, [r2, #16]
}
 80340fc:	bf00      	nop
 80340fe:	3714      	adds	r7, #20
 8034100:	46bd      	mov	sp, r7
 8034102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034106:	4770      	bx	lr
 8034108:	40023c00 	.word	0x40023c00

0803410c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 803410c:	b480      	push	{r7}
 803410e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8034110:	4b20      	ldr	r3, [pc, #128]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034112:	681b      	ldr	r3, [r3, #0]
 8034114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034118:	2b00      	cmp	r3, #0
 803411a:	d017      	beq.n	803414c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 803411c:	4b1d      	ldr	r3, [pc, #116]	; (8034194 <FLASH_FlushCaches+0x88>)
 803411e:	681b      	ldr	r3, [r3, #0]
 8034120:	4a1c      	ldr	r2, [pc, #112]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034122:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8034126:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8034128:	4b1a      	ldr	r3, [pc, #104]	; (8034194 <FLASH_FlushCaches+0x88>)
 803412a:	681b      	ldr	r3, [r3, #0]
 803412c:	4a19      	ldr	r2, [pc, #100]	; (8034194 <FLASH_FlushCaches+0x88>)
 803412e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8034132:	6013      	str	r3, [r2, #0]
 8034134:	4b17      	ldr	r3, [pc, #92]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034136:	681b      	ldr	r3, [r3, #0]
 8034138:	4a16      	ldr	r2, [pc, #88]	; (8034194 <FLASH_FlushCaches+0x88>)
 803413a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 803413e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8034140:	4b14      	ldr	r3, [pc, #80]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034142:	681b      	ldr	r3, [r3, #0]
 8034144:	4a13      	ldr	r2, [pc, #76]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 803414a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 803414c:	4b11      	ldr	r3, [pc, #68]	; (8034194 <FLASH_FlushCaches+0x88>)
 803414e:	681b      	ldr	r3, [r3, #0]
 8034150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8034154:	2b00      	cmp	r3, #0
 8034156:	d017      	beq.n	8034188 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8034158:	4b0e      	ldr	r3, [pc, #56]	; (8034194 <FLASH_FlushCaches+0x88>)
 803415a:	681b      	ldr	r3, [r3, #0]
 803415c:	4a0d      	ldr	r2, [pc, #52]	; (8034194 <FLASH_FlushCaches+0x88>)
 803415e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8034162:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8034164:	4b0b      	ldr	r3, [pc, #44]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034166:	681b      	ldr	r3, [r3, #0]
 8034168:	4a0a      	ldr	r2, [pc, #40]	; (8034194 <FLASH_FlushCaches+0x88>)
 803416a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 803416e:	6013      	str	r3, [r2, #0]
 8034170:	4b08      	ldr	r3, [pc, #32]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034172:	681b      	ldr	r3, [r3, #0]
 8034174:	4a07      	ldr	r2, [pc, #28]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803417a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 803417c:	4b05      	ldr	r3, [pc, #20]	; (8034194 <FLASH_FlushCaches+0x88>)
 803417e:	681b      	ldr	r3, [r3, #0]
 8034180:	4a04      	ldr	r2, [pc, #16]	; (8034194 <FLASH_FlushCaches+0x88>)
 8034182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8034186:	6013      	str	r3, [r2, #0]
  }
}
 8034188:	bf00      	nop
 803418a:	46bd      	mov	sp, r7
 803418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034190:	4770      	bx	lr
 8034192:	bf00      	nop
 8034194:	40023c00 	.word	0x40023c00

08034198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8034198:	b480      	push	{r7}
 803419a:	b089      	sub	sp, #36	; 0x24
 803419c:	af00      	add	r7, sp, #0
 803419e:	6078      	str	r0, [r7, #4]
 80341a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80341a2:	2300      	movs	r3, #0
 80341a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80341a6:	2300      	movs	r3, #0
 80341a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80341aa:	2300      	movs	r3, #0
 80341ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80341ae:	2300      	movs	r3, #0
 80341b0:	61fb      	str	r3, [r7, #28]
 80341b2:	e16b      	b.n	803448c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80341b4:	2201      	movs	r2, #1
 80341b6:	69fb      	ldr	r3, [r7, #28]
 80341b8:	fa02 f303 	lsl.w	r3, r2, r3
 80341bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80341be:	683b      	ldr	r3, [r7, #0]
 80341c0:	681b      	ldr	r3, [r3, #0]
 80341c2:	697a      	ldr	r2, [r7, #20]
 80341c4:	4013      	ands	r3, r2
 80341c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80341c8:	693a      	ldr	r2, [r7, #16]
 80341ca:	697b      	ldr	r3, [r7, #20]
 80341cc:	429a      	cmp	r2, r3
 80341ce:	f040 815a 	bne.w	8034486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80341d2:	683b      	ldr	r3, [r7, #0]
 80341d4:	685b      	ldr	r3, [r3, #4]
 80341d6:	f003 0303 	and.w	r3, r3, #3
 80341da:	2b01      	cmp	r3, #1
 80341dc:	d005      	beq.n	80341ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80341de:	683b      	ldr	r3, [r7, #0]
 80341e0:	685b      	ldr	r3, [r3, #4]
 80341e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80341e6:	2b02      	cmp	r3, #2
 80341e8:	d130      	bne.n	803424c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80341ea:	687b      	ldr	r3, [r7, #4]
 80341ec:	689b      	ldr	r3, [r3, #8]
 80341ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80341f0:	69fb      	ldr	r3, [r7, #28]
 80341f2:	005b      	lsls	r3, r3, #1
 80341f4:	2203      	movs	r2, #3
 80341f6:	fa02 f303 	lsl.w	r3, r2, r3
 80341fa:	43db      	mvns	r3, r3
 80341fc:	69ba      	ldr	r2, [r7, #24]
 80341fe:	4013      	ands	r3, r2
 8034200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8034202:	683b      	ldr	r3, [r7, #0]
 8034204:	68da      	ldr	r2, [r3, #12]
 8034206:	69fb      	ldr	r3, [r7, #28]
 8034208:	005b      	lsls	r3, r3, #1
 803420a:	fa02 f303 	lsl.w	r3, r2, r3
 803420e:	69ba      	ldr	r2, [r7, #24]
 8034210:	4313      	orrs	r3, r2
 8034212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8034214:	687b      	ldr	r3, [r7, #4]
 8034216:	69ba      	ldr	r2, [r7, #24]
 8034218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 803421a:	687b      	ldr	r3, [r7, #4]
 803421c:	685b      	ldr	r3, [r3, #4]
 803421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8034220:	2201      	movs	r2, #1
 8034222:	69fb      	ldr	r3, [r7, #28]
 8034224:	fa02 f303 	lsl.w	r3, r2, r3
 8034228:	43db      	mvns	r3, r3
 803422a:	69ba      	ldr	r2, [r7, #24]
 803422c:	4013      	ands	r3, r2
 803422e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8034230:	683b      	ldr	r3, [r7, #0]
 8034232:	685b      	ldr	r3, [r3, #4]
 8034234:	091b      	lsrs	r3, r3, #4
 8034236:	f003 0201 	and.w	r2, r3, #1
 803423a:	69fb      	ldr	r3, [r7, #28]
 803423c:	fa02 f303 	lsl.w	r3, r2, r3
 8034240:	69ba      	ldr	r2, [r7, #24]
 8034242:	4313      	orrs	r3, r2
 8034244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8034246:	687b      	ldr	r3, [r7, #4]
 8034248:	69ba      	ldr	r2, [r7, #24]
 803424a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 803424c:	683b      	ldr	r3, [r7, #0]
 803424e:	685b      	ldr	r3, [r3, #4]
 8034250:	f003 0303 	and.w	r3, r3, #3
 8034254:	2b03      	cmp	r3, #3
 8034256:	d017      	beq.n	8034288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8034258:	687b      	ldr	r3, [r7, #4]
 803425a:	68db      	ldr	r3, [r3, #12]
 803425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 803425e:	69fb      	ldr	r3, [r7, #28]
 8034260:	005b      	lsls	r3, r3, #1
 8034262:	2203      	movs	r2, #3
 8034264:	fa02 f303 	lsl.w	r3, r2, r3
 8034268:	43db      	mvns	r3, r3
 803426a:	69ba      	ldr	r2, [r7, #24]
 803426c:	4013      	ands	r3, r2
 803426e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8034270:	683b      	ldr	r3, [r7, #0]
 8034272:	689a      	ldr	r2, [r3, #8]
 8034274:	69fb      	ldr	r3, [r7, #28]
 8034276:	005b      	lsls	r3, r3, #1
 8034278:	fa02 f303 	lsl.w	r3, r2, r3
 803427c:	69ba      	ldr	r2, [r7, #24]
 803427e:	4313      	orrs	r3, r2
 8034280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8034282:	687b      	ldr	r3, [r7, #4]
 8034284:	69ba      	ldr	r2, [r7, #24]
 8034286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8034288:	683b      	ldr	r3, [r7, #0]
 803428a:	685b      	ldr	r3, [r3, #4]
 803428c:	f003 0303 	and.w	r3, r3, #3
 8034290:	2b02      	cmp	r3, #2
 8034292:	d123      	bne.n	80342dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8034294:	69fb      	ldr	r3, [r7, #28]
 8034296:	08da      	lsrs	r2, r3, #3
 8034298:	687b      	ldr	r3, [r7, #4]
 803429a:	3208      	adds	r2, #8
 803429c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80342a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80342a2:	69fb      	ldr	r3, [r7, #28]
 80342a4:	f003 0307 	and.w	r3, r3, #7
 80342a8:	009b      	lsls	r3, r3, #2
 80342aa:	220f      	movs	r2, #15
 80342ac:	fa02 f303 	lsl.w	r3, r2, r3
 80342b0:	43db      	mvns	r3, r3
 80342b2:	69ba      	ldr	r2, [r7, #24]
 80342b4:	4013      	ands	r3, r2
 80342b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80342b8:	683b      	ldr	r3, [r7, #0]
 80342ba:	691a      	ldr	r2, [r3, #16]
 80342bc:	69fb      	ldr	r3, [r7, #28]
 80342be:	f003 0307 	and.w	r3, r3, #7
 80342c2:	009b      	lsls	r3, r3, #2
 80342c4:	fa02 f303 	lsl.w	r3, r2, r3
 80342c8:	69ba      	ldr	r2, [r7, #24]
 80342ca:	4313      	orrs	r3, r2
 80342cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80342ce:	69fb      	ldr	r3, [r7, #28]
 80342d0:	08da      	lsrs	r2, r3, #3
 80342d2:	687b      	ldr	r3, [r7, #4]
 80342d4:	3208      	adds	r2, #8
 80342d6:	69b9      	ldr	r1, [r7, #24]
 80342d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80342dc:	687b      	ldr	r3, [r7, #4]
 80342de:	681b      	ldr	r3, [r3, #0]
 80342e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80342e2:	69fb      	ldr	r3, [r7, #28]
 80342e4:	005b      	lsls	r3, r3, #1
 80342e6:	2203      	movs	r2, #3
 80342e8:	fa02 f303 	lsl.w	r3, r2, r3
 80342ec:	43db      	mvns	r3, r3
 80342ee:	69ba      	ldr	r2, [r7, #24]
 80342f0:	4013      	ands	r3, r2
 80342f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80342f4:	683b      	ldr	r3, [r7, #0]
 80342f6:	685b      	ldr	r3, [r3, #4]
 80342f8:	f003 0203 	and.w	r2, r3, #3
 80342fc:	69fb      	ldr	r3, [r7, #28]
 80342fe:	005b      	lsls	r3, r3, #1
 8034300:	fa02 f303 	lsl.w	r3, r2, r3
 8034304:	69ba      	ldr	r2, [r7, #24]
 8034306:	4313      	orrs	r3, r2
 8034308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 803430a:	687b      	ldr	r3, [r7, #4]
 803430c:	69ba      	ldr	r2, [r7, #24]
 803430e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8034310:	683b      	ldr	r3, [r7, #0]
 8034312:	685b      	ldr	r3, [r3, #4]
 8034314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8034318:	2b00      	cmp	r3, #0
 803431a:	f000 80b4 	beq.w	8034486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 803431e:	2300      	movs	r3, #0
 8034320:	60fb      	str	r3, [r7, #12]
 8034322:	4b60      	ldr	r3, [pc, #384]	; (80344a4 <HAL_GPIO_Init+0x30c>)
 8034324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034326:	4a5f      	ldr	r2, [pc, #380]	; (80344a4 <HAL_GPIO_Init+0x30c>)
 8034328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 803432c:	6453      	str	r3, [r2, #68]	; 0x44
 803432e:	4b5d      	ldr	r3, [pc, #372]	; (80344a4 <HAL_GPIO_Init+0x30c>)
 8034330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8034336:	60fb      	str	r3, [r7, #12]
 8034338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 803433a:	4a5b      	ldr	r2, [pc, #364]	; (80344a8 <HAL_GPIO_Init+0x310>)
 803433c:	69fb      	ldr	r3, [r7, #28]
 803433e:	089b      	lsrs	r3, r3, #2
 8034340:	3302      	adds	r3, #2
 8034342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8034346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8034348:	69fb      	ldr	r3, [r7, #28]
 803434a:	f003 0303 	and.w	r3, r3, #3
 803434e:	009b      	lsls	r3, r3, #2
 8034350:	220f      	movs	r2, #15
 8034352:	fa02 f303 	lsl.w	r3, r2, r3
 8034356:	43db      	mvns	r3, r3
 8034358:	69ba      	ldr	r2, [r7, #24]
 803435a:	4013      	ands	r3, r2
 803435c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 803435e:	687b      	ldr	r3, [r7, #4]
 8034360:	4a52      	ldr	r2, [pc, #328]	; (80344ac <HAL_GPIO_Init+0x314>)
 8034362:	4293      	cmp	r3, r2
 8034364:	d02b      	beq.n	80343be <HAL_GPIO_Init+0x226>
 8034366:	687b      	ldr	r3, [r7, #4]
 8034368:	4a51      	ldr	r2, [pc, #324]	; (80344b0 <HAL_GPIO_Init+0x318>)
 803436a:	4293      	cmp	r3, r2
 803436c:	d025      	beq.n	80343ba <HAL_GPIO_Init+0x222>
 803436e:	687b      	ldr	r3, [r7, #4]
 8034370:	4a50      	ldr	r2, [pc, #320]	; (80344b4 <HAL_GPIO_Init+0x31c>)
 8034372:	4293      	cmp	r3, r2
 8034374:	d01f      	beq.n	80343b6 <HAL_GPIO_Init+0x21e>
 8034376:	687b      	ldr	r3, [r7, #4]
 8034378:	4a4f      	ldr	r2, [pc, #316]	; (80344b8 <HAL_GPIO_Init+0x320>)
 803437a:	4293      	cmp	r3, r2
 803437c:	d019      	beq.n	80343b2 <HAL_GPIO_Init+0x21a>
 803437e:	687b      	ldr	r3, [r7, #4]
 8034380:	4a4e      	ldr	r2, [pc, #312]	; (80344bc <HAL_GPIO_Init+0x324>)
 8034382:	4293      	cmp	r3, r2
 8034384:	d013      	beq.n	80343ae <HAL_GPIO_Init+0x216>
 8034386:	687b      	ldr	r3, [r7, #4]
 8034388:	4a4d      	ldr	r2, [pc, #308]	; (80344c0 <HAL_GPIO_Init+0x328>)
 803438a:	4293      	cmp	r3, r2
 803438c:	d00d      	beq.n	80343aa <HAL_GPIO_Init+0x212>
 803438e:	687b      	ldr	r3, [r7, #4]
 8034390:	4a4c      	ldr	r2, [pc, #304]	; (80344c4 <HAL_GPIO_Init+0x32c>)
 8034392:	4293      	cmp	r3, r2
 8034394:	d007      	beq.n	80343a6 <HAL_GPIO_Init+0x20e>
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	4a4b      	ldr	r2, [pc, #300]	; (80344c8 <HAL_GPIO_Init+0x330>)
 803439a:	4293      	cmp	r3, r2
 803439c:	d101      	bne.n	80343a2 <HAL_GPIO_Init+0x20a>
 803439e:	2307      	movs	r3, #7
 80343a0:	e00e      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343a2:	2308      	movs	r3, #8
 80343a4:	e00c      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343a6:	2306      	movs	r3, #6
 80343a8:	e00a      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343aa:	2305      	movs	r3, #5
 80343ac:	e008      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343ae:	2304      	movs	r3, #4
 80343b0:	e006      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343b2:	2303      	movs	r3, #3
 80343b4:	e004      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343b6:	2302      	movs	r3, #2
 80343b8:	e002      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343ba:	2301      	movs	r3, #1
 80343bc:	e000      	b.n	80343c0 <HAL_GPIO_Init+0x228>
 80343be:	2300      	movs	r3, #0
 80343c0:	69fa      	ldr	r2, [r7, #28]
 80343c2:	f002 0203 	and.w	r2, r2, #3
 80343c6:	0092      	lsls	r2, r2, #2
 80343c8:	4093      	lsls	r3, r2
 80343ca:	69ba      	ldr	r2, [r7, #24]
 80343cc:	4313      	orrs	r3, r2
 80343ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80343d0:	4935      	ldr	r1, [pc, #212]	; (80344a8 <HAL_GPIO_Init+0x310>)
 80343d2:	69fb      	ldr	r3, [r7, #28]
 80343d4:	089b      	lsrs	r3, r3, #2
 80343d6:	3302      	adds	r3, #2
 80343d8:	69ba      	ldr	r2, [r7, #24]
 80343da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80343de:	4b3b      	ldr	r3, [pc, #236]	; (80344cc <HAL_GPIO_Init+0x334>)
 80343e0:	689b      	ldr	r3, [r3, #8]
 80343e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80343e4:	693b      	ldr	r3, [r7, #16]
 80343e6:	43db      	mvns	r3, r3
 80343e8:	69ba      	ldr	r2, [r7, #24]
 80343ea:	4013      	ands	r3, r2
 80343ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80343ee:	683b      	ldr	r3, [r7, #0]
 80343f0:	685b      	ldr	r3, [r3, #4]
 80343f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80343f6:	2b00      	cmp	r3, #0
 80343f8:	d003      	beq.n	8034402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80343fa:	69ba      	ldr	r2, [r7, #24]
 80343fc:	693b      	ldr	r3, [r7, #16]
 80343fe:	4313      	orrs	r3, r2
 8034400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8034402:	4a32      	ldr	r2, [pc, #200]	; (80344cc <HAL_GPIO_Init+0x334>)
 8034404:	69bb      	ldr	r3, [r7, #24]
 8034406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8034408:	4b30      	ldr	r3, [pc, #192]	; (80344cc <HAL_GPIO_Init+0x334>)
 803440a:	68db      	ldr	r3, [r3, #12]
 803440c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 803440e:	693b      	ldr	r3, [r7, #16]
 8034410:	43db      	mvns	r3, r3
 8034412:	69ba      	ldr	r2, [r7, #24]
 8034414:	4013      	ands	r3, r2
 8034416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8034418:	683b      	ldr	r3, [r7, #0]
 803441a:	685b      	ldr	r3, [r3, #4]
 803441c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8034420:	2b00      	cmp	r3, #0
 8034422:	d003      	beq.n	803442c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8034424:	69ba      	ldr	r2, [r7, #24]
 8034426:	693b      	ldr	r3, [r7, #16]
 8034428:	4313      	orrs	r3, r2
 803442a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 803442c:	4a27      	ldr	r2, [pc, #156]	; (80344cc <HAL_GPIO_Init+0x334>)
 803442e:	69bb      	ldr	r3, [r7, #24]
 8034430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8034432:	4b26      	ldr	r3, [pc, #152]	; (80344cc <HAL_GPIO_Init+0x334>)
 8034434:	685b      	ldr	r3, [r3, #4]
 8034436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034438:	693b      	ldr	r3, [r7, #16]
 803443a:	43db      	mvns	r3, r3
 803443c:	69ba      	ldr	r2, [r7, #24]
 803443e:	4013      	ands	r3, r2
 8034440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8034442:	683b      	ldr	r3, [r7, #0]
 8034444:	685b      	ldr	r3, [r3, #4]
 8034446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803444a:	2b00      	cmp	r3, #0
 803444c:	d003      	beq.n	8034456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 803444e:	69ba      	ldr	r2, [r7, #24]
 8034450:	693b      	ldr	r3, [r7, #16]
 8034452:	4313      	orrs	r3, r2
 8034454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8034456:	4a1d      	ldr	r2, [pc, #116]	; (80344cc <HAL_GPIO_Init+0x334>)
 8034458:	69bb      	ldr	r3, [r7, #24]
 803445a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 803445c:	4b1b      	ldr	r3, [pc, #108]	; (80344cc <HAL_GPIO_Init+0x334>)
 803445e:	681b      	ldr	r3, [r3, #0]
 8034460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8034462:	693b      	ldr	r3, [r7, #16]
 8034464:	43db      	mvns	r3, r3
 8034466:	69ba      	ldr	r2, [r7, #24]
 8034468:	4013      	ands	r3, r2
 803446a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 803446c:	683b      	ldr	r3, [r7, #0]
 803446e:	685b      	ldr	r3, [r3, #4]
 8034470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8034474:	2b00      	cmp	r3, #0
 8034476:	d003      	beq.n	8034480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8034478:	69ba      	ldr	r2, [r7, #24]
 803447a:	693b      	ldr	r3, [r7, #16]
 803447c:	4313      	orrs	r3, r2
 803447e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8034480:	4a12      	ldr	r2, [pc, #72]	; (80344cc <HAL_GPIO_Init+0x334>)
 8034482:	69bb      	ldr	r3, [r7, #24]
 8034484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8034486:	69fb      	ldr	r3, [r7, #28]
 8034488:	3301      	adds	r3, #1
 803448a:	61fb      	str	r3, [r7, #28]
 803448c:	69fb      	ldr	r3, [r7, #28]
 803448e:	2b0f      	cmp	r3, #15
 8034490:	f67f ae90 	bls.w	80341b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8034494:	bf00      	nop
 8034496:	bf00      	nop
 8034498:	3724      	adds	r7, #36	; 0x24
 803449a:	46bd      	mov	sp, r7
 803449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344a0:	4770      	bx	lr
 80344a2:	bf00      	nop
 80344a4:	40023800 	.word	0x40023800
 80344a8:	40013800 	.word	0x40013800
 80344ac:	40020000 	.word	0x40020000
 80344b0:	40020400 	.word	0x40020400
 80344b4:	40020800 	.word	0x40020800
 80344b8:	40020c00 	.word	0x40020c00
 80344bc:	40021000 	.word	0x40021000
 80344c0:	40021400 	.word	0x40021400
 80344c4:	40021800 	.word	0x40021800
 80344c8:	40021c00 	.word	0x40021c00
 80344cc:	40013c00 	.word	0x40013c00

080344d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80344d0:	b480      	push	{r7}
 80344d2:	b083      	sub	sp, #12
 80344d4:	af00      	add	r7, sp, #0
 80344d6:	6078      	str	r0, [r7, #4]
 80344d8:	460b      	mov	r3, r1
 80344da:	807b      	strh	r3, [r7, #2]
 80344dc:	4613      	mov	r3, r2
 80344de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80344e0:	787b      	ldrb	r3, [r7, #1]
 80344e2:	2b00      	cmp	r3, #0
 80344e4:	d003      	beq.n	80344ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80344e6:	887a      	ldrh	r2, [r7, #2]
 80344e8:	687b      	ldr	r3, [r7, #4]
 80344ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80344ec:	e003      	b.n	80344f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80344ee:	887b      	ldrh	r3, [r7, #2]
 80344f0:	041a      	lsls	r2, r3, #16
 80344f2:	687b      	ldr	r3, [r7, #4]
 80344f4:	619a      	str	r2, [r3, #24]
}
 80344f6:	bf00      	nop
 80344f8:	370c      	adds	r7, #12
 80344fa:	46bd      	mov	sp, r7
 80344fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034500:	4770      	bx	lr
	...

08034504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8034504:	b580      	push	{r7, lr}
 8034506:	b084      	sub	sp, #16
 8034508:	af00      	add	r7, sp, #0
 803450a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 803450c:	687b      	ldr	r3, [r7, #4]
 803450e:	2b00      	cmp	r3, #0
 8034510:	d101      	bne.n	8034516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8034512:	2301      	movs	r3, #1
 8034514:	e12b      	b.n	803476e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8034516:	687b      	ldr	r3, [r7, #4]
 8034518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803451c:	b2db      	uxtb	r3, r3
 803451e:	2b00      	cmp	r3, #0
 8034520:	d106      	bne.n	8034530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8034522:	687b      	ldr	r3, [r7, #4]
 8034524:	2200      	movs	r2, #0
 8034526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 803452a:	6878      	ldr	r0, [r7, #4]
 803452c:	f7fe fe74 	bl	8033218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8034530:	687b      	ldr	r3, [r7, #4]
 8034532:	2224      	movs	r2, #36	; 0x24
 8034534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8034538:	687b      	ldr	r3, [r7, #4]
 803453a:	681b      	ldr	r3, [r3, #0]
 803453c:	681a      	ldr	r2, [r3, #0]
 803453e:	687b      	ldr	r3, [r7, #4]
 8034540:	681b      	ldr	r3, [r3, #0]
 8034542:	f022 0201 	bic.w	r2, r2, #1
 8034546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8034548:	687b      	ldr	r3, [r7, #4]
 803454a:	681b      	ldr	r3, [r3, #0]
 803454c:	681a      	ldr	r2, [r3, #0]
 803454e:	687b      	ldr	r3, [r7, #4]
 8034550:	681b      	ldr	r3, [r3, #0]
 8034552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8034556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8034558:	687b      	ldr	r3, [r7, #4]
 803455a:	681b      	ldr	r3, [r3, #0]
 803455c:	681a      	ldr	r2, [r3, #0]
 803455e:	687b      	ldr	r3, [r7, #4]
 8034560:	681b      	ldr	r3, [r3, #0]
 8034562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8034566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8034568:	f000 fd80 	bl	803506c <HAL_RCC_GetPCLK1Freq>
 803456c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 803456e:	687b      	ldr	r3, [r7, #4]
 8034570:	685b      	ldr	r3, [r3, #4]
 8034572:	4a81      	ldr	r2, [pc, #516]	; (8034778 <HAL_I2C_Init+0x274>)
 8034574:	4293      	cmp	r3, r2
 8034576:	d807      	bhi.n	8034588 <HAL_I2C_Init+0x84>
 8034578:	68fb      	ldr	r3, [r7, #12]
 803457a:	4a80      	ldr	r2, [pc, #512]	; (803477c <HAL_I2C_Init+0x278>)
 803457c:	4293      	cmp	r3, r2
 803457e:	bf94      	ite	ls
 8034580:	2301      	movls	r3, #1
 8034582:	2300      	movhi	r3, #0
 8034584:	b2db      	uxtb	r3, r3
 8034586:	e006      	b.n	8034596 <HAL_I2C_Init+0x92>
 8034588:	68fb      	ldr	r3, [r7, #12]
 803458a:	4a7d      	ldr	r2, [pc, #500]	; (8034780 <HAL_I2C_Init+0x27c>)
 803458c:	4293      	cmp	r3, r2
 803458e:	bf94      	ite	ls
 8034590:	2301      	movls	r3, #1
 8034592:	2300      	movhi	r3, #0
 8034594:	b2db      	uxtb	r3, r3
 8034596:	2b00      	cmp	r3, #0
 8034598:	d001      	beq.n	803459e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 803459a:	2301      	movs	r3, #1
 803459c:	e0e7      	b.n	803476e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 803459e:	68fb      	ldr	r3, [r7, #12]
 80345a0:	4a78      	ldr	r2, [pc, #480]	; (8034784 <HAL_I2C_Init+0x280>)
 80345a2:	fba2 2303 	umull	r2, r3, r2, r3
 80345a6:	0c9b      	lsrs	r3, r3, #18
 80345a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80345aa:	687b      	ldr	r3, [r7, #4]
 80345ac:	681b      	ldr	r3, [r3, #0]
 80345ae:	685b      	ldr	r3, [r3, #4]
 80345b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80345b4:	687b      	ldr	r3, [r7, #4]
 80345b6:	681b      	ldr	r3, [r3, #0]
 80345b8:	68ba      	ldr	r2, [r7, #8]
 80345ba:	430a      	orrs	r2, r1
 80345bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80345be:	687b      	ldr	r3, [r7, #4]
 80345c0:	681b      	ldr	r3, [r3, #0]
 80345c2:	6a1b      	ldr	r3, [r3, #32]
 80345c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80345c8:	687b      	ldr	r3, [r7, #4]
 80345ca:	685b      	ldr	r3, [r3, #4]
 80345cc:	4a6a      	ldr	r2, [pc, #424]	; (8034778 <HAL_I2C_Init+0x274>)
 80345ce:	4293      	cmp	r3, r2
 80345d0:	d802      	bhi.n	80345d8 <HAL_I2C_Init+0xd4>
 80345d2:	68bb      	ldr	r3, [r7, #8]
 80345d4:	3301      	adds	r3, #1
 80345d6:	e009      	b.n	80345ec <HAL_I2C_Init+0xe8>
 80345d8:	68bb      	ldr	r3, [r7, #8]
 80345da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80345de:	fb02 f303 	mul.w	r3, r2, r3
 80345e2:	4a69      	ldr	r2, [pc, #420]	; (8034788 <HAL_I2C_Init+0x284>)
 80345e4:	fba2 2303 	umull	r2, r3, r2, r3
 80345e8:	099b      	lsrs	r3, r3, #6
 80345ea:	3301      	adds	r3, #1
 80345ec:	687a      	ldr	r2, [r7, #4]
 80345ee:	6812      	ldr	r2, [r2, #0]
 80345f0:	430b      	orrs	r3, r1
 80345f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80345f4:	687b      	ldr	r3, [r7, #4]
 80345f6:	681b      	ldr	r3, [r3, #0]
 80345f8:	69db      	ldr	r3, [r3, #28]
 80345fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80345fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8034602:	687b      	ldr	r3, [r7, #4]
 8034604:	685b      	ldr	r3, [r3, #4]
 8034606:	495c      	ldr	r1, [pc, #368]	; (8034778 <HAL_I2C_Init+0x274>)
 8034608:	428b      	cmp	r3, r1
 803460a:	d819      	bhi.n	8034640 <HAL_I2C_Init+0x13c>
 803460c:	68fb      	ldr	r3, [r7, #12]
 803460e:	1e59      	subs	r1, r3, #1
 8034610:	687b      	ldr	r3, [r7, #4]
 8034612:	685b      	ldr	r3, [r3, #4]
 8034614:	005b      	lsls	r3, r3, #1
 8034616:	fbb1 f3f3 	udiv	r3, r1, r3
 803461a:	1c59      	adds	r1, r3, #1
 803461c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8034620:	400b      	ands	r3, r1
 8034622:	2b00      	cmp	r3, #0
 8034624:	d00a      	beq.n	803463c <HAL_I2C_Init+0x138>
 8034626:	68fb      	ldr	r3, [r7, #12]
 8034628:	1e59      	subs	r1, r3, #1
 803462a:	687b      	ldr	r3, [r7, #4]
 803462c:	685b      	ldr	r3, [r3, #4]
 803462e:	005b      	lsls	r3, r3, #1
 8034630:	fbb1 f3f3 	udiv	r3, r1, r3
 8034634:	3301      	adds	r3, #1
 8034636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803463a:	e051      	b.n	80346e0 <HAL_I2C_Init+0x1dc>
 803463c:	2304      	movs	r3, #4
 803463e:	e04f      	b.n	80346e0 <HAL_I2C_Init+0x1dc>
 8034640:	687b      	ldr	r3, [r7, #4]
 8034642:	689b      	ldr	r3, [r3, #8]
 8034644:	2b00      	cmp	r3, #0
 8034646:	d111      	bne.n	803466c <HAL_I2C_Init+0x168>
 8034648:	68fb      	ldr	r3, [r7, #12]
 803464a:	1e58      	subs	r0, r3, #1
 803464c:	687b      	ldr	r3, [r7, #4]
 803464e:	6859      	ldr	r1, [r3, #4]
 8034650:	460b      	mov	r3, r1
 8034652:	005b      	lsls	r3, r3, #1
 8034654:	440b      	add	r3, r1
 8034656:	fbb0 f3f3 	udiv	r3, r0, r3
 803465a:	3301      	adds	r3, #1
 803465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8034660:	2b00      	cmp	r3, #0
 8034662:	bf0c      	ite	eq
 8034664:	2301      	moveq	r3, #1
 8034666:	2300      	movne	r3, #0
 8034668:	b2db      	uxtb	r3, r3
 803466a:	e012      	b.n	8034692 <HAL_I2C_Init+0x18e>
 803466c:	68fb      	ldr	r3, [r7, #12]
 803466e:	1e58      	subs	r0, r3, #1
 8034670:	687b      	ldr	r3, [r7, #4]
 8034672:	6859      	ldr	r1, [r3, #4]
 8034674:	460b      	mov	r3, r1
 8034676:	009b      	lsls	r3, r3, #2
 8034678:	440b      	add	r3, r1
 803467a:	0099      	lsls	r1, r3, #2
 803467c:	440b      	add	r3, r1
 803467e:	fbb0 f3f3 	udiv	r3, r0, r3
 8034682:	3301      	adds	r3, #1
 8034684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8034688:	2b00      	cmp	r3, #0
 803468a:	bf0c      	ite	eq
 803468c:	2301      	moveq	r3, #1
 803468e:	2300      	movne	r3, #0
 8034690:	b2db      	uxtb	r3, r3
 8034692:	2b00      	cmp	r3, #0
 8034694:	d001      	beq.n	803469a <HAL_I2C_Init+0x196>
 8034696:	2301      	movs	r3, #1
 8034698:	e022      	b.n	80346e0 <HAL_I2C_Init+0x1dc>
 803469a:	687b      	ldr	r3, [r7, #4]
 803469c:	689b      	ldr	r3, [r3, #8]
 803469e:	2b00      	cmp	r3, #0
 80346a0:	d10e      	bne.n	80346c0 <HAL_I2C_Init+0x1bc>
 80346a2:	68fb      	ldr	r3, [r7, #12]
 80346a4:	1e58      	subs	r0, r3, #1
 80346a6:	687b      	ldr	r3, [r7, #4]
 80346a8:	6859      	ldr	r1, [r3, #4]
 80346aa:	460b      	mov	r3, r1
 80346ac:	005b      	lsls	r3, r3, #1
 80346ae:	440b      	add	r3, r1
 80346b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80346b4:	3301      	adds	r3, #1
 80346b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80346ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80346be:	e00f      	b.n	80346e0 <HAL_I2C_Init+0x1dc>
 80346c0:	68fb      	ldr	r3, [r7, #12]
 80346c2:	1e58      	subs	r0, r3, #1
 80346c4:	687b      	ldr	r3, [r7, #4]
 80346c6:	6859      	ldr	r1, [r3, #4]
 80346c8:	460b      	mov	r3, r1
 80346ca:	009b      	lsls	r3, r3, #2
 80346cc:	440b      	add	r3, r1
 80346ce:	0099      	lsls	r1, r3, #2
 80346d0:	440b      	add	r3, r1
 80346d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80346d6:	3301      	adds	r3, #1
 80346d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80346dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80346e0:	6879      	ldr	r1, [r7, #4]
 80346e2:	6809      	ldr	r1, [r1, #0]
 80346e4:	4313      	orrs	r3, r2
 80346e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80346e8:	687b      	ldr	r3, [r7, #4]
 80346ea:	681b      	ldr	r3, [r3, #0]
 80346ec:	681b      	ldr	r3, [r3, #0]
 80346ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80346f2:	687b      	ldr	r3, [r7, #4]
 80346f4:	69da      	ldr	r2, [r3, #28]
 80346f6:	687b      	ldr	r3, [r7, #4]
 80346f8:	6a1b      	ldr	r3, [r3, #32]
 80346fa:	431a      	orrs	r2, r3
 80346fc:	687b      	ldr	r3, [r7, #4]
 80346fe:	681b      	ldr	r3, [r3, #0]
 8034700:	430a      	orrs	r2, r1
 8034702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8034704:	687b      	ldr	r3, [r7, #4]
 8034706:	681b      	ldr	r3, [r3, #0]
 8034708:	689b      	ldr	r3, [r3, #8]
 803470a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 803470e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8034712:	687a      	ldr	r2, [r7, #4]
 8034714:	6911      	ldr	r1, [r2, #16]
 8034716:	687a      	ldr	r2, [r7, #4]
 8034718:	68d2      	ldr	r2, [r2, #12]
 803471a:	4311      	orrs	r1, r2
 803471c:	687a      	ldr	r2, [r7, #4]
 803471e:	6812      	ldr	r2, [r2, #0]
 8034720:	430b      	orrs	r3, r1
 8034722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8034724:	687b      	ldr	r3, [r7, #4]
 8034726:	681b      	ldr	r3, [r3, #0]
 8034728:	68db      	ldr	r3, [r3, #12]
 803472a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 803472e:	687b      	ldr	r3, [r7, #4]
 8034730:	695a      	ldr	r2, [r3, #20]
 8034732:	687b      	ldr	r3, [r7, #4]
 8034734:	699b      	ldr	r3, [r3, #24]
 8034736:	431a      	orrs	r2, r3
 8034738:	687b      	ldr	r3, [r7, #4]
 803473a:	681b      	ldr	r3, [r3, #0]
 803473c:	430a      	orrs	r2, r1
 803473e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8034740:	687b      	ldr	r3, [r7, #4]
 8034742:	681b      	ldr	r3, [r3, #0]
 8034744:	681a      	ldr	r2, [r3, #0]
 8034746:	687b      	ldr	r3, [r7, #4]
 8034748:	681b      	ldr	r3, [r3, #0]
 803474a:	f042 0201 	orr.w	r2, r2, #1
 803474e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8034750:	687b      	ldr	r3, [r7, #4]
 8034752:	2200      	movs	r2, #0
 8034754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8034756:	687b      	ldr	r3, [r7, #4]
 8034758:	2220      	movs	r2, #32
 803475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 803475e:	687b      	ldr	r3, [r7, #4]
 8034760:	2200      	movs	r2, #0
 8034762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8034764:	687b      	ldr	r3, [r7, #4]
 8034766:	2200      	movs	r2, #0
 8034768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 803476c:	2300      	movs	r3, #0
}
 803476e:	4618      	mov	r0, r3
 8034770:	3710      	adds	r7, #16
 8034772:	46bd      	mov	sp, r7
 8034774:	bd80      	pop	{r7, pc}
 8034776:	bf00      	nop
 8034778:	000186a0 	.word	0x000186a0
 803477c:	001e847f 	.word	0x001e847f
 8034780:	003d08ff 	.word	0x003d08ff
 8034784:	431bde83 	.word	0x431bde83
 8034788:	10624dd3 	.word	0x10624dd3

0803478c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 803478c:	b580      	push	{r7, lr}
 803478e:	b086      	sub	sp, #24
 8034790:	af00      	add	r7, sp, #0
 8034792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8034794:	687b      	ldr	r3, [r7, #4]
 8034796:	2b00      	cmp	r3, #0
 8034798:	d101      	bne.n	803479e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 803479a:	2301      	movs	r3, #1
 803479c:	e267      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 803479e:	687b      	ldr	r3, [r7, #4]
 80347a0:	681b      	ldr	r3, [r3, #0]
 80347a2:	f003 0301 	and.w	r3, r3, #1
 80347a6:	2b00      	cmp	r3, #0
 80347a8:	d075      	beq.n	8034896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80347aa:	4b88      	ldr	r3, [pc, #544]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347ac:	689b      	ldr	r3, [r3, #8]
 80347ae:	f003 030c 	and.w	r3, r3, #12
 80347b2:	2b04      	cmp	r3, #4
 80347b4:	d00c      	beq.n	80347d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80347b6:	4b85      	ldr	r3, [pc, #532]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347b8:	689b      	ldr	r3, [r3, #8]
 80347ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80347be:	2b08      	cmp	r3, #8
 80347c0:	d112      	bne.n	80347e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80347c2:	4b82      	ldr	r3, [pc, #520]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347c4:	685b      	ldr	r3, [r3, #4]
 80347c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80347ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80347ce:	d10b      	bne.n	80347e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80347d0:	4b7e      	ldr	r3, [pc, #504]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347d2:	681b      	ldr	r3, [r3, #0]
 80347d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80347d8:	2b00      	cmp	r3, #0
 80347da:	d05b      	beq.n	8034894 <HAL_RCC_OscConfig+0x108>
 80347dc:	687b      	ldr	r3, [r7, #4]
 80347de:	685b      	ldr	r3, [r3, #4]
 80347e0:	2b00      	cmp	r3, #0
 80347e2:	d157      	bne.n	8034894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80347e4:	2301      	movs	r3, #1
 80347e6:	e242      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80347e8:	687b      	ldr	r3, [r7, #4]
 80347ea:	685b      	ldr	r3, [r3, #4]
 80347ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80347f0:	d106      	bne.n	8034800 <HAL_RCC_OscConfig+0x74>
 80347f2:	4b76      	ldr	r3, [pc, #472]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347f4:	681b      	ldr	r3, [r3, #0]
 80347f6:	4a75      	ldr	r2, [pc, #468]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80347f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80347fc:	6013      	str	r3, [r2, #0]
 80347fe:	e01d      	b.n	803483c <HAL_RCC_OscConfig+0xb0>
 8034800:	687b      	ldr	r3, [r7, #4]
 8034802:	685b      	ldr	r3, [r3, #4]
 8034804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8034808:	d10c      	bne.n	8034824 <HAL_RCC_OscConfig+0x98>
 803480a:	4b70      	ldr	r3, [pc, #448]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 803480c:	681b      	ldr	r3, [r3, #0]
 803480e:	4a6f      	ldr	r2, [pc, #444]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8034814:	6013      	str	r3, [r2, #0]
 8034816:	4b6d      	ldr	r3, [pc, #436]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034818:	681b      	ldr	r3, [r3, #0]
 803481a:	4a6c      	ldr	r2, [pc, #432]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 803481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8034820:	6013      	str	r3, [r2, #0]
 8034822:	e00b      	b.n	803483c <HAL_RCC_OscConfig+0xb0>
 8034824:	4b69      	ldr	r3, [pc, #420]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034826:	681b      	ldr	r3, [r3, #0]
 8034828:	4a68      	ldr	r2, [pc, #416]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 803482a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803482e:	6013      	str	r3, [r2, #0]
 8034830:	4b66      	ldr	r3, [pc, #408]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034832:	681b      	ldr	r3, [r3, #0]
 8034834:	4a65      	ldr	r2, [pc, #404]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 803483a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 803483c:	687b      	ldr	r3, [r7, #4]
 803483e:	685b      	ldr	r3, [r3, #4]
 8034840:	2b00      	cmp	r3, #0
 8034842:	d013      	beq.n	803486c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8034844:	f7fe fffc 	bl	8033840 <HAL_GetTick>
 8034848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 803484a:	e008      	b.n	803485e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 803484c:	f7fe fff8 	bl	8033840 <HAL_GetTick>
 8034850:	4602      	mov	r2, r0
 8034852:	693b      	ldr	r3, [r7, #16]
 8034854:	1ad3      	subs	r3, r2, r3
 8034856:	2b64      	cmp	r3, #100	; 0x64
 8034858:	d901      	bls.n	803485e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 803485a:	2303      	movs	r3, #3
 803485c:	e207      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 803485e:	4b5b      	ldr	r3, [pc, #364]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034860:	681b      	ldr	r3, [r3, #0]
 8034862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034866:	2b00      	cmp	r3, #0
 8034868:	d0f0      	beq.n	803484c <HAL_RCC_OscConfig+0xc0>
 803486a:	e014      	b.n	8034896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 803486c:	f7fe ffe8 	bl	8033840 <HAL_GetTick>
 8034870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034872:	e008      	b.n	8034886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8034874:	f7fe ffe4 	bl	8033840 <HAL_GetTick>
 8034878:	4602      	mov	r2, r0
 803487a:	693b      	ldr	r3, [r7, #16]
 803487c:	1ad3      	subs	r3, r2, r3
 803487e:	2b64      	cmp	r3, #100	; 0x64
 8034880:	d901      	bls.n	8034886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8034882:	2303      	movs	r3, #3
 8034884:	e1f3      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8034886:	4b51      	ldr	r3, [pc, #324]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034888:	681b      	ldr	r3, [r3, #0]
 803488a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803488e:	2b00      	cmp	r3, #0
 8034890:	d1f0      	bne.n	8034874 <HAL_RCC_OscConfig+0xe8>
 8034892:	e000      	b.n	8034896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8034894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8034896:	687b      	ldr	r3, [r7, #4]
 8034898:	681b      	ldr	r3, [r3, #0]
 803489a:	f003 0302 	and.w	r3, r3, #2
 803489e:	2b00      	cmp	r3, #0
 80348a0:	d063      	beq.n	803496a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80348a2:	4b4a      	ldr	r3, [pc, #296]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348a4:	689b      	ldr	r3, [r3, #8]
 80348a6:	f003 030c 	and.w	r3, r3, #12
 80348aa:	2b00      	cmp	r3, #0
 80348ac:	d00b      	beq.n	80348c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80348ae:	4b47      	ldr	r3, [pc, #284]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348b0:	689b      	ldr	r3, [r3, #8]
 80348b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80348b6:	2b08      	cmp	r3, #8
 80348b8:	d11c      	bne.n	80348f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80348ba:	4b44      	ldr	r3, [pc, #272]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348bc:	685b      	ldr	r3, [r3, #4]
 80348be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80348c2:	2b00      	cmp	r3, #0
 80348c4:	d116      	bne.n	80348f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80348c6:	4b41      	ldr	r3, [pc, #260]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348c8:	681b      	ldr	r3, [r3, #0]
 80348ca:	f003 0302 	and.w	r3, r3, #2
 80348ce:	2b00      	cmp	r3, #0
 80348d0:	d005      	beq.n	80348de <HAL_RCC_OscConfig+0x152>
 80348d2:	687b      	ldr	r3, [r7, #4]
 80348d4:	68db      	ldr	r3, [r3, #12]
 80348d6:	2b01      	cmp	r3, #1
 80348d8:	d001      	beq.n	80348de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80348da:	2301      	movs	r3, #1
 80348dc:	e1c7      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80348de:	4b3b      	ldr	r3, [pc, #236]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348e0:	681b      	ldr	r3, [r3, #0]
 80348e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80348e6:	687b      	ldr	r3, [r7, #4]
 80348e8:	691b      	ldr	r3, [r3, #16]
 80348ea:	00db      	lsls	r3, r3, #3
 80348ec:	4937      	ldr	r1, [pc, #220]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80348ee:	4313      	orrs	r3, r2
 80348f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80348f2:	e03a      	b.n	803496a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80348f4:	687b      	ldr	r3, [r7, #4]
 80348f6:	68db      	ldr	r3, [r3, #12]
 80348f8:	2b00      	cmp	r3, #0
 80348fa:	d020      	beq.n	803493e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80348fc:	4b34      	ldr	r3, [pc, #208]	; (80349d0 <HAL_RCC_OscConfig+0x244>)
 80348fe:	2201      	movs	r2, #1
 8034900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034902:	f7fe ff9d 	bl	8033840 <HAL_GetTick>
 8034906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8034908:	e008      	b.n	803491c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803490a:	f7fe ff99 	bl	8033840 <HAL_GetTick>
 803490e:	4602      	mov	r2, r0
 8034910:	693b      	ldr	r3, [r7, #16]
 8034912:	1ad3      	subs	r3, r2, r3
 8034914:	2b02      	cmp	r3, #2
 8034916:	d901      	bls.n	803491c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8034918:	2303      	movs	r3, #3
 803491a:	e1a8      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 803491c:	4b2b      	ldr	r3, [pc, #172]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 803491e:	681b      	ldr	r3, [r3, #0]
 8034920:	f003 0302 	and.w	r3, r3, #2
 8034924:	2b00      	cmp	r3, #0
 8034926:	d0f0      	beq.n	803490a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034928:	4b28      	ldr	r3, [pc, #160]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 803492a:	681b      	ldr	r3, [r3, #0]
 803492c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8034930:	687b      	ldr	r3, [r7, #4]
 8034932:	691b      	ldr	r3, [r3, #16]
 8034934:	00db      	lsls	r3, r3, #3
 8034936:	4925      	ldr	r1, [pc, #148]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034938:	4313      	orrs	r3, r2
 803493a:	600b      	str	r3, [r1, #0]
 803493c:	e015      	b.n	803496a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 803493e:	4b24      	ldr	r3, [pc, #144]	; (80349d0 <HAL_RCC_OscConfig+0x244>)
 8034940:	2200      	movs	r2, #0
 8034942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034944:	f7fe ff7c 	bl	8033840 <HAL_GetTick>
 8034948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 803494a:	e008      	b.n	803495e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 803494c:	f7fe ff78 	bl	8033840 <HAL_GetTick>
 8034950:	4602      	mov	r2, r0
 8034952:	693b      	ldr	r3, [r7, #16]
 8034954:	1ad3      	subs	r3, r2, r3
 8034956:	2b02      	cmp	r3, #2
 8034958:	d901      	bls.n	803495e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 803495a:	2303      	movs	r3, #3
 803495c:	e187      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 803495e:	4b1b      	ldr	r3, [pc, #108]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 8034960:	681b      	ldr	r3, [r3, #0]
 8034962:	f003 0302 	and.w	r3, r3, #2
 8034966:	2b00      	cmp	r3, #0
 8034968:	d1f0      	bne.n	803494c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 803496a:	687b      	ldr	r3, [r7, #4]
 803496c:	681b      	ldr	r3, [r3, #0]
 803496e:	f003 0308 	and.w	r3, r3, #8
 8034972:	2b00      	cmp	r3, #0
 8034974:	d036      	beq.n	80349e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8034976:	687b      	ldr	r3, [r7, #4]
 8034978:	695b      	ldr	r3, [r3, #20]
 803497a:	2b00      	cmp	r3, #0
 803497c:	d016      	beq.n	80349ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 803497e:	4b15      	ldr	r3, [pc, #84]	; (80349d4 <HAL_RCC_OscConfig+0x248>)
 8034980:	2201      	movs	r2, #1
 8034982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034984:	f7fe ff5c 	bl	8033840 <HAL_GetTick>
 8034988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 803498a:	e008      	b.n	803499e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 803498c:	f7fe ff58 	bl	8033840 <HAL_GetTick>
 8034990:	4602      	mov	r2, r0
 8034992:	693b      	ldr	r3, [r7, #16]
 8034994:	1ad3      	subs	r3, r2, r3
 8034996:	2b02      	cmp	r3, #2
 8034998:	d901      	bls.n	803499e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 803499a:	2303      	movs	r3, #3
 803499c:	e167      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 803499e:	4b0b      	ldr	r3, [pc, #44]	; (80349cc <HAL_RCC_OscConfig+0x240>)
 80349a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80349a2:	f003 0302 	and.w	r3, r3, #2
 80349a6:	2b00      	cmp	r3, #0
 80349a8:	d0f0      	beq.n	803498c <HAL_RCC_OscConfig+0x200>
 80349aa:	e01b      	b.n	80349e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80349ac:	4b09      	ldr	r3, [pc, #36]	; (80349d4 <HAL_RCC_OscConfig+0x248>)
 80349ae:	2200      	movs	r2, #0
 80349b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80349b2:	f7fe ff45 	bl	8033840 <HAL_GetTick>
 80349b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80349b8:	e00e      	b.n	80349d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80349ba:	f7fe ff41 	bl	8033840 <HAL_GetTick>
 80349be:	4602      	mov	r2, r0
 80349c0:	693b      	ldr	r3, [r7, #16]
 80349c2:	1ad3      	subs	r3, r2, r3
 80349c4:	2b02      	cmp	r3, #2
 80349c6:	d907      	bls.n	80349d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80349c8:	2303      	movs	r3, #3
 80349ca:	e150      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
 80349cc:	40023800 	.word	0x40023800
 80349d0:	42470000 	.word	0x42470000
 80349d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80349d8:	4b88      	ldr	r3, [pc, #544]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 80349da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80349dc:	f003 0302 	and.w	r3, r3, #2
 80349e0:	2b00      	cmp	r3, #0
 80349e2:	d1ea      	bne.n	80349ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80349e4:	687b      	ldr	r3, [r7, #4]
 80349e6:	681b      	ldr	r3, [r3, #0]
 80349e8:	f003 0304 	and.w	r3, r3, #4
 80349ec:	2b00      	cmp	r3, #0
 80349ee:	f000 8097 	beq.w	8034b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80349f2:	2300      	movs	r3, #0
 80349f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80349f6:	4b81      	ldr	r3, [pc, #516]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 80349f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80349fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80349fe:	2b00      	cmp	r3, #0
 8034a00:	d10f      	bne.n	8034a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8034a02:	2300      	movs	r3, #0
 8034a04:	60bb      	str	r3, [r7, #8]
 8034a06:	4b7d      	ldr	r3, [pc, #500]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a0a:	4a7c      	ldr	r2, [pc, #496]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8034a10:	6413      	str	r3, [r2, #64]	; 0x40
 8034a12:	4b7a      	ldr	r3, [pc, #488]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8034a1a:	60bb      	str	r3, [r7, #8]
 8034a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8034a1e:	2301      	movs	r3, #1
 8034a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034a22:	4b77      	ldr	r3, [pc, #476]	; (8034c00 <HAL_RCC_OscConfig+0x474>)
 8034a24:	681b      	ldr	r3, [r3, #0]
 8034a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034a2a:	2b00      	cmp	r3, #0
 8034a2c:	d118      	bne.n	8034a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8034a2e:	4b74      	ldr	r3, [pc, #464]	; (8034c00 <HAL_RCC_OscConfig+0x474>)
 8034a30:	681b      	ldr	r3, [r3, #0]
 8034a32:	4a73      	ldr	r2, [pc, #460]	; (8034c00 <HAL_RCC_OscConfig+0x474>)
 8034a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8034a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8034a3a:	f7fe ff01 	bl	8033840 <HAL_GetTick>
 8034a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034a40:	e008      	b.n	8034a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8034a42:	f7fe fefd 	bl	8033840 <HAL_GetTick>
 8034a46:	4602      	mov	r2, r0
 8034a48:	693b      	ldr	r3, [r7, #16]
 8034a4a:	1ad3      	subs	r3, r2, r3
 8034a4c:	2b02      	cmp	r3, #2
 8034a4e:	d901      	bls.n	8034a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8034a50:	2303      	movs	r3, #3
 8034a52:	e10c      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8034a54:	4b6a      	ldr	r3, [pc, #424]	; (8034c00 <HAL_RCC_OscConfig+0x474>)
 8034a56:	681b      	ldr	r3, [r3, #0]
 8034a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034a5c:	2b00      	cmp	r3, #0
 8034a5e:	d0f0      	beq.n	8034a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8034a60:	687b      	ldr	r3, [r7, #4]
 8034a62:	689b      	ldr	r3, [r3, #8]
 8034a64:	2b01      	cmp	r3, #1
 8034a66:	d106      	bne.n	8034a76 <HAL_RCC_OscConfig+0x2ea>
 8034a68:	4b64      	ldr	r3, [pc, #400]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034a6c:	4a63      	ldr	r2, [pc, #396]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a6e:	f043 0301 	orr.w	r3, r3, #1
 8034a72:	6713      	str	r3, [r2, #112]	; 0x70
 8034a74:	e01c      	b.n	8034ab0 <HAL_RCC_OscConfig+0x324>
 8034a76:	687b      	ldr	r3, [r7, #4]
 8034a78:	689b      	ldr	r3, [r3, #8]
 8034a7a:	2b05      	cmp	r3, #5
 8034a7c:	d10c      	bne.n	8034a98 <HAL_RCC_OscConfig+0x30c>
 8034a7e:	4b5f      	ldr	r3, [pc, #380]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034a82:	4a5e      	ldr	r2, [pc, #376]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a84:	f043 0304 	orr.w	r3, r3, #4
 8034a88:	6713      	str	r3, [r2, #112]	; 0x70
 8034a8a:	4b5c      	ldr	r3, [pc, #368]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034a8e:	4a5b      	ldr	r2, [pc, #364]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a90:	f043 0301 	orr.w	r3, r3, #1
 8034a94:	6713      	str	r3, [r2, #112]	; 0x70
 8034a96:	e00b      	b.n	8034ab0 <HAL_RCC_OscConfig+0x324>
 8034a98:	4b58      	ldr	r3, [pc, #352]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034a9c:	4a57      	ldr	r2, [pc, #348]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034a9e:	f023 0301 	bic.w	r3, r3, #1
 8034aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8034aa4:	4b55      	ldr	r3, [pc, #340]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034aa8:	4a54      	ldr	r2, [pc, #336]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034aaa:	f023 0304 	bic.w	r3, r3, #4
 8034aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8034ab0:	687b      	ldr	r3, [r7, #4]
 8034ab2:	689b      	ldr	r3, [r3, #8]
 8034ab4:	2b00      	cmp	r3, #0
 8034ab6:	d015      	beq.n	8034ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034ab8:	f7fe fec2 	bl	8033840 <HAL_GetTick>
 8034abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034abe:	e00a      	b.n	8034ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034ac0:	f7fe febe 	bl	8033840 <HAL_GetTick>
 8034ac4:	4602      	mov	r2, r0
 8034ac6:	693b      	ldr	r3, [r7, #16]
 8034ac8:	1ad3      	subs	r3, r2, r3
 8034aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8034ace:	4293      	cmp	r3, r2
 8034ad0:	d901      	bls.n	8034ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8034ad2:	2303      	movs	r3, #3
 8034ad4:	e0cb      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8034ad6:	4b49      	ldr	r3, [pc, #292]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034ada:	f003 0302 	and.w	r3, r3, #2
 8034ade:	2b00      	cmp	r3, #0
 8034ae0:	d0ee      	beq.n	8034ac0 <HAL_RCC_OscConfig+0x334>
 8034ae2:	e014      	b.n	8034b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8034ae4:	f7fe feac 	bl	8033840 <HAL_GetTick>
 8034ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034aea:	e00a      	b.n	8034b02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8034aec:	f7fe fea8 	bl	8033840 <HAL_GetTick>
 8034af0:	4602      	mov	r2, r0
 8034af2:	693b      	ldr	r3, [r7, #16]
 8034af4:	1ad3      	subs	r3, r2, r3
 8034af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8034afa:	4293      	cmp	r3, r2
 8034afc:	d901      	bls.n	8034b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8034afe:	2303      	movs	r3, #3
 8034b00:	e0b5      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8034b02:	4b3e      	ldr	r3, [pc, #248]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034b06:	f003 0302 	and.w	r3, r3, #2
 8034b0a:	2b00      	cmp	r3, #0
 8034b0c:	d1ee      	bne.n	8034aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8034b0e:	7dfb      	ldrb	r3, [r7, #23]
 8034b10:	2b01      	cmp	r3, #1
 8034b12:	d105      	bne.n	8034b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8034b14:	4b39      	ldr	r3, [pc, #228]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8034b18:	4a38      	ldr	r2, [pc, #224]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8034b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8034b20:	687b      	ldr	r3, [r7, #4]
 8034b22:	699b      	ldr	r3, [r3, #24]
 8034b24:	2b00      	cmp	r3, #0
 8034b26:	f000 80a1 	beq.w	8034c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8034b2a:	4b34      	ldr	r3, [pc, #208]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b2c:	689b      	ldr	r3, [r3, #8]
 8034b2e:	f003 030c 	and.w	r3, r3, #12
 8034b32:	2b08      	cmp	r3, #8
 8034b34:	d05c      	beq.n	8034bf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8034b36:	687b      	ldr	r3, [r7, #4]
 8034b38:	699b      	ldr	r3, [r3, #24]
 8034b3a:	2b02      	cmp	r3, #2
 8034b3c:	d141      	bne.n	8034bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034b3e:	4b31      	ldr	r3, [pc, #196]	; (8034c04 <HAL_RCC_OscConfig+0x478>)
 8034b40:	2200      	movs	r2, #0
 8034b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8034b44:	f7fe fe7c 	bl	8033840 <HAL_GetTick>
 8034b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034b4a:	e008      	b.n	8034b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034b4c:	f7fe fe78 	bl	8033840 <HAL_GetTick>
 8034b50:	4602      	mov	r2, r0
 8034b52:	693b      	ldr	r3, [r7, #16]
 8034b54:	1ad3      	subs	r3, r2, r3
 8034b56:	2b02      	cmp	r3, #2
 8034b58:	d901      	bls.n	8034b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8034b5a:	2303      	movs	r3, #3
 8034b5c:	e087      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034b5e:	4b27      	ldr	r3, [pc, #156]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b60:	681b      	ldr	r3, [r3, #0]
 8034b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034b66:	2b00      	cmp	r3, #0
 8034b68:	d1f0      	bne.n	8034b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8034b6a:	687b      	ldr	r3, [r7, #4]
 8034b6c:	69da      	ldr	r2, [r3, #28]
 8034b6e:	687b      	ldr	r3, [r7, #4]
 8034b70:	6a1b      	ldr	r3, [r3, #32]
 8034b72:	431a      	orrs	r2, r3
 8034b74:	687b      	ldr	r3, [r7, #4]
 8034b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034b78:	019b      	lsls	r3, r3, #6
 8034b7a:	431a      	orrs	r2, r3
 8034b7c:	687b      	ldr	r3, [r7, #4]
 8034b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034b80:	085b      	lsrs	r3, r3, #1
 8034b82:	3b01      	subs	r3, #1
 8034b84:	041b      	lsls	r3, r3, #16
 8034b86:	431a      	orrs	r2, r3
 8034b88:	687b      	ldr	r3, [r7, #4]
 8034b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034b8c:	061b      	lsls	r3, r3, #24
 8034b8e:	491b      	ldr	r1, [pc, #108]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034b90:	4313      	orrs	r3, r2
 8034b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8034b94:	4b1b      	ldr	r3, [pc, #108]	; (8034c04 <HAL_RCC_OscConfig+0x478>)
 8034b96:	2201      	movs	r2, #1
 8034b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8034b9a:	f7fe fe51 	bl	8033840 <HAL_GetTick>
 8034b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034ba0:	e008      	b.n	8034bb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034ba2:	f7fe fe4d 	bl	8033840 <HAL_GetTick>
 8034ba6:	4602      	mov	r2, r0
 8034ba8:	693b      	ldr	r3, [r7, #16]
 8034baa:	1ad3      	subs	r3, r2, r3
 8034bac:	2b02      	cmp	r3, #2
 8034bae:	d901      	bls.n	8034bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8034bb0:	2303      	movs	r3, #3
 8034bb2:	e05c      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034bb4:	4b11      	ldr	r3, [pc, #68]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034bb6:	681b      	ldr	r3, [r3, #0]
 8034bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034bbc:	2b00      	cmp	r3, #0
 8034bbe:	d0f0      	beq.n	8034ba2 <HAL_RCC_OscConfig+0x416>
 8034bc0:	e054      	b.n	8034c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034bc2:	4b10      	ldr	r3, [pc, #64]	; (8034c04 <HAL_RCC_OscConfig+0x478>)
 8034bc4:	2200      	movs	r2, #0
 8034bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8034bc8:	f7fe fe3a 	bl	8033840 <HAL_GetTick>
 8034bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034bce:	e008      	b.n	8034be2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034bd0:	f7fe fe36 	bl	8033840 <HAL_GetTick>
 8034bd4:	4602      	mov	r2, r0
 8034bd6:	693b      	ldr	r3, [r7, #16]
 8034bd8:	1ad3      	subs	r3, r2, r3
 8034bda:	2b02      	cmp	r3, #2
 8034bdc:	d901      	bls.n	8034be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8034bde:	2303      	movs	r3, #3
 8034be0:	e045      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8034be2:	4b06      	ldr	r3, [pc, #24]	; (8034bfc <HAL_RCC_OscConfig+0x470>)
 8034be4:	681b      	ldr	r3, [r3, #0]
 8034be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034bea:	2b00      	cmp	r3, #0
 8034bec:	d1f0      	bne.n	8034bd0 <HAL_RCC_OscConfig+0x444>
 8034bee:	e03d      	b.n	8034c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8034bf0:	687b      	ldr	r3, [r7, #4]
 8034bf2:	699b      	ldr	r3, [r3, #24]
 8034bf4:	2b01      	cmp	r3, #1
 8034bf6:	d107      	bne.n	8034c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8034bf8:	2301      	movs	r3, #1
 8034bfa:	e038      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
 8034bfc:	40023800 	.word	0x40023800
 8034c00:	40007000 	.word	0x40007000
 8034c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8034c08:	4b1b      	ldr	r3, [pc, #108]	; (8034c78 <HAL_RCC_OscConfig+0x4ec>)
 8034c0a:	685b      	ldr	r3, [r3, #4]
 8034c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8034c0e:	687b      	ldr	r3, [r7, #4]
 8034c10:	699b      	ldr	r3, [r3, #24]
 8034c12:	2b01      	cmp	r3, #1
 8034c14:	d028      	beq.n	8034c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8034c16:	68fb      	ldr	r3, [r7, #12]
 8034c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8034c1c:	687b      	ldr	r3, [r7, #4]
 8034c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8034c20:	429a      	cmp	r2, r3
 8034c22:	d121      	bne.n	8034c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8034c24:	68fb      	ldr	r3, [r7, #12]
 8034c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8034c2a:	687b      	ldr	r3, [r7, #4]
 8034c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8034c2e:	429a      	cmp	r2, r3
 8034c30:	d11a      	bne.n	8034c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8034c32:	68fa      	ldr	r2, [r7, #12]
 8034c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8034c38:	4013      	ands	r3, r2
 8034c3a:	687a      	ldr	r2, [r7, #4]
 8034c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8034c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8034c40:	4293      	cmp	r3, r2
 8034c42:	d111      	bne.n	8034c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8034c44:	68fb      	ldr	r3, [r7, #12]
 8034c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8034c4a:	687b      	ldr	r3, [r7, #4]
 8034c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034c4e:	085b      	lsrs	r3, r3, #1
 8034c50:	3b01      	subs	r3, #1
 8034c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8034c54:	429a      	cmp	r2, r3
 8034c56:	d107      	bne.n	8034c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8034c58:	68fb      	ldr	r3, [r7, #12]
 8034c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8034c5e:	687b      	ldr	r3, [r7, #4]
 8034c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8034c64:	429a      	cmp	r2, r3
 8034c66:	d001      	beq.n	8034c6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8034c68:	2301      	movs	r3, #1
 8034c6a:	e000      	b.n	8034c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8034c6c:	2300      	movs	r3, #0
}
 8034c6e:	4618      	mov	r0, r3
 8034c70:	3718      	adds	r7, #24
 8034c72:	46bd      	mov	sp, r7
 8034c74:	bd80      	pop	{r7, pc}
 8034c76:	bf00      	nop
 8034c78:	40023800 	.word	0x40023800

08034c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8034c7c:	b580      	push	{r7, lr}
 8034c7e:	b084      	sub	sp, #16
 8034c80:	af00      	add	r7, sp, #0
 8034c82:	6078      	str	r0, [r7, #4]
 8034c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8034c86:	687b      	ldr	r3, [r7, #4]
 8034c88:	2b00      	cmp	r3, #0
 8034c8a:	d101      	bne.n	8034c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8034c8c:	2301      	movs	r3, #1
 8034c8e:	e0cc      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8034c90:	4b68      	ldr	r3, [pc, #416]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034c92:	681b      	ldr	r3, [r3, #0]
 8034c94:	f003 0307 	and.w	r3, r3, #7
 8034c98:	683a      	ldr	r2, [r7, #0]
 8034c9a:	429a      	cmp	r2, r3
 8034c9c:	d90c      	bls.n	8034cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8034c9e:	4b65      	ldr	r3, [pc, #404]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034ca0:	683a      	ldr	r2, [r7, #0]
 8034ca2:	b2d2      	uxtb	r2, r2
 8034ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8034ca6:	4b63      	ldr	r3, [pc, #396]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034ca8:	681b      	ldr	r3, [r3, #0]
 8034caa:	f003 0307 	and.w	r3, r3, #7
 8034cae:	683a      	ldr	r2, [r7, #0]
 8034cb0:	429a      	cmp	r2, r3
 8034cb2:	d001      	beq.n	8034cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8034cb4:	2301      	movs	r3, #1
 8034cb6:	e0b8      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8034cb8:	687b      	ldr	r3, [r7, #4]
 8034cba:	681b      	ldr	r3, [r3, #0]
 8034cbc:	f003 0302 	and.w	r3, r3, #2
 8034cc0:	2b00      	cmp	r3, #0
 8034cc2:	d020      	beq.n	8034d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8034cc4:	687b      	ldr	r3, [r7, #4]
 8034cc6:	681b      	ldr	r3, [r3, #0]
 8034cc8:	f003 0304 	and.w	r3, r3, #4
 8034ccc:	2b00      	cmp	r3, #0
 8034cce:	d005      	beq.n	8034cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8034cd0:	4b59      	ldr	r3, [pc, #356]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034cd2:	689b      	ldr	r3, [r3, #8]
 8034cd4:	4a58      	ldr	r2, [pc, #352]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8034cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034cdc:	687b      	ldr	r3, [r7, #4]
 8034cde:	681b      	ldr	r3, [r3, #0]
 8034ce0:	f003 0308 	and.w	r3, r3, #8
 8034ce4:	2b00      	cmp	r3, #0
 8034ce6:	d005      	beq.n	8034cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8034ce8:	4b53      	ldr	r3, [pc, #332]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034cea:	689b      	ldr	r3, [r3, #8]
 8034cec:	4a52      	ldr	r2, [pc, #328]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8034cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8034cf4:	4b50      	ldr	r3, [pc, #320]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034cf6:	689b      	ldr	r3, [r3, #8]
 8034cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8034cfc:	687b      	ldr	r3, [r7, #4]
 8034cfe:	689b      	ldr	r3, [r3, #8]
 8034d00:	494d      	ldr	r1, [pc, #308]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d02:	4313      	orrs	r3, r2
 8034d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8034d06:	687b      	ldr	r3, [r7, #4]
 8034d08:	681b      	ldr	r3, [r3, #0]
 8034d0a:	f003 0301 	and.w	r3, r3, #1
 8034d0e:	2b00      	cmp	r3, #0
 8034d10:	d044      	beq.n	8034d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8034d12:	687b      	ldr	r3, [r7, #4]
 8034d14:	685b      	ldr	r3, [r3, #4]
 8034d16:	2b01      	cmp	r3, #1
 8034d18:	d107      	bne.n	8034d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8034d1a:	4b47      	ldr	r3, [pc, #284]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d1c:	681b      	ldr	r3, [r3, #0]
 8034d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034d22:	2b00      	cmp	r3, #0
 8034d24:	d119      	bne.n	8034d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8034d26:	2301      	movs	r3, #1
 8034d28:	e07f      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8034d2a:	687b      	ldr	r3, [r7, #4]
 8034d2c:	685b      	ldr	r3, [r3, #4]
 8034d2e:	2b02      	cmp	r3, #2
 8034d30:	d003      	beq.n	8034d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8034d32:	687b      	ldr	r3, [r7, #4]
 8034d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8034d36:	2b03      	cmp	r3, #3
 8034d38:	d107      	bne.n	8034d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8034d3a:	4b3f      	ldr	r3, [pc, #252]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d3c:	681b      	ldr	r3, [r3, #0]
 8034d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034d42:	2b00      	cmp	r3, #0
 8034d44:	d109      	bne.n	8034d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8034d46:	2301      	movs	r3, #1
 8034d48:	e06f      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8034d4a:	4b3b      	ldr	r3, [pc, #236]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d4c:	681b      	ldr	r3, [r3, #0]
 8034d4e:	f003 0302 	and.w	r3, r3, #2
 8034d52:	2b00      	cmp	r3, #0
 8034d54:	d101      	bne.n	8034d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8034d56:	2301      	movs	r3, #1
 8034d58:	e067      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8034d5a:	4b37      	ldr	r3, [pc, #220]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d5c:	689b      	ldr	r3, [r3, #8]
 8034d5e:	f023 0203 	bic.w	r2, r3, #3
 8034d62:	687b      	ldr	r3, [r7, #4]
 8034d64:	685b      	ldr	r3, [r3, #4]
 8034d66:	4934      	ldr	r1, [pc, #208]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d68:	4313      	orrs	r3, r2
 8034d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8034d6c:	f7fe fd68 	bl	8033840 <HAL_GetTick>
 8034d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8034d72:	e00a      	b.n	8034d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8034d74:	f7fe fd64 	bl	8033840 <HAL_GetTick>
 8034d78:	4602      	mov	r2, r0
 8034d7a:	68fb      	ldr	r3, [r7, #12]
 8034d7c:	1ad3      	subs	r3, r2, r3
 8034d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8034d82:	4293      	cmp	r3, r2
 8034d84:	d901      	bls.n	8034d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8034d86:	2303      	movs	r3, #3
 8034d88:	e04f      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8034d8a:	4b2b      	ldr	r3, [pc, #172]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034d8c:	689b      	ldr	r3, [r3, #8]
 8034d8e:	f003 020c 	and.w	r2, r3, #12
 8034d92:	687b      	ldr	r3, [r7, #4]
 8034d94:	685b      	ldr	r3, [r3, #4]
 8034d96:	009b      	lsls	r3, r3, #2
 8034d98:	429a      	cmp	r2, r3
 8034d9a:	d1eb      	bne.n	8034d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8034d9c:	4b25      	ldr	r3, [pc, #148]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034d9e:	681b      	ldr	r3, [r3, #0]
 8034da0:	f003 0307 	and.w	r3, r3, #7
 8034da4:	683a      	ldr	r2, [r7, #0]
 8034da6:	429a      	cmp	r2, r3
 8034da8:	d20c      	bcs.n	8034dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8034daa:	4b22      	ldr	r3, [pc, #136]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034dac:	683a      	ldr	r2, [r7, #0]
 8034dae:	b2d2      	uxtb	r2, r2
 8034db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8034db2:	4b20      	ldr	r3, [pc, #128]	; (8034e34 <HAL_RCC_ClockConfig+0x1b8>)
 8034db4:	681b      	ldr	r3, [r3, #0]
 8034db6:	f003 0307 	and.w	r3, r3, #7
 8034dba:	683a      	ldr	r2, [r7, #0]
 8034dbc:	429a      	cmp	r2, r3
 8034dbe:	d001      	beq.n	8034dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8034dc0:	2301      	movs	r3, #1
 8034dc2:	e032      	b.n	8034e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8034dc4:	687b      	ldr	r3, [r7, #4]
 8034dc6:	681b      	ldr	r3, [r3, #0]
 8034dc8:	f003 0304 	and.w	r3, r3, #4
 8034dcc:	2b00      	cmp	r3, #0
 8034dce:	d008      	beq.n	8034de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8034dd0:	4b19      	ldr	r3, [pc, #100]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034dd2:	689b      	ldr	r3, [r3, #8]
 8034dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8034dd8:	687b      	ldr	r3, [r7, #4]
 8034dda:	68db      	ldr	r3, [r3, #12]
 8034ddc:	4916      	ldr	r1, [pc, #88]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034dde:	4313      	orrs	r3, r2
 8034de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034de2:	687b      	ldr	r3, [r7, #4]
 8034de4:	681b      	ldr	r3, [r3, #0]
 8034de6:	f003 0308 	and.w	r3, r3, #8
 8034dea:	2b00      	cmp	r3, #0
 8034dec:	d009      	beq.n	8034e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8034dee:	4b12      	ldr	r3, [pc, #72]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034df0:	689b      	ldr	r3, [r3, #8]
 8034df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8034df6:	687b      	ldr	r3, [r7, #4]
 8034df8:	691b      	ldr	r3, [r3, #16]
 8034dfa:	00db      	lsls	r3, r3, #3
 8034dfc:	490e      	ldr	r1, [pc, #56]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034dfe:	4313      	orrs	r3, r2
 8034e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8034e02:	f000 f821 	bl	8034e48 <HAL_RCC_GetSysClockFreq>
 8034e06:	4602      	mov	r2, r0
 8034e08:	4b0b      	ldr	r3, [pc, #44]	; (8034e38 <HAL_RCC_ClockConfig+0x1bc>)
 8034e0a:	689b      	ldr	r3, [r3, #8]
 8034e0c:	091b      	lsrs	r3, r3, #4
 8034e0e:	f003 030f 	and.w	r3, r3, #15
 8034e12:	490a      	ldr	r1, [pc, #40]	; (8034e3c <HAL_RCC_ClockConfig+0x1c0>)
 8034e14:	5ccb      	ldrb	r3, [r1, r3]
 8034e16:	fa22 f303 	lsr.w	r3, r2, r3
 8034e1a:	4a09      	ldr	r2, [pc, #36]	; (8034e40 <HAL_RCC_ClockConfig+0x1c4>)
 8034e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8034e1e:	4b09      	ldr	r3, [pc, #36]	; (8034e44 <HAL_RCC_ClockConfig+0x1c8>)
 8034e20:	681b      	ldr	r3, [r3, #0]
 8034e22:	4618      	mov	r0, r3
 8034e24:	f7fe fcc8 	bl	80337b8 <HAL_InitTick>

  return HAL_OK;
 8034e28:	2300      	movs	r3, #0
}
 8034e2a:	4618      	mov	r0, r3
 8034e2c:	3710      	adds	r7, #16
 8034e2e:	46bd      	mov	sp, r7
 8034e30:	bd80      	pop	{r7, pc}
 8034e32:	bf00      	nop
 8034e34:	40023c00 	.word	0x40023c00
 8034e38:	40023800 	.word	0x40023800
 8034e3c:	0803a920 	.word	0x0803a920
 8034e40:	20000018 	.word	0x20000018
 8034e44:	2000001c 	.word	0x2000001c

08034e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8034e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8034e4c:	b094      	sub	sp, #80	; 0x50
 8034e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8034e50:	2300      	movs	r3, #0
 8034e52:	647b      	str	r3, [r7, #68]	; 0x44
 8034e54:	2300      	movs	r3, #0
 8034e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8034e58:	2300      	movs	r3, #0
 8034e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8034e5c:	2300      	movs	r3, #0
 8034e5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8034e60:	4b79      	ldr	r3, [pc, #484]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 8034e62:	689b      	ldr	r3, [r3, #8]
 8034e64:	f003 030c 	and.w	r3, r3, #12
 8034e68:	2b08      	cmp	r3, #8
 8034e6a:	d00d      	beq.n	8034e88 <HAL_RCC_GetSysClockFreq+0x40>
 8034e6c:	2b08      	cmp	r3, #8
 8034e6e:	f200 80e1 	bhi.w	8035034 <HAL_RCC_GetSysClockFreq+0x1ec>
 8034e72:	2b00      	cmp	r3, #0
 8034e74:	d002      	beq.n	8034e7c <HAL_RCC_GetSysClockFreq+0x34>
 8034e76:	2b04      	cmp	r3, #4
 8034e78:	d003      	beq.n	8034e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8034e7a:	e0db      	b.n	8035034 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8034e7c:	4b73      	ldr	r3, [pc, #460]	; (803504c <HAL_RCC_GetSysClockFreq+0x204>)
 8034e7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8034e80:	e0db      	b.n	803503a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8034e82:	4b73      	ldr	r3, [pc, #460]	; (8035050 <HAL_RCC_GetSysClockFreq+0x208>)
 8034e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8034e86:	e0d8      	b.n	803503a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8034e88:	4b6f      	ldr	r3, [pc, #444]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 8034e8a:	685b      	ldr	r3, [r3, #4]
 8034e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034e90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8034e92:	4b6d      	ldr	r3, [pc, #436]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 8034e94:	685b      	ldr	r3, [r3, #4]
 8034e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8034e9a:	2b00      	cmp	r3, #0
 8034e9c:	d063      	beq.n	8034f66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8034e9e:	4b6a      	ldr	r3, [pc, #424]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 8034ea0:	685b      	ldr	r3, [r3, #4]
 8034ea2:	099b      	lsrs	r3, r3, #6
 8034ea4:	2200      	movs	r2, #0
 8034ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8034ea8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8034eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8034eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034eb0:	633b      	str	r3, [r7, #48]	; 0x30
 8034eb2:	2300      	movs	r3, #0
 8034eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8034eb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8034eba:	4622      	mov	r2, r4
 8034ebc:	462b      	mov	r3, r5
 8034ebe:	f04f 0000 	mov.w	r0, #0
 8034ec2:	f04f 0100 	mov.w	r1, #0
 8034ec6:	0159      	lsls	r1, r3, #5
 8034ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8034ecc:	0150      	lsls	r0, r2, #5
 8034ece:	4602      	mov	r2, r0
 8034ed0:	460b      	mov	r3, r1
 8034ed2:	4621      	mov	r1, r4
 8034ed4:	1a51      	subs	r1, r2, r1
 8034ed6:	6139      	str	r1, [r7, #16]
 8034ed8:	4629      	mov	r1, r5
 8034eda:	eb63 0301 	sbc.w	r3, r3, r1
 8034ede:	617b      	str	r3, [r7, #20]
 8034ee0:	f04f 0200 	mov.w	r2, #0
 8034ee4:	f04f 0300 	mov.w	r3, #0
 8034ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8034eec:	4659      	mov	r1, fp
 8034eee:	018b      	lsls	r3, r1, #6
 8034ef0:	4651      	mov	r1, sl
 8034ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8034ef6:	4651      	mov	r1, sl
 8034ef8:	018a      	lsls	r2, r1, #6
 8034efa:	4651      	mov	r1, sl
 8034efc:	ebb2 0801 	subs.w	r8, r2, r1
 8034f00:	4659      	mov	r1, fp
 8034f02:	eb63 0901 	sbc.w	r9, r3, r1
 8034f06:	f04f 0200 	mov.w	r2, #0
 8034f0a:	f04f 0300 	mov.w	r3, #0
 8034f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8034f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8034f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8034f1a:	4690      	mov	r8, r2
 8034f1c:	4699      	mov	r9, r3
 8034f1e:	4623      	mov	r3, r4
 8034f20:	eb18 0303 	adds.w	r3, r8, r3
 8034f24:	60bb      	str	r3, [r7, #8]
 8034f26:	462b      	mov	r3, r5
 8034f28:	eb49 0303 	adc.w	r3, r9, r3
 8034f2c:	60fb      	str	r3, [r7, #12]
 8034f2e:	f04f 0200 	mov.w	r2, #0
 8034f32:	f04f 0300 	mov.w	r3, #0
 8034f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8034f3a:	4629      	mov	r1, r5
 8034f3c:	024b      	lsls	r3, r1, #9
 8034f3e:	4621      	mov	r1, r4
 8034f40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8034f44:	4621      	mov	r1, r4
 8034f46:	024a      	lsls	r2, r1, #9
 8034f48:	4610      	mov	r0, r2
 8034f4a:	4619      	mov	r1, r3
 8034f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8034f4e:	2200      	movs	r2, #0
 8034f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8034f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8034f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8034f58:	f7fb fe56 	bl	8030c08 <__aeabi_uldivmod>
 8034f5c:	4602      	mov	r2, r0
 8034f5e:	460b      	mov	r3, r1
 8034f60:	4613      	mov	r3, r2
 8034f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8034f64:	e058      	b.n	8035018 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8034f66:	4b38      	ldr	r3, [pc, #224]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 8034f68:	685b      	ldr	r3, [r3, #4]
 8034f6a:	099b      	lsrs	r3, r3, #6
 8034f6c:	2200      	movs	r2, #0
 8034f6e:	4618      	mov	r0, r3
 8034f70:	4611      	mov	r1, r2
 8034f72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8034f76:	623b      	str	r3, [r7, #32]
 8034f78:	2300      	movs	r3, #0
 8034f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8034f7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8034f80:	4642      	mov	r2, r8
 8034f82:	464b      	mov	r3, r9
 8034f84:	f04f 0000 	mov.w	r0, #0
 8034f88:	f04f 0100 	mov.w	r1, #0
 8034f8c:	0159      	lsls	r1, r3, #5
 8034f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8034f92:	0150      	lsls	r0, r2, #5
 8034f94:	4602      	mov	r2, r0
 8034f96:	460b      	mov	r3, r1
 8034f98:	4641      	mov	r1, r8
 8034f9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8034f9e:	4649      	mov	r1, r9
 8034fa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8034fa4:	f04f 0200 	mov.w	r2, #0
 8034fa8:	f04f 0300 	mov.w	r3, #0
 8034fac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8034fb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8034fb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8034fb8:	ebb2 040a 	subs.w	r4, r2, sl
 8034fbc:	eb63 050b 	sbc.w	r5, r3, fp
 8034fc0:	f04f 0200 	mov.w	r2, #0
 8034fc4:	f04f 0300 	mov.w	r3, #0
 8034fc8:	00eb      	lsls	r3, r5, #3
 8034fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8034fce:	00e2      	lsls	r2, r4, #3
 8034fd0:	4614      	mov	r4, r2
 8034fd2:	461d      	mov	r5, r3
 8034fd4:	4643      	mov	r3, r8
 8034fd6:	18e3      	adds	r3, r4, r3
 8034fd8:	603b      	str	r3, [r7, #0]
 8034fda:	464b      	mov	r3, r9
 8034fdc:	eb45 0303 	adc.w	r3, r5, r3
 8034fe0:	607b      	str	r3, [r7, #4]
 8034fe2:	f04f 0200 	mov.w	r2, #0
 8034fe6:	f04f 0300 	mov.w	r3, #0
 8034fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8034fee:	4629      	mov	r1, r5
 8034ff0:	028b      	lsls	r3, r1, #10
 8034ff2:	4621      	mov	r1, r4
 8034ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8034ff8:	4621      	mov	r1, r4
 8034ffa:	028a      	lsls	r2, r1, #10
 8034ffc:	4610      	mov	r0, r2
 8034ffe:	4619      	mov	r1, r3
 8035000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8035002:	2200      	movs	r2, #0
 8035004:	61bb      	str	r3, [r7, #24]
 8035006:	61fa      	str	r2, [r7, #28]
 8035008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 803500c:	f7fb fdfc 	bl	8030c08 <__aeabi_uldivmod>
 8035010:	4602      	mov	r2, r0
 8035012:	460b      	mov	r3, r1
 8035014:	4613      	mov	r3, r2
 8035016:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8035018:	4b0b      	ldr	r3, [pc, #44]	; (8035048 <HAL_RCC_GetSysClockFreq+0x200>)
 803501a:	685b      	ldr	r3, [r3, #4]
 803501c:	0c1b      	lsrs	r3, r3, #16
 803501e:	f003 0303 	and.w	r3, r3, #3
 8035022:	3301      	adds	r3, #1
 8035024:	005b      	lsls	r3, r3, #1
 8035026:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8035028:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803502a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8035030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8035032:	e002      	b.n	803503a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8035034:	4b05      	ldr	r3, [pc, #20]	; (803504c <HAL_RCC_GetSysClockFreq+0x204>)
 8035036:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8035038:	bf00      	nop
    }
  }
  return sysclockfreq;
 803503a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 803503c:	4618      	mov	r0, r3
 803503e:	3750      	adds	r7, #80	; 0x50
 8035040:	46bd      	mov	sp, r7
 8035042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8035046:	bf00      	nop
 8035048:	40023800 	.word	0x40023800
 803504c:	00f42400 	.word	0x00f42400
 8035050:	007a1200 	.word	0x007a1200

08035054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8035054:	b480      	push	{r7}
 8035056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8035058:	4b03      	ldr	r3, [pc, #12]	; (8035068 <HAL_RCC_GetHCLKFreq+0x14>)
 803505a:	681b      	ldr	r3, [r3, #0]
}
 803505c:	4618      	mov	r0, r3
 803505e:	46bd      	mov	sp, r7
 8035060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035064:	4770      	bx	lr
 8035066:	bf00      	nop
 8035068:	20000018 	.word	0x20000018

0803506c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 803506c:	b580      	push	{r7, lr}
 803506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8035070:	f7ff fff0 	bl	8035054 <HAL_RCC_GetHCLKFreq>
 8035074:	4602      	mov	r2, r0
 8035076:	4b05      	ldr	r3, [pc, #20]	; (803508c <HAL_RCC_GetPCLK1Freq+0x20>)
 8035078:	689b      	ldr	r3, [r3, #8]
 803507a:	0a9b      	lsrs	r3, r3, #10
 803507c:	f003 0307 	and.w	r3, r3, #7
 8035080:	4903      	ldr	r1, [pc, #12]	; (8035090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8035082:	5ccb      	ldrb	r3, [r1, r3]
 8035084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8035088:	4618      	mov	r0, r3
 803508a:	bd80      	pop	{r7, pc}
 803508c:	40023800 	.word	0x40023800
 8035090:	0803a930 	.word	0x0803a930

08035094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8035094:	b580      	push	{r7, lr}
 8035096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8035098:	f7ff ffdc 	bl	8035054 <HAL_RCC_GetHCLKFreq>
 803509c:	4602      	mov	r2, r0
 803509e:	4b05      	ldr	r3, [pc, #20]	; (80350b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80350a0:	689b      	ldr	r3, [r3, #8]
 80350a2:	0b5b      	lsrs	r3, r3, #13
 80350a4:	f003 0307 	and.w	r3, r3, #7
 80350a8:	4903      	ldr	r1, [pc, #12]	; (80350b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80350aa:	5ccb      	ldrb	r3, [r1, r3]
 80350ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80350b0:	4618      	mov	r0, r3
 80350b2:	bd80      	pop	{r7, pc}
 80350b4:	40023800 	.word	0x40023800
 80350b8:	0803a930 	.word	0x0803a930

080350bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80350bc:	b580      	push	{r7, lr}
 80350be:	b082      	sub	sp, #8
 80350c0:	af00      	add	r7, sp, #0
 80350c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80350c4:	687b      	ldr	r3, [r7, #4]
 80350c6:	2b00      	cmp	r3, #0
 80350c8:	d101      	bne.n	80350ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80350ca:	2301      	movs	r3, #1
 80350cc:	e07b      	b.n	80351c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80350ce:	687b      	ldr	r3, [r7, #4]
 80350d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350d2:	2b00      	cmp	r3, #0
 80350d4:	d108      	bne.n	80350e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80350d6:	687b      	ldr	r3, [r7, #4]
 80350d8:	685b      	ldr	r3, [r3, #4]
 80350da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80350de:	d009      	beq.n	80350f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80350e0:	687b      	ldr	r3, [r7, #4]
 80350e2:	2200      	movs	r2, #0
 80350e4:	61da      	str	r2, [r3, #28]
 80350e6:	e005      	b.n	80350f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80350e8:	687b      	ldr	r3, [r7, #4]
 80350ea:	2200      	movs	r2, #0
 80350ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80350ee:	687b      	ldr	r3, [r7, #4]
 80350f0:	2200      	movs	r2, #0
 80350f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80350f4:	687b      	ldr	r3, [r7, #4]
 80350f6:	2200      	movs	r2, #0
 80350f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80350fa:	687b      	ldr	r3, [r7, #4]
 80350fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035100:	b2db      	uxtb	r3, r3
 8035102:	2b00      	cmp	r3, #0
 8035104:	d106      	bne.n	8035114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8035106:	687b      	ldr	r3, [r7, #4]
 8035108:	2200      	movs	r2, #0
 803510a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 803510e:	6878      	ldr	r0, [r7, #4]
 8035110:	f7fe f8ca 	bl	80332a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8035114:	687b      	ldr	r3, [r7, #4]
 8035116:	2202      	movs	r2, #2
 8035118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 803511c:	687b      	ldr	r3, [r7, #4]
 803511e:	681b      	ldr	r3, [r3, #0]
 8035120:	681a      	ldr	r2, [r3, #0]
 8035122:	687b      	ldr	r3, [r7, #4]
 8035124:	681b      	ldr	r3, [r3, #0]
 8035126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803512a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 803512c:	687b      	ldr	r3, [r7, #4]
 803512e:	685b      	ldr	r3, [r3, #4]
 8035130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8035134:	687b      	ldr	r3, [r7, #4]
 8035136:	689b      	ldr	r3, [r3, #8]
 8035138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 803513c:	431a      	orrs	r2, r3
 803513e:	687b      	ldr	r3, [r7, #4]
 8035140:	68db      	ldr	r3, [r3, #12]
 8035142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8035146:	431a      	orrs	r2, r3
 8035148:	687b      	ldr	r3, [r7, #4]
 803514a:	691b      	ldr	r3, [r3, #16]
 803514c:	f003 0302 	and.w	r3, r3, #2
 8035150:	431a      	orrs	r2, r3
 8035152:	687b      	ldr	r3, [r7, #4]
 8035154:	695b      	ldr	r3, [r3, #20]
 8035156:	f003 0301 	and.w	r3, r3, #1
 803515a:	431a      	orrs	r2, r3
 803515c:	687b      	ldr	r3, [r7, #4]
 803515e:	699b      	ldr	r3, [r3, #24]
 8035160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035164:	431a      	orrs	r2, r3
 8035166:	687b      	ldr	r3, [r7, #4]
 8035168:	69db      	ldr	r3, [r3, #28]
 803516a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803516e:	431a      	orrs	r2, r3
 8035170:	687b      	ldr	r3, [r7, #4]
 8035172:	6a1b      	ldr	r3, [r3, #32]
 8035174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035178:	ea42 0103 	orr.w	r1, r2, r3
 803517c:	687b      	ldr	r3, [r7, #4]
 803517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035180:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8035184:	687b      	ldr	r3, [r7, #4]
 8035186:	681b      	ldr	r3, [r3, #0]
 8035188:	430a      	orrs	r2, r1
 803518a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 803518c:	687b      	ldr	r3, [r7, #4]
 803518e:	699b      	ldr	r3, [r3, #24]
 8035190:	0c1b      	lsrs	r3, r3, #16
 8035192:	f003 0104 	and.w	r1, r3, #4
 8035196:	687b      	ldr	r3, [r7, #4]
 8035198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803519a:	f003 0210 	and.w	r2, r3, #16
 803519e:	687b      	ldr	r3, [r7, #4]
 80351a0:	681b      	ldr	r3, [r3, #0]
 80351a2:	430a      	orrs	r2, r1
 80351a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80351a6:	687b      	ldr	r3, [r7, #4]
 80351a8:	681b      	ldr	r3, [r3, #0]
 80351aa:	69da      	ldr	r2, [r3, #28]
 80351ac:	687b      	ldr	r3, [r7, #4]
 80351ae:	681b      	ldr	r3, [r3, #0]
 80351b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80351b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80351b6:	687b      	ldr	r3, [r7, #4]
 80351b8:	2200      	movs	r2, #0
 80351ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80351bc:	687b      	ldr	r3, [r7, #4]
 80351be:	2201      	movs	r2, #1
 80351c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80351c4:	2300      	movs	r3, #0
}
 80351c6:	4618      	mov	r0, r3
 80351c8:	3708      	adds	r7, #8
 80351ca:	46bd      	mov	sp, r7
 80351cc:	bd80      	pop	{r7, pc}

080351ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80351ce:	b580      	push	{r7, lr}
 80351d0:	b082      	sub	sp, #8
 80351d2:	af00      	add	r7, sp, #0
 80351d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80351d6:	687b      	ldr	r3, [r7, #4]
 80351d8:	2b00      	cmp	r3, #0
 80351da:	d101      	bne.n	80351e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80351dc:	2301      	movs	r3, #1
 80351de:	e03f      	b.n	8035260 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80351e0:	687b      	ldr	r3, [r7, #4]
 80351e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80351e6:	b2db      	uxtb	r3, r3
 80351e8:	2b00      	cmp	r3, #0
 80351ea:	d106      	bne.n	80351fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80351ec:	687b      	ldr	r3, [r7, #4]
 80351ee:	2200      	movs	r2, #0
 80351f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80351f4:	6878      	ldr	r0, [r7, #4]
 80351f6:	f7fe f89f 	bl	8033338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80351fa:	687b      	ldr	r3, [r7, #4]
 80351fc:	2224      	movs	r2, #36	; 0x24
 80351fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8035202:	687b      	ldr	r3, [r7, #4]
 8035204:	681b      	ldr	r3, [r3, #0]
 8035206:	68da      	ldr	r2, [r3, #12]
 8035208:	687b      	ldr	r3, [r7, #4]
 803520a:	681b      	ldr	r3, [r3, #0]
 803520c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8035210:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8035212:	6878      	ldr	r0, [r7, #4]
 8035214:	f000 fdde 	bl	8035dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8035218:	687b      	ldr	r3, [r7, #4]
 803521a:	681b      	ldr	r3, [r3, #0]
 803521c:	691a      	ldr	r2, [r3, #16]
 803521e:	687b      	ldr	r3, [r7, #4]
 8035220:	681b      	ldr	r3, [r3, #0]
 8035222:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8035226:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8035228:	687b      	ldr	r3, [r7, #4]
 803522a:	681b      	ldr	r3, [r3, #0]
 803522c:	695a      	ldr	r2, [r3, #20]
 803522e:	687b      	ldr	r3, [r7, #4]
 8035230:	681b      	ldr	r3, [r3, #0]
 8035232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8035236:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8035238:	687b      	ldr	r3, [r7, #4]
 803523a:	681b      	ldr	r3, [r3, #0]
 803523c:	68da      	ldr	r2, [r3, #12]
 803523e:	687b      	ldr	r3, [r7, #4]
 8035240:	681b      	ldr	r3, [r3, #0]
 8035242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8035246:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8035248:	687b      	ldr	r3, [r7, #4]
 803524a:	2200      	movs	r2, #0
 803524c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 803524e:	687b      	ldr	r3, [r7, #4]
 8035250:	2220      	movs	r2, #32
 8035252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8035256:	687b      	ldr	r3, [r7, #4]
 8035258:	2220      	movs	r2, #32
 803525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 803525e:	2300      	movs	r3, #0
}
 8035260:	4618      	mov	r0, r3
 8035262:	3708      	adds	r7, #8
 8035264:	46bd      	mov	sp, r7
 8035266:	bd80      	pop	{r7, pc}

08035268 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8035268:	b580      	push	{r7, lr}
 803526a:	b08a      	sub	sp, #40	; 0x28
 803526c:	af02      	add	r7, sp, #8
 803526e:	60f8      	str	r0, [r7, #12]
 8035270:	60b9      	str	r1, [r7, #8]
 8035272:	603b      	str	r3, [r7, #0]
 8035274:	4613      	mov	r3, r2
 8035276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8035278:	2300      	movs	r3, #0
 803527a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 803527c:	68fb      	ldr	r3, [r7, #12]
 803527e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035282:	b2db      	uxtb	r3, r3
 8035284:	2b20      	cmp	r3, #32
 8035286:	d17c      	bne.n	8035382 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8035288:	68bb      	ldr	r3, [r7, #8]
 803528a:	2b00      	cmp	r3, #0
 803528c:	d002      	beq.n	8035294 <HAL_UART_Transmit+0x2c>
 803528e:	88fb      	ldrh	r3, [r7, #6]
 8035290:	2b00      	cmp	r3, #0
 8035292:	d101      	bne.n	8035298 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8035294:	2301      	movs	r3, #1
 8035296:	e075      	b.n	8035384 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8035298:	68fb      	ldr	r3, [r7, #12]
 803529a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803529e:	2b01      	cmp	r3, #1
 80352a0:	d101      	bne.n	80352a6 <HAL_UART_Transmit+0x3e>
 80352a2:	2302      	movs	r3, #2
 80352a4:	e06e      	b.n	8035384 <HAL_UART_Transmit+0x11c>
 80352a6:	68fb      	ldr	r3, [r7, #12]
 80352a8:	2201      	movs	r2, #1
 80352aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80352ae:	68fb      	ldr	r3, [r7, #12]
 80352b0:	2200      	movs	r2, #0
 80352b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80352b4:	68fb      	ldr	r3, [r7, #12]
 80352b6:	2221      	movs	r2, #33	; 0x21
 80352b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80352bc:	f7fe fac0 	bl	8033840 <HAL_GetTick>
 80352c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80352c2:	68fb      	ldr	r3, [r7, #12]
 80352c4:	88fa      	ldrh	r2, [r7, #6]
 80352c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80352c8:	68fb      	ldr	r3, [r7, #12]
 80352ca:	88fa      	ldrh	r2, [r7, #6]
 80352cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80352ce:	68fb      	ldr	r3, [r7, #12]
 80352d0:	689b      	ldr	r3, [r3, #8]
 80352d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80352d6:	d108      	bne.n	80352ea <HAL_UART_Transmit+0x82>
 80352d8:	68fb      	ldr	r3, [r7, #12]
 80352da:	691b      	ldr	r3, [r3, #16]
 80352dc:	2b00      	cmp	r3, #0
 80352de:	d104      	bne.n	80352ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80352e0:	2300      	movs	r3, #0
 80352e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80352e4:	68bb      	ldr	r3, [r7, #8]
 80352e6:	61bb      	str	r3, [r7, #24]
 80352e8:	e003      	b.n	80352f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80352ea:	68bb      	ldr	r3, [r7, #8]
 80352ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80352ee:	2300      	movs	r3, #0
 80352f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80352f2:	68fb      	ldr	r3, [r7, #12]
 80352f4:	2200      	movs	r2, #0
 80352f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80352fa:	e02a      	b.n	8035352 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80352fc:	683b      	ldr	r3, [r7, #0]
 80352fe:	9300      	str	r3, [sp, #0]
 8035300:	697b      	ldr	r3, [r7, #20]
 8035302:	2200      	movs	r2, #0
 8035304:	2180      	movs	r1, #128	; 0x80
 8035306:	68f8      	ldr	r0, [r7, #12]
 8035308:	f000 fb1e 	bl	8035948 <UART_WaitOnFlagUntilTimeout>
 803530c:	4603      	mov	r3, r0
 803530e:	2b00      	cmp	r3, #0
 8035310:	d001      	beq.n	8035316 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8035312:	2303      	movs	r3, #3
 8035314:	e036      	b.n	8035384 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8035316:	69fb      	ldr	r3, [r7, #28]
 8035318:	2b00      	cmp	r3, #0
 803531a:	d10b      	bne.n	8035334 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 803531c:	69bb      	ldr	r3, [r7, #24]
 803531e:	881b      	ldrh	r3, [r3, #0]
 8035320:	461a      	mov	r2, r3
 8035322:	68fb      	ldr	r3, [r7, #12]
 8035324:	681b      	ldr	r3, [r3, #0]
 8035326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803532a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 803532c:	69bb      	ldr	r3, [r7, #24]
 803532e:	3302      	adds	r3, #2
 8035330:	61bb      	str	r3, [r7, #24]
 8035332:	e007      	b.n	8035344 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8035334:	69fb      	ldr	r3, [r7, #28]
 8035336:	781a      	ldrb	r2, [r3, #0]
 8035338:	68fb      	ldr	r3, [r7, #12]
 803533a:	681b      	ldr	r3, [r3, #0]
 803533c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 803533e:	69fb      	ldr	r3, [r7, #28]
 8035340:	3301      	adds	r3, #1
 8035342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8035344:	68fb      	ldr	r3, [r7, #12]
 8035346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8035348:	b29b      	uxth	r3, r3
 803534a:	3b01      	subs	r3, #1
 803534c:	b29a      	uxth	r2, r3
 803534e:	68fb      	ldr	r3, [r7, #12]
 8035350:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8035352:	68fb      	ldr	r3, [r7, #12]
 8035354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8035356:	b29b      	uxth	r3, r3
 8035358:	2b00      	cmp	r3, #0
 803535a:	d1cf      	bne.n	80352fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 803535c:	683b      	ldr	r3, [r7, #0]
 803535e:	9300      	str	r3, [sp, #0]
 8035360:	697b      	ldr	r3, [r7, #20]
 8035362:	2200      	movs	r2, #0
 8035364:	2140      	movs	r1, #64	; 0x40
 8035366:	68f8      	ldr	r0, [r7, #12]
 8035368:	f000 faee 	bl	8035948 <UART_WaitOnFlagUntilTimeout>
 803536c:	4603      	mov	r3, r0
 803536e:	2b00      	cmp	r3, #0
 8035370:	d001      	beq.n	8035376 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8035372:	2303      	movs	r3, #3
 8035374:	e006      	b.n	8035384 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8035376:	68fb      	ldr	r3, [r7, #12]
 8035378:	2220      	movs	r2, #32
 803537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 803537e:	2300      	movs	r3, #0
 8035380:	e000      	b.n	8035384 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8035382:	2302      	movs	r3, #2
  }
}
 8035384:	4618      	mov	r0, r3
 8035386:	3720      	adds	r7, #32
 8035388:	46bd      	mov	sp, r7
 803538a:	bd80      	pop	{r7, pc}

0803538c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 803538c:	b580      	push	{r7, lr}
 803538e:	b084      	sub	sp, #16
 8035390:	af00      	add	r7, sp, #0
 8035392:	60f8      	str	r0, [r7, #12]
 8035394:	60b9      	str	r1, [r7, #8]
 8035396:	4613      	mov	r3, r2
 8035398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803539a:	68fb      	ldr	r3, [r7, #12]
 803539c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80353a0:	b2db      	uxtb	r3, r3
 80353a2:	2b20      	cmp	r3, #32
 80353a4:	d11d      	bne.n	80353e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80353a6:	68bb      	ldr	r3, [r7, #8]
 80353a8:	2b00      	cmp	r3, #0
 80353aa:	d002      	beq.n	80353b2 <HAL_UART_Receive_IT+0x26>
 80353ac:	88fb      	ldrh	r3, [r7, #6]
 80353ae:	2b00      	cmp	r3, #0
 80353b0:	d101      	bne.n	80353b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80353b2:	2301      	movs	r3, #1
 80353b4:	e016      	b.n	80353e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80353b6:	68fb      	ldr	r3, [r7, #12]
 80353b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80353bc:	2b01      	cmp	r3, #1
 80353be:	d101      	bne.n	80353c4 <HAL_UART_Receive_IT+0x38>
 80353c0:	2302      	movs	r3, #2
 80353c2:	e00f      	b.n	80353e4 <HAL_UART_Receive_IT+0x58>
 80353c4:	68fb      	ldr	r3, [r7, #12]
 80353c6:	2201      	movs	r2, #1
 80353c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80353cc:	68fb      	ldr	r3, [r7, #12]
 80353ce:	2200      	movs	r2, #0
 80353d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80353d2:	88fb      	ldrh	r3, [r7, #6]
 80353d4:	461a      	mov	r2, r3
 80353d6:	68b9      	ldr	r1, [r7, #8]
 80353d8:	68f8      	ldr	r0, [r7, #12]
 80353da:	f000 fb23 	bl	8035a24 <UART_Start_Receive_IT>
 80353de:	4603      	mov	r3, r0
 80353e0:	e000      	b.n	80353e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80353e2:	2302      	movs	r3, #2
  }
}
 80353e4:	4618      	mov	r0, r3
 80353e6:	3710      	adds	r7, #16
 80353e8:	46bd      	mov	sp, r7
 80353ea:	bd80      	pop	{r7, pc}

080353ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80353ec:	b580      	push	{r7, lr}
 80353ee:	b0ba      	sub	sp, #232	; 0xe8
 80353f0:	af00      	add	r7, sp, #0
 80353f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80353f4:	687b      	ldr	r3, [r7, #4]
 80353f6:	681b      	ldr	r3, [r3, #0]
 80353f8:	681b      	ldr	r3, [r3, #0]
 80353fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80353fe:	687b      	ldr	r3, [r7, #4]
 8035400:	681b      	ldr	r3, [r3, #0]
 8035402:	68db      	ldr	r3, [r3, #12]
 8035404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8035408:	687b      	ldr	r3, [r7, #4]
 803540a:	681b      	ldr	r3, [r3, #0]
 803540c:	695b      	ldr	r3, [r3, #20]
 803540e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8035412:	2300      	movs	r3, #0
 8035414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8035418:	2300      	movs	r3, #0
 803541a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 803541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035422:	f003 030f 	and.w	r3, r3, #15
 8035426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 803542a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 803542e:	2b00      	cmp	r3, #0
 8035430:	d10f      	bne.n	8035452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8035432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035436:	f003 0320 	and.w	r3, r3, #32
 803543a:	2b00      	cmp	r3, #0
 803543c:	d009      	beq.n	8035452 <HAL_UART_IRQHandler+0x66>
 803543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035442:	f003 0320 	and.w	r3, r3, #32
 8035446:	2b00      	cmp	r3, #0
 8035448:	d003      	beq.n	8035452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 803544a:	6878      	ldr	r0, [r7, #4]
 803544c:	f000 fc07 	bl	8035c5e <UART_Receive_IT>
      return;
 8035450:	e256      	b.n	8035900 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8035452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035456:	2b00      	cmp	r3, #0
 8035458:	f000 80de 	beq.w	8035618 <HAL_UART_IRQHandler+0x22c>
 803545c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035460:	f003 0301 	and.w	r3, r3, #1
 8035464:	2b00      	cmp	r3, #0
 8035466:	d106      	bne.n	8035476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8035468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803546c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8035470:	2b00      	cmp	r3, #0
 8035472:	f000 80d1 	beq.w	8035618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8035476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803547a:	f003 0301 	and.w	r3, r3, #1
 803547e:	2b00      	cmp	r3, #0
 8035480:	d00b      	beq.n	803549a <HAL_UART_IRQHandler+0xae>
 8035482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803548a:	2b00      	cmp	r3, #0
 803548c:	d005      	beq.n	803549a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 803548e:	687b      	ldr	r3, [r7, #4]
 8035490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035492:	f043 0201 	orr.w	r2, r3, #1
 8035496:	687b      	ldr	r3, [r7, #4]
 8035498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803549e:	f003 0304 	and.w	r3, r3, #4
 80354a2:	2b00      	cmp	r3, #0
 80354a4:	d00b      	beq.n	80354be <HAL_UART_IRQHandler+0xd2>
 80354a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80354aa:	f003 0301 	and.w	r3, r3, #1
 80354ae:	2b00      	cmp	r3, #0
 80354b0:	d005      	beq.n	80354be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80354b2:	687b      	ldr	r3, [r7, #4]
 80354b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80354b6:	f043 0202 	orr.w	r2, r3, #2
 80354ba:	687b      	ldr	r3, [r7, #4]
 80354bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80354be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80354c2:	f003 0302 	and.w	r3, r3, #2
 80354c6:	2b00      	cmp	r3, #0
 80354c8:	d00b      	beq.n	80354e2 <HAL_UART_IRQHandler+0xf6>
 80354ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80354ce:	f003 0301 	and.w	r3, r3, #1
 80354d2:	2b00      	cmp	r3, #0
 80354d4:	d005      	beq.n	80354e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80354d6:	687b      	ldr	r3, [r7, #4]
 80354d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80354da:	f043 0204 	orr.w	r2, r3, #4
 80354de:	687b      	ldr	r3, [r7, #4]
 80354e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80354e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80354e6:	f003 0308 	and.w	r3, r3, #8
 80354ea:	2b00      	cmp	r3, #0
 80354ec:	d011      	beq.n	8035512 <HAL_UART_IRQHandler+0x126>
 80354ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80354f2:	f003 0320 	and.w	r3, r3, #32
 80354f6:	2b00      	cmp	r3, #0
 80354f8:	d105      	bne.n	8035506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80354fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80354fe:	f003 0301 	and.w	r3, r3, #1
 8035502:	2b00      	cmp	r3, #0
 8035504:	d005      	beq.n	8035512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035506:	687b      	ldr	r3, [r7, #4]
 8035508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803550a:	f043 0208 	orr.w	r2, r3, #8
 803550e:	687b      	ldr	r3, [r7, #4]
 8035510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8035512:	687b      	ldr	r3, [r7, #4]
 8035514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035516:	2b00      	cmp	r3, #0
 8035518:	f000 81ed 	beq.w	80358f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 803551c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035520:	f003 0320 	and.w	r3, r3, #32
 8035524:	2b00      	cmp	r3, #0
 8035526:	d008      	beq.n	803553a <HAL_UART_IRQHandler+0x14e>
 8035528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803552c:	f003 0320 	and.w	r3, r3, #32
 8035530:	2b00      	cmp	r3, #0
 8035532:	d002      	beq.n	803553a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8035534:	6878      	ldr	r0, [r7, #4]
 8035536:	f000 fb92 	bl	8035c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 803553a:	687b      	ldr	r3, [r7, #4]
 803553c:	681b      	ldr	r3, [r3, #0]
 803553e:	695b      	ldr	r3, [r3, #20]
 8035540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035544:	2b40      	cmp	r3, #64	; 0x40
 8035546:	bf0c      	ite	eq
 8035548:	2301      	moveq	r3, #1
 803554a:	2300      	movne	r3, #0
 803554c:	b2db      	uxtb	r3, r3
 803554e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8035552:	687b      	ldr	r3, [r7, #4]
 8035554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035556:	f003 0308 	and.w	r3, r3, #8
 803555a:	2b00      	cmp	r3, #0
 803555c:	d103      	bne.n	8035566 <HAL_UART_IRQHandler+0x17a>
 803555e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8035562:	2b00      	cmp	r3, #0
 8035564:	d04f      	beq.n	8035606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8035566:	6878      	ldr	r0, [r7, #4]
 8035568:	f000 fa9a 	bl	8035aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803556c:	687b      	ldr	r3, [r7, #4]
 803556e:	681b      	ldr	r3, [r3, #0]
 8035570:	695b      	ldr	r3, [r3, #20]
 8035572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035576:	2b40      	cmp	r3, #64	; 0x40
 8035578:	d141      	bne.n	80355fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803557a:	687b      	ldr	r3, [r7, #4]
 803557c:	681b      	ldr	r3, [r3, #0]
 803557e:	3314      	adds	r3, #20
 8035580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8035588:	e853 3f00 	ldrex	r3, [r3]
 803558c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8035598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 803559c:	687b      	ldr	r3, [r7, #4]
 803559e:	681b      	ldr	r3, [r3, #0]
 80355a0:	3314      	adds	r3, #20
 80355a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80355a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80355aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80355ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80355b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80355b6:	e841 2300 	strex	r3, r2, [r1]
 80355ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80355be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80355c2:	2b00      	cmp	r3, #0
 80355c4:	d1d9      	bne.n	803557a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80355c6:	687b      	ldr	r3, [r7, #4]
 80355c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80355ca:	2b00      	cmp	r3, #0
 80355cc:	d013      	beq.n	80355f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80355ce:	687b      	ldr	r3, [r7, #4]
 80355d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80355d2:	4a7d      	ldr	r2, [pc, #500]	; (80357c8 <HAL_UART_IRQHandler+0x3dc>)
 80355d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80355d6:	687b      	ldr	r3, [r7, #4]
 80355d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80355da:	4618      	mov	r0, r3
 80355dc:	f7fe fae1 	bl	8033ba2 <HAL_DMA_Abort_IT>
 80355e0:	4603      	mov	r3, r0
 80355e2:	2b00      	cmp	r3, #0
 80355e4:	d016      	beq.n	8035614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80355e6:	687b      	ldr	r3, [r7, #4]
 80355e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80355ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80355ec:	687a      	ldr	r2, [r7, #4]
 80355ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80355f0:	4610      	mov	r0, r2
 80355f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355f4:	e00e      	b.n	8035614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80355f6:	6878      	ldr	r0, [r7, #4]
 80355f8:	f000 f990 	bl	803591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355fc:	e00a      	b.n	8035614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80355fe:	6878      	ldr	r0, [r7, #4]
 8035600:	f000 f98c 	bl	803591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035604:	e006      	b.n	8035614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8035606:	6878      	ldr	r0, [r7, #4]
 8035608:	f000 f988 	bl	803591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 803560c:	687b      	ldr	r3, [r7, #4]
 803560e:	2200      	movs	r2, #0
 8035610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8035612:	e170      	b.n	80358f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035614:	bf00      	nop
    return;
 8035616:	e16e      	b.n	80358f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8035618:	687b      	ldr	r3, [r7, #4]
 803561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803561c:	2b01      	cmp	r3, #1
 803561e:	f040 814a 	bne.w	80358b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8035622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035626:	f003 0310 	and.w	r3, r3, #16
 803562a:	2b00      	cmp	r3, #0
 803562c:	f000 8143 	beq.w	80358b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8035630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035634:	f003 0310 	and.w	r3, r3, #16
 8035638:	2b00      	cmp	r3, #0
 803563a:	f000 813c 	beq.w	80358b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 803563e:	2300      	movs	r3, #0
 8035640:	60bb      	str	r3, [r7, #8]
 8035642:	687b      	ldr	r3, [r7, #4]
 8035644:	681b      	ldr	r3, [r3, #0]
 8035646:	681b      	ldr	r3, [r3, #0]
 8035648:	60bb      	str	r3, [r7, #8]
 803564a:	687b      	ldr	r3, [r7, #4]
 803564c:	681b      	ldr	r3, [r3, #0]
 803564e:	685b      	ldr	r3, [r3, #4]
 8035650:	60bb      	str	r3, [r7, #8]
 8035652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035654:	687b      	ldr	r3, [r7, #4]
 8035656:	681b      	ldr	r3, [r3, #0]
 8035658:	695b      	ldr	r3, [r3, #20]
 803565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803565e:	2b40      	cmp	r3, #64	; 0x40
 8035660:	f040 80b4 	bne.w	80357cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8035664:	687b      	ldr	r3, [r7, #4]
 8035666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035668:	681b      	ldr	r3, [r3, #0]
 803566a:	685b      	ldr	r3, [r3, #4]
 803566c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8035670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8035674:	2b00      	cmp	r3, #0
 8035676:	f000 8140 	beq.w	80358fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 803567a:	687b      	ldr	r3, [r7, #4]
 803567c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803567e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035682:	429a      	cmp	r2, r3
 8035684:	f080 8139 	bcs.w	80358fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8035688:	687b      	ldr	r3, [r7, #4]
 803568a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 803568e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8035690:	687b      	ldr	r3, [r7, #4]
 8035692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035694:	69db      	ldr	r3, [r3, #28]
 8035696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803569a:	f000 8088 	beq.w	80357ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803569e:	687b      	ldr	r3, [r7, #4]
 80356a0:	681b      	ldr	r3, [r3, #0]
 80356a2:	330c      	adds	r3, #12
 80356a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80356ac:	e853 3f00 	ldrex	r3, [r3]
 80356b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80356b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80356b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80356bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80356c0:	687b      	ldr	r3, [r7, #4]
 80356c2:	681b      	ldr	r3, [r3, #0]
 80356c4:	330c      	adds	r3, #12
 80356c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80356ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80356ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80356d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80356d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80356da:	e841 2300 	strex	r3, r2, [r1]
 80356de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80356e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80356e6:	2b00      	cmp	r3, #0
 80356e8:	d1d9      	bne.n	803569e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80356ea:	687b      	ldr	r3, [r7, #4]
 80356ec:	681b      	ldr	r3, [r3, #0]
 80356ee:	3314      	adds	r3, #20
 80356f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80356f4:	e853 3f00 	ldrex	r3, [r3]
 80356f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80356fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80356fc:	f023 0301 	bic.w	r3, r3, #1
 8035700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8035704:	687b      	ldr	r3, [r7, #4]
 8035706:	681b      	ldr	r3, [r3, #0]
 8035708:	3314      	adds	r3, #20
 803570a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 803570e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8035712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8035716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803571a:	e841 2300 	strex	r3, r2, [r1]
 803571e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8035720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8035722:	2b00      	cmp	r3, #0
 8035724:	d1e1      	bne.n	80356ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8035726:	687b      	ldr	r3, [r7, #4]
 8035728:	681b      	ldr	r3, [r3, #0]
 803572a:	3314      	adds	r3, #20
 803572c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803572e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8035730:	e853 3f00 	ldrex	r3, [r3]
 8035734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8035736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8035738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803573c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8035740:	687b      	ldr	r3, [r7, #4]
 8035742:	681b      	ldr	r3, [r3, #0]
 8035744:	3314      	adds	r3, #20
 8035746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 803574a:	66fa      	str	r2, [r7, #108]	; 0x6c
 803574c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803574e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8035750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8035752:	e841 2300 	strex	r3, r2, [r1]
 8035756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8035758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803575a:	2b00      	cmp	r3, #0
 803575c:	d1e3      	bne.n	8035726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 803575e:	687b      	ldr	r3, [r7, #4]
 8035760:	2220      	movs	r2, #32
 8035762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035766:	687b      	ldr	r3, [r7, #4]
 8035768:	2200      	movs	r2, #0
 803576a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803576c:	687b      	ldr	r3, [r7, #4]
 803576e:	681b      	ldr	r3, [r3, #0]
 8035770:	330c      	adds	r3, #12
 8035772:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8035776:	e853 3f00 	ldrex	r3, [r3]
 803577a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803577c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803577e:	f023 0310 	bic.w	r3, r3, #16
 8035782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8035786:	687b      	ldr	r3, [r7, #4]
 8035788:	681b      	ldr	r3, [r3, #0]
 803578a:	330c      	adds	r3, #12
 803578c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8035790:	65ba      	str	r2, [r7, #88]	; 0x58
 8035792:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8035796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8035798:	e841 2300 	strex	r3, r2, [r1]
 803579c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80357a0:	2b00      	cmp	r3, #0
 80357a2:	d1e3      	bne.n	803576c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80357a4:	687b      	ldr	r3, [r7, #4]
 80357a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80357a8:	4618      	mov	r0, r3
 80357aa:	f7fe f98a 	bl	8033ac2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80357ae:	687b      	ldr	r3, [r7, #4]
 80357b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80357b2:	687b      	ldr	r3, [r7, #4]
 80357b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80357b6:	b29b      	uxth	r3, r3
 80357b8:	1ad3      	subs	r3, r2, r3
 80357ba:	b29b      	uxth	r3, r3
 80357bc:	4619      	mov	r1, r3
 80357be:	6878      	ldr	r0, [r7, #4]
 80357c0:	f000 f8b6 	bl	8035930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80357c4:	e099      	b.n	80358fa <HAL_UART_IRQHandler+0x50e>
 80357c6:	bf00      	nop
 80357c8:	08035b67 	.word	0x08035b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80357cc:	687b      	ldr	r3, [r7, #4]
 80357ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80357d0:	687b      	ldr	r3, [r7, #4]
 80357d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80357d4:	b29b      	uxth	r3, r3
 80357d6:	1ad3      	subs	r3, r2, r3
 80357d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80357dc:	687b      	ldr	r3, [r7, #4]
 80357de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80357e0:	b29b      	uxth	r3, r3
 80357e2:	2b00      	cmp	r3, #0
 80357e4:	f000 808b 	beq.w	80358fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80357e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80357ec:	2b00      	cmp	r3, #0
 80357ee:	f000 8086 	beq.w	80358fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80357f2:	687b      	ldr	r3, [r7, #4]
 80357f4:	681b      	ldr	r3, [r3, #0]
 80357f6:	330c      	adds	r3, #12
 80357f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80357fc:	e853 3f00 	ldrex	r3, [r3]
 8035800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8035802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8035804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8035808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 803580c:	687b      	ldr	r3, [r7, #4]
 803580e:	681b      	ldr	r3, [r3, #0]
 8035810:	330c      	adds	r3, #12
 8035812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8035816:	647a      	str	r2, [r7, #68]	; 0x44
 8035818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803581a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803581c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803581e:	e841 2300 	strex	r3, r2, [r1]
 8035822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8035824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035826:	2b00      	cmp	r3, #0
 8035828:	d1e3      	bne.n	80357f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803582a:	687b      	ldr	r3, [r7, #4]
 803582c:	681b      	ldr	r3, [r3, #0]
 803582e:	3314      	adds	r3, #20
 8035830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035834:	e853 3f00 	ldrex	r3, [r3]
 8035838:	623b      	str	r3, [r7, #32]
   return(result);
 803583a:	6a3b      	ldr	r3, [r7, #32]
 803583c:	f023 0301 	bic.w	r3, r3, #1
 8035840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8035844:	687b      	ldr	r3, [r7, #4]
 8035846:	681b      	ldr	r3, [r3, #0]
 8035848:	3314      	adds	r3, #20
 803584a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 803584e:	633a      	str	r2, [r7, #48]	; 0x30
 8035850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8035854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8035856:	e841 2300 	strex	r3, r2, [r1]
 803585a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803585e:	2b00      	cmp	r3, #0
 8035860:	d1e3      	bne.n	803582a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8035862:	687b      	ldr	r3, [r7, #4]
 8035864:	2220      	movs	r2, #32
 8035866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803586a:	687b      	ldr	r3, [r7, #4]
 803586c:	2200      	movs	r2, #0
 803586e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035870:	687b      	ldr	r3, [r7, #4]
 8035872:	681b      	ldr	r3, [r3, #0]
 8035874:	330c      	adds	r3, #12
 8035876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035878:	693b      	ldr	r3, [r7, #16]
 803587a:	e853 3f00 	ldrex	r3, [r3]
 803587e:	60fb      	str	r3, [r7, #12]
   return(result);
 8035880:	68fb      	ldr	r3, [r7, #12]
 8035882:	f023 0310 	bic.w	r3, r3, #16
 8035886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 803588a:	687b      	ldr	r3, [r7, #4]
 803588c:	681b      	ldr	r3, [r3, #0]
 803588e:	330c      	adds	r3, #12
 8035890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8035894:	61fa      	str	r2, [r7, #28]
 8035896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035898:	69b9      	ldr	r1, [r7, #24]
 803589a:	69fa      	ldr	r2, [r7, #28]
 803589c:	e841 2300 	strex	r3, r2, [r1]
 80358a0:	617b      	str	r3, [r7, #20]
   return(result);
 80358a2:	697b      	ldr	r3, [r7, #20]
 80358a4:	2b00      	cmp	r3, #0
 80358a6:	d1e3      	bne.n	8035870 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80358a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80358ac:	4619      	mov	r1, r3
 80358ae:	6878      	ldr	r0, [r7, #4]
 80358b0:	f000 f83e 	bl	8035930 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80358b4:	e023      	b.n	80358fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80358b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80358ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80358be:	2b00      	cmp	r3, #0
 80358c0:	d009      	beq.n	80358d6 <HAL_UART_IRQHandler+0x4ea>
 80358c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80358c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80358ca:	2b00      	cmp	r3, #0
 80358cc:	d003      	beq.n	80358d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80358ce:	6878      	ldr	r0, [r7, #4]
 80358d0:	f000 f95d 	bl	8035b8e <UART_Transmit_IT>
    return;
 80358d4:	e014      	b.n	8035900 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80358d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80358da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80358de:	2b00      	cmp	r3, #0
 80358e0:	d00e      	beq.n	8035900 <HAL_UART_IRQHandler+0x514>
 80358e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80358e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80358ea:	2b00      	cmp	r3, #0
 80358ec:	d008      	beq.n	8035900 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80358ee:	6878      	ldr	r0, [r7, #4]
 80358f0:	f000 f99d 	bl	8035c2e <UART_EndTransmit_IT>
    return;
 80358f4:	e004      	b.n	8035900 <HAL_UART_IRQHandler+0x514>
    return;
 80358f6:	bf00      	nop
 80358f8:	e002      	b.n	8035900 <HAL_UART_IRQHandler+0x514>
      return;
 80358fa:	bf00      	nop
 80358fc:	e000      	b.n	8035900 <HAL_UART_IRQHandler+0x514>
      return;
 80358fe:	bf00      	nop
  }
}
 8035900:	37e8      	adds	r7, #232	; 0xe8
 8035902:	46bd      	mov	sp, r7
 8035904:	bd80      	pop	{r7, pc}
 8035906:	bf00      	nop

08035908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8035908:	b480      	push	{r7}
 803590a:	b083      	sub	sp, #12
 803590c:	af00      	add	r7, sp, #0
 803590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8035910:	bf00      	nop
 8035912:	370c      	adds	r7, #12
 8035914:	46bd      	mov	sp, r7
 8035916:	f85d 7b04 	ldr.w	r7, [sp], #4
 803591a:	4770      	bx	lr

0803591c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 803591c:	b480      	push	{r7}
 803591e:	b083      	sub	sp, #12
 8035920:	af00      	add	r7, sp, #0
 8035922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8035924:	bf00      	nop
 8035926:	370c      	adds	r7, #12
 8035928:	46bd      	mov	sp, r7
 803592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803592e:	4770      	bx	lr

08035930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8035930:	b480      	push	{r7}
 8035932:	b083      	sub	sp, #12
 8035934:	af00      	add	r7, sp, #0
 8035936:	6078      	str	r0, [r7, #4]
 8035938:	460b      	mov	r3, r1
 803593a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 803593c:	bf00      	nop
 803593e:	370c      	adds	r7, #12
 8035940:	46bd      	mov	sp, r7
 8035942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035946:	4770      	bx	lr

08035948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8035948:	b580      	push	{r7, lr}
 803594a:	b090      	sub	sp, #64	; 0x40
 803594c:	af00      	add	r7, sp, #0
 803594e:	60f8      	str	r0, [r7, #12]
 8035950:	60b9      	str	r1, [r7, #8]
 8035952:	603b      	str	r3, [r7, #0]
 8035954:	4613      	mov	r3, r2
 8035956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8035958:	e050      	b.n	80359fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 803595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035960:	d04c      	beq.n	80359fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8035962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8035964:	2b00      	cmp	r3, #0
 8035966:	d007      	beq.n	8035978 <UART_WaitOnFlagUntilTimeout+0x30>
 8035968:	f7fd ff6a 	bl	8033840 <HAL_GetTick>
 803596c:	4602      	mov	r2, r0
 803596e:	683b      	ldr	r3, [r7, #0]
 8035970:	1ad3      	subs	r3, r2, r3
 8035972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8035974:	429a      	cmp	r2, r3
 8035976:	d241      	bcs.n	80359fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8035978:	68fb      	ldr	r3, [r7, #12]
 803597a:	681b      	ldr	r3, [r3, #0]
 803597c:	330c      	adds	r3, #12
 803597e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035982:	e853 3f00 	ldrex	r3, [r3]
 8035986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8035988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803598a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 803598e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035990:	68fb      	ldr	r3, [r7, #12]
 8035992:	681b      	ldr	r3, [r3, #0]
 8035994:	330c      	adds	r3, #12
 8035996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8035998:	637a      	str	r2, [r7, #52]	; 0x34
 803599a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803599c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803599e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80359a0:	e841 2300 	strex	r3, r2, [r1]
 80359a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80359a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80359a8:	2b00      	cmp	r3, #0
 80359aa:	d1e5      	bne.n	8035978 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80359ac:	68fb      	ldr	r3, [r7, #12]
 80359ae:	681b      	ldr	r3, [r3, #0]
 80359b0:	3314      	adds	r3, #20
 80359b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80359b4:	697b      	ldr	r3, [r7, #20]
 80359b6:	e853 3f00 	ldrex	r3, [r3]
 80359ba:	613b      	str	r3, [r7, #16]
   return(result);
 80359bc:	693b      	ldr	r3, [r7, #16]
 80359be:	f023 0301 	bic.w	r3, r3, #1
 80359c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80359c4:	68fb      	ldr	r3, [r7, #12]
 80359c6:	681b      	ldr	r3, [r3, #0]
 80359c8:	3314      	adds	r3, #20
 80359ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80359cc:	623a      	str	r2, [r7, #32]
 80359ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80359d0:	69f9      	ldr	r1, [r7, #28]
 80359d2:	6a3a      	ldr	r2, [r7, #32]
 80359d4:	e841 2300 	strex	r3, r2, [r1]
 80359d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80359da:	69bb      	ldr	r3, [r7, #24]
 80359dc:	2b00      	cmp	r3, #0
 80359de:	d1e5      	bne.n	80359ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80359e0:	68fb      	ldr	r3, [r7, #12]
 80359e2:	2220      	movs	r2, #32
 80359e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80359e8:	68fb      	ldr	r3, [r7, #12]
 80359ea:	2220      	movs	r2, #32
 80359ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80359f0:	68fb      	ldr	r3, [r7, #12]
 80359f2:	2200      	movs	r2, #0
 80359f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80359f8:	2303      	movs	r3, #3
 80359fa:	e00f      	b.n	8035a1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80359fc:	68fb      	ldr	r3, [r7, #12]
 80359fe:	681b      	ldr	r3, [r3, #0]
 8035a00:	681a      	ldr	r2, [r3, #0]
 8035a02:	68bb      	ldr	r3, [r7, #8]
 8035a04:	4013      	ands	r3, r2
 8035a06:	68ba      	ldr	r2, [r7, #8]
 8035a08:	429a      	cmp	r2, r3
 8035a0a:	bf0c      	ite	eq
 8035a0c:	2301      	moveq	r3, #1
 8035a0e:	2300      	movne	r3, #0
 8035a10:	b2db      	uxtb	r3, r3
 8035a12:	461a      	mov	r2, r3
 8035a14:	79fb      	ldrb	r3, [r7, #7]
 8035a16:	429a      	cmp	r2, r3
 8035a18:	d09f      	beq.n	803595a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8035a1a:	2300      	movs	r3, #0
}
 8035a1c:	4618      	mov	r0, r3
 8035a1e:	3740      	adds	r7, #64	; 0x40
 8035a20:	46bd      	mov	sp, r7
 8035a22:	bd80      	pop	{r7, pc}

08035a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8035a24:	b480      	push	{r7}
 8035a26:	b085      	sub	sp, #20
 8035a28:	af00      	add	r7, sp, #0
 8035a2a:	60f8      	str	r0, [r7, #12]
 8035a2c:	60b9      	str	r1, [r7, #8]
 8035a2e:	4613      	mov	r3, r2
 8035a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8035a32:	68fb      	ldr	r3, [r7, #12]
 8035a34:	68ba      	ldr	r2, [r7, #8]
 8035a36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8035a38:	68fb      	ldr	r3, [r7, #12]
 8035a3a:	88fa      	ldrh	r2, [r7, #6]
 8035a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8035a3e:	68fb      	ldr	r3, [r7, #12]
 8035a40:	88fa      	ldrh	r2, [r7, #6]
 8035a42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8035a44:	68fb      	ldr	r3, [r7, #12]
 8035a46:	2200      	movs	r2, #0
 8035a48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8035a4a:	68fb      	ldr	r3, [r7, #12]
 8035a4c:	2222      	movs	r2, #34	; 0x22
 8035a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8035a52:	68fb      	ldr	r3, [r7, #12]
 8035a54:	2200      	movs	r2, #0
 8035a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8035a5a:	68fb      	ldr	r3, [r7, #12]
 8035a5c:	691b      	ldr	r3, [r3, #16]
 8035a5e:	2b00      	cmp	r3, #0
 8035a60:	d007      	beq.n	8035a72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8035a62:	68fb      	ldr	r3, [r7, #12]
 8035a64:	681b      	ldr	r3, [r3, #0]
 8035a66:	68da      	ldr	r2, [r3, #12]
 8035a68:	68fb      	ldr	r3, [r7, #12]
 8035a6a:	681b      	ldr	r3, [r3, #0]
 8035a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8035a70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8035a72:	68fb      	ldr	r3, [r7, #12]
 8035a74:	681b      	ldr	r3, [r3, #0]
 8035a76:	695a      	ldr	r2, [r3, #20]
 8035a78:	68fb      	ldr	r3, [r7, #12]
 8035a7a:	681b      	ldr	r3, [r3, #0]
 8035a7c:	f042 0201 	orr.w	r2, r2, #1
 8035a80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8035a82:	68fb      	ldr	r3, [r7, #12]
 8035a84:	681b      	ldr	r3, [r3, #0]
 8035a86:	68da      	ldr	r2, [r3, #12]
 8035a88:	68fb      	ldr	r3, [r7, #12]
 8035a8a:	681b      	ldr	r3, [r3, #0]
 8035a8c:	f042 0220 	orr.w	r2, r2, #32
 8035a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8035a92:	2300      	movs	r3, #0
}
 8035a94:	4618      	mov	r0, r3
 8035a96:	3714      	adds	r7, #20
 8035a98:	46bd      	mov	sp, r7
 8035a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a9e:	4770      	bx	lr

08035aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8035aa0:	b480      	push	{r7}
 8035aa2:	b095      	sub	sp, #84	; 0x54
 8035aa4:	af00      	add	r7, sp, #0
 8035aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8035aa8:	687b      	ldr	r3, [r7, #4]
 8035aaa:	681b      	ldr	r3, [r3, #0]
 8035aac:	330c      	adds	r3, #12
 8035aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8035ab2:	e853 3f00 	ldrex	r3, [r3]
 8035ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8035ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8035abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8035ac0:	687b      	ldr	r3, [r7, #4]
 8035ac2:	681b      	ldr	r3, [r3, #0]
 8035ac4:	330c      	adds	r3, #12
 8035ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8035ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8035aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8035ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8035ad0:	e841 2300 	strex	r3, r2, [r1]
 8035ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8035ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035ad8:	2b00      	cmp	r3, #0
 8035ada:	d1e5      	bne.n	8035aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8035adc:	687b      	ldr	r3, [r7, #4]
 8035ade:	681b      	ldr	r3, [r3, #0]
 8035ae0:	3314      	adds	r3, #20
 8035ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035ae4:	6a3b      	ldr	r3, [r7, #32]
 8035ae6:	e853 3f00 	ldrex	r3, [r3]
 8035aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8035aec:	69fb      	ldr	r3, [r7, #28]
 8035aee:	f023 0301 	bic.w	r3, r3, #1
 8035af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8035af4:	687b      	ldr	r3, [r7, #4]
 8035af6:	681b      	ldr	r3, [r3, #0]
 8035af8:	3314      	adds	r3, #20
 8035afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8035afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8035afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8035b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8035b04:	e841 2300 	strex	r3, r2, [r1]
 8035b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8035b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035b0c:	2b00      	cmp	r3, #0
 8035b0e:	d1e5      	bne.n	8035adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8035b10:	687b      	ldr	r3, [r7, #4]
 8035b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035b14:	2b01      	cmp	r3, #1
 8035b16:	d119      	bne.n	8035b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035b18:	687b      	ldr	r3, [r7, #4]
 8035b1a:	681b      	ldr	r3, [r3, #0]
 8035b1c:	330c      	adds	r3, #12
 8035b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035b20:	68fb      	ldr	r3, [r7, #12]
 8035b22:	e853 3f00 	ldrex	r3, [r3]
 8035b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8035b28:	68bb      	ldr	r3, [r7, #8]
 8035b2a:	f023 0310 	bic.w	r3, r3, #16
 8035b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8035b30:	687b      	ldr	r3, [r7, #4]
 8035b32:	681b      	ldr	r3, [r3, #0]
 8035b34:	330c      	adds	r3, #12
 8035b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035b38:	61ba      	str	r2, [r7, #24]
 8035b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035b3c:	6979      	ldr	r1, [r7, #20]
 8035b3e:	69ba      	ldr	r2, [r7, #24]
 8035b40:	e841 2300 	strex	r3, r2, [r1]
 8035b44:	613b      	str	r3, [r7, #16]
   return(result);
 8035b46:	693b      	ldr	r3, [r7, #16]
 8035b48:	2b00      	cmp	r3, #0
 8035b4a:	d1e5      	bne.n	8035b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8035b4c:	687b      	ldr	r3, [r7, #4]
 8035b4e:	2220      	movs	r2, #32
 8035b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035b54:	687b      	ldr	r3, [r7, #4]
 8035b56:	2200      	movs	r2, #0
 8035b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8035b5a:	bf00      	nop
 8035b5c:	3754      	adds	r7, #84	; 0x54
 8035b5e:	46bd      	mov	sp, r7
 8035b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035b64:	4770      	bx	lr

08035b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8035b66:	b580      	push	{r7, lr}
 8035b68:	b084      	sub	sp, #16
 8035b6a:	af00      	add	r7, sp, #0
 8035b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8035b6e:	687b      	ldr	r3, [r7, #4]
 8035b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8035b74:	68fb      	ldr	r3, [r7, #12]
 8035b76:	2200      	movs	r2, #0
 8035b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8035b7a:	68fb      	ldr	r3, [r7, #12]
 8035b7c:	2200      	movs	r2, #0
 8035b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8035b80:	68f8      	ldr	r0, [r7, #12]
 8035b82:	f7ff fecb 	bl	803591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8035b86:	bf00      	nop
 8035b88:	3710      	adds	r7, #16
 8035b8a:	46bd      	mov	sp, r7
 8035b8c:	bd80      	pop	{r7, pc}

08035b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8035b8e:	b480      	push	{r7}
 8035b90:	b085      	sub	sp, #20
 8035b92:	af00      	add	r7, sp, #0
 8035b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8035b96:	687b      	ldr	r3, [r7, #4]
 8035b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035b9c:	b2db      	uxtb	r3, r3
 8035b9e:	2b21      	cmp	r3, #33	; 0x21
 8035ba0:	d13e      	bne.n	8035c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035ba2:	687b      	ldr	r3, [r7, #4]
 8035ba4:	689b      	ldr	r3, [r3, #8]
 8035ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035baa:	d114      	bne.n	8035bd6 <UART_Transmit_IT+0x48>
 8035bac:	687b      	ldr	r3, [r7, #4]
 8035bae:	691b      	ldr	r3, [r3, #16]
 8035bb0:	2b00      	cmp	r3, #0
 8035bb2:	d110      	bne.n	8035bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8035bb4:	687b      	ldr	r3, [r7, #4]
 8035bb6:	6a1b      	ldr	r3, [r3, #32]
 8035bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8035bba:	68fb      	ldr	r3, [r7, #12]
 8035bbc:	881b      	ldrh	r3, [r3, #0]
 8035bbe:	461a      	mov	r2, r3
 8035bc0:	687b      	ldr	r3, [r7, #4]
 8035bc2:	681b      	ldr	r3, [r3, #0]
 8035bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8035bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8035bca:	687b      	ldr	r3, [r7, #4]
 8035bcc:	6a1b      	ldr	r3, [r3, #32]
 8035bce:	1c9a      	adds	r2, r3, #2
 8035bd0:	687b      	ldr	r3, [r7, #4]
 8035bd2:	621a      	str	r2, [r3, #32]
 8035bd4:	e008      	b.n	8035be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8035bd6:	687b      	ldr	r3, [r7, #4]
 8035bd8:	6a1b      	ldr	r3, [r3, #32]
 8035bda:	1c59      	adds	r1, r3, #1
 8035bdc:	687a      	ldr	r2, [r7, #4]
 8035bde:	6211      	str	r1, [r2, #32]
 8035be0:	781a      	ldrb	r2, [r3, #0]
 8035be2:	687b      	ldr	r3, [r7, #4]
 8035be4:	681b      	ldr	r3, [r3, #0]
 8035be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8035be8:	687b      	ldr	r3, [r7, #4]
 8035bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8035bec:	b29b      	uxth	r3, r3
 8035bee:	3b01      	subs	r3, #1
 8035bf0:	b29b      	uxth	r3, r3
 8035bf2:	687a      	ldr	r2, [r7, #4]
 8035bf4:	4619      	mov	r1, r3
 8035bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8035bf8:	2b00      	cmp	r3, #0
 8035bfa:	d10f      	bne.n	8035c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8035bfc:	687b      	ldr	r3, [r7, #4]
 8035bfe:	681b      	ldr	r3, [r3, #0]
 8035c00:	68da      	ldr	r2, [r3, #12]
 8035c02:	687b      	ldr	r3, [r7, #4]
 8035c04:	681b      	ldr	r3, [r3, #0]
 8035c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8035c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8035c0c:	687b      	ldr	r3, [r7, #4]
 8035c0e:	681b      	ldr	r3, [r3, #0]
 8035c10:	68da      	ldr	r2, [r3, #12]
 8035c12:	687b      	ldr	r3, [r7, #4]
 8035c14:	681b      	ldr	r3, [r3, #0]
 8035c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8035c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8035c1c:	2300      	movs	r3, #0
 8035c1e:	e000      	b.n	8035c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8035c20:	2302      	movs	r3, #2
  }
}
 8035c22:	4618      	mov	r0, r3
 8035c24:	3714      	adds	r7, #20
 8035c26:	46bd      	mov	sp, r7
 8035c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035c2c:	4770      	bx	lr

08035c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8035c2e:	b580      	push	{r7, lr}
 8035c30:	b082      	sub	sp, #8
 8035c32:	af00      	add	r7, sp, #0
 8035c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8035c36:	687b      	ldr	r3, [r7, #4]
 8035c38:	681b      	ldr	r3, [r3, #0]
 8035c3a:	68da      	ldr	r2, [r3, #12]
 8035c3c:	687b      	ldr	r3, [r7, #4]
 8035c3e:	681b      	ldr	r3, [r3, #0]
 8035c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8035c46:	687b      	ldr	r3, [r7, #4]
 8035c48:	2220      	movs	r2, #32
 8035c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8035c4e:	6878      	ldr	r0, [r7, #4]
 8035c50:	f7ff fe5a 	bl	8035908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8035c54:	2300      	movs	r3, #0
}
 8035c56:	4618      	mov	r0, r3
 8035c58:	3708      	adds	r7, #8
 8035c5a:	46bd      	mov	sp, r7
 8035c5c:	bd80      	pop	{r7, pc}

08035c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8035c5e:	b580      	push	{r7, lr}
 8035c60:	b08c      	sub	sp, #48	; 0x30
 8035c62:	af00      	add	r7, sp, #0
 8035c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8035c66:	687b      	ldr	r3, [r7, #4]
 8035c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8035c6c:	b2db      	uxtb	r3, r3
 8035c6e:	2b22      	cmp	r3, #34	; 0x22
 8035c70:	f040 80ab 	bne.w	8035dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8035c74:	687b      	ldr	r3, [r7, #4]
 8035c76:	689b      	ldr	r3, [r3, #8]
 8035c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035c7c:	d117      	bne.n	8035cae <UART_Receive_IT+0x50>
 8035c7e:	687b      	ldr	r3, [r7, #4]
 8035c80:	691b      	ldr	r3, [r3, #16]
 8035c82:	2b00      	cmp	r3, #0
 8035c84:	d113      	bne.n	8035cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8035c86:	2300      	movs	r3, #0
 8035c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8035c8a:	687b      	ldr	r3, [r7, #4]
 8035c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8035c90:	687b      	ldr	r3, [r7, #4]
 8035c92:	681b      	ldr	r3, [r3, #0]
 8035c94:	685b      	ldr	r3, [r3, #4]
 8035c96:	b29b      	uxth	r3, r3
 8035c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035c9c:	b29a      	uxth	r2, r3
 8035c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8035ca2:	687b      	ldr	r3, [r7, #4]
 8035ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035ca6:	1c9a      	adds	r2, r3, #2
 8035ca8:	687b      	ldr	r3, [r7, #4]
 8035caa:	629a      	str	r2, [r3, #40]	; 0x28
 8035cac:	e026      	b.n	8035cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8035cae:	687b      	ldr	r3, [r7, #4]
 8035cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8035cb4:	2300      	movs	r3, #0
 8035cb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8035cb8:	687b      	ldr	r3, [r7, #4]
 8035cba:	689b      	ldr	r3, [r3, #8]
 8035cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035cc0:	d007      	beq.n	8035cd2 <UART_Receive_IT+0x74>
 8035cc2:	687b      	ldr	r3, [r7, #4]
 8035cc4:	689b      	ldr	r3, [r3, #8]
 8035cc6:	2b00      	cmp	r3, #0
 8035cc8:	d10a      	bne.n	8035ce0 <UART_Receive_IT+0x82>
 8035cca:	687b      	ldr	r3, [r7, #4]
 8035ccc:	691b      	ldr	r3, [r3, #16]
 8035cce:	2b00      	cmp	r3, #0
 8035cd0:	d106      	bne.n	8035ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8035cd2:	687b      	ldr	r3, [r7, #4]
 8035cd4:	681b      	ldr	r3, [r3, #0]
 8035cd6:	685b      	ldr	r3, [r3, #4]
 8035cd8:	b2da      	uxtb	r2, r3
 8035cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035cdc:	701a      	strb	r2, [r3, #0]
 8035cde:	e008      	b.n	8035cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8035ce0:	687b      	ldr	r3, [r7, #4]
 8035ce2:	681b      	ldr	r3, [r3, #0]
 8035ce4:	685b      	ldr	r3, [r3, #4]
 8035ce6:	b2db      	uxtb	r3, r3
 8035ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035cec:	b2da      	uxtb	r2, r3
 8035cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8035cf2:	687b      	ldr	r3, [r7, #4]
 8035cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035cf6:	1c5a      	adds	r2, r3, #1
 8035cf8:	687b      	ldr	r3, [r7, #4]
 8035cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8035cfc:	687b      	ldr	r3, [r7, #4]
 8035cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8035d00:	b29b      	uxth	r3, r3
 8035d02:	3b01      	subs	r3, #1
 8035d04:	b29b      	uxth	r3, r3
 8035d06:	687a      	ldr	r2, [r7, #4]
 8035d08:	4619      	mov	r1, r3
 8035d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8035d0c:	2b00      	cmp	r3, #0
 8035d0e:	d15a      	bne.n	8035dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8035d10:	687b      	ldr	r3, [r7, #4]
 8035d12:	681b      	ldr	r3, [r3, #0]
 8035d14:	68da      	ldr	r2, [r3, #12]
 8035d16:	687b      	ldr	r3, [r7, #4]
 8035d18:	681b      	ldr	r3, [r3, #0]
 8035d1a:	f022 0220 	bic.w	r2, r2, #32
 8035d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8035d20:	687b      	ldr	r3, [r7, #4]
 8035d22:	681b      	ldr	r3, [r3, #0]
 8035d24:	68da      	ldr	r2, [r3, #12]
 8035d26:	687b      	ldr	r3, [r7, #4]
 8035d28:	681b      	ldr	r3, [r3, #0]
 8035d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8035d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8035d30:	687b      	ldr	r3, [r7, #4]
 8035d32:	681b      	ldr	r3, [r3, #0]
 8035d34:	695a      	ldr	r2, [r3, #20]
 8035d36:	687b      	ldr	r3, [r7, #4]
 8035d38:	681b      	ldr	r3, [r3, #0]
 8035d3a:	f022 0201 	bic.w	r2, r2, #1
 8035d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8035d40:	687b      	ldr	r3, [r7, #4]
 8035d42:	2220      	movs	r2, #32
 8035d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8035d48:	687b      	ldr	r3, [r7, #4]
 8035d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035d4c:	2b01      	cmp	r3, #1
 8035d4e:	d135      	bne.n	8035dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035d50:	687b      	ldr	r3, [r7, #4]
 8035d52:	2200      	movs	r2, #0
 8035d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035d56:	687b      	ldr	r3, [r7, #4]
 8035d58:	681b      	ldr	r3, [r3, #0]
 8035d5a:	330c      	adds	r3, #12
 8035d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035d5e:	697b      	ldr	r3, [r7, #20]
 8035d60:	e853 3f00 	ldrex	r3, [r3]
 8035d64:	613b      	str	r3, [r7, #16]
   return(result);
 8035d66:	693b      	ldr	r3, [r7, #16]
 8035d68:	f023 0310 	bic.w	r3, r3, #16
 8035d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8035d6e:	687b      	ldr	r3, [r7, #4]
 8035d70:	681b      	ldr	r3, [r3, #0]
 8035d72:	330c      	adds	r3, #12
 8035d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8035d76:	623a      	str	r2, [r7, #32]
 8035d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035d7a:	69f9      	ldr	r1, [r7, #28]
 8035d7c:	6a3a      	ldr	r2, [r7, #32]
 8035d7e:	e841 2300 	strex	r3, r2, [r1]
 8035d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8035d84:	69bb      	ldr	r3, [r7, #24]
 8035d86:	2b00      	cmp	r3, #0
 8035d88:	d1e5      	bne.n	8035d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8035d8a:	687b      	ldr	r3, [r7, #4]
 8035d8c:	681b      	ldr	r3, [r3, #0]
 8035d8e:	681b      	ldr	r3, [r3, #0]
 8035d90:	f003 0310 	and.w	r3, r3, #16
 8035d94:	2b10      	cmp	r3, #16
 8035d96:	d10a      	bne.n	8035dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8035d98:	2300      	movs	r3, #0
 8035d9a:	60fb      	str	r3, [r7, #12]
 8035d9c:	687b      	ldr	r3, [r7, #4]
 8035d9e:	681b      	ldr	r3, [r3, #0]
 8035da0:	681b      	ldr	r3, [r3, #0]
 8035da2:	60fb      	str	r3, [r7, #12]
 8035da4:	687b      	ldr	r3, [r7, #4]
 8035da6:	681b      	ldr	r3, [r3, #0]
 8035da8:	685b      	ldr	r3, [r3, #4]
 8035daa:	60fb      	str	r3, [r7, #12]
 8035dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8035dae:	687b      	ldr	r3, [r7, #4]
 8035db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8035db2:	4619      	mov	r1, r3
 8035db4:	6878      	ldr	r0, [r7, #4]
 8035db6:	f7ff fdbb 	bl	8035930 <HAL_UARTEx_RxEventCallback>
 8035dba:	e002      	b.n	8035dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8035dbc:	6878      	ldr	r0, [r7, #4]
 8035dbe:	f7fd fba9 	bl	8033514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8035dc2:	2300      	movs	r3, #0
 8035dc4:	e002      	b.n	8035dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8035dc6:	2300      	movs	r3, #0
 8035dc8:	e000      	b.n	8035dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8035dca:	2302      	movs	r3, #2
  }
}
 8035dcc:	4618      	mov	r0, r3
 8035dce:	3730      	adds	r7, #48	; 0x30
 8035dd0:	46bd      	mov	sp, r7
 8035dd2:	bd80      	pop	{r7, pc}

08035dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8035dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8035dd8:	b0c0      	sub	sp, #256	; 0x100
 8035dda:	af00      	add	r7, sp, #0
 8035ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8035de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035de4:	681b      	ldr	r3, [r3, #0]
 8035de6:	691b      	ldr	r3, [r3, #16]
 8035de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8035dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035df0:	68d9      	ldr	r1, [r3, #12]
 8035df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035df6:	681a      	ldr	r2, [r3, #0]
 8035df8:	ea40 0301 	orr.w	r3, r0, r1
 8035dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8035dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e02:	689a      	ldr	r2, [r3, #8]
 8035e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e08:	691b      	ldr	r3, [r3, #16]
 8035e0a:	431a      	orrs	r2, r3
 8035e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e10:	695b      	ldr	r3, [r3, #20]
 8035e12:	431a      	orrs	r2, r3
 8035e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e18:	69db      	ldr	r3, [r3, #28]
 8035e1a:	4313      	orrs	r3, r2
 8035e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8035e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e24:	681b      	ldr	r3, [r3, #0]
 8035e26:	68db      	ldr	r3, [r3, #12]
 8035e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8035e2c:	f021 010c 	bic.w	r1, r1, #12
 8035e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e34:	681a      	ldr	r2, [r3, #0]
 8035e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8035e3a:	430b      	orrs	r3, r1
 8035e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8035e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e42:	681b      	ldr	r3, [r3, #0]
 8035e44:	695b      	ldr	r3, [r3, #20]
 8035e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8035e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e4e:	6999      	ldr	r1, [r3, #24]
 8035e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e54:	681a      	ldr	r2, [r3, #0]
 8035e56:	ea40 0301 	orr.w	r3, r0, r1
 8035e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8035e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e60:	681a      	ldr	r2, [r3, #0]
 8035e62:	4b8f      	ldr	r3, [pc, #572]	; (80360a0 <UART_SetConfig+0x2cc>)
 8035e64:	429a      	cmp	r2, r3
 8035e66:	d005      	beq.n	8035e74 <UART_SetConfig+0xa0>
 8035e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e6c:	681a      	ldr	r2, [r3, #0]
 8035e6e:	4b8d      	ldr	r3, [pc, #564]	; (80360a4 <UART_SetConfig+0x2d0>)
 8035e70:	429a      	cmp	r2, r3
 8035e72:	d104      	bne.n	8035e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8035e74:	f7ff f90e 	bl	8035094 <HAL_RCC_GetPCLK2Freq>
 8035e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8035e7c:	e003      	b.n	8035e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8035e7e:	f7ff f8f5 	bl	803506c <HAL_RCC_GetPCLK1Freq>
 8035e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8035e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035e8a:	69db      	ldr	r3, [r3, #28]
 8035e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035e90:	f040 810c 	bne.w	80360ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8035e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8035e98:	2200      	movs	r2, #0
 8035e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8035e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8035ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8035ea6:	4622      	mov	r2, r4
 8035ea8:	462b      	mov	r3, r5
 8035eaa:	1891      	adds	r1, r2, r2
 8035eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8035eae:	415b      	adcs	r3, r3
 8035eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8035eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8035eb6:	4621      	mov	r1, r4
 8035eb8:	eb12 0801 	adds.w	r8, r2, r1
 8035ebc:	4629      	mov	r1, r5
 8035ebe:	eb43 0901 	adc.w	r9, r3, r1
 8035ec2:	f04f 0200 	mov.w	r2, #0
 8035ec6:	f04f 0300 	mov.w	r3, #0
 8035eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8035ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8035ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8035ed6:	4690      	mov	r8, r2
 8035ed8:	4699      	mov	r9, r3
 8035eda:	4623      	mov	r3, r4
 8035edc:	eb18 0303 	adds.w	r3, r8, r3
 8035ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8035ee4:	462b      	mov	r3, r5
 8035ee6:	eb49 0303 	adc.w	r3, r9, r3
 8035eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8035eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035ef2:	685b      	ldr	r3, [r3, #4]
 8035ef4:	2200      	movs	r2, #0
 8035ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8035efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8035efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8035f02:	460b      	mov	r3, r1
 8035f04:	18db      	adds	r3, r3, r3
 8035f06:	653b      	str	r3, [r7, #80]	; 0x50
 8035f08:	4613      	mov	r3, r2
 8035f0a:	eb42 0303 	adc.w	r3, r2, r3
 8035f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8035f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8035f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8035f18:	f7fa fe76 	bl	8030c08 <__aeabi_uldivmod>
 8035f1c:	4602      	mov	r2, r0
 8035f1e:	460b      	mov	r3, r1
 8035f20:	4b61      	ldr	r3, [pc, #388]	; (80360a8 <UART_SetConfig+0x2d4>)
 8035f22:	fba3 2302 	umull	r2, r3, r3, r2
 8035f26:	095b      	lsrs	r3, r3, #5
 8035f28:	011c      	lsls	r4, r3, #4
 8035f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8035f2e:	2200      	movs	r2, #0
 8035f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8035f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8035f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8035f3c:	4642      	mov	r2, r8
 8035f3e:	464b      	mov	r3, r9
 8035f40:	1891      	adds	r1, r2, r2
 8035f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8035f44:	415b      	adcs	r3, r3
 8035f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8035f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8035f4c:	4641      	mov	r1, r8
 8035f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8035f52:	4649      	mov	r1, r9
 8035f54:	eb43 0b01 	adc.w	fp, r3, r1
 8035f58:	f04f 0200 	mov.w	r2, #0
 8035f5c:	f04f 0300 	mov.w	r3, #0
 8035f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8035f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8035f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8035f6c:	4692      	mov	sl, r2
 8035f6e:	469b      	mov	fp, r3
 8035f70:	4643      	mov	r3, r8
 8035f72:	eb1a 0303 	adds.w	r3, sl, r3
 8035f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8035f7a:	464b      	mov	r3, r9
 8035f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8035f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8035f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8035f88:	685b      	ldr	r3, [r3, #4]
 8035f8a:	2200      	movs	r2, #0
 8035f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8035f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8035f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8035f98:	460b      	mov	r3, r1
 8035f9a:	18db      	adds	r3, r3, r3
 8035f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8035f9e:	4613      	mov	r3, r2
 8035fa0:	eb42 0303 	adc.w	r3, r2, r3
 8035fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8035fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8035faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8035fae:	f7fa fe2b 	bl	8030c08 <__aeabi_uldivmod>
 8035fb2:	4602      	mov	r2, r0
 8035fb4:	460b      	mov	r3, r1
 8035fb6:	4611      	mov	r1, r2
 8035fb8:	4b3b      	ldr	r3, [pc, #236]	; (80360a8 <UART_SetConfig+0x2d4>)
 8035fba:	fba3 2301 	umull	r2, r3, r3, r1
 8035fbe:	095b      	lsrs	r3, r3, #5
 8035fc0:	2264      	movs	r2, #100	; 0x64
 8035fc2:	fb02 f303 	mul.w	r3, r2, r3
 8035fc6:	1acb      	subs	r3, r1, r3
 8035fc8:	00db      	lsls	r3, r3, #3
 8035fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8035fce:	4b36      	ldr	r3, [pc, #216]	; (80360a8 <UART_SetConfig+0x2d4>)
 8035fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8035fd4:	095b      	lsrs	r3, r3, #5
 8035fd6:	005b      	lsls	r3, r3, #1
 8035fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8035fdc:	441c      	add	r4, r3
 8035fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8035fe2:	2200      	movs	r2, #0
 8035fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8035fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8035ff0:	4642      	mov	r2, r8
 8035ff2:	464b      	mov	r3, r9
 8035ff4:	1891      	adds	r1, r2, r2
 8035ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8035ff8:	415b      	adcs	r3, r3
 8035ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8036000:	4641      	mov	r1, r8
 8036002:	1851      	adds	r1, r2, r1
 8036004:	6339      	str	r1, [r7, #48]	; 0x30
 8036006:	4649      	mov	r1, r9
 8036008:	414b      	adcs	r3, r1
 803600a:	637b      	str	r3, [r7, #52]	; 0x34
 803600c:	f04f 0200 	mov.w	r2, #0
 8036010:	f04f 0300 	mov.w	r3, #0
 8036014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8036018:	4659      	mov	r1, fp
 803601a:	00cb      	lsls	r3, r1, #3
 803601c:	4651      	mov	r1, sl
 803601e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8036022:	4651      	mov	r1, sl
 8036024:	00ca      	lsls	r2, r1, #3
 8036026:	4610      	mov	r0, r2
 8036028:	4619      	mov	r1, r3
 803602a:	4603      	mov	r3, r0
 803602c:	4642      	mov	r2, r8
 803602e:	189b      	adds	r3, r3, r2
 8036030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8036034:	464b      	mov	r3, r9
 8036036:	460a      	mov	r2, r1
 8036038:	eb42 0303 	adc.w	r3, r2, r3
 803603c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8036040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8036044:	685b      	ldr	r3, [r3, #4]
 8036046:	2200      	movs	r2, #0
 8036048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 803604c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8036050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8036054:	460b      	mov	r3, r1
 8036056:	18db      	adds	r3, r3, r3
 8036058:	62bb      	str	r3, [r7, #40]	; 0x28
 803605a:	4613      	mov	r3, r2
 803605c:	eb42 0303 	adc.w	r3, r2, r3
 8036060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8036066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 803606a:	f7fa fdcd 	bl	8030c08 <__aeabi_uldivmod>
 803606e:	4602      	mov	r2, r0
 8036070:	460b      	mov	r3, r1
 8036072:	4b0d      	ldr	r3, [pc, #52]	; (80360a8 <UART_SetConfig+0x2d4>)
 8036074:	fba3 1302 	umull	r1, r3, r3, r2
 8036078:	095b      	lsrs	r3, r3, #5
 803607a:	2164      	movs	r1, #100	; 0x64
 803607c:	fb01 f303 	mul.w	r3, r1, r3
 8036080:	1ad3      	subs	r3, r2, r3
 8036082:	00db      	lsls	r3, r3, #3
 8036084:	3332      	adds	r3, #50	; 0x32
 8036086:	4a08      	ldr	r2, [pc, #32]	; (80360a8 <UART_SetConfig+0x2d4>)
 8036088:	fba2 2303 	umull	r2, r3, r2, r3
 803608c:	095b      	lsrs	r3, r3, #5
 803608e:	f003 0207 	and.w	r2, r3, #7
 8036092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8036096:	681b      	ldr	r3, [r3, #0]
 8036098:	4422      	add	r2, r4
 803609a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 803609c:	e106      	b.n	80362ac <UART_SetConfig+0x4d8>
 803609e:	bf00      	nop
 80360a0:	40011000 	.word	0x40011000
 80360a4:	40011400 	.word	0x40011400
 80360a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80360ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80360b0:	2200      	movs	r2, #0
 80360b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80360b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80360ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80360be:	4642      	mov	r2, r8
 80360c0:	464b      	mov	r3, r9
 80360c2:	1891      	adds	r1, r2, r2
 80360c4:	6239      	str	r1, [r7, #32]
 80360c6:	415b      	adcs	r3, r3
 80360c8:	627b      	str	r3, [r7, #36]	; 0x24
 80360ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80360ce:	4641      	mov	r1, r8
 80360d0:	1854      	adds	r4, r2, r1
 80360d2:	4649      	mov	r1, r9
 80360d4:	eb43 0501 	adc.w	r5, r3, r1
 80360d8:	f04f 0200 	mov.w	r2, #0
 80360dc:	f04f 0300 	mov.w	r3, #0
 80360e0:	00eb      	lsls	r3, r5, #3
 80360e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80360e6:	00e2      	lsls	r2, r4, #3
 80360e8:	4614      	mov	r4, r2
 80360ea:	461d      	mov	r5, r3
 80360ec:	4643      	mov	r3, r8
 80360ee:	18e3      	adds	r3, r4, r3
 80360f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80360f4:	464b      	mov	r3, r9
 80360f6:	eb45 0303 	adc.w	r3, r5, r3
 80360fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80360fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8036102:	685b      	ldr	r3, [r3, #4]
 8036104:	2200      	movs	r2, #0
 8036106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 803610a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 803610e:	f04f 0200 	mov.w	r2, #0
 8036112:	f04f 0300 	mov.w	r3, #0
 8036116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 803611a:	4629      	mov	r1, r5
 803611c:	008b      	lsls	r3, r1, #2
 803611e:	4621      	mov	r1, r4
 8036120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8036124:	4621      	mov	r1, r4
 8036126:	008a      	lsls	r2, r1, #2
 8036128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 803612c:	f7fa fd6c 	bl	8030c08 <__aeabi_uldivmod>
 8036130:	4602      	mov	r2, r0
 8036132:	460b      	mov	r3, r1
 8036134:	4b60      	ldr	r3, [pc, #384]	; (80362b8 <UART_SetConfig+0x4e4>)
 8036136:	fba3 2302 	umull	r2, r3, r3, r2
 803613a:	095b      	lsrs	r3, r3, #5
 803613c:	011c      	lsls	r4, r3, #4
 803613e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8036142:	2200      	movs	r2, #0
 8036144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8036148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 803614c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8036150:	4642      	mov	r2, r8
 8036152:	464b      	mov	r3, r9
 8036154:	1891      	adds	r1, r2, r2
 8036156:	61b9      	str	r1, [r7, #24]
 8036158:	415b      	adcs	r3, r3
 803615a:	61fb      	str	r3, [r7, #28]
 803615c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8036160:	4641      	mov	r1, r8
 8036162:	1851      	adds	r1, r2, r1
 8036164:	6139      	str	r1, [r7, #16]
 8036166:	4649      	mov	r1, r9
 8036168:	414b      	adcs	r3, r1
 803616a:	617b      	str	r3, [r7, #20]
 803616c:	f04f 0200 	mov.w	r2, #0
 8036170:	f04f 0300 	mov.w	r3, #0
 8036174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8036178:	4659      	mov	r1, fp
 803617a:	00cb      	lsls	r3, r1, #3
 803617c:	4651      	mov	r1, sl
 803617e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8036182:	4651      	mov	r1, sl
 8036184:	00ca      	lsls	r2, r1, #3
 8036186:	4610      	mov	r0, r2
 8036188:	4619      	mov	r1, r3
 803618a:	4603      	mov	r3, r0
 803618c:	4642      	mov	r2, r8
 803618e:	189b      	adds	r3, r3, r2
 8036190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8036194:	464b      	mov	r3, r9
 8036196:	460a      	mov	r2, r1
 8036198:	eb42 0303 	adc.w	r3, r2, r3
 803619c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80361a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80361a4:	685b      	ldr	r3, [r3, #4]
 80361a6:	2200      	movs	r2, #0
 80361a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80361aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80361ac:	f04f 0200 	mov.w	r2, #0
 80361b0:	f04f 0300 	mov.w	r3, #0
 80361b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80361b8:	4649      	mov	r1, r9
 80361ba:	008b      	lsls	r3, r1, #2
 80361bc:	4641      	mov	r1, r8
 80361be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80361c2:	4641      	mov	r1, r8
 80361c4:	008a      	lsls	r2, r1, #2
 80361c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80361ca:	f7fa fd1d 	bl	8030c08 <__aeabi_uldivmod>
 80361ce:	4602      	mov	r2, r0
 80361d0:	460b      	mov	r3, r1
 80361d2:	4611      	mov	r1, r2
 80361d4:	4b38      	ldr	r3, [pc, #224]	; (80362b8 <UART_SetConfig+0x4e4>)
 80361d6:	fba3 2301 	umull	r2, r3, r3, r1
 80361da:	095b      	lsrs	r3, r3, #5
 80361dc:	2264      	movs	r2, #100	; 0x64
 80361de:	fb02 f303 	mul.w	r3, r2, r3
 80361e2:	1acb      	subs	r3, r1, r3
 80361e4:	011b      	lsls	r3, r3, #4
 80361e6:	3332      	adds	r3, #50	; 0x32
 80361e8:	4a33      	ldr	r2, [pc, #204]	; (80362b8 <UART_SetConfig+0x4e4>)
 80361ea:	fba2 2303 	umull	r2, r3, r2, r3
 80361ee:	095b      	lsrs	r3, r3, #5
 80361f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80361f4:	441c      	add	r4, r3
 80361f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80361fa:	2200      	movs	r2, #0
 80361fc:	673b      	str	r3, [r7, #112]	; 0x70
 80361fe:	677a      	str	r2, [r7, #116]	; 0x74
 8036200:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8036204:	4642      	mov	r2, r8
 8036206:	464b      	mov	r3, r9
 8036208:	1891      	adds	r1, r2, r2
 803620a:	60b9      	str	r1, [r7, #8]
 803620c:	415b      	adcs	r3, r3
 803620e:	60fb      	str	r3, [r7, #12]
 8036210:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8036214:	4641      	mov	r1, r8
 8036216:	1851      	adds	r1, r2, r1
 8036218:	6039      	str	r1, [r7, #0]
 803621a:	4649      	mov	r1, r9
 803621c:	414b      	adcs	r3, r1
 803621e:	607b      	str	r3, [r7, #4]
 8036220:	f04f 0200 	mov.w	r2, #0
 8036224:	f04f 0300 	mov.w	r3, #0
 8036228:	e9d7 ab00 	ldrd	sl, fp, [r7]
 803622c:	4659      	mov	r1, fp
 803622e:	00cb      	lsls	r3, r1, #3
 8036230:	4651      	mov	r1, sl
 8036232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8036236:	4651      	mov	r1, sl
 8036238:	00ca      	lsls	r2, r1, #3
 803623a:	4610      	mov	r0, r2
 803623c:	4619      	mov	r1, r3
 803623e:	4603      	mov	r3, r0
 8036240:	4642      	mov	r2, r8
 8036242:	189b      	adds	r3, r3, r2
 8036244:	66bb      	str	r3, [r7, #104]	; 0x68
 8036246:	464b      	mov	r3, r9
 8036248:	460a      	mov	r2, r1
 803624a:	eb42 0303 	adc.w	r3, r2, r3
 803624e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8036250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8036254:	685b      	ldr	r3, [r3, #4]
 8036256:	2200      	movs	r2, #0
 8036258:	663b      	str	r3, [r7, #96]	; 0x60
 803625a:	667a      	str	r2, [r7, #100]	; 0x64
 803625c:	f04f 0200 	mov.w	r2, #0
 8036260:	f04f 0300 	mov.w	r3, #0
 8036264:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8036268:	4649      	mov	r1, r9
 803626a:	008b      	lsls	r3, r1, #2
 803626c:	4641      	mov	r1, r8
 803626e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8036272:	4641      	mov	r1, r8
 8036274:	008a      	lsls	r2, r1, #2
 8036276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 803627a:	f7fa fcc5 	bl	8030c08 <__aeabi_uldivmod>
 803627e:	4602      	mov	r2, r0
 8036280:	460b      	mov	r3, r1
 8036282:	4b0d      	ldr	r3, [pc, #52]	; (80362b8 <UART_SetConfig+0x4e4>)
 8036284:	fba3 1302 	umull	r1, r3, r3, r2
 8036288:	095b      	lsrs	r3, r3, #5
 803628a:	2164      	movs	r1, #100	; 0x64
 803628c:	fb01 f303 	mul.w	r3, r1, r3
 8036290:	1ad3      	subs	r3, r2, r3
 8036292:	011b      	lsls	r3, r3, #4
 8036294:	3332      	adds	r3, #50	; 0x32
 8036296:	4a08      	ldr	r2, [pc, #32]	; (80362b8 <UART_SetConfig+0x4e4>)
 8036298:	fba2 2303 	umull	r2, r3, r2, r3
 803629c:	095b      	lsrs	r3, r3, #5
 803629e:	f003 020f 	and.w	r2, r3, #15
 80362a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80362a6:	681b      	ldr	r3, [r3, #0]
 80362a8:	4422      	add	r2, r4
 80362aa:	609a      	str	r2, [r3, #8]
}
 80362ac:	bf00      	nop
 80362ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80362b2:	46bd      	mov	sp, r7
 80362b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80362b8:	51eb851f 	.word	0x51eb851f

080362bc <malloc>:
 80362bc:	4b02      	ldr	r3, [pc, #8]	; (80362c8 <malloc+0xc>)
 80362be:	4601      	mov	r1, r0
 80362c0:	6818      	ldr	r0, [r3, #0]
 80362c2:	f000 b82b 	b.w	803631c <_malloc_r>
 80362c6:	bf00      	nop
 80362c8:	200001e8 	.word	0x200001e8

080362cc <free>:
 80362cc:	4b02      	ldr	r3, [pc, #8]	; (80362d8 <free+0xc>)
 80362ce:	4601      	mov	r1, r0
 80362d0:	6818      	ldr	r0, [r3, #0]
 80362d2:	f002 bbe3 	b.w	8038a9c <_free_r>
 80362d6:	bf00      	nop
 80362d8:	200001e8 	.word	0x200001e8

080362dc <sbrk_aligned>:
 80362dc:	b570      	push	{r4, r5, r6, lr}
 80362de:	4e0e      	ldr	r6, [pc, #56]	; (8036318 <sbrk_aligned+0x3c>)
 80362e0:	460c      	mov	r4, r1
 80362e2:	6831      	ldr	r1, [r6, #0]
 80362e4:	4605      	mov	r5, r0
 80362e6:	b911      	cbnz	r1, 80362ee <sbrk_aligned+0x12>
 80362e8:	f001 fcf8 	bl	8037cdc <_sbrk_r>
 80362ec:	6030      	str	r0, [r6, #0]
 80362ee:	4621      	mov	r1, r4
 80362f0:	4628      	mov	r0, r5
 80362f2:	f001 fcf3 	bl	8037cdc <_sbrk_r>
 80362f6:	1c43      	adds	r3, r0, #1
 80362f8:	d00a      	beq.n	8036310 <sbrk_aligned+0x34>
 80362fa:	1cc4      	adds	r4, r0, #3
 80362fc:	f024 0403 	bic.w	r4, r4, #3
 8036300:	42a0      	cmp	r0, r4
 8036302:	d007      	beq.n	8036314 <sbrk_aligned+0x38>
 8036304:	1a21      	subs	r1, r4, r0
 8036306:	4628      	mov	r0, r5
 8036308:	f001 fce8 	bl	8037cdc <_sbrk_r>
 803630c:	3001      	adds	r0, #1
 803630e:	d101      	bne.n	8036314 <sbrk_aligned+0x38>
 8036310:	f04f 34ff 	mov.w	r4, #4294967295
 8036314:	4620      	mov	r0, r4
 8036316:	bd70      	pop	{r4, r5, r6, pc}
 8036318:	2000cbec 	.word	0x2000cbec

0803631c <_malloc_r>:
 803631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8036320:	1ccd      	adds	r5, r1, #3
 8036322:	f025 0503 	bic.w	r5, r5, #3
 8036326:	3508      	adds	r5, #8
 8036328:	2d0c      	cmp	r5, #12
 803632a:	bf38      	it	cc
 803632c:	250c      	movcc	r5, #12
 803632e:	2d00      	cmp	r5, #0
 8036330:	4607      	mov	r7, r0
 8036332:	db01      	blt.n	8036338 <_malloc_r+0x1c>
 8036334:	42a9      	cmp	r1, r5
 8036336:	d905      	bls.n	8036344 <_malloc_r+0x28>
 8036338:	230c      	movs	r3, #12
 803633a:	603b      	str	r3, [r7, #0]
 803633c:	2600      	movs	r6, #0
 803633e:	4630      	mov	r0, r6
 8036340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8036344:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8036418 <_malloc_r+0xfc>
 8036348:	f000 f868 	bl	803641c <__malloc_lock>
 803634c:	f8d8 3000 	ldr.w	r3, [r8]
 8036350:	461c      	mov	r4, r3
 8036352:	bb5c      	cbnz	r4, 80363ac <_malloc_r+0x90>
 8036354:	4629      	mov	r1, r5
 8036356:	4638      	mov	r0, r7
 8036358:	f7ff ffc0 	bl	80362dc <sbrk_aligned>
 803635c:	1c43      	adds	r3, r0, #1
 803635e:	4604      	mov	r4, r0
 8036360:	d155      	bne.n	803640e <_malloc_r+0xf2>
 8036362:	f8d8 4000 	ldr.w	r4, [r8]
 8036366:	4626      	mov	r6, r4
 8036368:	2e00      	cmp	r6, #0
 803636a:	d145      	bne.n	80363f8 <_malloc_r+0xdc>
 803636c:	2c00      	cmp	r4, #0
 803636e:	d048      	beq.n	8036402 <_malloc_r+0xe6>
 8036370:	6823      	ldr	r3, [r4, #0]
 8036372:	4631      	mov	r1, r6
 8036374:	4638      	mov	r0, r7
 8036376:	eb04 0903 	add.w	r9, r4, r3
 803637a:	f001 fcaf 	bl	8037cdc <_sbrk_r>
 803637e:	4581      	cmp	r9, r0
 8036380:	d13f      	bne.n	8036402 <_malloc_r+0xe6>
 8036382:	6821      	ldr	r1, [r4, #0]
 8036384:	1a6d      	subs	r5, r5, r1
 8036386:	4629      	mov	r1, r5
 8036388:	4638      	mov	r0, r7
 803638a:	f7ff ffa7 	bl	80362dc <sbrk_aligned>
 803638e:	3001      	adds	r0, #1
 8036390:	d037      	beq.n	8036402 <_malloc_r+0xe6>
 8036392:	6823      	ldr	r3, [r4, #0]
 8036394:	442b      	add	r3, r5
 8036396:	6023      	str	r3, [r4, #0]
 8036398:	f8d8 3000 	ldr.w	r3, [r8]
 803639c:	2b00      	cmp	r3, #0
 803639e:	d038      	beq.n	8036412 <_malloc_r+0xf6>
 80363a0:	685a      	ldr	r2, [r3, #4]
 80363a2:	42a2      	cmp	r2, r4
 80363a4:	d12b      	bne.n	80363fe <_malloc_r+0xe2>
 80363a6:	2200      	movs	r2, #0
 80363a8:	605a      	str	r2, [r3, #4]
 80363aa:	e00f      	b.n	80363cc <_malloc_r+0xb0>
 80363ac:	6822      	ldr	r2, [r4, #0]
 80363ae:	1b52      	subs	r2, r2, r5
 80363b0:	d41f      	bmi.n	80363f2 <_malloc_r+0xd6>
 80363b2:	2a0b      	cmp	r2, #11
 80363b4:	d917      	bls.n	80363e6 <_malloc_r+0xca>
 80363b6:	1961      	adds	r1, r4, r5
 80363b8:	42a3      	cmp	r3, r4
 80363ba:	6025      	str	r5, [r4, #0]
 80363bc:	bf18      	it	ne
 80363be:	6059      	strne	r1, [r3, #4]
 80363c0:	6863      	ldr	r3, [r4, #4]
 80363c2:	bf08      	it	eq
 80363c4:	f8c8 1000 	streq.w	r1, [r8]
 80363c8:	5162      	str	r2, [r4, r5]
 80363ca:	604b      	str	r3, [r1, #4]
 80363cc:	4638      	mov	r0, r7
 80363ce:	f104 060b 	add.w	r6, r4, #11
 80363d2:	f000 f829 	bl	8036428 <__malloc_unlock>
 80363d6:	f026 0607 	bic.w	r6, r6, #7
 80363da:	1d23      	adds	r3, r4, #4
 80363dc:	1af2      	subs	r2, r6, r3
 80363de:	d0ae      	beq.n	803633e <_malloc_r+0x22>
 80363e0:	1b9b      	subs	r3, r3, r6
 80363e2:	50a3      	str	r3, [r4, r2]
 80363e4:	e7ab      	b.n	803633e <_malloc_r+0x22>
 80363e6:	42a3      	cmp	r3, r4
 80363e8:	6862      	ldr	r2, [r4, #4]
 80363ea:	d1dd      	bne.n	80363a8 <_malloc_r+0x8c>
 80363ec:	f8c8 2000 	str.w	r2, [r8]
 80363f0:	e7ec      	b.n	80363cc <_malloc_r+0xb0>
 80363f2:	4623      	mov	r3, r4
 80363f4:	6864      	ldr	r4, [r4, #4]
 80363f6:	e7ac      	b.n	8036352 <_malloc_r+0x36>
 80363f8:	4634      	mov	r4, r6
 80363fa:	6876      	ldr	r6, [r6, #4]
 80363fc:	e7b4      	b.n	8036368 <_malloc_r+0x4c>
 80363fe:	4613      	mov	r3, r2
 8036400:	e7cc      	b.n	803639c <_malloc_r+0x80>
 8036402:	230c      	movs	r3, #12
 8036404:	603b      	str	r3, [r7, #0]
 8036406:	4638      	mov	r0, r7
 8036408:	f000 f80e 	bl	8036428 <__malloc_unlock>
 803640c:	e797      	b.n	803633e <_malloc_r+0x22>
 803640e:	6025      	str	r5, [r4, #0]
 8036410:	e7dc      	b.n	80363cc <_malloc_r+0xb0>
 8036412:	605b      	str	r3, [r3, #4]
 8036414:	deff      	udf	#255	; 0xff
 8036416:	bf00      	nop
 8036418:	2000cbe8 	.word	0x2000cbe8

0803641c <__malloc_lock>:
 803641c:	4801      	ldr	r0, [pc, #4]	; (8036424 <__malloc_lock+0x8>)
 803641e:	f001 bca9 	b.w	8037d74 <__retarget_lock_acquire_recursive>
 8036422:	bf00      	nop
 8036424:	2000cd30 	.word	0x2000cd30

08036428 <__malloc_unlock>:
 8036428:	4801      	ldr	r0, [pc, #4]	; (8036430 <__malloc_unlock+0x8>)
 803642a:	f001 bca4 	b.w	8037d76 <__retarget_lock_release_recursive>
 803642e:	bf00      	nop
 8036430:	2000cd30 	.word	0x2000cd30

08036434 <realloc>:
 8036434:	4b02      	ldr	r3, [pc, #8]	; (8036440 <realloc+0xc>)
 8036436:	460a      	mov	r2, r1
 8036438:	4601      	mov	r1, r0
 803643a:	6818      	ldr	r0, [r3, #0]
 803643c:	f000 b802 	b.w	8036444 <_realloc_r>
 8036440:	200001e8 	.word	0x200001e8

08036444 <_realloc_r>:
 8036444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036448:	4680      	mov	r8, r0
 803644a:	4614      	mov	r4, r2
 803644c:	460e      	mov	r6, r1
 803644e:	b921      	cbnz	r1, 803645a <_realloc_r+0x16>
 8036450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8036454:	4611      	mov	r1, r2
 8036456:	f7ff bf61 	b.w	803631c <_malloc_r>
 803645a:	b92a      	cbnz	r2, 8036468 <_realloc_r+0x24>
 803645c:	f002 fb1e 	bl	8038a9c <_free_r>
 8036460:	4625      	mov	r5, r4
 8036462:	4628      	mov	r0, r5
 8036464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036468:	f003 fb7b 	bl	8039b62 <_malloc_usable_size_r>
 803646c:	4284      	cmp	r4, r0
 803646e:	4607      	mov	r7, r0
 8036470:	d802      	bhi.n	8036478 <_realloc_r+0x34>
 8036472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8036476:	d812      	bhi.n	803649e <_realloc_r+0x5a>
 8036478:	4621      	mov	r1, r4
 803647a:	4640      	mov	r0, r8
 803647c:	f7ff ff4e 	bl	803631c <_malloc_r>
 8036480:	4605      	mov	r5, r0
 8036482:	2800      	cmp	r0, #0
 8036484:	d0ed      	beq.n	8036462 <_realloc_r+0x1e>
 8036486:	42bc      	cmp	r4, r7
 8036488:	4622      	mov	r2, r4
 803648a:	4631      	mov	r1, r6
 803648c:	bf28      	it	cs
 803648e:	463a      	movcs	r2, r7
 8036490:	f001 fc72 	bl	8037d78 <memcpy>
 8036494:	4631      	mov	r1, r6
 8036496:	4640      	mov	r0, r8
 8036498:	f002 fb00 	bl	8038a9c <_free_r>
 803649c:	e7e1      	b.n	8036462 <_realloc_r+0x1e>
 803649e:	4635      	mov	r5, r6
 80364a0:	e7df      	b.n	8036462 <_realloc_r+0x1e>

080364a2 <sulp>:
 80364a2:	b570      	push	{r4, r5, r6, lr}
 80364a4:	4604      	mov	r4, r0
 80364a6:	460d      	mov	r5, r1
 80364a8:	ec45 4b10 	vmov	d0, r4, r5
 80364ac:	4616      	mov	r6, r2
 80364ae:	f003 fa17 	bl	80398e0 <__ulp>
 80364b2:	ec51 0b10 	vmov	r0, r1, d0
 80364b6:	b17e      	cbz	r6, 80364d8 <sulp+0x36>
 80364b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80364bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80364c0:	2b00      	cmp	r3, #0
 80364c2:	dd09      	ble.n	80364d8 <sulp+0x36>
 80364c4:	051b      	lsls	r3, r3, #20
 80364c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80364ca:	2400      	movs	r4, #0
 80364cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80364d0:	4622      	mov	r2, r4
 80364d2:	462b      	mov	r3, r5
 80364d4:	f7fa f8a0 	bl	8030618 <__aeabi_dmul>
 80364d8:	bd70      	pop	{r4, r5, r6, pc}
 80364da:	0000      	movs	r0, r0
 80364dc:	0000      	movs	r0, r0
	...

080364e0 <_strtod_l>:
 80364e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80364e4:	ed2d 8b02 	vpush	{d8}
 80364e8:	b09b      	sub	sp, #108	; 0x6c
 80364ea:	4604      	mov	r4, r0
 80364ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80364ee:	2200      	movs	r2, #0
 80364f0:	9216      	str	r2, [sp, #88]	; 0x58
 80364f2:	460d      	mov	r5, r1
 80364f4:	f04f 0800 	mov.w	r8, #0
 80364f8:	f04f 0900 	mov.w	r9, #0
 80364fc:	460a      	mov	r2, r1
 80364fe:	9215      	str	r2, [sp, #84]	; 0x54
 8036500:	7811      	ldrb	r1, [r2, #0]
 8036502:	292b      	cmp	r1, #43	; 0x2b
 8036504:	d04c      	beq.n	80365a0 <_strtod_l+0xc0>
 8036506:	d83a      	bhi.n	803657e <_strtod_l+0x9e>
 8036508:	290d      	cmp	r1, #13
 803650a:	d834      	bhi.n	8036576 <_strtod_l+0x96>
 803650c:	2908      	cmp	r1, #8
 803650e:	d834      	bhi.n	803657a <_strtod_l+0x9a>
 8036510:	2900      	cmp	r1, #0
 8036512:	d03d      	beq.n	8036590 <_strtod_l+0xb0>
 8036514:	2200      	movs	r2, #0
 8036516:	920a      	str	r2, [sp, #40]	; 0x28
 8036518:	9e15      	ldr	r6, [sp, #84]	; 0x54
 803651a:	7832      	ldrb	r2, [r6, #0]
 803651c:	2a30      	cmp	r2, #48	; 0x30
 803651e:	f040 80b4 	bne.w	803668a <_strtod_l+0x1aa>
 8036522:	7872      	ldrb	r2, [r6, #1]
 8036524:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8036528:	2a58      	cmp	r2, #88	; 0x58
 803652a:	d170      	bne.n	803660e <_strtod_l+0x12e>
 803652c:	9302      	str	r3, [sp, #8]
 803652e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8036530:	9301      	str	r3, [sp, #4]
 8036532:	ab16      	add	r3, sp, #88	; 0x58
 8036534:	9300      	str	r3, [sp, #0]
 8036536:	4a8e      	ldr	r2, [pc, #568]	; (8036770 <_strtod_l+0x290>)
 8036538:	ab17      	add	r3, sp, #92	; 0x5c
 803653a:	a915      	add	r1, sp, #84	; 0x54
 803653c:	4620      	mov	r0, r4
 803653e:	f002 fb61 	bl	8038c04 <__gethex>
 8036542:	f010 070f 	ands.w	r7, r0, #15
 8036546:	4605      	mov	r5, r0
 8036548:	d005      	beq.n	8036556 <_strtod_l+0x76>
 803654a:	2f06      	cmp	r7, #6
 803654c:	d12a      	bne.n	80365a4 <_strtod_l+0xc4>
 803654e:	3601      	adds	r6, #1
 8036550:	2300      	movs	r3, #0
 8036552:	9615      	str	r6, [sp, #84]	; 0x54
 8036554:	930a      	str	r3, [sp, #40]	; 0x28
 8036556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8036558:	2b00      	cmp	r3, #0
 803655a:	f040 857f 	bne.w	803705c <_strtod_l+0xb7c>
 803655e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8036560:	b1db      	cbz	r3, 803659a <_strtod_l+0xba>
 8036562:	4642      	mov	r2, r8
 8036564:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8036568:	ec43 2b10 	vmov	d0, r2, r3
 803656c:	b01b      	add	sp, #108	; 0x6c
 803656e:	ecbd 8b02 	vpop	{d8}
 8036572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8036576:	2920      	cmp	r1, #32
 8036578:	d1cc      	bne.n	8036514 <_strtod_l+0x34>
 803657a:	3201      	adds	r2, #1
 803657c:	e7bf      	b.n	80364fe <_strtod_l+0x1e>
 803657e:	292d      	cmp	r1, #45	; 0x2d
 8036580:	d1c8      	bne.n	8036514 <_strtod_l+0x34>
 8036582:	2101      	movs	r1, #1
 8036584:	910a      	str	r1, [sp, #40]	; 0x28
 8036586:	1c51      	adds	r1, r2, #1
 8036588:	9115      	str	r1, [sp, #84]	; 0x54
 803658a:	7852      	ldrb	r2, [r2, #1]
 803658c:	2a00      	cmp	r2, #0
 803658e:	d1c3      	bne.n	8036518 <_strtod_l+0x38>
 8036590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8036592:	9515      	str	r5, [sp, #84]	; 0x54
 8036594:	2b00      	cmp	r3, #0
 8036596:	f040 855f 	bne.w	8037058 <_strtod_l+0xb78>
 803659a:	4642      	mov	r2, r8
 803659c:	464b      	mov	r3, r9
 803659e:	e7e3      	b.n	8036568 <_strtod_l+0x88>
 80365a0:	2100      	movs	r1, #0
 80365a2:	e7ef      	b.n	8036584 <_strtod_l+0xa4>
 80365a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80365a6:	b13a      	cbz	r2, 80365b8 <_strtod_l+0xd8>
 80365a8:	2135      	movs	r1, #53	; 0x35
 80365aa:	a818      	add	r0, sp, #96	; 0x60
 80365ac:	f003 fa95 	bl	8039ada <__copybits>
 80365b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80365b2:	4620      	mov	r0, r4
 80365b4:	f002 fe68 	bl	8039288 <_Bfree>
 80365b8:	3f01      	subs	r7, #1
 80365ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80365bc:	2f04      	cmp	r7, #4
 80365be:	d806      	bhi.n	80365ce <_strtod_l+0xee>
 80365c0:	e8df f007 	tbb	[pc, r7]
 80365c4:	201d0314 	.word	0x201d0314
 80365c8:	14          	.byte	0x14
 80365c9:	00          	.byte	0x00
 80365ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80365ce:	05e9      	lsls	r1, r5, #23
 80365d0:	bf48      	it	mi
 80365d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80365d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80365da:	0d1b      	lsrs	r3, r3, #20
 80365dc:	051b      	lsls	r3, r3, #20
 80365de:	2b00      	cmp	r3, #0
 80365e0:	d1b9      	bne.n	8036556 <_strtod_l+0x76>
 80365e2:	f001 fb9d 	bl	8037d20 <__errno>
 80365e6:	2322      	movs	r3, #34	; 0x22
 80365e8:	6003      	str	r3, [r0, #0]
 80365ea:	e7b4      	b.n	8036556 <_strtod_l+0x76>
 80365ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80365f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80365f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80365f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80365fc:	e7e7      	b.n	80365ce <_strtod_l+0xee>
 80365fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8036778 <_strtod_l+0x298>
 8036602:	e7e4      	b.n	80365ce <_strtod_l+0xee>
 8036604:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8036608:	f04f 38ff 	mov.w	r8, #4294967295
 803660c:	e7df      	b.n	80365ce <_strtod_l+0xee>
 803660e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8036610:	1c5a      	adds	r2, r3, #1
 8036612:	9215      	str	r2, [sp, #84]	; 0x54
 8036614:	785b      	ldrb	r3, [r3, #1]
 8036616:	2b30      	cmp	r3, #48	; 0x30
 8036618:	d0f9      	beq.n	803660e <_strtod_l+0x12e>
 803661a:	2b00      	cmp	r3, #0
 803661c:	d09b      	beq.n	8036556 <_strtod_l+0x76>
 803661e:	2301      	movs	r3, #1
 8036620:	f04f 0a00 	mov.w	sl, #0
 8036624:	9304      	str	r3, [sp, #16]
 8036626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8036628:	930b      	str	r3, [sp, #44]	; 0x2c
 803662a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 803662e:	46d3      	mov	fp, sl
 8036630:	220a      	movs	r2, #10
 8036632:	9815      	ldr	r0, [sp, #84]	; 0x54
 8036634:	7806      	ldrb	r6, [r0, #0]
 8036636:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 803663a:	b2d9      	uxtb	r1, r3
 803663c:	2909      	cmp	r1, #9
 803663e:	d926      	bls.n	803668e <_strtod_l+0x1ae>
 8036640:	494c      	ldr	r1, [pc, #304]	; (8036774 <_strtod_l+0x294>)
 8036642:	2201      	movs	r2, #1
 8036644:	f001 fad6 	bl	8037bf4 <strncmp>
 8036648:	2800      	cmp	r0, #0
 803664a:	d030      	beq.n	80366ae <_strtod_l+0x1ce>
 803664c:	2000      	movs	r0, #0
 803664e:	4632      	mov	r2, r6
 8036650:	9005      	str	r0, [sp, #20]
 8036652:	465e      	mov	r6, fp
 8036654:	4603      	mov	r3, r0
 8036656:	2a65      	cmp	r2, #101	; 0x65
 8036658:	d001      	beq.n	803665e <_strtod_l+0x17e>
 803665a:	2a45      	cmp	r2, #69	; 0x45
 803665c:	d113      	bne.n	8036686 <_strtod_l+0x1a6>
 803665e:	b91e      	cbnz	r6, 8036668 <_strtod_l+0x188>
 8036660:	9a04      	ldr	r2, [sp, #16]
 8036662:	4302      	orrs	r2, r0
 8036664:	d094      	beq.n	8036590 <_strtod_l+0xb0>
 8036666:	2600      	movs	r6, #0
 8036668:	9d15      	ldr	r5, [sp, #84]	; 0x54
 803666a:	1c6a      	adds	r2, r5, #1
 803666c:	9215      	str	r2, [sp, #84]	; 0x54
 803666e:	786a      	ldrb	r2, [r5, #1]
 8036670:	2a2b      	cmp	r2, #43	; 0x2b
 8036672:	d074      	beq.n	803675e <_strtod_l+0x27e>
 8036674:	2a2d      	cmp	r2, #45	; 0x2d
 8036676:	d078      	beq.n	803676a <_strtod_l+0x28a>
 8036678:	f04f 0c00 	mov.w	ip, #0
 803667c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8036680:	2909      	cmp	r1, #9
 8036682:	d97f      	bls.n	8036784 <_strtod_l+0x2a4>
 8036684:	9515      	str	r5, [sp, #84]	; 0x54
 8036686:	2700      	movs	r7, #0
 8036688:	e09e      	b.n	80367c8 <_strtod_l+0x2e8>
 803668a:	2300      	movs	r3, #0
 803668c:	e7c8      	b.n	8036620 <_strtod_l+0x140>
 803668e:	f1bb 0f08 	cmp.w	fp, #8
 8036692:	bfd8      	it	le
 8036694:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8036696:	f100 0001 	add.w	r0, r0, #1
 803669a:	bfda      	itte	le
 803669c:	fb02 3301 	mlale	r3, r2, r1, r3
 80366a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80366a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80366a6:	f10b 0b01 	add.w	fp, fp, #1
 80366aa:	9015      	str	r0, [sp, #84]	; 0x54
 80366ac:	e7c1      	b.n	8036632 <_strtod_l+0x152>
 80366ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80366b0:	1c5a      	adds	r2, r3, #1
 80366b2:	9215      	str	r2, [sp, #84]	; 0x54
 80366b4:	785a      	ldrb	r2, [r3, #1]
 80366b6:	f1bb 0f00 	cmp.w	fp, #0
 80366ba:	d037      	beq.n	803672c <_strtod_l+0x24c>
 80366bc:	9005      	str	r0, [sp, #20]
 80366be:	465e      	mov	r6, fp
 80366c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80366c4:	2b09      	cmp	r3, #9
 80366c6:	d912      	bls.n	80366ee <_strtod_l+0x20e>
 80366c8:	2301      	movs	r3, #1
 80366ca:	e7c4      	b.n	8036656 <_strtod_l+0x176>
 80366cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80366ce:	1c5a      	adds	r2, r3, #1
 80366d0:	9215      	str	r2, [sp, #84]	; 0x54
 80366d2:	785a      	ldrb	r2, [r3, #1]
 80366d4:	3001      	adds	r0, #1
 80366d6:	2a30      	cmp	r2, #48	; 0x30
 80366d8:	d0f8      	beq.n	80366cc <_strtod_l+0x1ec>
 80366da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80366de:	2b08      	cmp	r3, #8
 80366e0:	f200 84c1 	bhi.w	8037066 <_strtod_l+0xb86>
 80366e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80366e6:	9005      	str	r0, [sp, #20]
 80366e8:	2000      	movs	r0, #0
 80366ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80366ec:	4606      	mov	r6, r0
 80366ee:	3a30      	subs	r2, #48	; 0x30
 80366f0:	f100 0301 	add.w	r3, r0, #1
 80366f4:	d014      	beq.n	8036720 <_strtod_l+0x240>
 80366f6:	9905      	ldr	r1, [sp, #20]
 80366f8:	4419      	add	r1, r3
 80366fa:	9105      	str	r1, [sp, #20]
 80366fc:	4633      	mov	r3, r6
 80366fe:	eb00 0c06 	add.w	ip, r0, r6
 8036702:	210a      	movs	r1, #10
 8036704:	4563      	cmp	r3, ip
 8036706:	d113      	bne.n	8036730 <_strtod_l+0x250>
 8036708:	1833      	adds	r3, r6, r0
 803670a:	2b08      	cmp	r3, #8
 803670c:	f106 0601 	add.w	r6, r6, #1
 8036710:	4406      	add	r6, r0
 8036712:	dc1a      	bgt.n	803674a <_strtod_l+0x26a>
 8036714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8036716:	230a      	movs	r3, #10
 8036718:	fb03 2301 	mla	r3, r3, r1, r2
 803671c:	9309      	str	r3, [sp, #36]	; 0x24
 803671e:	2300      	movs	r3, #0
 8036720:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8036722:	1c51      	adds	r1, r2, #1
 8036724:	9115      	str	r1, [sp, #84]	; 0x54
 8036726:	7852      	ldrb	r2, [r2, #1]
 8036728:	4618      	mov	r0, r3
 803672a:	e7c9      	b.n	80366c0 <_strtod_l+0x1e0>
 803672c:	4658      	mov	r0, fp
 803672e:	e7d2      	b.n	80366d6 <_strtod_l+0x1f6>
 8036730:	2b08      	cmp	r3, #8
 8036732:	f103 0301 	add.w	r3, r3, #1
 8036736:	dc03      	bgt.n	8036740 <_strtod_l+0x260>
 8036738:	9f09      	ldr	r7, [sp, #36]	; 0x24
 803673a:	434f      	muls	r7, r1
 803673c:	9709      	str	r7, [sp, #36]	; 0x24
 803673e:	e7e1      	b.n	8036704 <_strtod_l+0x224>
 8036740:	2b10      	cmp	r3, #16
 8036742:	bfd8      	it	le
 8036744:	fb01 fa0a 	mulle.w	sl, r1, sl
 8036748:	e7dc      	b.n	8036704 <_strtod_l+0x224>
 803674a:	2e10      	cmp	r6, #16
 803674c:	bfdc      	itt	le
 803674e:	230a      	movle	r3, #10
 8036750:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8036754:	e7e3      	b.n	803671e <_strtod_l+0x23e>
 8036756:	2300      	movs	r3, #0
 8036758:	9305      	str	r3, [sp, #20]
 803675a:	2301      	movs	r3, #1
 803675c:	e780      	b.n	8036660 <_strtod_l+0x180>
 803675e:	f04f 0c00 	mov.w	ip, #0
 8036762:	1caa      	adds	r2, r5, #2
 8036764:	9215      	str	r2, [sp, #84]	; 0x54
 8036766:	78aa      	ldrb	r2, [r5, #2]
 8036768:	e788      	b.n	803667c <_strtod_l+0x19c>
 803676a:	f04f 0c01 	mov.w	ip, #1
 803676e:	e7f8      	b.n	8036762 <_strtod_l+0x282>
 8036770:	0803a93c 	.word	0x0803a93c
 8036774:	0803a938 	.word	0x0803a938
 8036778:	7ff00000 	.word	0x7ff00000
 803677c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 803677e:	1c51      	adds	r1, r2, #1
 8036780:	9115      	str	r1, [sp, #84]	; 0x54
 8036782:	7852      	ldrb	r2, [r2, #1]
 8036784:	2a30      	cmp	r2, #48	; 0x30
 8036786:	d0f9      	beq.n	803677c <_strtod_l+0x29c>
 8036788:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 803678c:	2908      	cmp	r1, #8
 803678e:	f63f af7a 	bhi.w	8036686 <_strtod_l+0x1a6>
 8036792:	3a30      	subs	r2, #48	; 0x30
 8036794:	9208      	str	r2, [sp, #32]
 8036796:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8036798:	920c      	str	r2, [sp, #48]	; 0x30
 803679a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 803679c:	1c57      	adds	r7, r2, #1
 803679e:	9715      	str	r7, [sp, #84]	; 0x54
 80367a0:	7852      	ldrb	r2, [r2, #1]
 80367a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80367a6:	f1be 0f09 	cmp.w	lr, #9
 80367aa:	d938      	bls.n	803681e <_strtod_l+0x33e>
 80367ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80367ae:	1a7f      	subs	r7, r7, r1
 80367b0:	2f08      	cmp	r7, #8
 80367b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80367b6:	dc03      	bgt.n	80367c0 <_strtod_l+0x2e0>
 80367b8:	9908      	ldr	r1, [sp, #32]
 80367ba:	428f      	cmp	r7, r1
 80367bc:	bfa8      	it	ge
 80367be:	460f      	movge	r7, r1
 80367c0:	f1bc 0f00 	cmp.w	ip, #0
 80367c4:	d000      	beq.n	80367c8 <_strtod_l+0x2e8>
 80367c6:	427f      	negs	r7, r7
 80367c8:	2e00      	cmp	r6, #0
 80367ca:	d14f      	bne.n	803686c <_strtod_l+0x38c>
 80367cc:	9904      	ldr	r1, [sp, #16]
 80367ce:	4301      	orrs	r1, r0
 80367d0:	f47f aec1 	bne.w	8036556 <_strtod_l+0x76>
 80367d4:	2b00      	cmp	r3, #0
 80367d6:	f47f aedb 	bne.w	8036590 <_strtod_l+0xb0>
 80367da:	2a69      	cmp	r2, #105	; 0x69
 80367dc:	d029      	beq.n	8036832 <_strtod_l+0x352>
 80367de:	dc26      	bgt.n	803682e <_strtod_l+0x34e>
 80367e0:	2a49      	cmp	r2, #73	; 0x49
 80367e2:	d026      	beq.n	8036832 <_strtod_l+0x352>
 80367e4:	2a4e      	cmp	r2, #78	; 0x4e
 80367e6:	f47f aed3 	bne.w	8036590 <_strtod_l+0xb0>
 80367ea:	499b      	ldr	r1, [pc, #620]	; (8036a58 <_strtod_l+0x578>)
 80367ec:	a815      	add	r0, sp, #84	; 0x54
 80367ee:	f002 fc49 	bl	8039084 <__match>
 80367f2:	2800      	cmp	r0, #0
 80367f4:	f43f aecc 	beq.w	8036590 <_strtod_l+0xb0>
 80367f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80367fa:	781b      	ldrb	r3, [r3, #0]
 80367fc:	2b28      	cmp	r3, #40	; 0x28
 80367fe:	d12f      	bne.n	8036860 <_strtod_l+0x380>
 8036800:	4996      	ldr	r1, [pc, #600]	; (8036a5c <_strtod_l+0x57c>)
 8036802:	aa18      	add	r2, sp, #96	; 0x60
 8036804:	a815      	add	r0, sp, #84	; 0x54
 8036806:	f002 fc51 	bl	80390ac <__hexnan>
 803680a:	2805      	cmp	r0, #5
 803680c:	d128      	bne.n	8036860 <_strtod_l+0x380>
 803680e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8036810:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8036814:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8036818:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 803681c:	e69b      	b.n	8036556 <_strtod_l+0x76>
 803681e:	9f08      	ldr	r7, [sp, #32]
 8036820:	210a      	movs	r1, #10
 8036822:	fb01 2107 	mla	r1, r1, r7, r2
 8036826:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 803682a:	9208      	str	r2, [sp, #32]
 803682c:	e7b5      	b.n	803679a <_strtod_l+0x2ba>
 803682e:	2a6e      	cmp	r2, #110	; 0x6e
 8036830:	e7d9      	b.n	80367e6 <_strtod_l+0x306>
 8036832:	498b      	ldr	r1, [pc, #556]	; (8036a60 <_strtod_l+0x580>)
 8036834:	a815      	add	r0, sp, #84	; 0x54
 8036836:	f002 fc25 	bl	8039084 <__match>
 803683a:	2800      	cmp	r0, #0
 803683c:	f43f aea8 	beq.w	8036590 <_strtod_l+0xb0>
 8036840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8036842:	4988      	ldr	r1, [pc, #544]	; (8036a64 <_strtod_l+0x584>)
 8036844:	3b01      	subs	r3, #1
 8036846:	a815      	add	r0, sp, #84	; 0x54
 8036848:	9315      	str	r3, [sp, #84]	; 0x54
 803684a:	f002 fc1b 	bl	8039084 <__match>
 803684e:	b910      	cbnz	r0, 8036856 <_strtod_l+0x376>
 8036850:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8036852:	3301      	adds	r3, #1
 8036854:	9315      	str	r3, [sp, #84]	; 0x54
 8036856:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8036a74 <_strtod_l+0x594>
 803685a:	f04f 0800 	mov.w	r8, #0
 803685e:	e67a      	b.n	8036556 <_strtod_l+0x76>
 8036860:	4881      	ldr	r0, [pc, #516]	; (8036a68 <_strtod_l+0x588>)
 8036862:	f001 fa99 	bl	8037d98 <nan>
 8036866:	ec59 8b10 	vmov	r8, r9, d0
 803686a:	e674      	b.n	8036556 <_strtod_l+0x76>
 803686c:	9b05      	ldr	r3, [sp, #20]
 803686e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8036870:	1afb      	subs	r3, r7, r3
 8036872:	f1bb 0f00 	cmp.w	fp, #0
 8036876:	bf08      	it	eq
 8036878:	46b3      	moveq	fp, r6
 803687a:	2e10      	cmp	r6, #16
 803687c:	9308      	str	r3, [sp, #32]
 803687e:	4635      	mov	r5, r6
 8036880:	bfa8      	it	ge
 8036882:	2510      	movge	r5, #16
 8036884:	f7f9 fe4e 	bl	8030524 <__aeabi_ui2d>
 8036888:	2e09      	cmp	r6, #9
 803688a:	4680      	mov	r8, r0
 803688c:	4689      	mov	r9, r1
 803688e:	dd13      	ble.n	80368b8 <_strtod_l+0x3d8>
 8036890:	4b76      	ldr	r3, [pc, #472]	; (8036a6c <_strtod_l+0x58c>)
 8036892:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8036896:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 803689a:	f7f9 febd 	bl	8030618 <__aeabi_dmul>
 803689e:	4680      	mov	r8, r0
 80368a0:	4650      	mov	r0, sl
 80368a2:	4689      	mov	r9, r1
 80368a4:	f7f9 fe3e 	bl	8030524 <__aeabi_ui2d>
 80368a8:	4602      	mov	r2, r0
 80368aa:	460b      	mov	r3, r1
 80368ac:	4640      	mov	r0, r8
 80368ae:	4649      	mov	r1, r9
 80368b0:	f7f9 fcfc 	bl	80302ac <__adddf3>
 80368b4:	4680      	mov	r8, r0
 80368b6:	4689      	mov	r9, r1
 80368b8:	2e0f      	cmp	r6, #15
 80368ba:	dc38      	bgt.n	803692e <_strtod_l+0x44e>
 80368bc:	9b08      	ldr	r3, [sp, #32]
 80368be:	2b00      	cmp	r3, #0
 80368c0:	f43f ae49 	beq.w	8036556 <_strtod_l+0x76>
 80368c4:	dd24      	ble.n	8036910 <_strtod_l+0x430>
 80368c6:	2b16      	cmp	r3, #22
 80368c8:	dc0b      	bgt.n	80368e2 <_strtod_l+0x402>
 80368ca:	4968      	ldr	r1, [pc, #416]	; (8036a6c <_strtod_l+0x58c>)
 80368cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80368d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80368d4:	4642      	mov	r2, r8
 80368d6:	464b      	mov	r3, r9
 80368d8:	f7f9 fe9e 	bl	8030618 <__aeabi_dmul>
 80368dc:	4680      	mov	r8, r0
 80368de:	4689      	mov	r9, r1
 80368e0:	e639      	b.n	8036556 <_strtod_l+0x76>
 80368e2:	9a08      	ldr	r2, [sp, #32]
 80368e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80368e8:	4293      	cmp	r3, r2
 80368ea:	db20      	blt.n	803692e <_strtod_l+0x44e>
 80368ec:	4c5f      	ldr	r4, [pc, #380]	; (8036a6c <_strtod_l+0x58c>)
 80368ee:	f1c6 060f 	rsb	r6, r6, #15
 80368f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80368f6:	4642      	mov	r2, r8
 80368f8:	464b      	mov	r3, r9
 80368fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80368fe:	f7f9 fe8b 	bl	8030618 <__aeabi_dmul>
 8036902:	9b08      	ldr	r3, [sp, #32]
 8036904:	1b9e      	subs	r6, r3, r6
 8036906:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 803690a:	e9d4 2300 	ldrd	r2, r3, [r4]
 803690e:	e7e3      	b.n	80368d8 <_strtod_l+0x3f8>
 8036910:	9b08      	ldr	r3, [sp, #32]
 8036912:	3316      	adds	r3, #22
 8036914:	db0b      	blt.n	803692e <_strtod_l+0x44e>
 8036916:	9b05      	ldr	r3, [sp, #20]
 8036918:	1bdf      	subs	r7, r3, r7
 803691a:	4b54      	ldr	r3, [pc, #336]	; (8036a6c <_strtod_l+0x58c>)
 803691c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8036920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8036924:	4640      	mov	r0, r8
 8036926:	4649      	mov	r1, r9
 8036928:	f7f9 ffa0 	bl	803086c <__aeabi_ddiv>
 803692c:	e7d6      	b.n	80368dc <_strtod_l+0x3fc>
 803692e:	9b08      	ldr	r3, [sp, #32]
 8036930:	1b75      	subs	r5, r6, r5
 8036932:	441d      	add	r5, r3
 8036934:	2d00      	cmp	r5, #0
 8036936:	dd70      	ble.n	8036a1a <_strtod_l+0x53a>
 8036938:	f015 030f 	ands.w	r3, r5, #15
 803693c:	d00a      	beq.n	8036954 <_strtod_l+0x474>
 803693e:	494b      	ldr	r1, [pc, #300]	; (8036a6c <_strtod_l+0x58c>)
 8036940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8036944:	4642      	mov	r2, r8
 8036946:	464b      	mov	r3, r9
 8036948:	e9d1 0100 	ldrd	r0, r1, [r1]
 803694c:	f7f9 fe64 	bl	8030618 <__aeabi_dmul>
 8036950:	4680      	mov	r8, r0
 8036952:	4689      	mov	r9, r1
 8036954:	f035 050f 	bics.w	r5, r5, #15
 8036958:	d04d      	beq.n	80369f6 <_strtod_l+0x516>
 803695a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 803695e:	dd22      	ble.n	80369a6 <_strtod_l+0x4c6>
 8036960:	2500      	movs	r5, #0
 8036962:	46ab      	mov	fp, r5
 8036964:	9509      	str	r5, [sp, #36]	; 0x24
 8036966:	9505      	str	r5, [sp, #20]
 8036968:	2322      	movs	r3, #34	; 0x22
 803696a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8036a74 <_strtod_l+0x594>
 803696e:	6023      	str	r3, [r4, #0]
 8036970:	f04f 0800 	mov.w	r8, #0
 8036974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036976:	2b00      	cmp	r3, #0
 8036978:	f43f aded 	beq.w	8036556 <_strtod_l+0x76>
 803697c:	9916      	ldr	r1, [sp, #88]	; 0x58
 803697e:	4620      	mov	r0, r4
 8036980:	f002 fc82 	bl	8039288 <_Bfree>
 8036984:	9905      	ldr	r1, [sp, #20]
 8036986:	4620      	mov	r0, r4
 8036988:	f002 fc7e 	bl	8039288 <_Bfree>
 803698c:	4659      	mov	r1, fp
 803698e:	4620      	mov	r0, r4
 8036990:	f002 fc7a 	bl	8039288 <_Bfree>
 8036994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8036996:	4620      	mov	r0, r4
 8036998:	f002 fc76 	bl	8039288 <_Bfree>
 803699c:	4629      	mov	r1, r5
 803699e:	4620      	mov	r0, r4
 80369a0:	f002 fc72 	bl	8039288 <_Bfree>
 80369a4:	e5d7      	b.n	8036556 <_strtod_l+0x76>
 80369a6:	4b32      	ldr	r3, [pc, #200]	; (8036a70 <_strtod_l+0x590>)
 80369a8:	9304      	str	r3, [sp, #16]
 80369aa:	2300      	movs	r3, #0
 80369ac:	112d      	asrs	r5, r5, #4
 80369ae:	4640      	mov	r0, r8
 80369b0:	4649      	mov	r1, r9
 80369b2:	469a      	mov	sl, r3
 80369b4:	2d01      	cmp	r5, #1
 80369b6:	dc21      	bgt.n	80369fc <_strtod_l+0x51c>
 80369b8:	b10b      	cbz	r3, 80369be <_strtod_l+0x4de>
 80369ba:	4680      	mov	r8, r0
 80369bc:	4689      	mov	r9, r1
 80369be:	492c      	ldr	r1, [pc, #176]	; (8036a70 <_strtod_l+0x590>)
 80369c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80369c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80369c8:	4642      	mov	r2, r8
 80369ca:	464b      	mov	r3, r9
 80369cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80369d0:	f7f9 fe22 	bl	8030618 <__aeabi_dmul>
 80369d4:	4b27      	ldr	r3, [pc, #156]	; (8036a74 <_strtod_l+0x594>)
 80369d6:	460a      	mov	r2, r1
 80369d8:	400b      	ands	r3, r1
 80369da:	4927      	ldr	r1, [pc, #156]	; (8036a78 <_strtod_l+0x598>)
 80369dc:	428b      	cmp	r3, r1
 80369de:	4680      	mov	r8, r0
 80369e0:	d8be      	bhi.n	8036960 <_strtod_l+0x480>
 80369e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80369e6:	428b      	cmp	r3, r1
 80369e8:	bf86      	itte	hi
 80369ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8036a7c <_strtod_l+0x59c>
 80369ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80369f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80369f6:	2300      	movs	r3, #0
 80369f8:	9304      	str	r3, [sp, #16]
 80369fa:	e07b      	b.n	8036af4 <_strtod_l+0x614>
 80369fc:	07ea      	lsls	r2, r5, #31
 80369fe:	d505      	bpl.n	8036a0c <_strtod_l+0x52c>
 8036a00:	9b04      	ldr	r3, [sp, #16]
 8036a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036a06:	f7f9 fe07 	bl	8030618 <__aeabi_dmul>
 8036a0a:	2301      	movs	r3, #1
 8036a0c:	9a04      	ldr	r2, [sp, #16]
 8036a0e:	3208      	adds	r2, #8
 8036a10:	f10a 0a01 	add.w	sl, sl, #1
 8036a14:	106d      	asrs	r5, r5, #1
 8036a16:	9204      	str	r2, [sp, #16]
 8036a18:	e7cc      	b.n	80369b4 <_strtod_l+0x4d4>
 8036a1a:	d0ec      	beq.n	80369f6 <_strtod_l+0x516>
 8036a1c:	426d      	negs	r5, r5
 8036a1e:	f015 020f 	ands.w	r2, r5, #15
 8036a22:	d00a      	beq.n	8036a3a <_strtod_l+0x55a>
 8036a24:	4b11      	ldr	r3, [pc, #68]	; (8036a6c <_strtod_l+0x58c>)
 8036a26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8036a2a:	4640      	mov	r0, r8
 8036a2c:	4649      	mov	r1, r9
 8036a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036a32:	f7f9 ff1b 	bl	803086c <__aeabi_ddiv>
 8036a36:	4680      	mov	r8, r0
 8036a38:	4689      	mov	r9, r1
 8036a3a:	112d      	asrs	r5, r5, #4
 8036a3c:	d0db      	beq.n	80369f6 <_strtod_l+0x516>
 8036a3e:	2d1f      	cmp	r5, #31
 8036a40:	dd1e      	ble.n	8036a80 <_strtod_l+0x5a0>
 8036a42:	2500      	movs	r5, #0
 8036a44:	46ab      	mov	fp, r5
 8036a46:	9509      	str	r5, [sp, #36]	; 0x24
 8036a48:	9505      	str	r5, [sp, #20]
 8036a4a:	2322      	movs	r3, #34	; 0x22
 8036a4c:	f04f 0800 	mov.w	r8, #0
 8036a50:	f04f 0900 	mov.w	r9, #0
 8036a54:	6023      	str	r3, [r4, #0]
 8036a56:	e78d      	b.n	8036974 <_strtod_l+0x494>
 8036a58:	0803aa9e 	.word	0x0803aa9e
 8036a5c:	0803a950 	.word	0x0803a950
 8036a60:	0803aa96 	.word	0x0803aa96
 8036a64:	0803aad0 	.word	0x0803aad0
 8036a68:	0803ad60 	.word	0x0803ad60
 8036a6c:	0803ac40 	.word	0x0803ac40
 8036a70:	0803ac18 	.word	0x0803ac18
 8036a74:	7ff00000 	.word	0x7ff00000
 8036a78:	7ca00000 	.word	0x7ca00000
 8036a7c:	7fefffff 	.word	0x7fefffff
 8036a80:	f015 0310 	ands.w	r3, r5, #16
 8036a84:	bf18      	it	ne
 8036a86:	236a      	movne	r3, #106	; 0x6a
 8036a88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8036e2c <_strtod_l+0x94c>
 8036a8c:	9304      	str	r3, [sp, #16]
 8036a8e:	4640      	mov	r0, r8
 8036a90:	4649      	mov	r1, r9
 8036a92:	2300      	movs	r3, #0
 8036a94:	07ea      	lsls	r2, r5, #31
 8036a96:	d504      	bpl.n	8036aa2 <_strtod_l+0x5c2>
 8036a98:	e9da 2300 	ldrd	r2, r3, [sl]
 8036a9c:	f7f9 fdbc 	bl	8030618 <__aeabi_dmul>
 8036aa0:	2301      	movs	r3, #1
 8036aa2:	106d      	asrs	r5, r5, #1
 8036aa4:	f10a 0a08 	add.w	sl, sl, #8
 8036aa8:	d1f4      	bne.n	8036a94 <_strtod_l+0x5b4>
 8036aaa:	b10b      	cbz	r3, 8036ab0 <_strtod_l+0x5d0>
 8036aac:	4680      	mov	r8, r0
 8036aae:	4689      	mov	r9, r1
 8036ab0:	9b04      	ldr	r3, [sp, #16]
 8036ab2:	b1bb      	cbz	r3, 8036ae4 <_strtod_l+0x604>
 8036ab4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8036ab8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8036abc:	2b00      	cmp	r3, #0
 8036abe:	4649      	mov	r1, r9
 8036ac0:	dd10      	ble.n	8036ae4 <_strtod_l+0x604>
 8036ac2:	2b1f      	cmp	r3, #31
 8036ac4:	f340 811e 	ble.w	8036d04 <_strtod_l+0x824>
 8036ac8:	2b34      	cmp	r3, #52	; 0x34
 8036aca:	bfde      	ittt	le
 8036acc:	f04f 33ff 	movle.w	r3, #4294967295
 8036ad0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8036ad4:	4093      	lslle	r3, r2
 8036ad6:	f04f 0800 	mov.w	r8, #0
 8036ada:	bfcc      	ite	gt
 8036adc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8036ae0:	ea03 0901 	andle.w	r9, r3, r1
 8036ae4:	2200      	movs	r2, #0
 8036ae6:	2300      	movs	r3, #0
 8036ae8:	4640      	mov	r0, r8
 8036aea:	4649      	mov	r1, r9
 8036aec:	f7f9 fffc 	bl	8030ae8 <__aeabi_dcmpeq>
 8036af0:	2800      	cmp	r0, #0
 8036af2:	d1a6      	bne.n	8036a42 <_strtod_l+0x562>
 8036af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036af6:	9300      	str	r3, [sp, #0]
 8036af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8036afa:	4633      	mov	r3, r6
 8036afc:	465a      	mov	r2, fp
 8036afe:	4620      	mov	r0, r4
 8036b00:	f002 fc2a 	bl	8039358 <__s2b>
 8036b04:	9009      	str	r0, [sp, #36]	; 0x24
 8036b06:	2800      	cmp	r0, #0
 8036b08:	f43f af2a 	beq.w	8036960 <_strtod_l+0x480>
 8036b0c:	9a08      	ldr	r2, [sp, #32]
 8036b0e:	9b05      	ldr	r3, [sp, #20]
 8036b10:	2a00      	cmp	r2, #0
 8036b12:	eba3 0307 	sub.w	r3, r3, r7
 8036b16:	bfa8      	it	ge
 8036b18:	2300      	movge	r3, #0
 8036b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8036b1c:	2500      	movs	r5, #0
 8036b1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8036b22:	9312      	str	r3, [sp, #72]	; 0x48
 8036b24:	46ab      	mov	fp, r5
 8036b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036b28:	4620      	mov	r0, r4
 8036b2a:	6859      	ldr	r1, [r3, #4]
 8036b2c:	f002 fb6c 	bl	8039208 <_Balloc>
 8036b30:	9005      	str	r0, [sp, #20]
 8036b32:	2800      	cmp	r0, #0
 8036b34:	f43f af18 	beq.w	8036968 <_strtod_l+0x488>
 8036b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8036b3a:	691a      	ldr	r2, [r3, #16]
 8036b3c:	3202      	adds	r2, #2
 8036b3e:	f103 010c 	add.w	r1, r3, #12
 8036b42:	0092      	lsls	r2, r2, #2
 8036b44:	300c      	adds	r0, #12
 8036b46:	f001 f917 	bl	8037d78 <memcpy>
 8036b4a:	ec49 8b10 	vmov	d0, r8, r9
 8036b4e:	aa18      	add	r2, sp, #96	; 0x60
 8036b50:	a917      	add	r1, sp, #92	; 0x5c
 8036b52:	4620      	mov	r0, r4
 8036b54:	f002 ff34 	bl	80399c0 <__d2b>
 8036b58:	ec49 8b18 	vmov	d8, r8, r9
 8036b5c:	9016      	str	r0, [sp, #88]	; 0x58
 8036b5e:	2800      	cmp	r0, #0
 8036b60:	f43f af02 	beq.w	8036968 <_strtod_l+0x488>
 8036b64:	2101      	movs	r1, #1
 8036b66:	4620      	mov	r0, r4
 8036b68:	f002 fc8e 	bl	8039488 <__i2b>
 8036b6c:	4683      	mov	fp, r0
 8036b6e:	2800      	cmp	r0, #0
 8036b70:	f43f aefa 	beq.w	8036968 <_strtod_l+0x488>
 8036b74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8036b76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8036b78:	2e00      	cmp	r6, #0
 8036b7a:	bfab      	itete	ge
 8036b7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8036b7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8036b80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8036b82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8036b86:	bfac      	ite	ge
 8036b88:	eb06 0a03 	addge.w	sl, r6, r3
 8036b8c:	1b9f      	sublt	r7, r3, r6
 8036b8e:	9b04      	ldr	r3, [sp, #16]
 8036b90:	1af6      	subs	r6, r6, r3
 8036b92:	4416      	add	r6, r2
 8036b94:	4ba0      	ldr	r3, [pc, #640]	; (8036e18 <_strtod_l+0x938>)
 8036b96:	3e01      	subs	r6, #1
 8036b98:	429e      	cmp	r6, r3
 8036b9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8036b9e:	f280 80c4 	bge.w	8036d2a <_strtod_l+0x84a>
 8036ba2:	1b9b      	subs	r3, r3, r6
 8036ba4:	2b1f      	cmp	r3, #31
 8036ba6:	eba2 0203 	sub.w	r2, r2, r3
 8036baa:	f04f 0101 	mov.w	r1, #1
 8036bae:	f300 80b0 	bgt.w	8036d12 <_strtod_l+0x832>
 8036bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8036bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8036bb8:	2300      	movs	r3, #0
 8036bba:	930d      	str	r3, [sp, #52]	; 0x34
 8036bbc:	eb0a 0602 	add.w	r6, sl, r2
 8036bc0:	9b04      	ldr	r3, [sp, #16]
 8036bc2:	45b2      	cmp	sl, r6
 8036bc4:	4417      	add	r7, r2
 8036bc6:	441f      	add	r7, r3
 8036bc8:	4653      	mov	r3, sl
 8036bca:	bfa8      	it	ge
 8036bcc:	4633      	movge	r3, r6
 8036bce:	42bb      	cmp	r3, r7
 8036bd0:	bfa8      	it	ge
 8036bd2:	463b      	movge	r3, r7
 8036bd4:	2b00      	cmp	r3, #0
 8036bd6:	bfc2      	ittt	gt
 8036bd8:	1af6      	subgt	r6, r6, r3
 8036bda:	1aff      	subgt	r7, r7, r3
 8036bdc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8036be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8036be2:	2b00      	cmp	r3, #0
 8036be4:	dd17      	ble.n	8036c16 <_strtod_l+0x736>
 8036be6:	4659      	mov	r1, fp
 8036be8:	461a      	mov	r2, r3
 8036bea:	4620      	mov	r0, r4
 8036bec:	f002 fd0c 	bl	8039608 <__pow5mult>
 8036bf0:	4683      	mov	fp, r0
 8036bf2:	2800      	cmp	r0, #0
 8036bf4:	f43f aeb8 	beq.w	8036968 <_strtod_l+0x488>
 8036bf8:	4601      	mov	r1, r0
 8036bfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8036bfc:	4620      	mov	r0, r4
 8036bfe:	f002 fc59 	bl	80394b4 <__multiply>
 8036c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8036c04:	2800      	cmp	r0, #0
 8036c06:	f43f aeaf 	beq.w	8036968 <_strtod_l+0x488>
 8036c0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8036c0c:	4620      	mov	r0, r4
 8036c0e:	f002 fb3b 	bl	8039288 <_Bfree>
 8036c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036c14:	9316      	str	r3, [sp, #88]	; 0x58
 8036c16:	2e00      	cmp	r6, #0
 8036c18:	f300 808c 	bgt.w	8036d34 <_strtod_l+0x854>
 8036c1c:	9b08      	ldr	r3, [sp, #32]
 8036c1e:	2b00      	cmp	r3, #0
 8036c20:	dd08      	ble.n	8036c34 <_strtod_l+0x754>
 8036c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8036c24:	9905      	ldr	r1, [sp, #20]
 8036c26:	4620      	mov	r0, r4
 8036c28:	f002 fcee 	bl	8039608 <__pow5mult>
 8036c2c:	9005      	str	r0, [sp, #20]
 8036c2e:	2800      	cmp	r0, #0
 8036c30:	f43f ae9a 	beq.w	8036968 <_strtod_l+0x488>
 8036c34:	2f00      	cmp	r7, #0
 8036c36:	dd08      	ble.n	8036c4a <_strtod_l+0x76a>
 8036c38:	9905      	ldr	r1, [sp, #20]
 8036c3a:	463a      	mov	r2, r7
 8036c3c:	4620      	mov	r0, r4
 8036c3e:	f002 fd3d 	bl	80396bc <__lshift>
 8036c42:	9005      	str	r0, [sp, #20]
 8036c44:	2800      	cmp	r0, #0
 8036c46:	f43f ae8f 	beq.w	8036968 <_strtod_l+0x488>
 8036c4a:	f1ba 0f00 	cmp.w	sl, #0
 8036c4e:	dd08      	ble.n	8036c62 <_strtod_l+0x782>
 8036c50:	4659      	mov	r1, fp
 8036c52:	4652      	mov	r2, sl
 8036c54:	4620      	mov	r0, r4
 8036c56:	f002 fd31 	bl	80396bc <__lshift>
 8036c5a:	4683      	mov	fp, r0
 8036c5c:	2800      	cmp	r0, #0
 8036c5e:	f43f ae83 	beq.w	8036968 <_strtod_l+0x488>
 8036c62:	9a05      	ldr	r2, [sp, #20]
 8036c64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8036c66:	4620      	mov	r0, r4
 8036c68:	f002 fdb0 	bl	80397cc <__mdiff>
 8036c6c:	4605      	mov	r5, r0
 8036c6e:	2800      	cmp	r0, #0
 8036c70:	f43f ae7a 	beq.w	8036968 <_strtod_l+0x488>
 8036c74:	68c3      	ldr	r3, [r0, #12]
 8036c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8036c78:	2300      	movs	r3, #0
 8036c7a:	60c3      	str	r3, [r0, #12]
 8036c7c:	4659      	mov	r1, fp
 8036c7e:	f002 fd89 	bl	8039794 <__mcmp>
 8036c82:	2800      	cmp	r0, #0
 8036c84:	da60      	bge.n	8036d48 <_strtod_l+0x868>
 8036c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036c88:	ea53 0308 	orrs.w	r3, r3, r8
 8036c8c:	f040 8084 	bne.w	8036d98 <_strtod_l+0x8b8>
 8036c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036c94:	2b00      	cmp	r3, #0
 8036c96:	d17f      	bne.n	8036d98 <_strtod_l+0x8b8>
 8036c98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8036c9c:	0d1b      	lsrs	r3, r3, #20
 8036c9e:	051b      	lsls	r3, r3, #20
 8036ca0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8036ca4:	d978      	bls.n	8036d98 <_strtod_l+0x8b8>
 8036ca6:	696b      	ldr	r3, [r5, #20]
 8036ca8:	b913      	cbnz	r3, 8036cb0 <_strtod_l+0x7d0>
 8036caa:	692b      	ldr	r3, [r5, #16]
 8036cac:	2b01      	cmp	r3, #1
 8036cae:	dd73      	ble.n	8036d98 <_strtod_l+0x8b8>
 8036cb0:	4629      	mov	r1, r5
 8036cb2:	2201      	movs	r2, #1
 8036cb4:	4620      	mov	r0, r4
 8036cb6:	f002 fd01 	bl	80396bc <__lshift>
 8036cba:	4659      	mov	r1, fp
 8036cbc:	4605      	mov	r5, r0
 8036cbe:	f002 fd69 	bl	8039794 <__mcmp>
 8036cc2:	2800      	cmp	r0, #0
 8036cc4:	dd68      	ble.n	8036d98 <_strtod_l+0x8b8>
 8036cc6:	9904      	ldr	r1, [sp, #16]
 8036cc8:	4a54      	ldr	r2, [pc, #336]	; (8036e1c <_strtod_l+0x93c>)
 8036cca:	464b      	mov	r3, r9
 8036ccc:	2900      	cmp	r1, #0
 8036cce:	f000 8084 	beq.w	8036dda <_strtod_l+0x8fa>
 8036cd2:	ea02 0109 	and.w	r1, r2, r9
 8036cd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8036cda:	dc7e      	bgt.n	8036dda <_strtod_l+0x8fa>
 8036cdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8036ce0:	f77f aeb3 	ble.w	8036a4a <_strtod_l+0x56a>
 8036ce4:	4b4e      	ldr	r3, [pc, #312]	; (8036e20 <_strtod_l+0x940>)
 8036ce6:	4640      	mov	r0, r8
 8036ce8:	4649      	mov	r1, r9
 8036cea:	2200      	movs	r2, #0
 8036cec:	f7f9 fc94 	bl	8030618 <__aeabi_dmul>
 8036cf0:	4b4a      	ldr	r3, [pc, #296]	; (8036e1c <_strtod_l+0x93c>)
 8036cf2:	400b      	ands	r3, r1
 8036cf4:	4680      	mov	r8, r0
 8036cf6:	4689      	mov	r9, r1
 8036cf8:	2b00      	cmp	r3, #0
 8036cfa:	f47f ae3f 	bne.w	803697c <_strtod_l+0x49c>
 8036cfe:	2322      	movs	r3, #34	; 0x22
 8036d00:	6023      	str	r3, [r4, #0]
 8036d02:	e63b      	b.n	803697c <_strtod_l+0x49c>
 8036d04:	f04f 32ff 	mov.w	r2, #4294967295
 8036d08:	fa02 f303 	lsl.w	r3, r2, r3
 8036d0c:	ea03 0808 	and.w	r8, r3, r8
 8036d10:	e6e8      	b.n	8036ae4 <_strtod_l+0x604>
 8036d12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8036d16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8036d1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8036d1e:	36e2      	adds	r6, #226	; 0xe2
 8036d20:	fa01 f306 	lsl.w	r3, r1, r6
 8036d24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8036d28:	e748      	b.n	8036bbc <_strtod_l+0x6dc>
 8036d2a:	2100      	movs	r1, #0
 8036d2c:	2301      	movs	r3, #1
 8036d2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8036d32:	e743      	b.n	8036bbc <_strtod_l+0x6dc>
 8036d34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8036d36:	4632      	mov	r2, r6
 8036d38:	4620      	mov	r0, r4
 8036d3a:	f002 fcbf 	bl	80396bc <__lshift>
 8036d3e:	9016      	str	r0, [sp, #88]	; 0x58
 8036d40:	2800      	cmp	r0, #0
 8036d42:	f47f af6b 	bne.w	8036c1c <_strtod_l+0x73c>
 8036d46:	e60f      	b.n	8036968 <_strtod_l+0x488>
 8036d48:	46ca      	mov	sl, r9
 8036d4a:	d171      	bne.n	8036e30 <_strtod_l+0x950>
 8036d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8036d4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036d52:	b352      	cbz	r2, 8036daa <_strtod_l+0x8ca>
 8036d54:	4a33      	ldr	r2, [pc, #204]	; (8036e24 <_strtod_l+0x944>)
 8036d56:	4293      	cmp	r3, r2
 8036d58:	d12a      	bne.n	8036db0 <_strtod_l+0x8d0>
 8036d5a:	9b04      	ldr	r3, [sp, #16]
 8036d5c:	4641      	mov	r1, r8
 8036d5e:	b1fb      	cbz	r3, 8036da0 <_strtod_l+0x8c0>
 8036d60:	4b2e      	ldr	r3, [pc, #184]	; (8036e1c <_strtod_l+0x93c>)
 8036d62:	ea09 0303 	and.w	r3, r9, r3
 8036d66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8036d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8036d6e:	d81a      	bhi.n	8036da6 <_strtod_l+0x8c6>
 8036d70:	0d1b      	lsrs	r3, r3, #20
 8036d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8036d76:	fa02 f303 	lsl.w	r3, r2, r3
 8036d7a:	4299      	cmp	r1, r3
 8036d7c:	d118      	bne.n	8036db0 <_strtod_l+0x8d0>
 8036d7e:	4b2a      	ldr	r3, [pc, #168]	; (8036e28 <_strtod_l+0x948>)
 8036d80:	459a      	cmp	sl, r3
 8036d82:	d102      	bne.n	8036d8a <_strtod_l+0x8aa>
 8036d84:	3101      	adds	r1, #1
 8036d86:	f43f adef 	beq.w	8036968 <_strtod_l+0x488>
 8036d8a:	4b24      	ldr	r3, [pc, #144]	; (8036e1c <_strtod_l+0x93c>)
 8036d8c:	ea0a 0303 	and.w	r3, sl, r3
 8036d90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8036d94:	f04f 0800 	mov.w	r8, #0
 8036d98:	9b04      	ldr	r3, [sp, #16]
 8036d9a:	2b00      	cmp	r3, #0
 8036d9c:	d1a2      	bne.n	8036ce4 <_strtod_l+0x804>
 8036d9e:	e5ed      	b.n	803697c <_strtod_l+0x49c>
 8036da0:	f04f 33ff 	mov.w	r3, #4294967295
 8036da4:	e7e9      	b.n	8036d7a <_strtod_l+0x89a>
 8036da6:	4613      	mov	r3, r2
 8036da8:	e7e7      	b.n	8036d7a <_strtod_l+0x89a>
 8036daa:	ea53 0308 	orrs.w	r3, r3, r8
 8036dae:	d08a      	beq.n	8036cc6 <_strtod_l+0x7e6>
 8036db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8036db2:	b1e3      	cbz	r3, 8036dee <_strtod_l+0x90e>
 8036db4:	ea13 0f0a 	tst.w	r3, sl
 8036db8:	d0ee      	beq.n	8036d98 <_strtod_l+0x8b8>
 8036dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036dbc:	9a04      	ldr	r2, [sp, #16]
 8036dbe:	4640      	mov	r0, r8
 8036dc0:	4649      	mov	r1, r9
 8036dc2:	b1c3      	cbz	r3, 8036df6 <_strtod_l+0x916>
 8036dc4:	f7ff fb6d 	bl	80364a2 <sulp>
 8036dc8:	4602      	mov	r2, r0
 8036dca:	460b      	mov	r3, r1
 8036dcc:	ec51 0b18 	vmov	r0, r1, d8
 8036dd0:	f7f9 fa6c 	bl	80302ac <__adddf3>
 8036dd4:	4680      	mov	r8, r0
 8036dd6:	4689      	mov	r9, r1
 8036dd8:	e7de      	b.n	8036d98 <_strtod_l+0x8b8>
 8036dda:	4013      	ands	r3, r2
 8036ddc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8036de0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8036de4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8036de8:	f04f 38ff 	mov.w	r8, #4294967295
 8036dec:	e7d4      	b.n	8036d98 <_strtod_l+0x8b8>
 8036dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8036df0:	ea13 0f08 	tst.w	r3, r8
 8036df4:	e7e0      	b.n	8036db8 <_strtod_l+0x8d8>
 8036df6:	f7ff fb54 	bl	80364a2 <sulp>
 8036dfa:	4602      	mov	r2, r0
 8036dfc:	460b      	mov	r3, r1
 8036dfe:	ec51 0b18 	vmov	r0, r1, d8
 8036e02:	f7f9 fa51 	bl	80302a8 <__aeabi_dsub>
 8036e06:	2200      	movs	r2, #0
 8036e08:	2300      	movs	r3, #0
 8036e0a:	4680      	mov	r8, r0
 8036e0c:	4689      	mov	r9, r1
 8036e0e:	f7f9 fe6b 	bl	8030ae8 <__aeabi_dcmpeq>
 8036e12:	2800      	cmp	r0, #0
 8036e14:	d0c0      	beq.n	8036d98 <_strtod_l+0x8b8>
 8036e16:	e618      	b.n	8036a4a <_strtod_l+0x56a>
 8036e18:	fffffc02 	.word	0xfffffc02
 8036e1c:	7ff00000 	.word	0x7ff00000
 8036e20:	39500000 	.word	0x39500000
 8036e24:	000fffff 	.word	0x000fffff
 8036e28:	7fefffff 	.word	0x7fefffff
 8036e2c:	0803a968 	.word	0x0803a968
 8036e30:	4659      	mov	r1, fp
 8036e32:	4628      	mov	r0, r5
 8036e34:	f002 fe1e 	bl	8039a74 <__ratio>
 8036e38:	ec57 6b10 	vmov	r6, r7, d0
 8036e3c:	ee10 0a10 	vmov	r0, s0
 8036e40:	2200      	movs	r2, #0
 8036e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8036e46:	4639      	mov	r1, r7
 8036e48:	f7f9 fe62 	bl	8030b10 <__aeabi_dcmple>
 8036e4c:	2800      	cmp	r0, #0
 8036e4e:	d071      	beq.n	8036f34 <_strtod_l+0xa54>
 8036e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036e52:	2b00      	cmp	r3, #0
 8036e54:	d17c      	bne.n	8036f50 <_strtod_l+0xa70>
 8036e56:	f1b8 0f00 	cmp.w	r8, #0
 8036e5a:	d15a      	bne.n	8036f12 <_strtod_l+0xa32>
 8036e5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036e60:	2b00      	cmp	r3, #0
 8036e62:	d15d      	bne.n	8036f20 <_strtod_l+0xa40>
 8036e64:	4b90      	ldr	r3, [pc, #576]	; (80370a8 <_strtod_l+0xbc8>)
 8036e66:	2200      	movs	r2, #0
 8036e68:	4630      	mov	r0, r6
 8036e6a:	4639      	mov	r1, r7
 8036e6c:	f7f9 fe46 	bl	8030afc <__aeabi_dcmplt>
 8036e70:	2800      	cmp	r0, #0
 8036e72:	d15c      	bne.n	8036f2e <_strtod_l+0xa4e>
 8036e74:	4630      	mov	r0, r6
 8036e76:	4639      	mov	r1, r7
 8036e78:	4b8c      	ldr	r3, [pc, #560]	; (80370ac <_strtod_l+0xbcc>)
 8036e7a:	2200      	movs	r2, #0
 8036e7c:	f7f9 fbcc 	bl	8030618 <__aeabi_dmul>
 8036e80:	4606      	mov	r6, r0
 8036e82:	460f      	mov	r7, r1
 8036e84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8036e88:	9606      	str	r6, [sp, #24]
 8036e8a:	9307      	str	r3, [sp, #28]
 8036e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8036e90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8036e94:	4b86      	ldr	r3, [pc, #536]	; (80370b0 <_strtod_l+0xbd0>)
 8036e96:	ea0a 0303 	and.w	r3, sl, r3
 8036e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8036e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8036e9e:	4b85      	ldr	r3, [pc, #532]	; (80370b4 <_strtod_l+0xbd4>)
 8036ea0:	429a      	cmp	r2, r3
 8036ea2:	f040 8090 	bne.w	8036fc6 <_strtod_l+0xae6>
 8036ea6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8036eaa:	ec49 8b10 	vmov	d0, r8, r9
 8036eae:	f002 fd17 	bl	80398e0 <__ulp>
 8036eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8036eb6:	ec51 0b10 	vmov	r0, r1, d0
 8036eba:	f7f9 fbad 	bl	8030618 <__aeabi_dmul>
 8036ebe:	4642      	mov	r2, r8
 8036ec0:	464b      	mov	r3, r9
 8036ec2:	f7f9 f9f3 	bl	80302ac <__adddf3>
 8036ec6:	460b      	mov	r3, r1
 8036ec8:	4979      	ldr	r1, [pc, #484]	; (80370b0 <_strtod_l+0xbd0>)
 8036eca:	4a7b      	ldr	r2, [pc, #492]	; (80370b8 <_strtod_l+0xbd8>)
 8036ecc:	4019      	ands	r1, r3
 8036ece:	4291      	cmp	r1, r2
 8036ed0:	4680      	mov	r8, r0
 8036ed2:	d944      	bls.n	8036f5e <_strtod_l+0xa7e>
 8036ed4:	ee18 2a90 	vmov	r2, s17
 8036ed8:	4b78      	ldr	r3, [pc, #480]	; (80370bc <_strtod_l+0xbdc>)
 8036eda:	429a      	cmp	r2, r3
 8036edc:	d104      	bne.n	8036ee8 <_strtod_l+0xa08>
 8036ede:	ee18 3a10 	vmov	r3, s16
 8036ee2:	3301      	adds	r3, #1
 8036ee4:	f43f ad40 	beq.w	8036968 <_strtod_l+0x488>
 8036ee8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80370bc <_strtod_l+0xbdc>
 8036eec:	f04f 38ff 	mov.w	r8, #4294967295
 8036ef0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8036ef2:	4620      	mov	r0, r4
 8036ef4:	f002 f9c8 	bl	8039288 <_Bfree>
 8036ef8:	9905      	ldr	r1, [sp, #20]
 8036efa:	4620      	mov	r0, r4
 8036efc:	f002 f9c4 	bl	8039288 <_Bfree>
 8036f00:	4659      	mov	r1, fp
 8036f02:	4620      	mov	r0, r4
 8036f04:	f002 f9c0 	bl	8039288 <_Bfree>
 8036f08:	4629      	mov	r1, r5
 8036f0a:	4620      	mov	r0, r4
 8036f0c:	f002 f9bc 	bl	8039288 <_Bfree>
 8036f10:	e609      	b.n	8036b26 <_strtod_l+0x646>
 8036f12:	f1b8 0f01 	cmp.w	r8, #1
 8036f16:	d103      	bne.n	8036f20 <_strtod_l+0xa40>
 8036f18:	f1b9 0f00 	cmp.w	r9, #0
 8036f1c:	f43f ad95 	beq.w	8036a4a <_strtod_l+0x56a>
 8036f20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8037078 <_strtod_l+0xb98>
 8036f24:	4f60      	ldr	r7, [pc, #384]	; (80370a8 <_strtod_l+0xbc8>)
 8036f26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8036f2a:	2600      	movs	r6, #0
 8036f2c:	e7ae      	b.n	8036e8c <_strtod_l+0x9ac>
 8036f2e:	4f5f      	ldr	r7, [pc, #380]	; (80370ac <_strtod_l+0xbcc>)
 8036f30:	2600      	movs	r6, #0
 8036f32:	e7a7      	b.n	8036e84 <_strtod_l+0x9a4>
 8036f34:	4b5d      	ldr	r3, [pc, #372]	; (80370ac <_strtod_l+0xbcc>)
 8036f36:	4630      	mov	r0, r6
 8036f38:	4639      	mov	r1, r7
 8036f3a:	2200      	movs	r2, #0
 8036f3c:	f7f9 fb6c 	bl	8030618 <__aeabi_dmul>
 8036f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036f42:	4606      	mov	r6, r0
 8036f44:	460f      	mov	r7, r1
 8036f46:	2b00      	cmp	r3, #0
 8036f48:	d09c      	beq.n	8036e84 <_strtod_l+0x9a4>
 8036f4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8036f4e:	e79d      	b.n	8036e8c <_strtod_l+0x9ac>
 8036f50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8037080 <_strtod_l+0xba0>
 8036f54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8036f58:	ec57 6b17 	vmov	r6, r7, d7
 8036f5c:	e796      	b.n	8036e8c <_strtod_l+0x9ac>
 8036f5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8036f62:	9b04      	ldr	r3, [sp, #16]
 8036f64:	46ca      	mov	sl, r9
 8036f66:	2b00      	cmp	r3, #0
 8036f68:	d1c2      	bne.n	8036ef0 <_strtod_l+0xa10>
 8036f6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8036f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8036f70:	0d1b      	lsrs	r3, r3, #20
 8036f72:	051b      	lsls	r3, r3, #20
 8036f74:	429a      	cmp	r2, r3
 8036f76:	d1bb      	bne.n	8036ef0 <_strtod_l+0xa10>
 8036f78:	4630      	mov	r0, r6
 8036f7a:	4639      	mov	r1, r7
 8036f7c:	f7f9 fe5c 	bl	8030c38 <__aeabi_d2lz>
 8036f80:	f7f9 fb1c 	bl	80305bc <__aeabi_l2d>
 8036f84:	4602      	mov	r2, r0
 8036f86:	460b      	mov	r3, r1
 8036f88:	4630      	mov	r0, r6
 8036f8a:	4639      	mov	r1, r7
 8036f8c:	f7f9 f98c 	bl	80302a8 <__aeabi_dsub>
 8036f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8036f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8036f96:	ea43 0308 	orr.w	r3, r3, r8
 8036f9a:	4313      	orrs	r3, r2
 8036f9c:	4606      	mov	r6, r0
 8036f9e:	460f      	mov	r7, r1
 8036fa0:	d054      	beq.n	803704c <_strtod_l+0xb6c>
 8036fa2:	a339      	add	r3, pc, #228	; (adr r3, 8037088 <_strtod_l+0xba8>)
 8036fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036fa8:	f7f9 fda8 	bl	8030afc <__aeabi_dcmplt>
 8036fac:	2800      	cmp	r0, #0
 8036fae:	f47f ace5 	bne.w	803697c <_strtod_l+0x49c>
 8036fb2:	a337      	add	r3, pc, #220	; (adr r3, 8037090 <_strtod_l+0xbb0>)
 8036fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036fb8:	4630      	mov	r0, r6
 8036fba:	4639      	mov	r1, r7
 8036fbc:	f7f9 fdbc 	bl	8030b38 <__aeabi_dcmpgt>
 8036fc0:	2800      	cmp	r0, #0
 8036fc2:	d095      	beq.n	8036ef0 <_strtod_l+0xa10>
 8036fc4:	e4da      	b.n	803697c <_strtod_l+0x49c>
 8036fc6:	9b04      	ldr	r3, [sp, #16]
 8036fc8:	b333      	cbz	r3, 8037018 <_strtod_l+0xb38>
 8036fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8036fcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8036fd0:	d822      	bhi.n	8037018 <_strtod_l+0xb38>
 8036fd2:	a331      	add	r3, pc, #196	; (adr r3, 8037098 <_strtod_l+0xbb8>)
 8036fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8036fd8:	4630      	mov	r0, r6
 8036fda:	4639      	mov	r1, r7
 8036fdc:	f7f9 fd98 	bl	8030b10 <__aeabi_dcmple>
 8036fe0:	b1a0      	cbz	r0, 803700c <_strtod_l+0xb2c>
 8036fe2:	4639      	mov	r1, r7
 8036fe4:	4630      	mov	r0, r6
 8036fe6:	f7f9 fdef 	bl	8030bc8 <__aeabi_d2uiz>
 8036fea:	2801      	cmp	r0, #1
 8036fec:	bf38      	it	cc
 8036fee:	2001      	movcc	r0, #1
 8036ff0:	f7f9 fa98 	bl	8030524 <__aeabi_ui2d>
 8036ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8036ff6:	4606      	mov	r6, r0
 8036ff8:	460f      	mov	r7, r1
 8036ffa:	bb23      	cbnz	r3, 8037046 <_strtod_l+0xb66>
 8036ffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8037000:	9010      	str	r0, [sp, #64]	; 0x40
 8037002:	9311      	str	r3, [sp, #68]	; 0x44
 8037004:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8037008:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 803700c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803700e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8037010:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8037014:	1a9b      	subs	r3, r3, r2
 8037016:	930f      	str	r3, [sp, #60]	; 0x3c
 8037018:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 803701c:	eeb0 0a48 	vmov.f32	s0, s16
 8037020:	eef0 0a68 	vmov.f32	s1, s17
 8037024:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8037028:	f002 fc5a 	bl	80398e0 <__ulp>
 803702c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8037030:	ec53 2b10 	vmov	r2, r3, d0
 8037034:	f7f9 faf0 	bl	8030618 <__aeabi_dmul>
 8037038:	ec53 2b18 	vmov	r2, r3, d8
 803703c:	f7f9 f936 	bl	80302ac <__adddf3>
 8037040:	4680      	mov	r8, r0
 8037042:	4689      	mov	r9, r1
 8037044:	e78d      	b.n	8036f62 <_strtod_l+0xa82>
 8037046:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 803704a:	e7db      	b.n	8037004 <_strtod_l+0xb24>
 803704c:	a314      	add	r3, pc, #80	; (adr r3, 80370a0 <_strtod_l+0xbc0>)
 803704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037052:	f7f9 fd53 	bl	8030afc <__aeabi_dcmplt>
 8037056:	e7b3      	b.n	8036fc0 <_strtod_l+0xae0>
 8037058:	2300      	movs	r3, #0
 803705a:	930a      	str	r3, [sp, #40]	; 0x28
 803705c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 803705e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8037060:	6013      	str	r3, [r2, #0]
 8037062:	f7ff ba7c 	b.w	803655e <_strtod_l+0x7e>
 8037066:	2a65      	cmp	r2, #101	; 0x65
 8037068:	f43f ab75 	beq.w	8036756 <_strtod_l+0x276>
 803706c:	2a45      	cmp	r2, #69	; 0x45
 803706e:	f43f ab72 	beq.w	8036756 <_strtod_l+0x276>
 8037072:	2301      	movs	r3, #1
 8037074:	f7ff bbaa 	b.w	80367cc <_strtod_l+0x2ec>
 8037078:	00000000 	.word	0x00000000
 803707c:	bff00000 	.word	0xbff00000
 8037080:	00000000 	.word	0x00000000
 8037084:	3ff00000 	.word	0x3ff00000
 8037088:	94a03595 	.word	0x94a03595
 803708c:	3fdfffff 	.word	0x3fdfffff
 8037090:	35afe535 	.word	0x35afe535
 8037094:	3fe00000 	.word	0x3fe00000
 8037098:	ffc00000 	.word	0xffc00000
 803709c:	41dfffff 	.word	0x41dfffff
 80370a0:	94a03595 	.word	0x94a03595
 80370a4:	3fcfffff 	.word	0x3fcfffff
 80370a8:	3ff00000 	.word	0x3ff00000
 80370ac:	3fe00000 	.word	0x3fe00000
 80370b0:	7ff00000 	.word	0x7ff00000
 80370b4:	7fe00000 	.word	0x7fe00000
 80370b8:	7c9fffff 	.word	0x7c9fffff
 80370bc:	7fefffff 	.word	0x7fefffff

080370c0 <strtod>:
 80370c0:	460a      	mov	r2, r1
 80370c2:	4601      	mov	r1, r0
 80370c4:	4802      	ldr	r0, [pc, #8]	; (80370d0 <strtod+0x10>)
 80370c6:	4b03      	ldr	r3, [pc, #12]	; (80370d4 <strtod+0x14>)
 80370c8:	6800      	ldr	r0, [r0, #0]
 80370ca:	f7ff ba09 	b.w	80364e0 <_strtod_l>
 80370ce:	bf00      	nop
 80370d0:	200001e8 	.word	0x200001e8
 80370d4:	20000030 	.word	0x20000030

080370d8 <__cvt>:
 80370d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80370dc:	ec55 4b10 	vmov	r4, r5, d0
 80370e0:	2d00      	cmp	r5, #0
 80370e2:	460e      	mov	r6, r1
 80370e4:	4619      	mov	r1, r3
 80370e6:	462b      	mov	r3, r5
 80370e8:	bfbb      	ittet	lt
 80370ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80370ee:	461d      	movlt	r5, r3
 80370f0:	2300      	movge	r3, #0
 80370f2:	232d      	movlt	r3, #45	; 0x2d
 80370f4:	700b      	strb	r3, [r1, #0]
 80370f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80370f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80370fc:	4691      	mov	r9, r2
 80370fe:	f023 0820 	bic.w	r8, r3, #32
 8037102:	bfbc      	itt	lt
 8037104:	4622      	movlt	r2, r4
 8037106:	4614      	movlt	r4, r2
 8037108:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 803710c:	d005      	beq.n	803711a <__cvt+0x42>
 803710e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8037112:	d100      	bne.n	8037116 <__cvt+0x3e>
 8037114:	3601      	adds	r6, #1
 8037116:	2102      	movs	r1, #2
 8037118:	e000      	b.n	803711c <__cvt+0x44>
 803711a:	2103      	movs	r1, #3
 803711c:	ab03      	add	r3, sp, #12
 803711e:	9301      	str	r3, [sp, #4]
 8037120:	ab02      	add	r3, sp, #8
 8037122:	9300      	str	r3, [sp, #0]
 8037124:	ec45 4b10 	vmov	d0, r4, r5
 8037128:	4653      	mov	r3, sl
 803712a:	4632      	mov	r2, r6
 803712c:	f000 fec4 	bl	8037eb8 <_dtoa_r>
 8037130:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8037134:	4607      	mov	r7, r0
 8037136:	d102      	bne.n	803713e <__cvt+0x66>
 8037138:	f019 0f01 	tst.w	r9, #1
 803713c:	d022      	beq.n	8037184 <__cvt+0xac>
 803713e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8037142:	eb07 0906 	add.w	r9, r7, r6
 8037146:	d110      	bne.n	803716a <__cvt+0x92>
 8037148:	783b      	ldrb	r3, [r7, #0]
 803714a:	2b30      	cmp	r3, #48	; 0x30
 803714c:	d10a      	bne.n	8037164 <__cvt+0x8c>
 803714e:	2200      	movs	r2, #0
 8037150:	2300      	movs	r3, #0
 8037152:	4620      	mov	r0, r4
 8037154:	4629      	mov	r1, r5
 8037156:	f7f9 fcc7 	bl	8030ae8 <__aeabi_dcmpeq>
 803715a:	b918      	cbnz	r0, 8037164 <__cvt+0x8c>
 803715c:	f1c6 0601 	rsb	r6, r6, #1
 8037160:	f8ca 6000 	str.w	r6, [sl]
 8037164:	f8da 3000 	ldr.w	r3, [sl]
 8037168:	4499      	add	r9, r3
 803716a:	2200      	movs	r2, #0
 803716c:	2300      	movs	r3, #0
 803716e:	4620      	mov	r0, r4
 8037170:	4629      	mov	r1, r5
 8037172:	f7f9 fcb9 	bl	8030ae8 <__aeabi_dcmpeq>
 8037176:	b108      	cbz	r0, 803717c <__cvt+0xa4>
 8037178:	f8cd 900c 	str.w	r9, [sp, #12]
 803717c:	2230      	movs	r2, #48	; 0x30
 803717e:	9b03      	ldr	r3, [sp, #12]
 8037180:	454b      	cmp	r3, r9
 8037182:	d307      	bcc.n	8037194 <__cvt+0xbc>
 8037184:	9b03      	ldr	r3, [sp, #12]
 8037186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8037188:	1bdb      	subs	r3, r3, r7
 803718a:	4638      	mov	r0, r7
 803718c:	6013      	str	r3, [r2, #0]
 803718e:	b004      	add	sp, #16
 8037190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037194:	1c59      	adds	r1, r3, #1
 8037196:	9103      	str	r1, [sp, #12]
 8037198:	701a      	strb	r2, [r3, #0]
 803719a:	e7f0      	b.n	803717e <__cvt+0xa6>

0803719c <__exponent>:
 803719c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803719e:	4603      	mov	r3, r0
 80371a0:	2900      	cmp	r1, #0
 80371a2:	bfb8      	it	lt
 80371a4:	4249      	neglt	r1, r1
 80371a6:	f803 2b02 	strb.w	r2, [r3], #2
 80371aa:	bfb4      	ite	lt
 80371ac:	222d      	movlt	r2, #45	; 0x2d
 80371ae:	222b      	movge	r2, #43	; 0x2b
 80371b0:	2909      	cmp	r1, #9
 80371b2:	7042      	strb	r2, [r0, #1]
 80371b4:	dd2a      	ble.n	803720c <__exponent+0x70>
 80371b6:	f10d 0207 	add.w	r2, sp, #7
 80371ba:	4617      	mov	r7, r2
 80371bc:	260a      	movs	r6, #10
 80371be:	4694      	mov	ip, r2
 80371c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80371c4:	fb06 1415 	mls	r4, r6, r5, r1
 80371c8:	3430      	adds	r4, #48	; 0x30
 80371ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80371ce:	460c      	mov	r4, r1
 80371d0:	2c63      	cmp	r4, #99	; 0x63
 80371d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80371d6:	4629      	mov	r1, r5
 80371d8:	dcf1      	bgt.n	80371be <__exponent+0x22>
 80371da:	3130      	adds	r1, #48	; 0x30
 80371dc:	f1ac 0402 	sub.w	r4, ip, #2
 80371e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80371e4:	1c41      	adds	r1, r0, #1
 80371e6:	4622      	mov	r2, r4
 80371e8:	42ba      	cmp	r2, r7
 80371ea:	d30a      	bcc.n	8037202 <__exponent+0x66>
 80371ec:	f10d 0209 	add.w	r2, sp, #9
 80371f0:	eba2 020c 	sub.w	r2, r2, ip
 80371f4:	42bc      	cmp	r4, r7
 80371f6:	bf88      	it	hi
 80371f8:	2200      	movhi	r2, #0
 80371fa:	4413      	add	r3, r2
 80371fc:	1a18      	subs	r0, r3, r0
 80371fe:	b003      	add	sp, #12
 8037200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037202:	f812 5b01 	ldrb.w	r5, [r2], #1
 8037206:	f801 5f01 	strb.w	r5, [r1, #1]!
 803720a:	e7ed      	b.n	80371e8 <__exponent+0x4c>
 803720c:	2330      	movs	r3, #48	; 0x30
 803720e:	3130      	adds	r1, #48	; 0x30
 8037210:	7083      	strb	r3, [r0, #2]
 8037212:	70c1      	strb	r1, [r0, #3]
 8037214:	1d03      	adds	r3, r0, #4
 8037216:	e7f1      	b.n	80371fc <__exponent+0x60>

08037218 <_printf_float>:
 8037218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803721c:	ed2d 8b02 	vpush	{d8}
 8037220:	b08d      	sub	sp, #52	; 0x34
 8037222:	460c      	mov	r4, r1
 8037224:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8037228:	4616      	mov	r6, r2
 803722a:	461f      	mov	r7, r3
 803722c:	4605      	mov	r5, r0
 803722e:	f000 fd1d 	bl	8037c6c <_localeconv_r>
 8037232:	f8d0 a000 	ldr.w	sl, [r0]
 8037236:	4650      	mov	r0, sl
 8037238:	f7f9 f82a 	bl	8030290 <strlen>
 803723c:	2300      	movs	r3, #0
 803723e:	930a      	str	r3, [sp, #40]	; 0x28
 8037240:	6823      	ldr	r3, [r4, #0]
 8037242:	9305      	str	r3, [sp, #20]
 8037244:	f8d8 3000 	ldr.w	r3, [r8]
 8037248:	f894 b018 	ldrb.w	fp, [r4, #24]
 803724c:	3307      	adds	r3, #7
 803724e:	f023 0307 	bic.w	r3, r3, #7
 8037252:	f103 0208 	add.w	r2, r3, #8
 8037256:	f8c8 2000 	str.w	r2, [r8]
 803725a:	e9d3 8900 	ldrd	r8, r9, [r3]
 803725e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8037262:	9307      	str	r3, [sp, #28]
 8037264:	f8cd 8018 	str.w	r8, [sp, #24]
 8037268:	ee08 0a10 	vmov	s16, r0
 803726c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8037270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8037274:	4b9e      	ldr	r3, [pc, #632]	; (80374f0 <_printf_float+0x2d8>)
 8037276:	f04f 32ff 	mov.w	r2, #4294967295
 803727a:	f7f9 fc67 	bl	8030b4c <__aeabi_dcmpun>
 803727e:	bb88      	cbnz	r0, 80372e4 <_printf_float+0xcc>
 8037280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8037284:	4b9a      	ldr	r3, [pc, #616]	; (80374f0 <_printf_float+0x2d8>)
 8037286:	f04f 32ff 	mov.w	r2, #4294967295
 803728a:	f7f9 fc41 	bl	8030b10 <__aeabi_dcmple>
 803728e:	bb48      	cbnz	r0, 80372e4 <_printf_float+0xcc>
 8037290:	2200      	movs	r2, #0
 8037292:	2300      	movs	r3, #0
 8037294:	4640      	mov	r0, r8
 8037296:	4649      	mov	r1, r9
 8037298:	f7f9 fc30 	bl	8030afc <__aeabi_dcmplt>
 803729c:	b110      	cbz	r0, 80372a4 <_printf_float+0x8c>
 803729e:	232d      	movs	r3, #45	; 0x2d
 80372a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80372a4:	4a93      	ldr	r2, [pc, #588]	; (80374f4 <_printf_float+0x2dc>)
 80372a6:	4b94      	ldr	r3, [pc, #592]	; (80374f8 <_printf_float+0x2e0>)
 80372a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80372ac:	bf94      	ite	ls
 80372ae:	4690      	movls	r8, r2
 80372b0:	4698      	movhi	r8, r3
 80372b2:	2303      	movs	r3, #3
 80372b4:	6123      	str	r3, [r4, #16]
 80372b6:	9b05      	ldr	r3, [sp, #20]
 80372b8:	f023 0304 	bic.w	r3, r3, #4
 80372bc:	6023      	str	r3, [r4, #0]
 80372be:	f04f 0900 	mov.w	r9, #0
 80372c2:	9700      	str	r7, [sp, #0]
 80372c4:	4633      	mov	r3, r6
 80372c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80372c8:	4621      	mov	r1, r4
 80372ca:	4628      	mov	r0, r5
 80372cc:	f000 f9da 	bl	8037684 <_printf_common>
 80372d0:	3001      	adds	r0, #1
 80372d2:	f040 8090 	bne.w	80373f6 <_printf_float+0x1de>
 80372d6:	f04f 30ff 	mov.w	r0, #4294967295
 80372da:	b00d      	add	sp, #52	; 0x34
 80372dc:	ecbd 8b02 	vpop	{d8}
 80372e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80372e4:	4642      	mov	r2, r8
 80372e6:	464b      	mov	r3, r9
 80372e8:	4640      	mov	r0, r8
 80372ea:	4649      	mov	r1, r9
 80372ec:	f7f9 fc2e 	bl	8030b4c <__aeabi_dcmpun>
 80372f0:	b140      	cbz	r0, 8037304 <_printf_float+0xec>
 80372f2:	464b      	mov	r3, r9
 80372f4:	2b00      	cmp	r3, #0
 80372f6:	bfbc      	itt	lt
 80372f8:	232d      	movlt	r3, #45	; 0x2d
 80372fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80372fe:	4a7f      	ldr	r2, [pc, #508]	; (80374fc <_printf_float+0x2e4>)
 8037300:	4b7f      	ldr	r3, [pc, #508]	; (8037500 <_printf_float+0x2e8>)
 8037302:	e7d1      	b.n	80372a8 <_printf_float+0x90>
 8037304:	6863      	ldr	r3, [r4, #4]
 8037306:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 803730a:	9206      	str	r2, [sp, #24]
 803730c:	1c5a      	adds	r2, r3, #1
 803730e:	d13f      	bne.n	8037390 <_printf_float+0x178>
 8037310:	2306      	movs	r3, #6
 8037312:	6063      	str	r3, [r4, #4]
 8037314:	9b05      	ldr	r3, [sp, #20]
 8037316:	6861      	ldr	r1, [r4, #4]
 8037318:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 803731c:	2300      	movs	r3, #0
 803731e:	9303      	str	r3, [sp, #12]
 8037320:	ab0a      	add	r3, sp, #40	; 0x28
 8037322:	e9cd b301 	strd	fp, r3, [sp, #4]
 8037326:	ab09      	add	r3, sp, #36	; 0x24
 8037328:	ec49 8b10 	vmov	d0, r8, r9
 803732c:	9300      	str	r3, [sp, #0]
 803732e:	6022      	str	r2, [r4, #0]
 8037330:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8037334:	4628      	mov	r0, r5
 8037336:	f7ff fecf 	bl	80370d8 <__cvt>
 803733a:	9b06      	ldr	r3, [sp, #24]
 803733c:	9909      	ldr	r1, [sp, #36]	; 0x24
 803733e:	2b47      	cmp	r3, #71	; 0x47
 8037340:	4680      	mov	r8, r0
 8037342:	d108      	bne.n	8037356 <_printf_float+0x13e>
 8037344:	1cc8      	adds	r0, r1, #3
 8037346:	db02      	blt.n	803734e <_printf_float+0x136>
 8037348:	6863      	ldr	r3, [r4, #4]
 803734a:	4299      	cmp	r1, r3
 803734c:	dd41      	ble.n	80373d2 <_printf_float+0x1ba>
 803734e:	f1ab 0302 	sub.w	r3, fp, #2
 8037352:	fa5f fb83 	uxtb.w	fp, r3
 8037356:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 803735a:	d820      	bhi.n	803739e <_printf_float+0x186>
 803735c:	3901      	subs	r1, #1
 803735e:	465a      	mov	r2, fp
 8037360:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8037364:	9109      	str	r1, [sp, #36]	; 0x24
 8037366:	f7ff ff19 	bl	803719c <__exponent>
 803736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803736c:	1813      	adds	r3, r2, r0
 803736e:	2a01      	cmp	r2, #1
 8037370:	4681      	mov	r9, r0
 8037372:	6123      	str	r3, [r4, #16]
 8037374:	dc02      	bgt.n	803737c <_printf_float+0x164>
 8037376:	6822      	ldr	r2, [r4, #0]
 8037378:	07d2      	lsls	r2, r2, #31
 803737a:	d501      	bpl.n	8037380 <_printf_float+0x168>
 803737c:	3301      	adds	r3, #1
 803737e:	6123      	str	r3, [r4, #16]
 8037380:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8037384:	2b00      	cmp	r3, #0
 8037386:	d09c      	beq.n	80372c2 <_printf_float+0xaa>
 8037388:	232d      	movs	r3, #45	; 0x2d
 803738a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803738e:	e798      	b.n	80372c2 <_printf_float+0xaa>
 8037390:	9a06      	ldr	r2, [sp, #24]
 8037392:	2a47      	cmp	r2, #71	; 0x47
 8037394:	d1be      	bne.n	8037314 <_printf_float+0xfc>
 8037396:	2b00      	cmp	r3, #0
 8037398:	d1bc      	bne.n	8037314 <_printf_float+0xfc>
 803739a:	2301      	movs	r3, #1
 803739c:	e7b9      	b.n	8037312 <_printf_float+0xfa>
 803739e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80373a2:	d118      	bne.n	80373d6 <_printf_float+0x1be>
 80373a4:	2900      	cmp	r1, #0
 80373a6:	6863      	ldr	r3, [r4, #4]
 80373a8:	dd0b      	ble.n	80373c2 <_printf_float+0x1aa>
 80373aa:	6121      	str	r1, [r4, #16]
 80373ac:	b913      	cbnz	r3, 80373b4 <_printf_float+0x19c>
 80373ae:	6822      	ldr	r2, [r4, #0]
 80373b0:	07d0      	lsls	r0, r2, #31
 80373b2:	d502      	bpl.n	80373ba <_printf_float+0x1a2>
 80373b4:	3301      	adds	r3, #1
 80373b6:	440b      	add	r3, r1
 80373b8:	6123      	str	r3, [r4, #16]
 80373ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80373bc:	f04f 0900 	mov.w	r9, #0
 80373c0:	e7de      	b.n	8037380 <_printf_float+0x168>
 80373c2:	b913      	cbnz	r3, 80373ca <_printf_float+0x1b2>
 80373c4:	6822      	ldr	r2, [r4, #0]
 80373c6:	07d2      	lsls	r2, r2, #31
 80373c8:	d501      	bpl.n	80373ce <_printf_float+0x1b6>
 80373ca:	3302      	adds	r3, #2
 80373cc:	e7f4      	b.n	80373b8 <_printf_float+0x1a0>
 80373ce:	2301      	movs	r3, #1
 80373d0:	e7f2      	b.n	80373b8 <_printf_float+0x1a0>
 80373d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80373d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80373d8:	4299      	cmp	r1, r3
 80373da:	db05      	blt.n	80373e8 <_printf_float+0x1d0>
 80373dc:	6823      	ldr	r3, [r4, #0]
 80373de:	6121      	str	r1, [r4, #16]
 80373e0:	07d8      	lsls	r0, r3, #31
 80373e2:	d5ea      	bpl.n	80373ba <_printf_float+0x1a2>
 80373e4:	1c4b      	adds	r3, r1, #1
 80373e6:	e7e7      	b.n	80373b8 <_printf_float+0x1a0>
 80373e8:	2900      	cmp	r1, #0
 80373ea:	bfd4      	ite	le
 80373ec:	f1c1 0202 	rsble	r2, r1, #2
 80373f0:	2201      	movgt	r2, #1
 80373f2:	4413      	add	r3, r2
 80373f4:	e7e0      	b.n	80373b8 <_printf_float+0x1a0>
 80373f6:	6823      	ldr	r3, [r4, #0]
 80373f8:	055a      	lsls	r2, r3, #21
 80373fa:	d407      	bmi.n	803740c <_printf_float+0x1f4>
 80373fc:	6923      	ldr	r3, [r4, #16]
 80373fe:	4642      	mov	r2, r8
 8037400:	4631      	mov	r1, r6
 8037402:	4628      	mov	r0, r5
 8037404:	47b8      	blx	r7
 8037406:	3001      	adds	r0, #1
 8037408:	d12c      	bne.n	8037464 <_printf_float+0x24c>
 803740a:	e764      	b.n	80372d6 <_printf_float+0xbe>
 803740c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8037410:	f240 80e0 	bls.w	80375d4 <_printf_float+0x3bc>
 8037414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8037418:	2200      	movs	r2, #0
 803741a:	2300      	movs	r3, #0
 803741c:	f7f9 fb64 	bl	8030ae8 <__aeabi_dcmpeq>
 8037420:	2800      	cmp	r0, #0
 8037422:	d034      	beq.n	803748e <_printf_float+0x276>
 8037424:	4a37      	ldr	r2, [pc, #220]	; (8037504 <_printf_float+0x2ec>)
 8037426:	2301      	movs	r3, #1
 8037428:	4631      	mov	r1, r6
 803742a:	4628      	mov	r0, r5
 803742c:	47b8      	blx	r7
 803742e:	3001      	adds	r0, #1
 8037430:	f43f af51 	beq.w	80372d6 <_printf_float+0xbe>
 8037434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8037438:	429a      	cmp	r2, r3
 803743a:	db02      	blt.n	8037442 <_printf_float+0x22a>
 803743c:	6823      	ldr	r3, [r4, #0]
 803743e:	07d8      	lsls	r0, r3, #31
 8037440:	d510      	bpl.n	8037464 <_printf_float+0x24c>
 8037442:	ee18 3a10 	vmov	r3, s16
 8037446:	4652      	mov	r2, sl
 8037448:	4631      	mov	r1, r6
 803744a:	4628      	mov	r0, r5
 803744c:	47b8      	blx	r7
 803744e:	3001      	adds	r0, #1
 8037450:	f43f af41 	beq.w	80372d6 <_printf_float+0xbe>
 8037454:	f04f 0800 	mov.w	r8, #0
 8037458:	f104 091a 	add.w	r9, r4, #26
 803745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803745e:	3b01      	subs	r3, #1
 8037460:	4543      	cmp	r3, r8
 8037462:	dc09      	bgt.n	8037478 <_printf_float+0x260>
 8037464:	6823      	ldr	r3, [r4, #0]
 8037466:	079b      	lsls	r3, r3, #30
 8037468:	f100 8107 	bmi.w	803767a <_printf_float+0x462>
 803746c:	68e0      	ldr	r0, [r4, #12]
 803746e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8037470:	4298      	cmp	r0, r3
 8037472:	bfb8      	it	lt
 8037474:	4618      	movlt	r0, r3
 8037476:	e730      	b.n	80372da <_printf_float+0xc2>
 8037478:	2301      	movs	r3, #1
 803747a:	464a      	mov	r2, r9
 803747c:	4631      	mov	r1, r6
 803747e:	4628      	mov	r0, r5
 8037480:	47b8      	blx	r7
 8037482:	3001      	adds	r0, #1
 8037484:	f43f af27 	beq.w	80372d6 <_printf_float+0xbe>
 8037488:	f108 0801 	add.w	r8, r8, #1
 803748c:	e7e6      	b.n	803745c <_printf_float+0x244>
 803748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8037490:	2b00      	cmp	r3, #0
 8037492:	dc39      	bgt.n	8037508 <_printf_float+0x2f0>
 8037494:	4a1b      	ldr	r2, [pc, #108]	; (8037504 <_printf_float+0x2ec>)
 8037496:	2301      	movs	r3, #1
 8037498:	4631      	mov	r1, r6
 803749a:	4628      	mov	r0, r5
 803749c:	47b8      	blx	r7
 803749e:	3001      	adds	r0, #1
 80374a0:	f43f af19 	beq.w	80372d6 <_printf_float+0xbe>
 80374a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80374a8:	4313      	orrs	r3, r2
 80374aa:	d102      	bne.n	80374b2 <_printf_float+0x29a>
 80374ac:	6823      	ldr	r3, [r4, #0]
 80374ae:	07d9      	lsls	r1, r3, #31
 80374b0:	d5d8      	bpl.n	8037464 <_printf_float+0x24c>
 80374b2:	ee18 3a10 	vmov	r3, s16
 80374b6:	4652      	mov	r2, sl
 80374b8:	4631      	mov	r1, r6
 80374ba:	4628      	mov	r0, r5
 80374bc:	47b8      	blx	r7
 80374be:	3001      	adds	r0, #1
 80374c0:	f43f af09 	beq.w	80372d6 <_printf_float+0xbe>
 80374c4:	f04f 0900 	mov.w	r9, #0
 80374c8:	f104 0a1a 	add.w	sl, r4, #26
 80374cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80374ce:	425b      	negs	r3, r3
 80374d0:	454b      	cmp	r3, r9
 80374d2:	dc01      	bgt.n	80374d8 <_printf_float+0x2c0>
 80374d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80374d6:	e792      	b.n	80373fe <_printf_float+0x1e6>
 80374d8:	2301      	movs	r3, #1
 80374da:	4652      	mov	r2, sl
 80374dc:	4631      	mov	r1, r6
 80374de:	4628      	mov	r0, r5
 80374e0:	47b8      	blx	r7
 80374e2:	3001      	adds	r0, #1
 80374e4:	f43f aef7 	beq.w	80372d6 <_printf_float+0xbe>
 80374e8:	f109 0901 	add.w	r9, r9, #1
 80374ec:	e7ee      	b.n	80374cc <_printf_float+0x2b4>
 80374ee:	bf00      	nop
 80374f0:	7fefffff 	.word	0x7fefffff
 80374f4:	0803aa91 	.word	0x0803aa91
 80374f8:	0803aa95 	.word	0x0803aa95
 80374fc:	0803aa99 	.word	0x0803aa99
 8037500:	0803aa9d 	.word	0x0803aa9d
 8037504:	0803aaa1 	.word	0x0803aaa1
 8037508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803750a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 803750c:	429a      	cmp	r2, r3
 803750e:	bfa8      	it	ge
 8037510:	461a      	movge	r2, r3
 8037512:	2a00      	cmp	r2, #0
 8037514:	4691      	mov	r9, r2
 8037516:	dc37      	bgt.n	8037588 <_printf_float+0x370>
 8037518:	f04f 0b00 	mov.w	fp, #0
 803751c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8037520:	f104 021a 	add.w	r2, r4, #26
 8037524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8037526:	9305      	str	r3, [sp, #20]
 8037528:	eba3 0309 	sub.w	r3, r3, r9
 803752c:	455b      	cmp	r3, fp
 803752e:	dc33      	bgt.n	8037598 <_printf_float+0x380>
 8037530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8037534:	429a      	cmp	r2, r3
 8037536:	db3b      	blt.n	80375b0 <_printf_float+0x398>
 8037538:	6823      	ldr	r3, [r4, #0]
 803753a:	07da      	lsls	r2, r3, #31
 803753c:	d438      	bmi.n	80375b0 <_printf_float+0x398>
 803753e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8037542:	eba2 0903 	sub.w	r9, r2, r3
 8037546:	9b05      	ldr	r3, [sp, #20]
 8037548:	1ad2      	subs	r2, r2, r3
 803754a:	4591      	cmp	r9, r2
 803754c:	bfa8      	it	ge
 803754e:	4691      	movge	r9, r2
 8037550:	f1b9 0f00 	cmp.w	r9, #0
 8037554:	dc35      	bgt.n	80375c2 <_printf_float+0x3aa>
 8037556:	f04f 0800 	mov.w	r8, #0
 803755a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803755e:	f104 0a1a 	add.w	sl, r4, #26
 8037562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8037566:	1a9b      	subs	r3, r3, r2
 8037568:	eba3 0309 	sub.w	r3, r3, r9
 803756c:	4543      	cmp	r3, r8
 803756e:	f77f af79 	ble.w	8037464 <_printf_float+0x24c>
 8037572:	2301      	movs	r3, #1
 8037574:	4652      	mov	r2, sl
 8037576:	4631      	mov	r1, r6
 8037578:	4628      	mov	r0, r5
 803757a:	47b8      	blx	r7
 803757c:	3001      	adds	r0, #1
 803757e:	f43f aeaa 	beq.w	80372d6 <_printf_float+0xbe>
 8037582:	f108 0801 	add.w	r8, r8, #1
 8037586:	e7ec      	b.n	8037562 <_printf_float+0x34a>
 8037588:	4613      	mov	r3, r2
 803758a:	4631      	mov	r1, r6
 803758c:	4642      	mov	r2, r8
 803758e:	4628      	mov	r0, r5
 8037590:	47b8      	blx	r7
 8037592:	3001      	adds	r0, #1
 8037594:	d1c0      	bne.n	8037518 <_printf_float+0x300>
 8037596:	e69e      	b.n	80372d6 <_printf_float+0xbe>
 8037598:	2301      	movs	r3, #1
 803759a:	4631      	mov	r1, r6
 803759c:	4628      	mov	r0, r5
 803759e:	9205      	str	r2, [sp, #20]
 80375a0:	47b8      	blx	r7
 80375a2:	3001      	adds	r0, #1
 80375a4:	f43f ae97 	beq.w	80372d6 <_printf_float+0xbe>
 80375a8:	9a05      	ldr	r2, [sp, #20]
 80375aa:	f10b 0b01 	add.w	fp, fp, #1
 80375ae:	e7b9      	b.n	8037524 <_printf_float+0x30c>
 80375b0:	ee18 3a10 	vmov	r3, s16
 80375b4:	4652      	mov	r2, sl
 80375b6:	4631      	mov	r1, r6
 80375b8:	4628      	mov	r0, r5
 80375ba:	47b8      	blx	r7
 80375bc:	3001      	adds	r0, #1
 80375be:	d1be      	bne.n	803753e <_printf_float+0x326>
 80375c0:	e689      	b.n	80372d6 <_printf_float+0xbe>
 80375c2:	9a05      	ldr	r2, [sp, #20]
 80375c4:	464b      	mov	r3, r9
 80375c6:	4442      	add	r2, r8
 80375c8:	4631      	mov	r1, r6
 80375ca:	4628      	mov	r0, r5
 80375cc:	47b8      	blx	r7
 80375ce:	3001      	adds	r0, #1
 80375d0:	d1c1      	bne.n	8037556 <_printf_float+0x33e>
 80375d2:	e680      	b.n	80372d6 <_printf_float+0xbe>
 80375d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80375d6:	2a01      	cmp	r2, #1
 80375d8:	dc01      	bgt.n	80375de <_printf_float+0x3c6>
 80375da:	07db      	lsls	r3, r3, #31
 80375dc:	d53a      	bpl.n	8037654 <_printf_float+0x43c>
 80375de:	2301      	movs	r3, #1
 80375e0:	4642      	mov	r2, r8
 80375e2:	4631      	mov	r1, r6
 80375e4:	4628      	mov	r0, r5
 80375e6:	47b8      	blx	r7
 80375e8:	3001      	adds	r0, #1
 80375ea:	f43f ae74 	beq.w	80372d6 <_printf_float+0xbe>
 80375ee:	ee18 3a10 	vmov	r3, s16
 80375f2:	4652      	mov	r2, sl
 80375f4:	4631      	mov	r1, r6
 80375f6:	4628      	mov	r0, r5
 80375f8:	47b8      	blx	r7
 80375fa:	3001      	adds	r0, #1
 80375fc:	f43f ae6b 	beq.w	80372d6 <_printf_float+0xbe>
 8037600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8037604:	2200      	movs	r2, #0
 8037606:	2300      	movs	r3, #0
 8037608:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 803760c:	f7f9 fa6c 	bl	8030ae8 <__aeabi_dcmpeq>
 8037610:	b9d8      	cbnz	r0, 803764a <_printf_float+0x432>
 8037612:	f10a 33ff 	add.w	r3, sl, #4294967295
 8037616:	f108 0201 	add.w	r2, r8, #1
 803761a:	4631      	mov	r1, r6
 803761c:	4628      	mov	r0, r5
 803761e:	47b8      	blx	r7
 8037620:	3001      	adds	r0, #1
 8037622:	d10e      	bne.n	8037642 <_printf_float+0x42a>
 8037624:	e657      	b.n	80372d6 <_printf_float+0xbe>
 8037626:	2301      	movs	r3, #1
 8037628:	4652      	mov	r2, sl
 803762a:	4631      	mov	r1, r6
 803762c:	4628      	mov	r0, r5
 803762e:	47b8      	blx	r7
 8037630:	3001      	adds	r0, #1
 8037632:	f43f ae50 	beq.w	80372d6 <_printf_float+0xbe>
 8037636:	f108 0801 	add.w	r8, r8, #1
 803763a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803763c:	3b01      	subs	r3, #1
 803763e:	4543      	cmp	r3, r8
 8037640:	dcf1      	bgt.n	8037626 <_printf_float+0x40e>
 8037642:	464b      	mov	r3, r9
 8037644:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8037648:	e6da      	b.n	8037400 <_printf_float+0x1e8>
 803764a:	f04f 0800 	mov.w	r8, #0
 803764e:	f104 0a1a 	add.w	sl, r4, #26
 8037652:	e7f2      	b.n	803763a <_printf_float+0x422>
 8037654:	2301      	movs	r3, #1
 8037656:	4642      	mov	r2, r8
 8037658:	e7df      	b.n	803761a <_printf_float+0x402>
 803765a:	2301      	movs	r3, #1
 803765c:	464a      	mov	r2, r9
 803765e:	4631      	mov	r1, r6
 8037660:	4628      	mov	r0, r5
 8037662:	47b8      	blx	r7
 8037664:	3001      	adds	r0, #1
 8037666:	f43f ae36 	beq.w	80372d6 <_printf_float+0xbe>
 803766a:	f108 0801 	add.w	r8, r8, #1
 803766e:	68e3      	ldr	r3, [r4, #12]
 8037670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8037672:	1a5b      	subs	r3, r3, r1
 8037674:	4543      	cmp	r3, r8
 8037676:	dcf0      	bgt.n	803765a <_printf_float+0x442>
 8037678:	e6f8      	b.n	803746c <_printf_float+0x254>
 803767a:	f04f 0800 	mov.w	r8, #0
 803767e:	f104 0919 	add.w	r9, r4, #25
 8037682:	e7f4      	b.n	803766e <_printf_float+0x456>

08037684 <_printf_common>:
 8037684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037688:	4616      	mov	r6, r2
 803768a:	4699      	mov	r9, r3
 803768c:	688a      	ldr	r2, [r1, #8]
 803768e:	690b      	ldr	r3, [r1, #16]
 8037690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8037694:	4293      	cmp	r3, r2
 8037696:	bfb8      	it	lt
 8037698:	4613      	movlt	r3, r2
 803769a:	6033      	str	r3, [r6, #0]
 803769c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80376a0:	4607      	mov	r7, r0
 80376a2:	460c      	mov	r4, r1
 80376a4:	b10a      	cbz	r2, 80376aa <_printf_common+0x26>
 80376a6:	3301      	adds	r3, #1
 80376a8:	6033      	str	r3, [r6, #0]
 80376aa:	6823      	ldr	r3, [r4, #0]
 80376ac:	0699      	lsls	r1, r3, #26
 80376ae:	bf42      	ittt	mi
 80376b0:	6833      	ldrmi	r3, [r6, #0]
 80376b2:	3302      	addmi	r3, #2
 80376b4:	6033      	strmi	r3, [r6, #0]
 80376b6:	6825      	ldr	r5, [r4, #0]
 80376b8:	f015 0506 	ands.w	r5, r5, #6
 80376bc:	d106      	bne.n	80376cc <_printf_common+0x48>
 80376be:	f104 0a19 	add.w	sl, r4, #25
 80376c2:	68e3      	ldr	r3, [r4, #12]
 80376c4:	6832      	ldr	r2, [r6, #0]
 80376c6:	1a9b      	subs	r3, r3, r2
 80376c8:	42ab      	cmp	r3, r5
 80376ca:	dc26      	bgt.n	803771a <_printf_common+0x96>
 80376cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80376d0:	1e13      	subs	r3, r2, #0
 80376d2:	6822      	ldr	r2, [r4, #0]
 80376d4:	bf18      	it	ne
 80376d6:	2301      	movne	r3, #1
 80376d8:	0692      	lsls	r2, r2, #26
 80376da:	d42b      	bmi.n	8037734 <_printf_common+0xb0>
 80376dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80376e0:	4649      	mov	r1, r9
 80376e2:	4638      	mov	r0, r7
 80376e4:	47c0      	blx	r8
 80376e6:	3001      	adds	r0, #1
 80376e8:	d01e      	beq.n	8037728 <_printf_common+0xa4>
 80376ea:	6823      	ldr	r3, [r4, #0]
 80376ec:	6922      	ldr	r2, [r4, #16]
 80376ee:	f003 0306 	and.w	r3, r3, #6
 80376f2:	2b04      	cmp	r3, #4
 80376f4:	bf02      	ittt	eq
 80376f6:	68e5      	ldreq	r5, [r4, #12]
 80376f8:	6833      	ldreq	r3, [r6, #0]
 80376fa:	1aed      	subeq	r5, r5, r3
 80376fc:	68a3      	ldr	r3, [r4, #8]
 80376fe:	bf0c      	ite	eq
 8037700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8037704:	2500      	movne	r5, #0
 8037706:	4293      	cmp	r3, r2
 8037708:	bfc4      	itt	gt
 803770a:	1a9b      	subgt	r3, r3, r2
 803770c:	18ed      	addgt	r5, r5, r3
 803770e:	2600      	movs	r6, #0
 8037710:	341a      	adds	r4, #26
 8037712:	42b5      	cmp	r5, r6
 8037714:	d11a      	bne.n	803774c <_printf_common+0xc8>
 8037716:	2000      	movs	r0, #0
 8037718:	e008      	b.n	803772c <_printf_common+0xa8>
 803771a:	2301      	movs	r3, #1
 803771c:	4652      	mov	r2, sl
 803771e:	4649      	mov	r1, r9
 8037720:	4638      	mov	r0, r7
 8037722:	47c0      	blx	r8
 8037724:	3001      	adds	r0, #1
 8037726:	d103      	bne.n	8037730 <_printf_common+0xac>
 8037728:	f04f 30ff 	mov.w	r0, #4294967295
 803772c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037730:	3501      	adds	r5, #1
 8037732:	e7c6      	b.n	80376c2 <_printf_common+0x3e>
 8037734:	18e1      	adds	r1, r4, r3
 8037736:	1c5a      	adds	r2, r3, #1
 8037738:	2030      	movs	r0, #48	; 0x30
 803773a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803773e:	4422      	add	r2, r4
 8037740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8037744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8037748:	3302      	adds	r3, #2
 803774a:	e7c7      	b.n	80376dc <_printf_common+0x58>
 803774c:	2301      	movs	r3, #1
 803774e:	4622      	mov	r2, r4
 8037750:	4649      	mov	r1, r9
 8037752:	4638      	mov	r0, r7
 8037754:	47c0      	blx	r8
 8037756:	3001      	adds	r0, #1
 8037758:	d0e6      	beq.n	8037728 <_printf_common+0xa4>
 803775a:	3601      	adds	r6, #1
 803775c:	e7d9      	b.n	8037712 <_printf_common+0x8e>
	...

08037760 <_printf_i>:
 8037760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8037764:	7e0f      	ldrb	r7, [r1, #24]
 8037766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8037768:	2f78      	cmp	r7, #120	; 0x78
 803776a:	4691      	mov	r9, r2
 803776c:	4680      	mov	r8, r0
 803776e:	460c      	mov	r4, r1
 8037770:	469a      	mov	sl, r3
 8037772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8037776:	d807      	bhi.n	8037788 <_printf_i+0x28>
 8037778:	2f62      	cmp	r7, #98	; 0x62
 803777a:	d80a      	bhi.n	8037792 <_printf_i+0x32>
 803777c:	2f00      	cmp	r7, #0
 803777e:	f000 80d4 	beq.w	803792a <_printf_i+0x1ca>
 8037782:	2f58      	cmp	r7, #88	; 0x58
 8037784:	f000 80c0 	beq.w	8037908 <_printf_i+0x1a8>
 8037788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803778c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8037790:	e03a      	b.n	8037808 <_printf_i+0xa8>
 8037792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8037796:	2b15      	cmp	r3, #21
 8037798:	d8f6      	bhi.n	8037788 <_printf_i+0x28>
 803779a:	a101      	add	r1, pc, #4	; (adr r1, 80377a0 <_printf_i+0x40>)
 803779c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80377a0:	080377f9 	.word	0x080377f9
 80377a4:	0803780d 	.word	0x0803780d
 80377a8:	08037789 	.word	0x08037789
 80377ac:	08037789 	.word	0x08037789
 80377b0:	08037789 	.word	0x08037789
 80377b4:	08037789 	.word	0x08037789
 80377b8:	0803780d 	.word	0x0803780d
 80377bc:	08037789 	.word	0x08037789
 80377c0:	08037789 	.word	0x08037789
 80377c4:	08037789 	.word	0x08037789
 80377c8:	08037789 	.word	0x08037789
 80377cc:	08037911 	.word	0x08037911
 80377d0:	08037839 	.word	0x08037839
 80377d4:	080378cb 	.word	0x080378cb
 80377d8:	08037789 	.word	0x08037789
 80377dc:	08037789 	.word	0x08037789
 80377e0:	08037933 	.word	0x08037933
 80377e4:	08037789 	.word	0x08037789
 80377e8:	08037839 	.word	0x08037839
 80377ec:	08037789 	.word	0x08037789
 80377f0:	08037789 	.word	0x08037789
 80377f4:	080378d3 	.word	0x080378d3
 80377f8:	682b      	ldr	r3, [r5, #0]
 80377fa:	1d1a      	adds	r2, r3, #4
 80377fc:	681b      	ldr	r3, [r3, #0]
 80377fe:	602a      	str	r2, [r5, #0]
 8037800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8037804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8037808:	2301      	movs	r3, #1
 803780a:	e09f      	b.n	803794c <_printf_i+0x1ec>
 803780c:	6820      	ldr	r0, [r4, #0]
 803780e:	682b      	ldr	r3, [r5, #0]
 8037810:	0607      	lsls	r7, r0, #24
 8037812:	f103 0104 	add.w	r1, r3, #4
 8037816:	6029      	str	r1, [r5, #0]
 8037818:	d501      	bpl.n	803781e <_printf_i+0xbe>
 803781a:	681e      	ldr	r6, [r3, #0]
 803781c:	e003      	b.n	8037826 <_printf_i+0xc6>
 803781e:	0646      	lsls	r6, r0, #25
 8037820:	d5fb      	bpl.n	803781a <_printf_i+0xba>
 8037822:	f9b3 6000 	ldrsh.w	r6, [r3]
 8037826:	2e00      	cmp	r6, #0
 8037828:	da03      	bge.n	8037832 <_printf_i+0xd2>
 803782a:	232d      	movs	r3, #45	; 0x2d
 803782c:	4276      	negs	r6, r6
 803782e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8037832:	485a      	ldr	r0, [pc, #360]	; (803799c <_printf_i+0x23c>)
 8037834:	230a      	movs	r3, #10
 8037836:	e012      	b.n	803785e <_printf_i+0xfe>
 8037838:	682b      	ldr	r3, [r5, #0]
 803783a:	6820      	ldr	r0, [r4, #0]
 803783c:	1d19      	adds	r1, r3, #4
 803783e:	6029      	str	r1, [r5, #0]
 8037840:	0605      	lsls	r5, r0, #24
 8037842:	d501      	bpl.n	8037848 <_printf_i+0xe8>
 8037844:	681e      	ldr	r6, [r3, #0]
 8037846:	e002      	b.n	803784e <_printf_i+0xee>
 8037848:	0641      	lsls	r1, r0, #25
 803784a:	d5fb      	bpl.n	8037844 <_printf_i+0xe4>
 803784c:	881e      	ldrh	r6, [r3, #0]
 803784e:	4853      	ldr	r0, [pc, #332]	; (803799c <_printf_i+0x23c>)
 8037850:	2f6f      	cmp	r7, #111	; 0x6f
 8037852:	bf0c      	ite	eq
 8037854:	2308      	moveq	r3, #8
 8037856:	230a      	movne	r3, #10
 8037858:	2100      	movs	r1, #0
 803785a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803785e:	6865      	ldr	r5, [r4, #4]
 8037860:	60a5      	str	r5, [r4, #8]
 8037862:	2d00      	cmp	r5, #0
 8037864:	bfa2      	ittt	ge
 8037866:	6821      	ldrge	r1, [r4, #0]
 8037868:	f021 0104 	bicge.w	r1, r1, #4
 803786c:	6021      	strge	r1, [r4, #0]
 803786e:	b90e      	cbnz	r6, 8037874 <_printf_i+0x114>
 8037870:	2d00      	cmp	r5, #0
 8037872:	d04b      	beq.n	803790c <_printf_i+0x1ac>
 8037874:	4615      	mov	r5, r2
 8037876:	fbb6 f1f3 	udiv	r1, r6, r3
 803787a:	fb03 6711 	mls	r7, r3, r1, r6
 803787e:	5dc7      	ldrb	r7, [r0, r7]
 8037880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8037884:	4637      	mov	r7, r6
 8037886:	42bb      	cmp	r3, r7
 8037888:	460e      	mov	r6, r1
 803788a:	d9f4      	bls.n	8037876 <_printf_i+0x116>
 803788c:	2b08      	cmp	r3, #8
 803788e:	d10b      	bne.n	80378a8 <_printf_i+0x148>
 8037890:	6823      	ldr	r3, [r4, #0]
 8037892:	07de      	lsls	r6, r3, #31
 8037894:	d508      	bpl.n	80378a8 <_printf_i+0x148>
 8037896:	6923      	ldr	r3, [r4, #16]
 8037898:	6861      	ldr	r1, [r4, #4]
 803789a:	4299      	cmp	r1, r3
 803789c:	bfde      	ittt	le
 803789e:	2330      	movle	r3, #48	; 0x30
 80378a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80378a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80378a8:	1b52      	subs	r2, r2, r5
 80378aa:	6122      	str	r2, [r4, #16]
 80378ac:	f8cd a000 	str.w	sl, [sp]
 80378b0:	464b      	mov	r3, r9
 80378b2:	aa03      	add	r2, sp, #12
 80378b4:	4621      	mov	r1, r4
 80378b6:	4640      	mov	r0, r8
 80378b8:	f7ff fee4 	bl	8037684 <_printf_common>
 80378bc:	3001      	adds	r0, #1
 80378be:	d14a      	bne.n	8037956 <_printf_i+0x1f6>
 80378c0:	f04f 30ff 	mov.w	r0, #4294967295
 80378c4:	b004      	add	sp, #16
 80378c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80378ca:	6823      	ldr	r3, [r4, #0]
 80378cc:	f043 0320 	orr.w	r3, r3, #32
 80378d0:	6023      	str	r3, [r4, #0]
 80378d2:	4833      	ldr	r0, [pc, #204]	; (80379a0 <_printf_i+0x240>)
 80378d4:	2778      	movs	r7, #120	; 0x78
 80378d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80378da:	6823      	ldr	r3, [r4, #0]
 80378dc:	6829      	ldr	r1, [r5, #0]
 80378de:	061f      	lsls	r7, r3, #24
 80378e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80378e4:	d402      	bmi.n	80378ec <_printf_i+0x18c>
 80378e6:	065f      	lsls	r7, r3, #25
 80378e8:	bf48      	it	mi
 80378ea:	b2b6      	uxthmi	r6, r6
 80378ec:	07df      	lsls	r7, r3, #31
 80378ee:	bf48      	it	mi
 80378f0:	f043 0320 	orrmi.w	r3, r3, #32
 80378f4:	6029      	str	r1, [r5, #0]
 80378f6:	bf48      	it	mi
 80378f8:	6023      	strmi	r3, [r4, #0]
 80378fa:	b91e      	cbnz	r6, 8037904 <_printf_i+0x1a4>
 80378fc:	6823      	ldr	r3, [r4, #0]
 80378fe:	f023 0320 	bic.w	r3, r3, #32
 8037902:	6023      	str	r3, [r4, #0]
 8037904:	2310      	movs	r3, #16
 8037906:	e7a7      	b.n	8037858 <_printf_i+0xf8>
 8037908:	4824      	ldr	r0, [pc, #144]	; (803799c <_printf_i+0x23c>)
 803790a:	e7e4      	b.n	80378d6 <_printf_i+0x176>
 803790c:	4615      	mov	r5, r2
 803790e:	e7bd      	b.n	803788c <_printf_i+0x12c>
 8037910:	682b      	ldr	r3, [r5, #0]
 8037912:	6826      	ldr	r6, [r4, #0]
 8037914:	6961      	ldr	r1, [r4, #20]
 8037916:	1d18      	adds	r0, r3, #4
 8037918:	6028      	str	r0, [r5, #0]
 803791a:	0635      	lsls	r5, r6, #24
 803791c:	681b      	ldr	r3, [r3, #0]
 803791e:	d501      	bpl.n	8037924 <_printf_i+0x1c4>
 8037920:	6019      	str	r1, [r3, #0]
 8037922:	e002      	b.n	803792a <_printf_i+0x1ca>
 8037924:	0670      	lsls	r0, r6, #25
 8037926:	d5fb      	bpl.n	8037920 <_printf_i+0x1c0>
 8037928:	8019      	strh	r1, [r3, #0]
 803792a:	2300      	movs	r3, #0
 803792c:	6123      	str	r3, [r4, #16]
 803792e:	4615      	mov	r5, r2
 8037930:	e7bc      	b.n	80378ac <_printf_i+0x14c>
 8037932:	682b      	ldr	r3, [r5, #0]
 8037934:	1d1a      	adds	r2, r3, #4
 8037936:	602a      	str	r2, [r5, #0]
 8037938:	681d      	ldr	r5, [r3, #0]
 803793a:	6862      	ldr	r2, [r4, #4]
 803793c:	2100      	movs	r1, #0
 803793e:	4628      	mov	r0, r5
 8037940:	f7f8 fc56 	bl	80301f0 <memchr>
 8037944:	b108      	cbz	r0, 803794a <_printf_i+0x1ea>
 8037946:	1b40      	subs	r0, r0, r5
 8037948:	6060      	str	r0, [r4, #4]
 803794a:	6863      	ldr	r3, [r4, #4]
 803794c:	6123      	str	r3, [r4, #16]
 803794e:	2300      	movs	r3, #0
 8037950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8037954:	e7aa      	b.n	80378ac <_printf_i+0x14c>
 8037956:	6923      	ldr	r3, [r4, #16]
 8037958:	462a      	mov	r2, r5
 803795a:	4649      	mov	r1, r9
 803795c:	4640      	mov	r0, r8
 803795e:	47d0      	blx	sl
 8037960:	3001      	adds	r0, #1
 8037962:	d0ad      	beq.n	80378c0 <_printf_i+0x160>
 8037964:	6823      	ldr	r3, [r4, #0]
 8037966:	079b      	lsls	r3, r3, #30
 8037968:	d413      	bmi.n	8037992 <_printf_i+0x232>
 803796a:	68e0      	ldr	r0, [r4, #12]
 803796c:	9b03      	ldr	r3, [sp, #12]
 803796e:	4298      	cmp	r0, r3
 8037970:	bfb8      	it	lt
 8037972:	4618      	movlt	r0, r3
 8037974:	e7a6      	b.n	80378c4 <_printf_i+0x164>
 8037976:	2301      	movs	r3, #1
 8037978:	4632      	mov	r2, r6
 803797a:	4649      	mov	r1, r9
 803797c:	4640      	mov	r0, r8
 803797e:	47d0      	blx	sl
 8037980:	3001      	adds	r0, #1
 8037982:	d09d      	beq.n	80378c0 <_printf_i+0x160>
 8037984:	3501      	adds	r5, #1
 8037986:	68e3      	ldr	r3, [r4, #12]
 8037988:	9903      	ldr	r1, [sp, #12]
 803798a:	1a5b      	subs	r3, r3, r1
 803798c:	42ab      	cmp	r3, r5
 803798e:	dcf2      	bgt.n	8037976 <_printf_i+0x216>
 8037990:	e7eb      	b.n	803796a <_printf_i+0x20a>
 8037992:	2500      	movs	r5, #0
 8037994:	f104 0619 	add.w	r6, r4, #25
 8037998:	e7f5      	b.n	8037986 <_printf_i+0x226>
 803799a:	bf00      	nop
 803799c:	0803aaa3 	.word	0x0803aaa3
 80379a0:	0803aab4 	.word	0x0803aab4

080379a4 <std>:
 80379a4:	2300      	movs	r3, #0
 80379a6:	b510      	push	{r4, lr}
 80379a8:	4604      	mov	r4, r0
 80379aa:	e9c0 3300 	strd	r3, r3, [r0]
 80379ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80379b2:	6083      	str	r3, [r0, #8]
 80379b4:	8181      	strh	r1, [r0, #12]
 80379b6:	6643      	str	r3, [r0, #100]	; 0x64
 80379b8:	81c2      	strh	r2, [r0, #14]
 80379ba:	6183      	str	r3, [r0, #24]
 80379bc:	4619      	mov	r1, r3
 80379be:	2208      	movs	r2, #8
 80379c0:	305c      	adds	r0, #92	; 0x5c
 80379c2:	f000 f902 	bl	8037bca <memset>
 80379c6:	4b05      	ldr	r3, [pc, #20]	; (80379dc <std+0x38>)
 80379c8:	6263      	str	r3, [r4, #36]	; 0x24
 80379ca:	4b05      	ldr	r3, [pc, #20]	; (80379e0 <std+0x3c>)
 80379cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80379ce:	4b05      	ldr	r3, [pc, #20]	; (80379e4 <std+0x40>)
 80379d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80379d2:	4b05      	ldr	r3, [pc, #20]	; (80379e8 <std+0x44>)
 80379d4:	6224      	str	r4, [r4, #32]
 80379d6:	6323      	str	r3, [r4, #48]	; 0x30
 80379d8:	bd10      	pop	{r4, pc}
 80379da:	bf00      	nop
 80379dc:	08037b45 	.word	0x08037b45
 80379e0:	08037b67 	.word	0x08037b67
 80379e4:	08037b9f 	.word	0x08037b9f
 80379e8:	08037bc3 	.word	0x08037bc3

080379ec <stdio_exit_handler>:
 80379ec:	4a02      	ldr	r2, [pc, #8]	; (80379f8 <stdio_exit_handler+0xc>)
 80379ee:	4903      	ldr	r1, [pc, #12]	; (80379fc <stdio_exit_handler+0x10>)
 80379f0:	4803      	ldr	r0, [pc, #12]	; (8037a00 <stdio_exit_handler+0x14>)
 80379f2:	f000 b869 	b.w	8037ac8 <_fwalk_sglue>
 80379f6:	bf00      	nop
 80379f8:	20000024 	.word	0x20000024
 80379fc:	08039f49 	.word	0x08039f49
 8037a00:	2000019c 	.word	0x2000019c

08037a04 <cleanup_stdio>:
 8037a04:	6841      	ldr	r1, [r0, #4]
 8037a06:	4b0c      	ldr	r3, [pc, #48]	; (8037a38 <cleanup_stdio+0x34>)
 8037a08:	4299      	cmp	r1, r3
 8037a0a:	b510      	push	{r4, lr}
 8037a0c:	4604      	mov	r4, r0
 8037a0e:	d001      	beq.n	8037a14 <cleanup_stdio+0x10>
 8037a10:	f002 fa9a 	bl	8039f48 <_fflush_r>
 8037a14:	68a1      	ldr	r1, [r4, #8]
 8037a16:	4b09      	ldr	r3, [pc, #36]	; (8037a3c <cleanup_stdio+0x38>)
 8037a18:	4299      	cmp	r1, r3
 8037a1a:	d002      	beq.n	8037a22 <cleanup_stdio+0x1e>
 8037a1c:	4620      	mov	r0, r4
 8037a1e:	f002 fa93 	bl	8039f48 <_fflush_r>
 8037a22:	68e1      	ldr	r1, [r4, #12]
 8037a24:	4b06      	ldr	r3, [pc, #24]	; (8037a40 <cleanup_stdio+0x3c>)
 8037a26:	4299      	cmp	r1, r3
 8037a28:	d004      	beq.n	8037a34 <cleanup_stdio+0x30>
 8037a2a:	4620      	mov	r0, r4
 8037a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037a30:	f002 ba8a 	b.w	8039f48 <_fflush_r>
 8037a34:	bd10      	pop	{r4, pc}
 8037a36:	bf00      	nop
 8037a38:	2000cbf0 	.word	0x2000cbf0
 8037a3c:	2000cc58 	.word	0x2000cc58
 8037a40:	2000ccc0 	.word	0x2000ccc0

08037a44 <global_stdio_init.part.0>:
 8037a44:	b510      	push	{r4, lr}
 8037a46:	4b0b      	ldr	r3, [pc, #44]	; (8037a74 <global_stdio_init.part.0+0x30>)
 8037a48:	4c0b      	ldr	r4, [pc, #44]	; (8037a78 <global_stdio_init.part.0+0x34>)
 8037a4a:	4a0c      	ldr	r2, [pc, #48]	; (8037a7c <global_stdio_init.part.0+0x38>)
 8037a4c:	601a      	str	r2, [r3, #0]
 8037a4e:	4620      	mov	r0, r4
 8037a50:	2200      	movs	r2, #0
 8037a52:	2104      	movs	r1, #4
 8037a54:	f7ff ffa6 	bl	80379a4 <std>
 8037a58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8037a5c:	2201      	movs	r2, #1
 8037a5e:	2109      	movs	r1, #9
 8037a60:	f7ff ffa0 	bl	80379a4 <std>
 8037a64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8037a68:	2202      	movs	r2, #2
 8037a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037a6e:	2112      	movs	r1, #18
 8037a70:	f7ff bf98 	b.w	80379a4 <std>
 8037a74:	2000cd28 	.word	0x2000cd28
 8037a78:	2000cbf0 	.word	0x2000cbf0
 8037a7c:	080379ed 	.word	0x080379ed

08037a80 <__sfp_lock_acquire>:
 8037a80:	4801      	ldr	r0, [pc, #4]	; (8037a88 <__sfp_lock_acquire+0x8>)
 8037a82:	f000 b977 	b.w	8037d74 <__retarget_lock_acquire_recursive>
 8037a86:	bf00      	nop
 8037a88:	2000cd31 	.word	0x2000cd31

08037a8c <__sfp_lock_release>:
 8037a8c:	4801      	ldr	r0, [pc, #4]	; (8037a94 <__sfp_lock_release+0x8>)
 8037a8e:	f000 b972 	b.w	8037d76 <__retarget_lock_release_recursive>
 8037a92:	bf00      	nop
 8037a94:	2000cd31 	.word	0x2000cd31

08037a98 <__sinit>:
 8037a98:	b510      	push	{r4, lr}
 8037a9a:	4604      	mov	r4, r0
 8037a9c:	f7ff fff0 	bl	8037a80 <__sfp_lock_acquire>
 8037aa0:	6a23      	ldr	r3, [r4, #32]
 8037aa2:	b11b      	cbz	r3, 8037aac <__sinit+0x14>
 8037aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8037aa8:	f7ff bff0 	b.w	8037a8c <__sfp_lock_release>
 8037aac:	4b04      	ldr	r3, [pc, #16]	; (8037ac0 <__sinit+0x28>)
 8037aae:	6223      	str	r3, [r4, #32]
 8037ab0:	4b04      	ldr	r3, [pc, #16]	; (8037ac4 <__sinit+0x2c>)
 8037ab2:	681b      	ldr	r3, [r3, #0]
 8037ab4:	2b00      	cmp	r3, #0
 8037ab6:	d1f5      	bne.n	8037aa4 <__sinit+0xc>
 8037ab8:	f7ff ffc4 	bl	8037a44 <global_stdio_init.part.0>
 8037abc:	e7f2      	b.n	8037aa4 <__sinit+0xc>
 8037abe:	bf00      	nop
 8037ac0:	08037a05 	.word	0x08037a05
 8037ac4:	2000cd28 	.word	0x2000cd28

08037ac8 <_fwalk_sglue>:
 8037ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8037acc:	4607      	mov	r7, r0
 8037ace:	4688      	mov	r8, r1
 8037ad0:	4614      	mov	r4, r2
 8037ad2:	2600      	movs	r6, #0
 8037ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8037ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8037adc:	d505      	bpl.n	8037aea <_fwalk_sglue+0x22>
 8037ade:	6824      	ldr	r4, [r4, #0]
 8037ae0:	2c00      	cmp	r4, #0
 8037ae2:	d1f7      	bne.n	8037ad4 <_fwalk_sglue+0xc>
 8037ae4:	4630      	mov	r0, r6
 8037ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8037aea:	89ab      	ldrh	r3, [r5, #12]
 8037aec:	2b01      	cmp	r3, #1
 8037aee:	d907      	bls.n	8037b00 <_fwalk_sglue+0x38>
 8037af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8037af4:	3301      	adds	r3, #1
 8037af6:	d003      	beq.n	8037b00 <_fwalk_sglue+0x38>
 8037af8:	4629      	mov	r1, r5
 8037afa:	4638      	mov	r0, r7
 8037afc:	47c0      	blx	r8
 8037afe:	4306      	orrs	r6, r0
 8037b00:	3568      	adds	r5, #104	; 0x68
 8037b02:	e7e9      	b.n	8037ad8 <_fwalk_sglue+0x10>

08037b04 <siprintf>:
 8037b04:	b40e      	push	{r1, r2, r3}
 8037b06:	b500      	push	{lr}
 8037b08:	b09c      	sub	sp, #112	; 0x70
 8037b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8037b0c:	9002      	str	r0, [sp, #8]
 8037b0e:	9006      	str	r0, [sp, #24]
 8037b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8037b14:	4809      	ldr	r0, [pc, #36]	; (8037b3c <siprintf+0x38>)
 8037b16:	9107      	str	r1, [sp, #28]
 8037b18:	9104      	str	r1, [sp, #16]
 8037b1a:	4909      	ldr	r1, [pc, #36]	; (8037b40 <siprintf+0x3c>)
 8037b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8037b20:	9105      	str	r1, [sp, #20]
 8037b22:	6800      	ldr	r0, [r0, #0]
 8037b24:	9301      	str	r3, [sp, #4]
 8037b26:	a902      	add	r1, sp, #8
 8037b28:	f002 f88a 	bl	8039c40 <_svfiprintf_r>
 8037b2c:	9b02      	ldr	r3, [sp, #8]
 8037b2e:	2200      	movs	r2, #0
 8037b30:	701a      	strb	r2, [r3, #0]
 8037b32:	b01c      	add	sp, #112	; 0x70
 8037b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8037b38:	b003      	add	sp, #12
 8037b3a:	4770      	bx	lr
 8037b3c:	200001e8 	.word	0x200001e8
 8037b40:	ffff0208 	.word	0xffff0208

08037b44 <__sread>:
 8037b44:	b510      	push	{r4, lr}
 8037b46:	460c      	mov	r4, r1
 8037b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037b4c:	f000 f8b4 	bl	8037cb8 <_read_r>
 8037b50:	2800      	cmp	r0, #0
 8037b52:	bfab      	itete	ge
 8037b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8037b56:	89a3      	ldrhlt	r3, [r4, #12]
 8037b58:	181b      	addge	r3, r3, r0
 8037b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8037b5e:	bfac      	ite	ge
 8037b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8037b62:	81a3      	strhlt	r3, [r4, #12]
 8037b64:	bd10      	pop	{r4, pc}

08037b66 <__swrite>:
 8037b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037b6a:	461f      	mov	r7, r3
 8037b6c:	898b      	ldrh	r3, [r1, #12]
 8037b6e:	05db      	lsls	r3, r3, #23
 8037b70:	4605      	mov	r5, r0
 8037b72:	460c      	mov	r4, r1
 8037b74:	4616      	mov	r6, r2
 8037b76:	d505      	bpl.n	8037b84 <__swrite+0x1e>
 8037b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037b7c:	2302      	movs	r3, #2
 8037b7e:	2200      	movs	r2, #0
 8037b80:	f000 f888 	bl	8037c94 <_lseek_r>
 8037b84:	89a3      	ldrh	r3, [r4, #12]
 8037b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8037b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8037b8e:	81a3      	strh	r3, [r4, #12]
 8037b90:	4632      	mov	r2, r6
 8037b92:	463b      	mov	r3, r7
 8037b94:	4628      	mov	r0, r5
 8037b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8037b9a:	f000 b8af 	b.w	8037cfc <_write_r>

08037b9e <__sseek>:
 8037b9e:	b510      	push	{r4, lr}
 8037ba0:	460c      	mov	r4, r1
 8037ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037ba6:	f000 f875 	bl	8037c94 <_lseek_r>
 8037baa:	1c43      	adds	r3, r0, #1
 8037bac:	89a3      	ldrh	r3, [r4, #12]
 8037bae:	bf15      	itete	ne
 8037bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8037bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8037bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8037bba:	81a3      	strheq	r3, [r4, #12]
 8037bbc:	bf18      	it	ne
 8037bbe:	81a3      	strhne	r3, [r4, #12]
 8037bc0:	bd10      	pop	{r4, pc}

08037bc2 <__sclose>:
 8037bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8037bc6:	f000 b855 	b.w	8037c74 <_close_r>

08037bca <memset>:
 8037bca:	4402      	add	r2, r0
 8037bcc:	4603      	mov	r3, r0
 8037bce:	4293      	cmp	r3, r2
 8037bd0:	d100      	bne.n	8037bd4 <memset+0xa>
 8037bd2:	4770      	bx	lr
 8037bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8037bd8:	e7f9      	b.n	8037bce <memset+0x4>

08037bda <strchr>:
 8037bda:	b2c9      	uxtb	r1, r1
 8037bdc:	4603      	mov	r3, r0
 8037bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037be2:	b11a      	cbz	r2, 8037bec <strchr+0x12>
 8037be4:	428a      	cmp	r2, r1
 8037be6:	d1f9      	bne.n	8037bdc <strchr+0x2>
 8037be8:	4618      	mov	r0, r3
 8037bea:	4770      	bx	lr
 8037bec:	2900      	cmp	r1, #0
 8037bee:	bf18      	it	ne
 8037bf0:	2300      	movne	r3, #0
 8037bf2:	e7f9      	b.n	8037be8 <strchr+0xe>

08037bf4 <strncmp>:
 8037bf4:	b510      	push	{r4, lr}
 8037bf6:	b16a      	cbz	r2, 8037c14 <strncmp+0x20>
 8037bf8:	3901      	subs	r1, #1
 8037bfa:	1884      	adds	r4, r0, r2
 8037bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8037c00:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8037c04:	429a      	cmp	r2, r3
 8037c06:	d103      	bne.n	8037c10 <strncmp+0x1c>
 8037c08:	42a0      	cmp	r0, r4
 8037c0a:	d001      	beq.n	8037c10 <strncmp+0x1c>
 8037c0c:	2a00      	cmp	r2, #0
 8037c0e:	d1f5      	bne.n	8037bfc <strncmp+0x8>
 8037c10:	1ad0      	subs	r0, r2, r3
 8037c12:	bd10      	pop	{r4, pc}
 8037c14:	4610      	mov	r0, r2
 8037c16:	e7fc      	b.n	8037c12 <strncmp+0x1e>

08037c18 <strncpy>:
 8037c18:	b510      	push	{r4, lr}
 8037c1a:	3901      	subs	r1, #1
 8037c1c:	4603      	mov	r3, r0
 8037c1e:	b132      	cbz	r2, 8037c2e <strncpy+0x16>
 8037c20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8037c24:	f803 4b01 	strb.w	r4, [r3], #1
 8037c28:	3a01      	subs	r2, #1
 8037c2a:	2c00      	cmp	r4, #0
 8037c2c:	d1f7      	bne.n	8037c1e <strncpy+0x6>
 8037c2e:	441a      	add	r2, r3
 8037c30:	2100      	movs	r1, #0
 8037c32:	4293      	cmp	r3, r2
 8037c34:	d100      	bne.n	8037c38 <strncpy+0x20>
 8037c36:	bd10      	pop	{r4, pc}
 8037c38:	f803 1b01 	strb.w	r1, [r3], #1
 8037c3c:	e7f9      	b.n	8037c32 <strncpy+0x1a>

08037c3e <strstr>:
 8037c3e:	780a      	ldrb	r2, [r1, #0]
 8037c40:	b570      	push	{r4, r5, r6, lr}
 8037c42:	b96a      	cbnz	r2, 8037c60 <strstr+0x22>
 8037c44:	bd70      	pop	{r4, r5, r6, pc}
 8037c46:	429a      	cmp	r2, r3
 8037c48:	d109      	bne.n	8037c5e <strstr+0x20>
 8037c4a:	460c      	mov	r4, r1
 8037c4c:	4605      	mov	r5, r0
 8037c4e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8037c52:	2b00      	cmp	r3, #0
 8037c54:	d0f6      	beq.n	8037c44 <strstr+0x6>
 8037c56:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8037c5a:	429e      	cmp	r6, r3
 8037c5c:	d0f7      	beq.n	8037c4e <strstr+0x10>
 8037c5e:	3001      	adds	r0, #1
 8037c60:	7803      	ldrb	r3, [r0, #0]
 8037c62:	2b00      	cmp	r3, #0
 8037c64:	d1ef      	bne.n	8037c46 <strstr+0x8>
 8037c66:	4618      	mov	r0, r3
 8037c68:	e7ec      	b.n	8037c44 <strstr+0x6>
	...

08037c6c <_localeconv_r>:
 8037c6c:	4800      	ldr	r0, [pc, #0]	; (8037c70 <_localeconv_r+0x4>)
 8037c6e:	4770      	bx	lr
 8037c70:	20000120 	.word	0x20000120

08037c74 <_close_r>:
 8037c74:	b538      	push	{r3, r4, r5, lr}
 8037c76:	4d06      	ldr	r5, [pc, #24]	; (8037c90 <_close_r+0x1c>)
 8037c78:	2300      	movs	r3, #0
 8037c7a:	4604      	mov	r4, r0
 8037c7c:	4608      	mov	r0, r1
 8037c7e:	602b      	str	r3, [r5, #0]
 8037c80:	f7fb fcd1 	bl	8033626 <_close>
 8037c84:	1c43      	adds	r3, r0, #1
 8037c86:	d102      	bne.n	8037c8e <_close_r+0x1a>
 8037c88:	682b      	ldr	r3, [r5, #0]
 8037c8a:	b103      	cbz	r3, 8037c8e <_close_r+0x1a>
 8037c8c:	6023      	str	r3, [r4, #0]
 8037c8e:	bd38      	pop	{r3, r4, r5, pc}
 8037c90:	2000cd2c 	.word	0x2000cd2c

08037c94 <_lseek_r>:
 8037c94:	b538      	push	{r3, r4, r5, lr}
 8037c96:	4d07      	ldr	r5, [pc, #28]	; (8037cb4 <_lseek_r+0x20>)
 8037c98:	4604      	mov	r4, r0
 8037c9a:	4608      	mov	r0, r1
 8037c9c:	4611      	mov	r1, r2
 8037c9e:	2200      	movs	r2, #0
 8037ca0:	602a      	str	r2, [r5, #0]
 8037ca2:	461a      	mov	r2, r3
 8037ca4:	f7fb fce6 	bl	8033674 <_lseek>
 8037ca8:	1c43      	adds	r3, r0, #1
 8037caa:	d102      	bne.n	8037cb2 <_lseek_r+0x1e>
 8037cac:	682b      	ldr	r3, [r5, #0]
 8037cae:	b103      	cbz	r3, 8037cb2 <_lseek_r+0x1e>
 8037cb0:	6023      	str	r3, [r4, #0]
 8037cb2:	bd38      	pop	{r3, r4, r5, pc}
 8037cb4:	2000cd2c 	.word	0x2000cd2c

08037cb8 <_read_r>:
 8037cb8:	b538      	push	{r3, r4, r5, lr}
 8037cba:	4d07      	ldr	r5, [pc, #28]	; (8037cd8 <_read_r+0x20>)
 8037cbc:	4604      	mov	r4, r0
 8037cbe:	4608      	mov	r0, r1
 8037cc0:	4611      	mov	r1, r2
 8037cc2:	2200      	movs	r2, #0
 8037cc4:	602a      	str	r2, [r5, #0]
 8037cc6:	461a      	mov	r2, r3
 8037cc8:	f7fb fc74 	bl	80335b4 <_read>
 8037ccc:	1c43      	adds	r3, r0, #1
 8037cce:	d102      	bne.n	8037cd6 <_read_r+0x1e>
 8037cd0:	682b      	ldr	r3, [r5, #0]
 8037cd2:	b103      	cbz	r3, 8037cd6 <_read_r+0x1e>
 8037cd4:	6023      	str	r3, [r4, #0]
 8037cd6:	bd38      	pop	{r3, r4, r5, pc}
 8037cd8:	2000cd2c 	.word	0x2000cd2c

08037cdc <_sbrk_r>:
 8037cdc:	b538      	push	{r3, r4, r5, lr}
 8037cde:	4d06      	ldr	r5, [pc, #24]	; (8037cf8 <_sbrk_r+0x1c>)
 8037ce0:	2300      	movs	r3, #0
 8037ce2:	4604      	mov	r4, r0
 8037ce4:	4608      	mov	r0, r1
 8037ce6:	602b      	str	r3, [r5, #0]
 8037ce8:	f7fb fcd2 	bl	8033690 <_sbrk>
 8037cec:	1c43      	adds	r3, r0, #1
 8037cee:	d102      	bne.n	8037cf6 <_sbrk_r+0x1a>
 8037cf0:	682b      	ldr	r3, [r5, #0]
 8037cf2:	b103      	cbz	r3, 8037cf6 <_sbrk_r+0x1a>
 8037cf4:	6023      	str	r3, [r4, #0]
 8037cf6:	bd38      	pop	{r3, r4, r5, pc}
 8037cf8:	2000cd2c 	.word	0x2000cd2c

08037cfc <_write_r>:
 8037cfc:	b538      	push	{r3, r4, r5, lr}
 8037cfe:	4d07      	ldr	r5, [pc, #28]	; (8037d1c <_write_r+0x20>)
 8037d00:	4604      	mov	r4, r0
 8037d02:	4608      	mov	r0, r1
 8037d04:	4611      	mov	r1, r2
 8037d06:	2200      	movs	r2, #0
 8037d08:	602a      	str	r2, [r5, #0]
 8037d0a:	461a      	mov	r2, r3
 8037d0c:	f7fb fc6f 	bl	80335ee <_write>
 8037d10:	1c43      	adds	r3, r0, #1
 8037d12:	d102      	bne.n	8037d1a <_write_r+0x1e>
 8037d14:	682b      	ldr	r3, [r5, #0]
 8037d16:	b103      	cbz	r3, 8037d1a <_write_r+0x1e>
 8037d18:	6023      	str	r3, [r4, #0]
 8037d1a:	bd38      	pop	{r3, r4, r5, pc}
 8037d1c:	2000cd2c 	.word	0x2000cd2c

08037d20 <__errno>:
 8037d20:	4b01      	ldr	r3, [pc, #4]	; (8037d28 <__errno+0x8>)
 8037d22:	6818      	ldr	r0, [r3, #0]
 8037d24:	4770      	bx	lr
 8037d26:	bf00      	nop
 8037d28:	200001e8 	.word	0x200001e8

08037d2c <__libc_init_array>:
 8037d2c:	b570      	push	{r4, r5, r6, lr}
 8037d2e:	4d0d      	ldr	r5, [pc, #52]	; (8037d64 <__libc_init_array+0x38>)
 8037d30:	4c0d      	ldr	r4, [pc, #52]	; (8037d68 <__libc_init_array+0x3c>)
 8037d32:	1b64      	subs	r4, r4, r5
 8037d34:	10a4      	asrs	r4, r4, #2
 8037d36:	2600      	movs	r6, #0
 8037d38:	42a6      	cmp	r6, r4
 8037d3a:	d109      	bne.n	8037d50 <__libc_init_array+0x24>
 8037d3c:	4d0b      	ldr	r5, [pc, #44]	; (8037d6c <__libc_init_array+0x40>)
 8037d3e:	4c0c      	ldr	r4, [pc, #48]	; (8037d70 <__libc_init_array+0x44>)
 8037d40:	f002 fc32 	bl	803a5a8 <_init>
 8037d44:	1b64      	subs	r4, r4, r5
 8037d46:	10a4      	asrs	r4, r4, #2
 8037d48:	2600      	movs	r6, #0
 8037d4a:	42a6      	cmp	r6, r4
 8037d4c:	d105      	bne.n	8037d5a <__libc_init_array+0x2e>
 8037d4e:	bd70      	pop	{r4, r5, r6, pc}
 8037d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8037d54:	4798      	blx	r3
 8037d56:	3601      	adds	r6, #1
 8037d58:	e7ee      	b.n	8037d38 <__libc_init_array+0xc>
 8037d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8037d5e:	4798      	blx	r3
 8037d60:	3601      	adds	r6, #1
 8037d62:	e7f2      	b.n	8037d4a <__libc_init_array+0x1e>
 8037d64:	0803ad6c 	.word	0x0803ad6c
 8037d68:	0803ad6c 	.word	0x0803ad6c
 8037d6c:	0803ad6c 	.word	0x0803ad6c
 8037d70:	0803ad70 	.word	0x0803ad70

08037d74 <__retarget_lock_acquire_recursive>:
 8037d74:	4770      	bx	lr

08037d76 <__retarget_lock_release_recursive>:
 8037d76:	4770      	bx	lr

08037d78 <memcpy>:
 8037d78:	440a      	add	r2, r1
 8037d7a:	4291      	cmp	r1, r2
 8037d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8037d80:	d100      	bne.n	8037d84 <memcpy+0xc>
 8037d82:	4770      	bx	lr
 8037d84:	b510      	push	{r4, lr}
 8037d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8037d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8037d8e:	4291      	cmp	r1, r2
 8037d90:	d1f9      	bne.n	8037d86 <memcpy+0xe>
 8037d92:	bd10      	pop	{r4, pc}
 8037d94:	0000      	movs	r0, r0
	...

08037d98 <nan>:
 8037d98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8037da0 <nan+0x8>
 8037d9c:	4770      	bx	lr
 8037d9e:	bf00      	nop
 8037da0:	00000000 	.word	0x00000000
 8037da4:	7ff80000 	.word	0x7ff80000

08037da8 <quorem>:
 8037da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037dac:	6903      	ldr	r3, [r0, #16]
 8037dae:	690c      	ldr	r4, [r1, #16]
 8037db0:	42a3      	cmp	r3, r4
 8037db2:	4607      	mov	r7, r0
 8037db4:	db7e      	blt.n	8037eb4 <quorem+0x10c>
 8037db6:	3c01      	subs	r4, #1
 8037db8:	f101 0814 	add.w	r8, r1, #20
 8037dbc:	f100 0514 	add.w	r5, r0, #20
 8037dc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037dc4:	9301      	str	r3, [sp, #4]
 8037dc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8037dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8037dce:	3301      	adds	r3, #1
 8037dd0:	429a      	cmp	r2, r3
 8037dd2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8037dd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8037dda:	fbb2 f6f3 	udiv	r6, r2, r3
 8037dde:	d331      	bcc.n	8037e44 <quorem+0x9c>
 8037de0:	f04f 0e00 	mov.w	lr, #0
 8037de4:	4640      	mov	r0, r8
 8037de6:	46ac      	mov	ip, r5
 8037de8:	46f2      	mov	sl, lr
 8037dea:	f850 2b04 	ldr.w	r2, [r0], #4
 8037dee:	b293      	uxth	r3, r2
 8037df0:	fb06 e303 	mla	r3, r6, r3, lr
 8037df4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8037df8:	0c1a      	lsrs	r2, r3, #16
 8037dfa:	b29b      	uxth	r3, r3
 8037dfc:	ebaa 0303 	sub.w	r3, sl, r3
 8037e00:	f8dc a000 	ldr.w	sl, [ip]
 8037e04:	fa13 f38a 	uxtah	r3, r3, sl
 8037e08:	fb06 220e 	mla	r2, r6, lr, r2
 8037e0c:	9300      	str	r3, [sp, #0]
 8037e0e:	9b00      	ldr	r3, [sp, #0]
 8037e10:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8037e14:	b292      	uxth	r2, r2
 8037e16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8037e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8037e1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8037e22:	4581      	cmp	r9, r0
 8037e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8037e28:	f84c 3b04 	str.w	r3, [ip], #4
 8037e2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8037e30:	d2db      	bcs.n	8037dea <quorem+0x42>
 8037e32:	f855 300b 	ldr.w	r3, [r5, fp]
 8037e36:	b92b      	cbnz	r3, 8037e44 <quorem+0x9c>
 8037e38:	9b01      	ldr	r3, [sp, #4]
 8037e3a:	3b04      	subs	r3, #4
 8037e3c:	429d      	cmp	r5, r3
 8037e3e:	461a      	mov	r2, r3
 8037e40:	d32c      	bcc.n	8037e9c <quorem+0xf4>
 8037e42:	613c      	str	r4, [r7, #16]
 8037e44:	4638      	mov	r0, r7
 8037e46:	f001 fca5 	bl	8039794 <__mcmp>
 8037e4a:	2800      	cmp	r0, #0
 8037e4c:	db22      	blt.n	8037e94 <quorem+0xec>
 8037e4e:	3601      	adds	r6, #1
 8037e50:	4629      	mov	r1, r5
 8037e52:	2000      	movs	r0, #0
 8037e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8037e58:	f8d1 c000 	ldr.w	ip, [r1]
 8037e5c:	b293      	uxth	r3, r2
 8037e5e:	1ac3      	subs	r3, r0, r3
 8037e60:	0c12      	lsrs	r2, r2, #16
 8037e62:	fa13 f38c 	uxtah	r3, r3, ip
 8037e66:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8037e6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8037e6e:	b29b      	uxth	r3, r3
 8037e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8037e74:	45c1      	cmp	r9, r8
 8037e76:	f841 3b04 	str.w	r3, [r1], #4
 8037e7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8037e7e:	d2e9      	bcs.n	8037e54 <quorem+0xac>
 8037e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8037e84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8037e88:	b922      	cbnz	r2, 8037e94 <quorem+0xec>
 8037e8a:	3b04      	subs	r3, #4
 8037e8c:	429d      	cmp	r5, r3
 8037e8e:	461a      	mov	r2, r3
 8037e90:	d30a      	bcc.n	8037ea8 <quorem+0x100>
 8037e92:	613c      	str	r4, [r7, #16]
 8037e94:	4630      	mov	r0, r6
 8037e96:	b003      	add	sp, #12
 8037e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037e9c:	6812      	ldr	r2, [r2, #0]
 8037e9e:	3b04      	subs	r3, #4
 8037ea0:	2a00      	cmp	r2, #0
 8037ea2:	d1ce      	bne.n	8037e42 <quorem+0x9a>
 8037ea4:	3c01      	subs	r4, #1
 8037ea6:	e7c9      	b.n	8037e3c <quorem+0x94>
 8037ea8:	6812      	ldr	r2, [r2, #0]
 8037eaa:	3b04      	subs	r3, #4
 8037eac:	2a00      	cmp	r2, #0
 8037eae:	d1f0      	bne.n	8037e92 <quorem+0xea>
 8037eb0:	3c01      	subs	r4, #1
 8037eb2:	e7eb      	b.n	8037e8c <quorem+0xe4>
 8037eb4:	2000      	movs	r0, #0
 8037eb6:	e7ee      	b.n	8037e96 <quorem+0xee>

08037eb8 <_dtoa_r>:
 8037eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037ebc:	ed2d 8b04 	vpush	{d8-d9}
 8037ec0:	69c5      	ldr	r5, [r0, #28]
 8037ec2:	b093      	sub	sp, #76	; 0x4c
 8037ec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8037ec8:	ec57 6b10 	vmov	r6, r7, d0
 8037ecc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8037ed0:	9107      	str	r1, [sp, #28]
 8037ed2:	4604      	mov	r4, r0
 8037ed4:	920a      	str	r2, [sp, #40]	; 0x28
 8037ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8037ed8:	b975      	cbnz	r5, 8037ef8 <_dtoa_r+0x40>
 8037eda:	2010      	movs	r0, #16
 8037edc:	f7fe f9ee 	bl	80362bc <malloc>
 8037ee0:	4602      	mov	r2, r0
 8037ee2:	61e0      	str	r0, [r4, #28]
 8037ee4:	b920      	cbnz	r0, 8037ef0 <_dtoa_r+0x38>
 8037ee6:	4bae      	ldr	r3, [pc, #696]	; (80381a0 <_dtoa_r+0x2e8>)
 8037ee8:	21ef      	movs	r1, #239	; 0xef
 8037eea:	48ae      	ldr	r0, [pc, #696]	; (80381a4 <_dtoa_r+0x2ec>)
 8037eec:	f002 f86e 	bl	8039fcc <__assert_func>
 8037ef0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8037ef4:	6005      	str	r5, [r0, #0]
 8037ef6:	60c5      	str	r5, [r0, #12]
 8037ef8:	69e3      	ldr	r3, [r4, #28]
 8037efa:	6819      	ldr	r1, [r3, #0]
 8037efc:	b151      	cbz	r1, 8037f14 <_dtoa_r+0x5c>
 8037efe:	685a      	ldr	r2, [r3, #4]
 8037f00:	604a      	str	r2, [r1, #4]
 8037f02:	2301      	movs	r3, #1
 8037f04:	4093      	lsls	r3, r2
 8037f06:	608b      	str	r3, [r1, #8]
 8037f08:	4620      	mov	r0, r4
 8037f0a:	f001 f9bd 	bl	8039288 <_Bfree>
 8037f0e:	69e3      	ldr	r3, [r4, #28]
 8037f10:	2200      	movs	r2, #0
 8037f12:	601a      	str	r2, [r3, #0]
 8037f14:	1e3b      	subs	r3, r7, #0
 8037f16:	bfbb      	ittet	lt
 8037f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8037f1c:	9303      	strlt	r3, [sp, #12]
 8037f1e:	2300      	movge	r3, #0
 8037f20:	2201      	movlt	r2, #1
 8037f22:	bfac      	ite	ge
 8037f24:	f8c8 3000 	strge.w	r3, [r8]
 8037f28:	f8c8 2000 	strlt.w	r2, [r8]
 8037f2c:	4b9e      	ldr	r3, [pc, #632]	; (80381a8 <_dtoa_r+0x2f0>)
 8037f2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8037f32:	ea33 0308 	bics.w	r3, r3, r8
 8037f36:	d11b      	bne.n	8037f70 <_dtoa_r+0xb8>
 8037f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8037f3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8037f3e:	6013      	str	r3, [r2, #0]
 8037f40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8037f44:	4333      	orrs	r3, r6
 8037f46:	f000 8593 	beq.w	8038a70 <_dtoa_r+0xbb8>
 8037f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8037f4c:	b963      	cbnz	r3, 8037f68 <_dtoa_r+0xb0>
 8037f4e:	4b97      	ldr	r3, [pc, #604]	; (80381ac <_dtoa_r+0x2f4>)
 8037f50:	e027      	b.n	8037fa2 <_dtoa_r+0xea>
 8037f52:	4b97      	ldr	r3, [pc, #604]	; (80381b0 <_dtoa_r+0x2f8>)
 8037f54:	9300      	str	r3, [sp, #0]
 8037f56:	3308      	adds	r3, #8
 8037f58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8037f5a:	6013      	str	r3, [r2, #0]
 8037f5c:	9800      	ldr	r0, [sp, #0]
 8037f5e:	b013      	add	sp, #76	; 0x4c
 8037f60:	ecbd 8b04 	vpop	{d8-d9}
 8037f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037f68:	4b90      	ldr	r3, [pc, #576]	; (80381ac <_dtoa_r+0x2f4>)
 8037f6a:	9300      	str	r3, [sp, #0]
 8037f6c:	3303      	adds	r3, #3
 8037f6e:	e7f3      	b.n	8037f58 <_dtoa_r+0xa0>
 8037f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8037f74:	2200      	movs	r2, #0
 8037f76:	ec51 0b17 	vmov	r0, r1, d7
 8037f7a:	eeb0 8a47 	vmov.f32	s16, s14
 8037f7e:	eef0 8a67 	vmov.f32	s17, s15
 8037f82:	2300      	movs	r3, #0
 8037f84:	f7f8 fdb0 	bl	8030ae8 <__aeabi_dcmpeq>
 8037f88:	4681      	mov	r9, r0
 8037f8a:	b160      	cbz	r0, 8037fa6 <_dtoa_r+0xee>
 8037f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8037f8e:	2301      	movs	r3, #1
 8037f90:	6013      	str	r3, [r2, #0]
 8037f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8037f94:	2b00      	cmp	r3, #0
 8037f96:	f000 8568 	beq.w	8038a6a <_dtoa_r+0xbb2>
 8037f9a:	4b86      	ldr	r3, [pc, #536]	; (80381b4 <_dtoa_r+0x2fc>)
 8037f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8037f9e:	6013      	str	r3, [r2, #0]
 8037fa0:	3b01      	subs	r3, #1
 8037fa2:	9300      	str	r3, [sp, #0]
 8037fa4:	e7da      	b.n	8037f5c <_dtoa_r+0xa4>
 8037fa6:	aa10      	add	r2, sp, #64	; 0x40
 8037fa8:	a911      	add	r1, sp, #68	; 0x44
 8037faa:	4620      	mov	r0, r4
 8037fac:	eeb0 0a48 	vmov.f32	s0, s16
 8037fb0:	eef0 0a68 	vmov.f32	s1, s17
 8037fb4:	f001 fd04 	bl	80399c0 <__d2b>
 8037fb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8037fbc:	4682      	mov	sl, r0
 8037fbe:	2d00      	cmp	r5, #0
 8037fc0:	d07f      	beq.n	80380c2 <_dtoa_r+0x20a>
 8037fc2:	ee18 3a90 	vmov	r3, s17
 8037fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8037fca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8037fce:	ec51 0b18 	vmov	r0, r1, d8
 8037fd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8037fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8037fda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8037fde:	4619      	mov	r1, r3
 8037fe0:	2200      	movs	r2, #0
 8037fe2:	4b75      	ldr	r3, [pc, #468]	; (80381b8 <_dtoa_r+0x300>)
 8037fe4:	f7f8 f960 	bl	80302a8 <__aeabi_dsub>
 8037fe8:	a367      	add	r3, pc, #412	; (adr r3, 8038188 <_dtoa_r+0x2d0>)
 8037fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037fee:	f7f8 fb13 	bl	8030618 <__aeabi_dmul>
 8037ff2:	a367      	add	r3, pc, #412	; (adr r3, 8038190 <_dtoa_r+0x2d8>)
 8037ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8037ff8:	f7f8 f958 	bl	80302ac <__adddf3>
 8037ffc:	4606      	mov	r6, r0
 8037ffe:	4628      	mov	r0, r5
 8038000:	460f      	mov	r7, r1
 8038002:	f7f8 fa9f 	bl	8030544 <__aeabi_i2d>
 8038006:	a364      	add	r3, pc, #400	; (adr r3, 8038198 <_dtoa_r+0x2e0>)
 8038008:	e9d3 2300 	ldrd	r2, r3, [r3]
 803800c:	f7f8 fb04 	bl	8030618 <__aeabi_dmul>
 8038010:	4602      	mov	r2, r0
 8038012:	460b      	mov	r3, r1
 8038014:	4630      	mov	r0, r6
 8038016:	4639      	mov	r1, r7
 8038018:	f7f8 f948 	bl	80302ac <__adddf3>
 803801c:	4606      	mov	r6, r0
 803801e:	460f      	mov	r7, r1
 8038020:	f7f8 fdaa 	bl	8030b78 <__aeabi_d2iz>
 8038024:	2200      	movs	r2, #0
 8038026:	4683      	mov	fp, r0
 8038028:	2300      	movs	r3, #0
 803802a:	4630      	mov	r0, r6
 803802c:	4639      	mov	r1, r7
 803802e:	f7f8 fd65 	bl	8030afc <__aeabi_dcmplt>
 8038032:	b148      	cbz	r0, 8038048 <_dtoa_r+0x190>
 8038034:	4658      	mov	r0, fp
 8038036:	f7f8 fa85 	bl	8030544 <__aeabi_i2d>
 803803a:	4632      	mov	r2, r6
 803803c:	463b      	mov	r3, r7
 803803e:	f7f8 fd53 	bl	8030ae8 <__aeabi_dcmpeq>
 8038042:	b908      	cbnz	r0, 8038048 <_dtoa_r+0x190>
 8038044:	f10b 3bff 	add.w	fp, fp, #4294967295
 8038048:	f1bb 0f16 	cmp.w	fp, #22
 803804c:	d857      	bhi.n	80380fe <_dtoa_r+0x246>
 803804e:	4b5b      	ldr	r3, [pc, #364]	; (80381bc <_dtoa_r+0x304>)
 8038050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8038054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8038058:	ec51 0b18 	vmov	r0, r1, d8
 803805c:	f7f8 fd4e 	bl	8030afc <__aeabi_dcmplt>
 8038060:	2800      	cmp	r0, #0
 8038062:	d04e      	beq.n	8038102 <_dtoa_r+0x24a>
 8038064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8038068:	2300      	movs	r3, #0
 803806a:	930c      	str	r3, [sp, #48]	; 0x30
 803806c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803806e:	1b5b      	subs	r3, r3, r5
 8038070:	1e5a      	subs	r2, r3, #1
 8038072:	bf45      	ittet	mi
 8038074:	f1c3 0301 	rsbmi	r3, r3, #1
 8038078:	9305      	strmi	r3, [sp, #20]
 803807a:	2300      	movpl	r3, #0
 803807c:	2300      	movmi	r3, #0
 803807e:	9206      	str	r2, [sp, #24]
 8038080:	bf54      	ite	pl
 8038082:	9305      	strpl	r3, [sp, #20]
 8038084:	9306      	strmi	r3, [sp, #24]
 8038086:	f1bb 0f00 	cmp.w	fp, #0
 803808a:	db3c      	blt.n	8038106 <_dtoa_r+0x24e>
 803808c:	9b06      	ldr	r3, [sp, #24]
 803808e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8038092:	445b      	add	r3, fp
 8038094:	9306      	str	r3, [sp, #24]
 8038096:	2300      	movs	r3, #0
 8038098:	9308      	str	r3, [sp, #32]
 803809a:	9b07      	ldr	r3, [sp, #28]
 803809c:	2b09      	cmp	r3, #9
 803809e:	d868      	bhi.n	8038172 <_dtoa_r+0x2ba>
 80380a0:	2b05      	cmp	r3, #5
 80380a2:	bfc4      	itt	gt
 80380a4:	3b04      	subgt	r3, #4
 80380a6:	9307      	strgt	r3, [sp, #28]
 80380a8:	9b07      	ldr	r3, [sp, #28]
 80380aa:	f1a3 0302 	sub.w	r3, r3, #2
 80380ae:	bfcc      	ite	gt
 80380b0:	2500      	movgt	r5, #0
 80380b2:	2501      	movle	r5, #1
 80380b4:	2b03      	cmp	r3, #3
 80380b6:	f200 8085 	bhi.w	80381c4 <_dtoa_r+0x30c>
 80380ba:	e8df f003 	tbb	[pc, r3]
 80380be:	3b2e      	.short	0x3b2e
 80380c0:	5839      	.short	0x5839
 80380c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80380c6:	441d      	add	r5, r3
 80380c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80380cc:	2b20      	cmp	r3, #32
 80380ce:	bfc1      	itttt	gt
 80380d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80380d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80380d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80380dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80380e0:	bfd6      	itet	le
 80380e2:	f1c3 0320 	rsble	r3, r3, #32
 80380e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80380ea:	fa06 f003 	lslle.w	r0, r6, r3
 80380ee:	f7f8 fa19 	bl	8030524 <__aeabi_ui2d>
 80380f2:	2201      	movs	r2, #1
 80380f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80380f8:	3d01      	subs	r5, #1
 80380fa:	920e      	str	r2, [sp, #56]	; 0x38
 80380fc:	e76f      	b.n	8037fde <_dtoa_r+0x126>
 80380fe:	2301      	movs	r3, #1
 8038100:	e7b3      	b.n	803806a <_dtoa_r+0x1b2>
 8038102:	900c      	str	r0, [sp, #48]	; 0x30
 8038104:	e7b2      	b.n	803806c <_dtoa_r+0x1b4>
 8038106:	9b05      	ldr	r3, [sp, #20]
 8038108:	eba3 030b 	sub.w	r3, r3, fp
 803810c:	9305      	str	r3, [sp, #20]
 803810e:	f1cb 0300 	rsb	r3, fp, #0
 8038112:	9308      	str	r3, [sp, #32]
 8038114:	2300      	movs	r3, #0
 8038116:	930b      	str	r3, [sp, #44]	; 0x2c
 8038118:	e7bf      	b.n	803809a <_dtoa_r+0x1e2>
 803811a:	2300      	movs	r3, #0
 803811c:	9309      	str	r3, [sp, #36]	; 0x24
 803811e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8038120:	2b00      	cmp	r3, #0
 8038122:	dc52      	bgt.n	80381ca <_dtoa_r+0x312>
 8038124:	2301      	movs	r3, #1
 8038126:	9301      	str	r3, [sp, #4]
 8038128:	9304      	str	r3, [sp, #16]
 803812a:	461a      	mov	r2, r3
 803812c:	920a      	str	r2, [sp, #40]	; 0x28
 803812e:	e00b      	b.n	8038148 <_dtoa_r+0x290>
 8038130:	2301      	movs	r3, #1
 8038132:	e7f3      	b.n	803811c <_dtoa_r+0x264>
 8038134:	2300      	movs	r3, #0
 8038136:	9309      	str	r3, [sp, #36]	; 0x24
 8038138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803813a:	445b      	add	r3, fp
 803813c:	9301      	str	r3, [sp, #4]
 803813e:	3301      	adds	r3, #1
 8038140:	2b01      	cmp	r3, #1
 8038142:	9304      	str	r3, [sp, #16]
 8038144:	bfb8      	it	lt
 8038146:	2301      	movlt	r3, #1
 8038148:	69e0      	ldr	r0, [r4, #28]
 803814a:	2100      	movs	r1, #0
 803814c:	2204      	movs	r2, #4
 803814e:	f102 0614 	add.w	r6, r2, #20
 8038152:	429e      	cmp	r6, r3
 8038154:	d93d      	bls.n	80381d2 <_dtoa_r+0x31a>
 8038156:	6041      	str	r1, [r0, #4]
 8038158:	4620      	mov	r0, r4
 803815a:	f001 f855 	bl	8039208 <_Balloc>
 803815e:	9000      	str	r0, [sp, #0]
 8038160:	2800      	cmp	r0, #0
 8038162:	d139      	bne.n	80381d8 <_dtoa_r+0x320>
 8038164:	4b16      	ldr	r3, [pc, #88]	; (80381c0 <_dtoa_r+0x308>)
 8038166:	4602      	mov	r2, r0
 8038168:	f240 11af 	movw	r1, #431	; 0x1af
 803816c:	e6bd      	b.n	8037eea <_dtoa_r+0x32>
 803816e:	2301      	movs	r3, #1
 8038170:	e7e1      	b.n	8038136 <_dtoa_r+0x27e>
 8038172:	2501      	movs	r5, #1
 8038174:	2300      	movs	r3, #0
 8038176:	9307      	str	r3, [sp, #28]
 8038178:	9509      	str	r5, [sp, #36]	; 0x24
 803817a:	f04f 33ff 	mov.w	r3, #4294967295
 803817e:	9301      	str	r3, [sp, #4]
 8038180:	9304      	str	r3, [sp, #16]
 8038182:	2200      	movs	r2, #0
 8038184:	2312      	movs	r3, #18
 8038186:	e7d1      	b.n	803812c <_dtoa_r+0x274>
 8038188:	636f4361 	.word	0x636f4361
 803818c:	3fd287a7 	.word	0x3fd287a7
 8038190:	8b60c8b3 	.word	0x8b60c8b3
 8038194:	3fc68a28 	.word	0x3fc68a28
 8038198:	509f79fb 	.word	0x509f79fb
 803819c:	3fd34413 	.word	0x3fd34413
 80381a0:	0803aada 	.word	0x0803aada
 80381a4:	0803aaf1 	.word	0x0803aaf1
 80381a8:	7ff00000 	.word	0x7ff00000
 80381ac:	0803aad6 	.word	0x0803aad6
 80381b0:	0803aacd 	.word	0x0803aacd
 80381b4:	0803aaa2 	.word	0x0803aaa2
 80381b8:	3ff80000 	.word	0x3ff80000
 80381bc:	0803ac40 	.word	0x0803ac40
 80381c0:	0803ab49 	.word	0x0803ab49
 80381c4:	2301      	movs	r3, #1
 80381c6:	9309      	str	r3, [sp, #36]	; 0x24
 80381c8:	e7d7      	b.n	803817a <_dtoa_r+0x2c2>
 80381ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80381cc:	9301      	str	r3, [sp, #4]
 80381ce:	9304      	str	r3, [sp, #16]
 80381d0:	e7ba      	b.n	8038148 <_dtoa_r+0x290>
 80381d2:	3101      	adds	r1, #1
 80381d4:	0052      	lsls	r2, r2, #1
 80381d6:	e7ba      	b.n	803814e <_dtoa_r+0x296>
 80381d8:	69e3      	ldr	r3, [r4, #28]
 80381da:	9a00      	ldr	r2, [sp, #0]
 80381dc:	601a      	str	r2, [r3, #0]
 80381de:	9b04      	ldr	r3, [sp, #16]
 80381e0:	2b0e      	cmp	r3, #14
 80381e2:	f200 80a8 	bhi.w	8038336 <_dtoa_r+0x47e>
 80381e6:	2d00      	cmp	r5, #0
 80381e8:	f000 80a5 	beq.w	8038336 <_dtoa_r+0x47e>
 80381ec:	f1bb 0f00 	cmp.w	fp, #0
 80381f0:	dd38      	ble.n	8038264 <_dtoa_r+0x3ac>
 80381f2:	4bc0      	ldr	r3, [pc, #768]	; (80384f4 <_dtoa_r+0x63c>)
 80381f4:	f00b 020f 	and.w	r2, fp, #15
 80381f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80381fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8038200:	e9d3 6700 	ldrd	r6, r7, [r3]
 8038204:	ea4f 182b 	mov.w	r8, fp, asr #4
 8038208:	d019      	beq.n	803823e <_dtoa_r+0x386>
 803820a:	4bbb      	ldr	r3, [pc, #748]	; (80384f8 <_dtoa_r+0x640>)
 803820c:	ec51 0b18 	vmov	r0, r1, d8
 8038210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8038214:	f7f8 fb2a 	bl	803086c <__aeabi_ddiv>
 8038218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803821c:	f008 080f 	and.w	r8, r8, #15
 8038220:	2503      	movs	r5, #3
 8038222:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80384f8 <_dtoa_r+0x640>
 8038226:	f1b8 0f00 	cmp.w	r8, #0
 803822a:	d10a      	bne.n	8038242 <_dtoa_r+0x38a>
 803822c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8038230:	4632      	mov	r2, r6
 8038232:	463b      	mov	r3, r7
 8038234:	f7f8 fb1a 	bl	803086c <__aeabi_ddiv>
 8038238:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803823c:	e02b      	b.n	8038296 <_dtoa_r+0x3de>
 803823e:	2502      	movs	r5, #2
 8038240:	e7ef      	b.n	8038222 <_dtoa_r+0x36a>
 8038242:	f018 0f01 	tst.w	r8, #1
 8038246:	d008      	beq.n	803825a <_dtoa_r+0x3a2>
 8038248:	4630      	mov	r0, r6
 803824a:	4639      	mov	r1, r7
 803824c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8038250:	f7f8 f9e2 	bl	8030618 <__aeabi_dmul>
 8038254:	3501      	adds	r5, #1
 8038256:	4606      	mov	r6, r0
 8038258:	460f      	mov	r7, r1
 803825a:	ea4f 0868 	mov.w	r8, r8, asr #1
 803825e:	f109 0908 	add.w	r9, r9, #8
 8038262:	e7e0      	b.n	8038226 <_dtoa_r+0x36e>
 8038264:	f000 809f 	beq.w	80383a6 <_dtoa_r+0x4ee>
 8038268:	f1cb 0600 	rsb	r6, fp, #0
 803826c:	4ba1      	ldr	r3, [pc, #644]	; (80384f4 <_dtoa_r+0x63c>)
 803826e:	4fa2      	ldr	r7, [pc, #648]	; (80384f8 <_dtoa_r+0x640>)
 8038270:	f006 020f 	and.w	r2, r6, #15
 8038274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8038278:	e9d3 2300 	ldrd	r2, r3, [r3]
 803827c:	ec51 0b18 	vmov	r0, r1, d8
 8038280:	f7f8 f9ca 	bl	8030618 <__aeabi_dmul>
 8038284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8038288:	1136      	asrs	r6, r6, #4
 803828a:	2300      	movs	r3, #0
 803828c:	2502      	movs	r5, #2
 803828e:	2e00      	cmp	r6, #0
 8038290:	d17e      	bne.n	8038390 <_dtoa_r+0x4d8>
 8038292:	2b00      	cmp	r3, #0
 8038294:	d1d0      	bne.n	8038238 <_dtoa_r+0x380>
 8038296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8038298:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 803829c:	2b00      	cmp	r3, #0
 803829e:	f000 8084 	beq.w	80383aa <_dtoa_r+0x4f2>
 80382a2:	4b96      	ldr	r3, [pc, #600]	; (80384fc <_dtoa_r+0x644>)
 80382a4:	2200      	movs	r2, #0
 80382a6:	4640      	mov	r0, r8
 80382a8:	4649      	mov	r1, r9
 80382aa:	f7f8 fc27 	bl	8030afc <__aeabi_dcmplt>
 80382ae:	2800      	cmp	r0, #0
 80382b0:	d07b      	beq.n	80383aa <_dtoa_r+0x4f2>
 80382b2:	9b04      	ldr	r3, [sp, #16]
 80382b4:	2b00      	cmp	r3, #0
 80382b6:	d078      	beq.n	80383aa <_dtoa_r+0x4f2>
 80382b8:	9b01      	ldr	r3, [sp, #4]
 80382ba:	2b00      	cmp	r3, #0
 80382bc:	dd39      	ble.n	8038332 <_dtoa_r+0x47a>
 80382be:	4b90      	ldr	r3, [pc, #576]	; (8038500 <_dtoa_r+0x648>)
 80382c0:	2200      	movs	r2, #0
 80382c2:	4640      	mov	r0, r8
 80382c4:	4649      	mov	r1, r9
 80382c6:	f7f8 f9a7 	bl	8030618 <__aeabi_dmul>
 80382ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80382ce:	9e01      	ldr	r6, [sp, #4]
 80382d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80382d4:	3501      	adds	r5, #1
 80382d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80382da:	4628      	mov	r0, r5
 80382dc:	f7f8 f932 	bl	8030544 <__aeabi_i2d>
 80382e0:	4642      	mov	r2, r8
 80382e2:	464b      	mov	r3, r9
 80382e4:	f7f8 f998 	bl	8030618 <__aeabi_dmul>
 80382e8:	4b86      	ldr	r3, [pc, #536]	; (8038504 <_dtoa_r+0x64c>)
 80382ea:	2200      	movs	r2, #0
 80382ec:	f7f7 ffde 	bl	80302ac <__adddf3>
 80382f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80382f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80382f8:	9303      	str	r3, [sp, #12]
 80382fa:	2e00      	cmp	r6, #0
 80382fc:	d158      	bne.n	80383b0 <_dtoa_r+0x4f8>
 80382fe:	4b82      	ldr	r3, [pc, #520]	; (8038508 <_dtoa_r+0x650>)
 8038300:	2200      	movs	r2, #0
 8038302:	4640      	mov	r0, r8
 8038304:	4649      	mov	r1, r9
 8038306:	f7f7 ffcf 	bl	80302a8 <__aeabi_dsub>
 803830a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803830e:	4680      	mov	r8, r0
 8038310:	4689      	mov	r9, r1
 8038312:	f7f8 fc11 	bl	8030b38 <__aeabi_dcmpgt>
 8038316:	2800      	cmp	r0, #0
 8038318:	f040 8296 	bne.w	8038848 <_dtoa_r+0x990>
 803831c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8038320:	4640      	mov	r0, r8
 8038322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8038326:	4649      	mov	r1, r9
 8038328:	f7f8 fbe8 	bl	8030afc <__aeabi_dcmplt>
 803832c:	2800      	cmp	r0, #0
 803832e:	f040 8289 	bne.w	8038844 <_dtoa_r+0x98c>
 8038332:	ed8d 8b02 	vstr	d8, [sp, #8]
 8038336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8038338:	2b00      	cmp	r3, #0
 803833a:	f2c0 814e 	blt.w	80385da <_dtoa_r+0x722>
 803833e:	f1bb 0f0e 	cmp.w	fp, #14
 8038342:	f300 814a 	bgt.w	80385da <_dtoa_r+0x722>
 8038346:	4b6b      	ldr	r3, [pc, #428]	; (80384f4 <_dtoa_r+0x63c>)
 8038348:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 803834c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8038350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8038352:	2b00      	cmp	r3, #0
 8038354:	f280 80dc 	bge.w	8038510 <_dtoa_r+0x658>
 8038358:	9b04      	ldr	r3, [sp, #16]
 803835a:	2b00      	cmp	r3, #0
 803835c:	f300 80d8 	bgt.w	8038510 <_dtoa_r+0x658>
 8038360:	f040 826f 	bne.w	8038842 <_dtoa_r+0x98a>
 8038364:	4b68      	ldr	r3, [pc, #416]	; (8038508 <_dtoa_r+0x650>)
 8038366:	2200      	movs	r2, #0
 8038368:	4640      	mov	r0, r8
 803836a:	4649      	mov	r1, r9
 803836c:	f7f8 f954 	bl	8030618 <__aeabi_dmul>
 8038370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8038374:	f7f8 fbd6 	bl	8030b24 <__aeabi_dcmpge>
 8038378:	9e04      	ldr	r6, [sp, #16]
 803837a:	4637      	mov	r7, r6
 803837c:	2800      	cmp	r0, #0
 803837e:	f040 8245 	bne.w	803880c <_dtoa_r+0x954>
 8038382:	9d00      	ldr	r5, [sp, #0]
 8038384:	2331      	movs	r3, #49	; 0x31
 8038386:	f805 3b01 	strb.w	r3, [r5], #1
 803838a:	f10b 0b01 	add.w	fp, fp, #1
 803838e:	e241      	b.n	8038814 <_dtoa_r+0x95c>
 8038390:	07f2      	lsls	r2, r6, #31
 8038392:	d505      	bpl.n	80383a0 <_dtoa_r+0x4e8>
 8038394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8038398:	f7f8 f93e 	bl	8030618 <__aeabi_dmul>
 803839c:	3501      	adds	r5, #1
 803839e:	2301      	movs	r3, #1
 80383a0:	1076      	asrs	r6, r6, #1
 80383a2:	3708      	adds	r7, #8
 80383a4:	e773      	b.n	803828e <_dtoa_r+0x3d6>
 80383a6:	2502      	movs	r5, #2
 80383a8:	e775      	b.n	8038296 <_dtoa_r+0x3de>
 80383aa:	9e04      	ldr	r6, [sp, #16]
 80383ac:	465f      	mov	r7, fp
 80383ae:	e792      	b.n	80382d6 <_dtoa_r+0x41e>
 80383b0:	9900      	ldr	r1, [sp, #0]
 80383b2:	4b50      	ldr	r3, [pc, #320]	; (80384f4 <_dtoa_r+0x63c>)
 80383b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80383b8:	4431      	add	r1, r6
 80383ba:	9102      	str	r1, [sp, #8]
 80383bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80383be:	eeb0 9a47 	vmov.f32	s18, s14
 80383c2:	eef0 9a67 	vmov.f32	s19, s15
 80383c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80383ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80383ce:	2900      	cmp	r1, #0
 80383d0:	d044      	beq.n	803845c <_dtoa_r+0x5a4>
 80383d2:	494e      	ldr	r1, [pc, #312]	; (803850c <_dtoa_r+0x654>)
 80383d4:	2000      	movs	r0, #0
 80383d6:	f7f8 fa49 	bl	803086c <__aeabi_ddiv>
 80383da:	ec53 2b19 	vmov	r2, r3, d9
 80383de:	f7f7 ff63 	bl	80302a8 <__aeabi_dsub>
 80383e2:	9d00      	ldr	r5, [sp, #0]
 80383e4:	ec41 0b19 	vmov	d9, r0, r1
 80383e8:	4649      	mov	r1, r9
 80383ea:	4640      	mov	r0, r8
 80383ec:	f7f8 fbc4 	bl	8030b78 <__aeabi_d2iz>
 80383f0:	4606      	mov	r6, r0
 80383f2:	f7f8 f8a7 	bl	8030544 <__aeabi_i2d>
 80383f6:	4602      	mov	r2, r0
 80383f8:	460b      	mov	r3, r1
 80383fa:	4640      	mov	r0, r8
 80383fc:	4649      	mov	r1, r9
 80383fe:	f7f7 ff53 	bl	80302a8 <__aeabi_dsub>
 8038402:	3630      	adds	r6, #48	; 0x30
 8038404:	f805 6b01 	strb.w	r6, [r5], #1
 8038408:	ec53 2b19 	vmov	r2, r3, d9
 803840c:	4680      	mov	r8, r0
 803840e:	4689      	mov	r9, r1
 8038410:	f7f8 fb74 	bl	8030afc <__aeabi_dcmplt>
 8038414:	2800      	cmp	r0, #0
 8038416:	d164      	bne.n	80384e2 <_dtoa_r+0x62a>
 8038418:	4642      	mov	r2, r8
 803841a:	464b      	mov	r3, r9
 803841c:	4937      	ldr	r1, [pc, #220]	; (80384fc <_dtoa_r+0x644>)
 803841e:	2000      	movs	r0, #0
 8038420:	f7f7 ff42 	bl	80302a8 <__aeabi_dsub>
 8038424:	ec53 2b19 	vmov	r2, r3, d9
 8038428:	f7f8 fb68 	bl	8030afc <__aeabi_dcmplt>
 803842c:	2800      	cmp	r0, #0
 803842e:	f040 80b6 	bne.w	803859e <_dtoa_r+0x6e6>
 8038432:	9b02      	ldr	r3, [sp, #8]
 8038434:	429d      	cmp	r5, r3
 8038436:	f43f af7c 	beq.w	8038332 <_dtoa_r+0x47a>
 803843a:	4b31      	ldr	r3, [pc, #196]	; (8038500 <_dtoa_r+0x648>)
 803843c:	ec51 0b19 	vmov	r0, r1, d9
 8038440:	2200      	movs	r2, #0
 8038442:	f7f8 f8e9 	bl	8030618 <__aeabi_dmul>
 8038446:	4b2e      	ldr	r3, [pc, #184]	; (8038500 <_dtoa_r+0x648>)
 8038448:	ec41 0b19 	vmov	d9, r0, r1
 803844c:	2200      	movs	r2, #0
 803844e:	4640      	mov	r0, r8
 8038450:	4649      	mov	r1, r9
 8038452:	f7f8 f8e1 	bl	8030618 <__aeabi_dmul>
 8038456:	4680      	mov	r8, r0
 8038458:	4689      	mov	r9, r1
 803845a:	e7c5      	b.n	80383e8 <_dtoa_r+0x530>
 803845c:	ec51 0b17 	vmov	r0, r1, d7
 8038460:	f7f8 f8da 	bl	8030618 <__aeabi_dmul>
 8038464:	9b02      	ldr	r3, [sp, #8]
 8038466:	9d00      	ldr	r5, [sp, #0]
 8038468:	930f      	str	r3, [sp, #60]	; 0x3c
 803846a:	ec41 0b19 	vmov	d9, r0, r1
 803846e:	4649      	mov	r1, r9
 8038470:	4640      	mov	r0, r8
 8038472:	f7f8 fb81 	bl	8030b78 <__aeabi_d2iz>
 8038476:	4606      	mov	r6, r0
 8038478:	f7f8 f864 	bl	8030544 <__aeabi_i2d>
 803847c:	3630      	adds	r6, #48	; 0x30
 803847e:	4602      	mov	r2, r0
 8038480:	460b      	mov	r3, r1
 8038482:	4640      	mov	r0, r8
 8038484:	4649      	mov	r1, r9
 8038486:	f7f7 ff0f 	bl	80302a8 <__aeabi_dsub>
 803848a:	f805 6b01 	strb.w	r6, [r5], #1
 803848e:	9b02      	ldr	r3, [sp, #8]
 8038490:	429d      	cmp	r5, r3
 8038492:	4680      	mov	r8, r0
 8038494:	4689      	mov	r9, r1
 8038496:	f04f 0200 	mov.w	r2, #0
 803849a:	d124      	bne.n	80384e6 <_dtoa_r+0x62e>
 803849c:	4b1b      	ldr	r3, [pc, #108]	; (803850c <_dtoa_r+0x654>)
 803849e:	ec51 0b19 	vmov	r0, r1, d9
 80384a2:	f7f7 ff03 	bl	80302ac <__adddf3>
 80384a6:	4602      	mov	r2, r0
 80384a8:	460b      	mov	r3, r1
 80384aa:	4640      	mov	r0, r8
 80384ac:	4649      	mov	r1, r9
 80384ae:	f7f8 fb43 	bl	8030b38 <__aeabi_dcmpgt>
 80384b2:	2800      	cmp	r0, #0
 80384b4:	d173      	bne.n	803859e <_dtoa_r+0x6e6>
 80384b6:	ec53 2b19 	vmov	r2, r3, d9
 80384ba:	4914      	ldr	r1, [pc, #80]	; (803850c <_dtoa_r+0x654>)
 80384bc:	2000      	movs	r0, #0
 80384be:	f7f7 fef3 	bl	80302a8 <__aeabi_dsub>
 80384c2:	4602      	mov	r2, r0
 80384c4:	460b      	mov	r3, r1
 80384c6:	4640      	mov	r0, r8
 80384c8:	4649      	mov	r1, r9
 80384ca:	f7f8 fb17 	bl	8030afc <__aeabi_dcmplt>
 80384ce:	2800      	cmp	r0, #0
 80384d0:	f43f af2f 	beq.w	8038332 <_dtoa_r+0x47a>
 80384d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80384d6:	1e6b      	subs	r3, r5, #1
 80384d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80384da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80384de:	2b30      	cmp	r3, #48	; 0x30
 80384e0:	d0f8      	beq.n	80384d4 <_dtoa_r+0x61c>
 80384e2:	46bb      	mov	fp, r7
 80384e4:	e04a      	b.n	803857c <_dtoa_r+0x6c4>
 80384e6:	4b06      	ldr	r3, [pc, #24]	; (8038500 <_dtoa_r+0x648>)
 80384e8:	f7f8 f896 	bl	8030618 <__aeabi_dmul>
 80384ec:	4680      	mov	r8, r0
 80384ee:	4689      	mov	r9, r1
 80384f0:	e7bd      	b.n	803846e <_dtoa_r+0x5b6>
 80384f2:	bf00      	nop
 80384f4:	0803ac40 	.word	0x0803ac40
 80384f8:	0803ac18 	.word	0x0803ac18
 80384fc:	3ff00000 	.word	0x3ff00000
 8038500:	40240000 	.word	0x40240000
 8038504:	401c0000 	.word	0x401c0000
 8038508:	40140000 	.word	0x40140000
 803850c:	3fe00000 	.word	0x3fe00000
 8038510:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8038514:	9d00      	ldr	r5, [sp, #0]
 8038516:	4642      	mov	r2, r8
 8038518:	464b      	mov	r3, r9
 803851a:	4630      	mov	r0, r6
 803851c:	4639      	mov	r1, r7
 803851e:	f7f8 f9a5 	bl	803086c <__aeabi_ddiv>
 8038522:	f7f8 fb29 	bl	8030b78 <__aeabi_d2iz>
 8038526:	9001      	str	r0, [sp, #4]
 8038528:	f7f8 f80c 	bl	8030544 <__aeabi_i2d>
 803852c:	4642      	mov	r2, r8
 803852e:	464b      	mov	r3, r9
 8038530:	f7f8 f872 	bl	8030618 <__aeabi_dmul>
 8038534:	4602      	mov	r2, r0
 8038536:	460b      	mov	r3, r1
 8038538:	4630      	mov	r0, r6
 803853a:	4639      	mov	r1, r7
 803853c:	f7f7 feb4 	bl	80302a8 <__aeabi_dsub>
 8038540:	9e01      	ldr	r6, [sp, #4]
 8038542:	9f04      	ldr	r7, [sp, #16]
 8038544:	3630      	adds	r6, #48	; 0x30
 8038546:	f805 6b01 	strb.w	r6, [r5], #1
 803854a:	9e00      	ldr	r6, [sp, #0]
 803854c:	1bae      	subs	r6, r5, r6
 803854e:	42b7      	cmp	r7, r6
 8038550:	4602      	mov	r2, r0
 8038552:	460b      	mov	r3, r1
 8038554:	d134      	bne.n	80385c0 <_dtoa_r+0x708>
 8038556:	f7f7 fea9 	bl	80302ac <__adddf3>
 803855a:	4642      	mov	r2, r8
 803855c:	464b      	mov	r3, r9
 803855e:	4606      	mov	r6, r0
 8038560:	460f      	mov	r7, r1
 8038562:	f7f8 fae9 	bl	8030b38 <__aeabi_dcmpgt>
 8038566:	b9c8      	cbnz	r0, 803859c <_dtoa_r+0x6e4>
 8038568:	4642      	mov	r2, r8
 803856a:	464b      	mov	r3, r9
 803856c:	4630      	mov	r0, r6
 803856e:	4639      	mov	r1, r7
 8038570:	f7f8 faba 	bl	8030ae8 <__aeabi_dcmpeq>
 8038574:	b110      	cbz	r0, 803857c <_dtoa_r+0x6c4>
 8038576:	9b01      	ldr	r3, [sp, #4]
 8038578:	07db      	lsls	r3, r3, #31
 803857a:	d40f      	bmi.n	803859c <_dtoa_r+0x6e4>
 803857c:	4651      	mov	r1, sl
 803857e:	4620      	mov	r0, r4
 8038580:	f000 fe82 	bl	8039288 <_Bfree>
 8038584:	2300      	movs	r3, #0
 8038586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8038588:	702b      	strb	r3, [r5, #0]
 803858a:	f10b 0301 	add.w	r3, fp, #1
 803858e:	6013      	str	r3, [r2, #0]
 8038590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8038592:	2b00      	cmp	r3, #0
 8038594:	f43f ace2 	beq.w	8037f5c <_dtoa_r+0xa4>
 8038598:	601d      	str	r5, [r3, #0]
 803859a:	e4df      	b.n	8037f5c <_dtoa_r+0xa4>
 803859c:	465f      	mov	r7, fp
 803859e:	462b      	mov	r3, r5
 80385a0:	461d      	mov	r5, r3
 80385a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80385a6:	2a39      	cmp	r2, #57	; 0x39
 80385a8:	d106      	bne.n	80385b8 <_dtoa_r+0x700>
 80385aa:	9a00      	ldr	r2, [sp, #0]
 80385ac:	429a      	cmp	r2, r3
 80385ae:	d1f7      	bne.n	80385a0 <_dtoa_r+0x6e8>
 80385b0:	9900      	ldr	r1, [sp, #0]
 80385b2:	2230      	movs	r2, #48	; 0x30
 80385b4:	3701      	adds	r7, #1
 80385b6:	700a      	strb	r2, [r1, #0]
 80385b8:	781a      	ldrb	r2, [r3, #0]
 80385ba:	3201      	adds	r2, #1
 80385bc:	701a      	strb	r2, [r3, #0]
 80385be:	e790      	b.n	80384e2 <_dtoa_r+0x62a>
 80385c0:	4ba3      	ldr	r3, [pc, #652]	; (8038850 <_dtoa_r+0x998>)
 80385c2:	2200      	movs	r2, #0
 80385c4:	f7f8 f828 	bl	8030618 <__aeabi_dmul>
 80385c8:	2200      	movs	r2, #0
 80385ca:	2300      	movs	r3, #0
 80385cc:	4606      	mov	r6, r0
 80385ce:	460f      	mov	r7, r1
 80385d0:	f7f8 fa8a 	bl	8030ae8 <__aeabi_dcmpeq>
 80385d4:	2800      	cmp	r0, #0
 80385d6:	d09e      	beq.n	8038516 <_dtoa_r+0x65e>
 80385d8:	e7d0      	b.n	803857c <_dtoa_r+0x6c4>
 80385da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80385dc:	2a00      	cmp	r2, #0
 80385de:	f000 80ca 	beq.w	8038776 <_dtoa_r+0x8be>
 80385e2:	9a07      	ldr	r2, [sp, #28]
 80385e4:	2a01      	cmp	r2, #1
 80385e6:	f300 80ad 	bgt.w	8038744 <_dtoa_r+0x88c>
 80385ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80385ec:	2a00      	cmp	r2, #0
 80385ee:	f000 80a5 	beq.w	803873c <_dtoa_r+0x884>
 80385f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80385f6:	9e08      	ldr	r6, [sp, #32]
 80385f8:	9d05      	ldr	r5, [sp, #20]
 80385fa:	9a05      	ldr	r2, [sp, #20]
 80385fc:	441a      	add	r2, r3
 80385fe:	9205      	str	r2, [sp, #20]
 8038600:	9a06      	ldr	r2, [sp, #24]
 8038602:	2101      	movs	r1, #1
 8038604:	441a      	add	r2, r3
 8038606:	4620      	mov	r0, r4
 8038608:	9206      	str	r2, [sp, #24]
 803860a:	f000 ff3d 	bl	8039488 <__i2b>
 803860e:	4607      	mov	r7, r0
 8038610:	b165      	cbz	r5, 803862c <_dtoa_r+0x774>
 8038612:	9b06      	ldr	r3, [sp, #24]
 8038614:	2b00      	cmp	r3, #0
 8038616:	dd09      	ble.n	803862c <_dtoa_r+0x774>
 8038618:	42ab      	cmp	r3, r5
 803861a:	9a05      	ldr	r2, [sp, #20]
 803861c:	bfa8      	it	ge
 803861e:	462b      	movge	r3, r5
 8038620:	1ad2      	subs	r2, r2, r3
 8038622:	9205      	str	r2, [sp, #20]
 8038624:	9a06      	ldr	r2, [sp, #24]
 8038626:	1aed      	subs	r5, r5, r3
 8038628:	1ad3      	subs	r3, r2, r3
 803862a:	9306      	str	r3, [sp, #24]
 803862c:	9b08      	ldr	r3, [sp, #32]
 803862e:	b1f3      	cbz	r3, 803866e <_dtoa_r+0x7b6>
 8038630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8038632:	2b00      	cmp	r3, #0
 8038634:	f000 80a3 	beq.w	803877e <_dtoa_r+0x8c6>
 8038638:	2e00      	cmp	r6, #0
 803863a:	dd10      	ble.n	803865e <_dtoa_r+0x7a6>
 803863c:	4639      	mov	r1, r7
 803863e:	4632      	mov	r2, r6
 8038640:	4620      	mov	r0, r4
 8038642:	f000 ffe1 	bl	8039608 <__pow5mult>
 8038646:	4652      	mov	r2, sl
 8038648:	4601      	mov	r1, r0
 803864a:	4607      	mov	r7, r0
 803864c:	4620      	mov	r0, r4
 803864e:	f000 ff31 	bl	80394b4 <__multiply>
 8038652:	4651      	mov	r1, sl
 8038654:	4680      	mov	r8, r0
 8038656:	4620      	mov	r0, r4
 8038658:	f000 fe16 	bl	8039288 <_Bfree>
 803865c:	46c2      	mov	sl, r8
 803865e:	9b08      	ldr	r3, [sp, #32]
 8038660:	1b9a      	subs	r2, r3, r6
 8038662:	d004      	beq.n	803866e <_dtoa_r+0x7b6>
 8038664:	4651      	mov	r1, sl
 8038666:	4620      	mov	r0, r4
 8038668:	f000 ffce 	bl	8039608 <__pow5mult>
 803866c:	4682      	mov	sl, r0
 803866e:	2101      	movs	r1, #1
 8038670:	4620      	mov	r0, r4
 8038672:	f000 ff09 	bl	8039488 <__i2b>
 8038676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8038678:	2b00      	cmp	r3, #0
 803867a:	4606      	mov	r6, r0
 803867c:	f340 8081 	ble.w	8038782 <_dtoa_r+0x8ca>
 8038680:	461a      	mov	r2, r3
 8038682:	4601      	mov	r1, r0
 8038684:	4620      	mov	r0, r4
 8038686:	f000 ffbf 	bl	8039608 <__pow5mult>
 803868a:	9b07      	ldr	r3, [sp, #28]
 803868c:	2b01      	cmp	r3, #1
 803868e:	4606      	mov	r6, r0
 8038690:	dd7a      	ble.n	8038788 <_dtoa_r+0x8d0>
 8038692:	f04f 0800 	mov.w	r8, #0
 8038696:	6933      	ldr	r3, [r6, #16]
 8038698:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 803869c:	6918      	ldr	r0, [r3, #16]
 803869e:	f000 fea5 	bl	80393ec <__hi0bits>
 80386a2:	f1c0 0020 	rsb	r0, r0, #32
 80386a6:	9b06      	ldr	r3, [sp, #24]
 80386a8:	4418      	add	r0, r3
 80386aa:	f010 001f 	ands.w	r0, r0, #31
 80386ae:	f000 8094 	beq.w	80387da <_dtoa_r+0x922>
 80386b2:	f1c0 0320 	rsb	r3, r0, #32
 80386b6:	2b04      	cmp	r3, #4
 80386b8:	f340 8085 	ble.w	80387c6 <_dtoa_r+0x90e>
 80386bc:	9b05      	ldr	r3, [sp, #20]
 80386be:	f1c0 001c 	rsb	r0, r0, #28
 80386c2:	4403      	add	r3, r0
 80386c4:	9305      	str	r3, [sp, #20]
 80386c6:	9b06      	ldr	r3, [sp, #24]
 80386c8:	4403      	add	r3, r0
 80386ca:	4405      	add	r5, r0
 80386cc:	9306      	str	r3, [sp, #24]
 80386ce:	9b05      	ldr	r3, [sp, #20]
 80386d0:	2b00      	cmp	r3, #0
 80386d2:	dd05      	ble.n	80386e0 <_dtoa_r+0x828>
 80386d4:	4651      	mov	r1, sl
 80386d6:	461a      	mov	r2, r3
 80386d8:	4620      	mov	r0, r4
 80386da:	f000 ffef 	bl	80396bc <__lshift>
 80386de:	4682      	mov	sl, r0
 80386e0:	9b06      	ldr	r3, [sp, #24]
 80386e2:	2b00      	cmp	r3, #0
 80386e4:	dd05      	ble.n	80386f2 <_dtoa_r+0x83a>
 80386e6:	4631      	mov	r1, r6
 80386e8:	461a      	mov	r2, r3
 80386ea:	4620      	mov	r0, r4
 80386ec:	f000 ffe6 	bl	80396bc <__lshift>
 80386f0:	4606      	mov	r6, r0
 80386f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80386f4:	2b00      	cmp	r3, #0
 80386f6:	d072      	beq.n	80387de <_dtoa_r+0x926>
 80386f8:	4631      	mov	r1, r6
 80386fa:	4650      	mov	r0, sl
 80386fc:	f001 f84a 	bl	8039794 <__mcmp>
 8038700:	2800      	cmp	r0, #0
 8038702:	da6c      	bge.n	80387de <_dtoa_r+0x926>
 8038704:	2300      	movs	r3, #0
 8038706:	4651      	mov	r1, sl
 8038708:	220a      	movs	r2, #10
 803870a:	4620      	mov	r0, r4
 803870c:	f000 fdde 	bl	80392cc <__multadd>
 8038710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8038712:	f10b 3bff 	add.w	fp, fp, #4294967295
 8038716:	4682      	mov	sl, r0
 8038718:	2b00      	cmp	r3, #0
 803871a:	f000 81b0 	beq.w	8038a7e <_dtoa_r+0xbc6>
 803871e:	2300      	movs	r3, #0
 8038720:	4639      	mov	r1, r7
 8038722:	220a      	movs	r2, #10
 8038724:	4620      	mov	r0, r4
 8038726:	f000 fdd1 	bl	80392cc <__multadd>
 803872a:	9b01      	ldr	r3, [sp, #4]
 803872c:	2b00      	cmp	r3, #0
 803872e:	4607      	mov	r7, r0
 8038730:	f300 8096 	bgt.w	8038860 <_dtoa_r+0x9a8>
 8038734:	9b07      	ldr	r3, [sp, #28]
 8038736:	2b02      	cmp	r3, #2
 8038738:	dc59      	bgt.n	80387ee <_dtoa_r+0x936>
 803873a:	e091      	b.n	8038860 <_dtoa_r+0x9a8>
 803873c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803873e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8038742:	e758      	b.n	80385f6 <_dtoa_r+0x73e>
 8038744:	9b04      	ldr	r3, [sp, #16]
 8038746:	1e5e      	subs	r6, r3, #1
 8038748:	9b08      	ldr	r3, [sp, #32]
 803874a:	42b3      	cmp	r3, r6
 803874c:	bfbf      	itttt	lt
 803874e:	9b08      	ldrlt	r3, [sp, #32]
 8038750:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8038752:	9608      	strlt	r6, [sp, #32]
 8038754:	1af3      	sublt	r3, r6, r3
 8038756:	bfb4      	ite	lt
 8038758:	18d2      	addlt	r2, r2, r3
 803875a:	1b9e      	subge	r6, r3, r6
 803875c:	9b04      	ldr	r3, [sp, #16]
 803875e:	bfbc      	itt	lt
 8038760:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8038762:	2600      	movlt	r6, #0
 8038764:	2b00      	cmp	r3, #0
 8038766:	bfb7      	itett	lt
 8038768:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 803876c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8038770:	1a9d      	sublt	r5, r3, r2
 8038772:	2300      	movlt	r3, #0
 8038774:	e741      	b.n	80385fa <_dtoa_r+0x742>
 8038776:	9e08      	ldr	r6, [sp, #32]
 8038778:	9d05      	ldr	r5, [sp, #20]
 803877a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 803877c:	e748      	b.n	8038610 <_dtoa_r+0x758>
 803877e:	9a08      	ldr	r2, [sp, #32]
 8038780:	e770      	b.n	8038664 <_dtoa_r+0x7ac>
 8038782:	9b07      	ldr	r3, [sp, #28]
 8038784:	2b01      	cmp	r3, #1
 8038786:	dc19      	bgt.n	80387bc <_dtoa_r+0x904>
 8038788:	9b02      	ldr	r3, [sp, #8]
 803878a:	b9bb      	cbnz	r3, 80387bc <_dtoa_r+0x904>
 803878c:	9b03      	ldr	r3, [sp, #12]
 803878e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8038792:	b99b      	cbnz	r3, 80387bc <_dtoa_r+0x904>
 8038794:	9b03      	ldr	r3, [sp, #12]
 8038796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803879a:	0d1b      	lsrs	r3, r3, #20
 803879c:	051b      	lsls	r3, r3, #20
 803879e:	b183      	cbz	r3, 80387c2 <_dtoa_r+0x90a>
 80387a0:	9b05      	ldr	r3, [sp, #20]
 80387a2:	3301      	adds	r3, #1
 80387a4:	9305      	str	r3, [sp, #20]
 80387a6:	9b06      	ldr	r3, [sp, #24]
 80387a8:	3301      	adds	r3, #1
 80387aa:	9306      	str	r3, [sp, #24]
 80387ac:	f04f 0801 	mov.w	r8, #1
 80387b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80387b2:	2b00      	cmp	r3, #0
 80387b4:	f47f af6f 	bne.w	8038696 <_dtoa_r+0x7de>
 80387b8:	2001      	movs	r0, #1
 80387ba:	e774      	b.n	80386a6 <_dtoa_r+0x7ee>
 80387bc:	f04f 0800 	mov.w	r8, #0
 80387c0:	e7f6      	b.n	80387b0 <_dtoa_r+0x8f8>
 80387c2:	4698      	mov	r8, r3
 80387c4:	e7f4      	b.n	80387b0 <_dtoa_r+0x8f8>
 80387c6:	d082      	beq.n	80386ce <_dtoa_r+0x816>
 80387c8:	9a05      	ldr	r2, [sp, #20]
 80387ca:	331c      	adds	r3, #28
 80387cc:	441a      	add	r2, r3
 80387ce:	9205      	str	r2, [sp, #20]
 80387d0:	9a06      	ldr	r2, [sp, #24]
 80387d2:	441a      	add	r2, r3
 80387d4:	441d      	add	r5, r3
 80387d6:	9206      	str	r2, [sp, #24]
 80387d8:	e779      	b.n	80386ce <_dtoa_r+0x816>
 80387da:	4603      	mov	r3, r0
 80387dc:	e7f4      	b.n	80387c8 <_dtoa_r+0x910>
 80387de:	9b04      	ldr	r3, [sp, #16]
 80387e0:	2b00      	cmp	r3, #0
 80387e2:	dc37      	bgt.n	8038854 <_dtoa_r+0x99c>
 80387e4:	9b07      	ldr	r3, [sp, #28]
 80387e6:	2b02      	cmp	r3, #2
 80387e8:	dd34      	ble.n	8038854 <_dtoa_r+0x99c>
 80387ea:	9b04      	ldr	r3, [sp, #16]
 80387ec:	9301      	str	r3, [sp, #4]
 80387ee:	9b01      	ldr	r3, [sp, #4]
 80387f0:	b963      	cbnz	r3, 803880c <_dtoa_r+0x954>
 80387f2:	4631      	mov	r1, r6
 80387f4:	2205      	movs	r2, #5
 80387f6:	4620      	mov	r0, r4
 80387f8:	f000 fd68 	bl	80392cc <__multadd>
 80387fc:	4601      	mov	r1, r0
 80387fe:	4606      	mov	r6, r0
 8038800:	4650      	mov	r0, sl
 8038802:	f000 ffc7 	bl	8039794 <__mcmp>
 8038806:	2800      	cmp	r0, #0
 8038808:	f73f adbb 	bgt.w	8038382 <_dtoa_r+0x4ca>
 803880c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803880e:	9d00      	ldr	r5, [sp, #0]
 8038810:	ea6f 0b03 	mvn.w	fp, r3
 8038814:	f04f 0800 	mov.w	r8, #0
 8038818:	4631      	mov	r1, r6
 803881a:	4620      	mov	r0, r4
 803881c:	f000 fd34 	bl	8039288 <_Bfree>
 8038820:	2f00      	cmp	r7, #0
 8038822:	f43f aeab 	beq.w	803857c <_dtoa_r+0x6c4>
 8038826:	f1b8 0f00 	cmp.w	r8, #0
 803882a:	d005      	beq.n	8038838 <_dtoa_r+0x980>
 803882c:	45b8      	cmp	r8, r7
 803882e:	d003      	beq.n	8038838 <_dtoa_r+0x980>
 8038830:	4641      	mov	r1, r8
 8038832:	4620      	mov	r0, r4
 8038834:	f000 fd28 	bl	8039288 <_Bfree>
 8038838:	4639      	mov	r1, r7
 803883a:	4620      	mov	r0, r4
 803883c:	f000 fd24 	bl	8039288 <_Bfree>
 8038840:	e69c      	b.n	803857c <_dtoa_r+0x6c4>
 8038842:	2600      	movs	r6, #0
 8038844:	4637      	mov	r7, r6
 8038846:	e7e1      	b.n	803880c <_dtoa_r+0x954>
 8038848:	46bb      	mov	fp, r7
 803884a:	4637      	mov	r7, r6
 803884c:	e599      	b.n	8038382 <_dtoa_r+0x4ca>
 803884e:	bf00      	nop
 8038850:	40240000 	.word	0x40240000
 8038854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8038856:	2b00      	cmp	r3, #0
 8038858:	f000 80c8 	beq.w	80389ec <_dtoa_r+0xb34>
 803885c:	9b04      	ldr	r3, [sp, #16]
 803885e:	9301      	str	r3, [sp, #4]
 8038860:	2d00      	cmp	r5, #0
 8038862:	dd05      	ble.n	8038870 <_dtoa_r+0x9b8>
 8038864:	4639      	mov	r1, r7
 8038866:	462a      	mov	r2, r5
 8038868:	4620      	mov	r0, r4
 803886a:	f000 ff27 	bl	80396bc <__lshift>
 803886e:	4607      	mov	r7, r0
 8038870:	f1b8 0f00 	cmp.w	r8, #0
 8038874:	d05b      	beq.n	803892e <_dtoa_r+0xa76>
 8038876:	6879      	ldr	r1, [r7, #4]
 8038878:	4620      	mov	r0, r4
 803887a:	f000 fcc5 	bl	8039208 <_Balloc>
 803887e:	4605      	mov	r5, r0
 8038880:	b928      	cbnz	r0, 803888e <_dtoa_r+0x9d6>
 8038882:	4b83      	ldr	r3, [pc, #524]	; (8038a90 <_dtoa_r+0xbd8>)
 8038884:	4602      	mov	r2, r0
 8038886:	f240 21ef 	movw	r1, #751	; 0x2ef
 803888a:	f7ff bb2e 	b.w	8037eea <_dtoa_r+0x32>
 803888e:	693a      	ldr	r2, [r7, #16]
 8038890:	3202      	adds	r2, #2
 8038892:	0092      	lsls	r2, r2, #2
 8038894:	f107 010c 	add.w	r1, r7, #12
 8038898:	300c      	adds	r0, #12
 803889a:	f7ff fa6d 	bl	8037d78 <memcpy>
 803889e:	2201      	movs	r2, #1
 80388a0:	4629      	mov	r1, r5
 80388a2:	4620      	mov	r0, r4
 80388a4:	f000 ff0a 	bl	80396bc <__lshift>
 80388a8:	9b00      	ldr	r3, [sp, #0]
 80388aa:	3301      	adds	r3, #1
 80388ac:	9304      	str	r3, [sp, #16]
 80388ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80388b2:	4413      	add	r3, r2
 80388b4:	9308      	str	r3, [sp, #32]
 80388b6:	9b02      	ldr	r3, [sp, #8]
 80388b8:	f003 0301 	and.w	r3, r3, #1
 80388bc:	46b8      	mov	r8, r7
 80388be:	9306      	str	r3, [sp, #24]
 80388c0:	4607      	mov	r7, r0
 80388c2:	9b04      	ldr	r3, [sp, #16]
 80388c4:	4631      	mov	r1, r6
 80388c6:	3b01      	subs	r3, #1
 80388c8:	4650      	mov	r0, sl
 80388ca:	9301      	str	r3, [sp, #4]
 80388cc:	f7ff fa6c 	bl	8037da8 <quorem>
 80388d0:	4641      	mov	r1, r8
 80388d2:	9002      	str	r0, [sp, #8]
 80388d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80388d8:	4650      	mov	r0, sl
 80388da:	f000 ff5b 	bl	8039794 <__mcmp>
 80388de:	463a      	mov	r2, r7
 80388e0:	9005      	str	r0, [sp, #20]
 80388e2:	4631      	mov	r1, r6
 80388e4:	4620      	mov	r0, r4
 80388e6:	f000 ff71 	bl	80397cc <__mdiff>
 80388ea:	68c2      	ldr	r2, [r0, #12]
 80388ec:	4605      	mov	r5, r0
 80388ee:	bb02      	cbnz	r2, 8038932 <_dtoa_r+0xa7a>
 80388f0:	4601      	mov	r1, r0
 80388f2:	4650      	mov	r0, sl
 80388f4:	f000 ff4e 	bl	8039794 <__mcmp>
 80388f8:	4602      	mov	r2, r0
 80388fa:	4629      	mov	r1, r5
 80388fc:	4620      	mov	r0, r4
 80388fe:	9209      	str	r2, [sp, #36]	; 0x24
 8038900:	f000 fcc2 	bl	8039288 <_Bfree>
 8038904:	9b07      	ldr	r3, [sp, #28]
 8038906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8038908:	9d04      	ldr	r5, [sp, #16]
 803890a:	ea43 0102 	orr.w	r1, r3, r2
 803890e:	9b06      	ldr	r3, [sp, #24]
 8038910:	4319      	orrs	r1, r3
 8038912:	d110      	bne.n	8038936 <_dtoa_r+0xa7e>
 8038914:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8038918:	d029      	beq.n	803896e <_dtoa_r+0xab6>
 803891a:	9b05      	ldr	r3, [sp, #20]
 803891c:	2b00      	cmp	r3, #0
 803891e:	dd02      	ble.n	8038926 <_dtoa_r+0xa6e>
 8038920:	9b02      	ldr	r3, [sp, #8]
 8038922:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8038926:	9b01      	ldr	r3, [sp, #4]
 8038928:	f883 9000 	strb.w	r9, [r3]
 803892c:	e774      	b.n	8038818 <_dtoa_r+0x960>
 803892e:	4638      	mov	r0, r7
 8038930:	e7ba      	b.n	80388a8 <_dtoa_r+0x9f0>
 8038932:	2201      	movs	r2, #1
 8038934:	e7e1      	b.n	80388fa <_dtoa_r+0xa42>
 8038936:	9b05      	ldr	r3, [sp, #20]
 8038938:	2b00      	cmp	r3, #0
 803893a:	db04      	blt.n	8038946 <_dtoa_r+0xa8e>
 803893c:	9907      	ldr	r1, [sp, #28]
 803893e:	430b      	orrs	r3, r1
 8038940:	9906      	ldr	r1, [sp, #24]
 8038942:	430b      	orrs	r3, r1
 8038944:	d120      	bne.n	8038988 <_dtoa_r+0xad0>
 8038946:	2a00      	cmp	r2, #0
 8038948:	dded      	ble.n	8038926 <_dtoa_r+0xa6e>
 803894a:	4651      	mov	r1, sl
 803894c:	2201      	movs	r2, #1
 803894e:	4620      	mov	r0, r4
 8038950:	f000 feb4 	bl	80396bc <__lshift>
 8038954:	4631      	mov	r1, r6
 8038956:	4682      	mov	sl, r0
 8038958:	f000 ff1c 	bl	8039794 <__mcmp>
 803895c:	2800      	cmp	r0, #0
 803895e:	dc03      	bgt.n	8038968 <_dtoa_r+0xab0>
 8038960:	d1e1      	bne.n	8038926 <_dtoa_r+0xa6e>
 8038962:	f019 0f01 	tst.w	r9, #1
 8038966:	d0de      	beq.n	8038926 <_dtoa_r+0xa6e>
 8038968:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 803896c:	d1d8      	bne.n	8038920 <_dtoa_r+0xa68>
 803896e:	9a01      	ldr	r2, [sp, #4]
 8038970:	2339      	movs	r3, #57	; 0x39
 8038972:	7013      	strb	r3, [r2, #0]
 8038974:	462b      	mov	r3, r5
 8038976:	461d      	mov	r5, r3
 8038978:	3b01      	subs	r3, #1
 803897a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 803897e:	2a39      	cmp	r2, #57	; 0x39
 8038980:	d06c      	beq.n	8038a5c <_dtoa_r+0xba4>
 8038982:	3201      	adds	r2, #1
 8038984:	701a      	strb	r2, [r3, #0]
 8038986:	e747      	b.n	8038818 <_dtoa_r+0x960>
 8038988:	2a00      	cmp	r2, #0
 803898a:	dd07      	ble.n	803899c <_dtoa_r+0xae4>
 803898c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8038990:	d0ed      	beq.n	803896e <_dtoa_r+0xab6>
 8038992:	9a01      	ldr	r2, [sp, #4]
 8038994:	f109 0301 	add.w	r3, r9, #1
 8038998:	7013      	strb	r3, [r2, #0]
 803899a:	e73d      	b.n	8038818 <_dtoa_r+0x960>
 803899c:	9b04      	ldr	r3, [sp, #16]
 803899e:	9a08      	ldr	r2, [sp, #32]
 80389a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80389a4:	4293      	cmp	r3, r2
 80389a6:	d043      	beq.n	8038a30 <_dtoa_r+0xb78>
 80389a8:	4651      	mov	r1, sl
 80389aa:	2300      	movs	r3, #0
 80389ac:	220a      	movs	r2, #10
 80389ae:	4620      	mov	r0, r4
 80389b0:	f000 fc8c 	bl	80392cc <__multadd>
 80389b4:	45b8      	cmp	r8, r7
 80389b6:	4682      	mov	sl, r0
 80389b8:	f04f 0300 	mov.w	r3, #0
 80389bc:	f04f 020a 	mov.w	r2, #10
 80389c0:	4641      	mov	r1, r8
 80389c2:	4620      	mov	r0, r4
 80389c4:	d107      	bne.n	80389d6 <_dtoa_r+0xb1e>
 80389c6:	f000 fc81 	bl	80392cc <__multadd>
 80389ca:	4680      	mov	r8, r0
 80389cc:	4607      	mov	r7, r0
 80389ce:	9b04      	ldr	r3, [sp, #16]
 80389d0:	3301      	adds	r3, #1
 80389d2:	9304      	str	r3, [sp, #16]
 80389d4:	e775      	b.n	80388c2 <_dtoa_r+0xa0a>
 80389d6:	f000 fc79 	bl	80392cc <__multadd>
 80389da:	4639      	mov	r1, r7
 80389dc:	4680      	mov	r8, r0
 80389de:	2300      	movs	r3, #0
 80389e0:	220a      	movs	r2, #10
 80389e2:	4620      	mov	r0, r4
 80389e4:	f000 fc72 	bl	80392cc <__multadd>
 80389e8:	4607      	mov	r7, r0
 80389ea:	e7f0      	b.n	80389ce <_dtoa_r+0xb16>
 80389ec:	9b04      	ldr	r3, [sp, #16]
 80389ee:	9301      	str	r3, [sp, #4]
 80389f0:	9d00      	ldr	r5, [sp, #0]
 80389f2:	4631      	mov	r1, r6
 80389f4:	4650      	mov	r0, sl
 80389f6:	f7ff f9d7 	bl	8037da8 <quorem>
 80389fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80389fe:	9b00      	ldr	r3, [sp, #0]
 8038a00:	f805 9b01 	strb.w	r9, [r5], #1
 8038a04:	1aea      	subs	r2, r5, r3
 8038a06:	9b01      	ldr	r3, [sp, #4]
 8038a08:	4293      	cmp	r3, r2
 8038a0a:	dd07      	ble.n	8038a1c <_dtoa_r+0xb64>
 8038a0c:	4651      	mov	r1, sl
 8038a0e:	2300      	movs	r3, #0
 8038a10:	220a      	movs	r2, #10
 8038a12:	4620      	mov	r0, r4
 8038a14:	f000 fc5a 	bl	80392cc <__multadd>
 8038a18:	4682      	mov	sl, r0
 8038a1a:	e7ea      	b.n	80389f2 <_dtoa_r+0xb3a>
 8038a1c:	9b01      	ldr	r3, [sp, #4]
 8038a1e:	2b00      	cmp	r3, #0
 8038a20:	bfc8      	it	gt
 8038a22:	461d      	movgt	r5, r3
 8038a24:	9b00      	ldr	r3, [sp, #0]
 8038a26:	bfd8      	it	le
 8038a28:	2501      	movle	r5, #1
 8038a2a:	441d      	add	r5, r3
 8038a2c:	f04f 0800 	mov.w	r8, #0
 8038a30:	4651      	mov	r1, sl
 8038a32:	2201      	movs	r2, #1
 8038a34:	4620      	mov	r0, r4
 8038a36:	f000 fe41 	bl	80396bc <__lshift>
 8038a3a:	4631      	mov	r1, r6
 8038a3c:	4682      	mov	sl, r0
 8038a3e:	f000 fea9 	bl	8039794 <__mcmp>
 8038a42:	2800      	cmp	r0, #0
 8038a44:	dc96      	bgt.n	8038974 <_dtoa_r+0xabc>
 8038a46:	d102      	bne.n	8038a4e <_dtoa_r+0xb96>
 8038a48:	f019 0f01 	tst.w	r9, #1
 8038a4c:	d192      	bne.n	8038974 <_dtoa_r+0xabc>
 8038a4e:	462b      	mov	r3, r5
 8038a50:	461d      	mov	r5, r3
 8038a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8038a56:	2a30      	cmp	r2, #48	; 0x30
 8038a58:	d0fa      	beq.n	8038a50 <_dtoa_r+0xb98>
 8038a5a:	e6dd      	b.n	8038818 <_dtoa_r+0x960>
 8038a5c:	9a00      	ldr	r2, [sp, #0]
 8038a5e:	429a      	cmp	r2, r3
 8038a60:	d189      	bne.n	8038976 <_dtoa_r+0xabe>
 8038a62:	f10b 0b01 	add.w	fp, fp, #1
 8038a66:	2331      	movs	r3, #49	; 0x31
 8038a68:	e796      	b.n	8038998 <_dtoa_r+0xae0>
 8038a6a:	4b0a      	ldr	r3, [pc, #40]	; (8038a94 <_dtoa_r+0xbdc>)
 8038a6c:	f7ff ba99 	b.w	8037fa2 <_dtoa_r+0xea>
 8038a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8038a72:	2b00      	cmp	r3, #0
 8038a74:	f47f aa6d 	bne.w	8037f52 <_dtoa_r+0x9a>
 8038a78:	4b07      	ldr	r3, [pc, #28]	; (8038a98 <_dtoa_r+0xbe0>)
 8038a7a:	f7ff ba92 	b.w	8037fa2 <_dtoa_r+0xea>
 8038a7e:	9b01      	ldr	r3, [sp, #4]
 8038a80:	2b00      	cmp	r3, #0
 8038a82:	dcb5      	bgt.n	80389f0 <_dtoa_r+0xb38>
 8038a84:	9b07      	ldr	r3, [sp, #28]
 8038a86:	2b02      	cmp	r3, #2
 8038a88:	f73f aeb1 	bgt.w	80387ee <_dtoa_r+0x936>
 8038a8c:	e7b0      	b.n	80389f0 <_dtoa_r+0xb38>
 8038a8e:	bf00      	nop
 8038a90:	0803ab49 	.word	0x0803ab49
 8038a94:	0803aaa1 	.word	0x0803aaa1
 8038a98:	0803aacd 	.word	0x0803aacd

08038a9c <_free_r>:
 8038a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8038a9e:	2900      	cmp	r1, #0
 8038aa0:	d044      	beq.n	8038b2c <_free_r+0x90>
 8038aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8038aa6:	9001      	str	r0, [sp, #4]
 8038aa8:	2b00      	cmp	r3, #0
 8038aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8038aae:	bfb8      	it	lt
 8038ab0:	18e4      	addlt	r4, r4, r3
 8038ab2:	f7fd fcb3 	bl	803641c <__malloc_lock>
 8038ab6:	4a1e      	ldr	r2, [pc, #120]	; (8038b30 <_free_r+0x94>)
 8038ab8:	9801      	ldr	r0, [sp, #4]
 8038aba:	6813      	ldr	r3, [r2, #0]
 8038abc:	b933      	cbnz	r3, 8038acc <_free_r+0x30>
 8038abe:	6063      	str	r3, [r4, #4]
 8038ac0:	6014      	str	r4, [r2, #0]
 8038ac2:	b003      	add	sp, #12
 8038ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8038ac8:	f7fd bcae 	b.w	8036428 <__malloc_unlock>
 8038acc:	42a3      	cmp	r3, r4
 8038ace:	d908      	bls.n	8038ae2 <_free_r+0x46>
 8038ad0:	6825      	ldr	r5, [r4, #0]
 8038ad2:	1961      	adds	r1, r4, r5
 8038ad4:	428b      	cmp	r3, r1
 8038ad6:	bf01      	itttt	eq
 8038ad8:	6819      	ldreq	r1, [r3, #0]
 8038ada:	685b      	ldreq	r3, [r3, #4]
 8038adc:	1949      	addeq	r1, r1, r5
 8038ade:	6021      	streq	r1, [r4, #0]
 8038ae0:	e7ed      	b.n	8038abe <_free_r+0x22>
 8038ae2:	461a      	mov	r2, r3
 8038ae4:	685b      	ldr	r3, [r3, #4]
 8038ae6:	b10b      	cbz	r3, 8038aec <_free_r+0x50>
 8038ae8:	42a3      	cmp	r3, r4
 8038aea:	d9fa      	bls.n	8038ae2 <_free_r+0x46>
 8038aec:	6811      	ldr	r1, [r2, #0]
 8038aee:	1855      	adds	r5, r2, r1
 8038af0:	42a5      	cmp	r5, r4
 8038af2:	d10b      	bne.n	8038b0c <_free_r+0x70>
 8038af4:	6824      	ldr	r4, [r4, #0]
 8038af6:	4421      	add	r1, r4
 8038af8:	1854      	adds	r4, r2, r1
 8038afa:	42a3      	cmp	r3, r4
 8038afc:	6011      	str	r1, [r2, #0]
 8038afe:	d1e0      	bne.n	8038ac2 <_free_r+0x26>
 8038b00:	681c      	ldr	r4, [r3, #0]
 8038b02:	685b      	ldr	r3, [r3, #4]
 8038b04:	6053      	str	r3, [r2, #4]
 8038b06:	440c      	add	r4, r1
 8038b08:	6014      	str	r4, [r2, #0]
 8038b0a:	e7da      	b.n	8038ac2 <_free_r+0x26>
 8038b0c:	d902      	bls.n	8038b14 <_free_r+0x78>
 8038b0e:	230c      	movs	r3, #12
 8038b10:	6003      	str	r3, [r0, #0]
 8038b12:	e7d6      	b.n	8038ac2 <_free_r+0x26>
 8038b14:	6825      	ldr	r5, [r4, #0]
 8038b16:	1961      	adds	r1, r4, r5
 8038b18:	428b      	cmp	r3, r1
 8038b1a:	bf04      	itt	eq
 8038b1c:	6819      	ldreq	r1, [r3, #0]
 8038b1e:	685b      	ldreq	r3, [r3, #4]
 8038b20:	6063      	str	r3, [r4, #4]
 8038b22:	bf04      	itt	eq
 8038b24:	1949      	addeq	r1, r1, r5
 8038b26:	6021      	streq	r1, [r4, #0]
 8038b28:	6054      	str	r4, [r2, #4]
 8038b2a:	e7ca      	b.n	8038ac2 <_free_r+0x26>
 8038b2c:	b003      	add	sp, #12
 8038b2e:	bd30      	pop	{r4, r5, pc}
 8038b30:	2000cbe8 	.word	0x2000cbe8

08038b34 <rshift>:
 8038b34:	6903      	ldr	r3, [r0, #16]
 8038b36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8038b3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8038b3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8038b42:	f100 0414 	add.w	r4, r0, #20
 8038b46:	dd45      	ble.n	8038bd4 <rshift+0xa0>
 8038b48:	f011 011f 	ands.w	r1, r1, #31
 8038b4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8038b50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8038b54:	d10c      	bne.n	8038b70 <rshift+0x3c>
 8038b56:	f100 0710 	add.w	r7, r0, #16
 8038b5a:	4629      	mov	r1, r5
 8038b5c:	42b1      	cmp	r1, r6
 8038b5e:	d334      	bcc.n	8038bca <rshift+0x96>
 8038b60:	1a9b      	subs	r3, r3, r2
 8038b62:	009b      	lsls	r3, r3, #2
 8038b64:	1eea      	subs	r2, r5, #3
 8038b66:	4296      	cmp	r6, r2
 8038b68:	bf38      	it	cc
 8038b6a:	2300      	movcc	r3, #0
 8038b6c:	4423      	add	r3, r4
 8038b6e:	e015      	b.n	8038b9c <rshift+0x68>
 8038b70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8038b74:	f1c1 0820 	rsb	r8, r1, #32
 8038b78:	40cf      	lsrs	r7, r1
 8038b7a:	f105 0e04 	add.w	lr, r5, #4
 8038b7e:	46a1      	mov	r9, r4
 8038b80:	4576      	cmp	r6, lr
 8038b82:	46f4      	mov	ip, lr
 8038b84:	d815      	bhi.n	8038bb2 <rshift+0x7e>
 8038b86:	1a9a      	subs	r2, r3, r2
 8038b88:	0092      	lsls	r2, r2, #2
 8038b8a:	3a04      	subs	r2, #4
 8038b8c:	3501      	adds	r5, #1
 8038b8e:	42ae      	cmp	r6, r5
 8038b90:	bf38      	it	cc
 8038b92:	2200      	movcc	r2, #0
 8038b94:	18a3      	adds	r3, r4, r2
 8038b96:	50a7      	str	r7, [r4, r2]
 8038b98:	b107      	cbz	r7, 8038b9c <rshift+0x68>
 8038b9a:	3304      	adds	r3, #4
 8038b9c:	1b1a      	subs	r2, r3, r4
 8038b9e:	42a3      	cmp	r3, r4
 8038ba0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8038ba4:	bf08      	it	eq
 8038ba6:	2300      	moveq	r3, #0
 8038ba8:	6102      	str	r2, [r0, #16]
 8038baa:	bf08      	it	eq
 8038bac:	6143      	streq	r3, [r0, #20]
 8038bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8038bb2:	f8dc c000 	ldr.w	ip, [ip]
 8038bb6:	fa0c fc08 	lsl.w	ip, ip, r8
 8038bba:	ea4c 0707 	orr.w	r7, ip, r7
 8038bbe:	f849 7b04 	str.w	r7, [r9], #4
 8038bc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8038bc6:	40cf      	lsrs	r7, r1
 8038bc8:	e7da      	b.n	8038b80 <rshift+0x4c>
 8038bca:	f851 cb04 	ldr.w	ip, [r1], #4
 8038bce:	f847 cf04 	str.w	ip, [r7, #4]!
 8038bd2:	e7c3      	b.n	8038b5c <rshift+0x28>
 8038bd4:	4623      	mov	r3, r4
 8038bd6:	e7e1      	b.n	8038b9c <rshift+0x68>

08038bd8 <__hexdig_fun>:
 8038bd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8038bdc:	2b09      	cmp	r3, #9
 8038bde:	d802      	bhi.n	8038be6 <__hexdig_fun+0xe>
 8038be0:	3820      	subs	r0, #32
 8038be2:	b2c0      	uxtb	r0, r0
 8038be4:	4770      	bx	lr
 8038be6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8038bea:	2b05      	cmp	r3, #5
 8038bec:	d801      	bhi.n	8038bf2 <__hexdig_fun+0x1a>
 8038bee:	3847      	subs	r0, #71	; 0x47
 8038bf0:	e7f7      	b.n	8038be2 <__hexdig_fun+0xa>
 8038bf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8038bf6:	2b05      	cmp	r3, #5
 8038bf8:	d801      	bhi.n	8038bfe <__hexdig_fun+0x26>
 8038bfa:	3827      	subs	r0, #39	; 0x27
 8038bfc:	e7f1      	b.n	8038be2 <__hexdig_fun+0xa>
 8038bfe:	2000      	movs	r0, #0
 8038c00:	4770      	bx	lr
	...

08038c04 <__gethex>:
 8038c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038c08:	4617      	mov	r7, r2
 8038c0a:	680a      	ldr	r2, [r1, #0]
 8038c0c:	b085      	sub	sp, #20
 8038c0e:	f102 0b02 	add.w	fp, r2, #2
 8038c12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8038c16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8038c1a:	4681      	mov	r9, r0
 8038c1c:	468a      	mov	sl, r1
 8038c1e:	9302      	str	r3, [sp, #8]
 8038c20:	32fe      	adds	r2, #254	; 0xfe
 8038c22:	eb02 030b 	add.w	r3, r2, fp
 8038c26:	46d8      	mov	r8, fp
 8038c28:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8038c2c:	9301      	str	r3, [sp, #4]
 8038c2e:	2830      	cmp	r0, #48	; 0x30
 8038c30:	d0f7      	beq.n	8038c22 <__gethex+0x1e>
 8038c32:	f7ff ffd1 	bl	8038bd8 <__hexdig_fun>
 8038c36:	4604      	mov	r4, r0
 8038c38:	2800      	cmp	r0, #0
 8038c3a:	d138      	bne.n	8038cae <__gethex+0xaa>
 8038c3c:	49a7      	ldr	r1, [pc, #668]	; (8038edc <__gethex+0x2d8>)
 8038c3e:	2201      	movs	r2, #1
 8038c40:	4640      	mov	r0, r8
 8038c42:	f7fe ffd7 	bl	8037bf4 <strncmp>
 8038c46:	4606      	mov	r6, r0
 8038c48:	2800      	cmp	r0, #0
 8038c4a:	d169      	bne.n	8038d20 <__gethex+0x11c>
 8038c4c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8038c50:	465d      	mov	r5, fp
 8038c52:	f7ff ffc1 	bl	8038bd8 <__hexdig_fun>
 8038c56:	2800      	cmp	r0, #0
 8038c58:	d064      	beq.n	8038d24 <__gethex+0x120>
 8038c5a:	465a      	mov	r2, fp
 8038c5c:	7810      	ldrb	r0, [r2, #0]
 8038c5e:	2830      	cmp	r0, #48	; 0x30
 8038c60:	4690      	mov	r8, r2
 8038c62:	f102 0201 	add.w	r2, r2, #1
 8038c66:	d0f9      	beq.n	8038c5c <__gethex+0x58>
 8038c68:	f7ff ffb6 	bl	8038bd8 <__hexdig_fun>
 8038c6c:	2301      	movs	r3, #1
 8038c6e:	fab0 f480 	clz	r4, r0
 8038c72:	0964      	lsrs	r4, r4, #5
 8038c74:	465e      	mov	r6, fp
 8038c76:	9301      	str	r3, [sp, #4]
 8038c78:	4642      	mov	r2, r8
 8038c7a:	4615      	mov	r5, r2
 8038c7c:	3201      	adds	r2, #1
 8038c7e:	7828      	ldrb	r0, [r5, #0]
 8038c80:	f7ff ffaa 	bl	8038bd8 <__hexdig_fun>
 8038c84:	2800      	cmp	r0, #0
 8038c86:	d1f8      	bne.n	8038c7a <__gethex+0x76>
 8038c88:	4994      	ldr	r1, [pc, #592]	; (8038edc <__gethex+0x2d8>)
 8038c8a:	2201      	movs	r2, #1
 8038c8c:	4628      	mov	r0, r5
 8038c8e:	f7fe ffb1 	bl	8037bf4 <strncmp>
 8038c92:	b978      	cbnz	r0, 8038cb4 <__gethex+0xb0>
 8038c94:	b946      	cbnz	r6, 8038ca8 <__gethex+0xa4>
 8038c96:	1c6e      	adds	r6, r5, #1
 8038c98:	4632      	mov	r2, r6
 8038c9a:	4615      	mov	r5, r2
 8038c9c:	3201      	adds	r2, #1
 8038c9e:	7828      	ldrb	r0, [r5, #0]
 8038ca0:	f7ff ff9a 	bl	8038bd8 <__hexdig_fun>
 8038ca4:	2800      	cmp	r0, #0
 8038ca6:	d1f8      	bne.n	8038c9a <__gethex+0x96>
 8038ca8:	1b73      	subs	r3, r6, r5
 8038caa:	009e      	lsls	r6, r3, #2
 8038cac:	e004      	b.n	8038cb8 <__gethex+0xb4>
 8038cae:	2400      	movs	r4, #0
 8038cb0:	4626      	mov	r6, r4
 8038cb2:	e7e1      	b.n	8038c78 <__gethex+0x74>
 8038cb4:	2e00      	cmp	r6, #0
 8038cb6:	d1f7      	bne.n	8038ca8 <__gethex+0xa4>
 8038cb8:	782b      	ldrb	r3, [r5, #0]
 8038cba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8038cbe:	2b50      	cmp	r3, #80	; 0x50
 8038cc0:	d13d      	bne.n	8038d3e <__gethex+0x13a>
 8038cc2:	786b      	ldrb	r3, [r5, #1]
 8038cc4:	2b2b      	cmp	r3, #43	; 0x2b
 8038cc6:	d02f      	beq.n	8038d28 <__gethex+0x124>
 8038cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8038cca:	d031      	beq.n	8038d30 <__gethex+0x12c>
 8038ccc:	1c69      	adds	r1, r5, #1
 8038cce:	f04f 0b00 	mov.w	fp, #0
 8038cd2:	7808      	ldrb	r0, [r1, #0]
 8038cd4:	f7ff ff80 	bl	8038bd8 <__hexdig_fun>
 8038cd8:	1e42      	subs	r2, r0, #1
 8038cda:	b2d2      	uxtb	r2, r2
 8038cdc:	2a18      	cmp	r2, #24
 8038cde:	d82e      	bhi.n	8038d3e <__gethex+0x13a>
 8038ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8038ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8038ce8:	f7ff ff76 	bl	8038bd8 <__hexdig_fun>
 8038cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8038cf0:	fa5f fc8c 	uxtb.w	ip, ip
 8038cf4:	f1bc 0f18 	cmp.w	ip, #24
 8038cf8:	d91d      	bls.n	8038d36 <__gethex+0x132>
 8038cfa:	f1bb 0f00 	cmp.w	fp, #0
 8038cfe:	d000      	beq.n	8038d02 <__gethex+0xfe>
 8038d00:	4252      	negs	r2, r2
 8038d02:	4416      	add	r6, r2
 8038d04:	f8ca 1000 	str.w	r1, [sl]
 8038d08:	b1dc      	cbz	r4, 8038d42 <__gethex+0x13e>
 8038d0a:	9b01      	ldr	r3, [sp, #4]
 8038d0c:	2b00      	cmp	r3, #0
 8038d0e:	bf14      	ite	ne
 8038d10:	f04f 0800 	movne.w	r8, #0
 8038d14:	f04f 0806 	moveq.w	r8, #6
 8038d18:	4640      	mov	r0, r8
 8038d1a:	b005      	add	sp, #20
 8038d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8038d20:	4645      	mov	r5, r8
 8038d22:	4626      	mov	r6, r4
 8038d24:	2401      	movs	r4, #1
 8038d26:	e7c7      	b.n	8038cb8 <__gethex+0xb4>
 8038d28:	f04f 0b00 	mov.w	fp, #0
 8038d2c:	1ca9      	adds	r1, r5, #2
 8038d2e:	e7d0      	b.n	8038cd2 <__gethex+0xce>
 8038d30:	f04f 0b01 	mov.w	fp, #1
 8038d34:	e7fa      	b.n	8038d2c <__gethex+0x128>
 8038d36:	230a      	movs	r3, #10
 8038d38:	fb03 0002 	mla	r0, r3, r2, r0
 8038d3c:	e7d0      	b.n	8038ce0 <__gethex+0xdc>
 8038d3e:	4629      	mov	r1, r5
 8038d40:	e7e0      	b.n	8038d04 <__gethex+0x100>
 8038d42:	eba5 0308 	sub.w	r3, r5, r8
 8038d46:	3b01      	subs	r3, #1
 8038d48:	4621      	mov	r1, r4
 8038d4a:	2b07      	cmp	r3, #7
 8038d4c:	dc0a      	bgt.n	8038d64 <__gethex+0x160>
 8038d4e:	4648      	mov	r0, r9
 8038d50:	f000 fa5a 	bl	8039208 <_Balloc>
 8038d54:	4604      	mov	r4, r0
 8038d56:	b940      	cbnz	r0, 8038d6a <__gethex+0x166>
 8038d58:	4b61      	ldr	r3, [pc, #388]	; (8038ee0 <__gethex+0x2dc>)
 8038d5a:	4602      	mov	r2, r0
 8038d5c:	21e4      	movs	r1, #228	; 0xe4
 8038d5e:	4861      	ldr	r0, [pc, #388]	; (8038ee4 <__gethex+0x2e0>)
 8038d60:	f001 f934 	bl	8039fcc <__assert_func>
 8038d64:	3101      	adds	r1, #1
 8038d66:	105b      	asrs	r3, r3, #1
 8038d68:	e7ef      	b.n	8038d4a <__gethex+0x146>
 8038d6a:	f100 0a14 	add.w	sl, r0, #20
 8038d6e:	2300      	movs	r3, #0
 8038d70:	495a      	ldr	r1, [pc, #360]	; (8038edc <__gethex+0x2d8>)
 8038d72:	f8cd a004 	str.w	sl, [sp, #4]
 8038d76:	469b      	mov	fp, r3
 8038d78:	45a8      	cmp	r8, r5
 8038d7a:	d342      	bcc.n	8038e02 <__gethex+0x1fe>
 8038d7c:	9801      	ldr	r0, [sp, #4]
 8038d7e:	f840 bb04 	str.w	fp, [r0], #4
 8038d82:	eba0 000a 	sub.w	r0, r0, sl
 8038d86:	1080      	asrs	r0, r0, #2
 8038d88:	6120      	str	r0, [r4, #16]
 8038d8a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8038d8e:	4658      	mov	r0, fp
 8038d90:	f000 fb2c 	bl	80393ec <__hi0bits>
 8038d94:	683d      	ldr	r5, [r7, #0]
 8038d96:	eba8 0000 	sub.w	r0, r8, r0
 8038d9a:	42a8      	cmp	r0, r5
 8038d9c:	dd59      	ble.n	8038e52 <__gethex+0x24e>
 8038d9e:	eba0 0805 	sub.w	r8, r0, r5
 8038da2:	4641      	mov	r1, r8
 8038da4:	4620      	mov	r0, r4
 8038da6:	f000 febb 	bl	8039b20 <__any_on>
 8038daa:	4683      	mov	fp, r0
 8038dac:	b1b8      	cbz	r0, 8038dde <__gethex+0x1da>
 8038dae:	f108 33ff 	add.w	r3, r8, #4294967295
 8038db2:	1159      	asrs	r1, r3, #5
 8038db4:	f003 021f 	and.w	r2, r3, #31
 8038db8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8038dbc:	f04f 0b01 	mov.w	fp, #1
 8038dc0:	fa0b f202 	lsl.w	r2, fp, r2
 8038dc4:	420a      	tst	r2, r1
 8038dc6:	d00a      	beq.n	8038dde <__gethex+0x1da>
 8038dc8:	455b      	cmp	r3, fp
 8038dca:	dd06      	ble.n	8038dda <__gethex+0x1d6>
 8038dcc:	f1a8 0102 	sub.w	r1, r8, #2
 8038dd0:	4620      	mov	r0, r4
 8038dd2:	f000 fea5 	bl	8039b20 <__any_on>
 8038dd6:	2800      	cmp	r0, #0
 8038dd8:	d138      	bne.n	8038e4c <__gethex+0x248>
 8038dda:	f04f 0b02 	mov.w	fp, #2
 8038dde:	4641      	mov	r1, r8
 8038de0:	4620      	mov	r0, r4
 8038de2:	f7ff fea7 	bl	8038b34 <rshift>
 8038de6:	4446      	add	r6, r8
 8038de8:	68bb      	ldr	r3, [r7, #8]
 8038dea:	42b3      	cmp	r3, r6
 8038dec:	da41      	bge.n	8038e72 <__gethex+0x26e>
 8038dee:	4621      	mov	r1, r4
 8038df0:	4648      	mov	r0, r9
 8038df2:	f000 fa49 	bl	8039288 <_Bfree>
 8038df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8038df8:	2300      	movs	r3, #0
 8038dfa:	6013      	str	r3, [r2, #0]
 8038dfc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8038e00:	e78a      	b.n	8038d18 <__gethex+0x114>
 8038e02:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8038e06:	2a2e      	cmp	r2, #46	; 0x2e
 8038e08:	d014      	beq.n	8038e34 <__gethex+0x230>
 8038e0a:	2b20      	cmp	r3, #32
 8038e0c:	d106      	bne.n	8038e1c <__gethex+0x218>
 8038e0e:	9b01      	ldr	r3, [sp, #4]
 8038e10:	f843 bb04 	str.w	fp, [r3], #4
 8038e14:	f04f 0b00 	mov.w	fp, #0
 8038e18:	9301      	str	r3, [sp, #4]
 8038e1a:	465b      	mov	r3, fp
 8038e1c:	7828      	ldrb	r0, [r5, #0]
 8038e1e:	9303      	str	r3, [sp, #12]
 8038e20:	f7ff feda 	bl	8038bd8 <__hexdig_fun>
 8038e24:	9b03      	ldr	r3, [sp, #12]
 8038e26:	f000 000f 	and.w	r0, r0, #15
 8038e2a:	4098      	lsls	r0, r3
 8038e2c:	ea4b 0b00 	orr.w	fp, fp, r0
 8038e30:	3304      	adds	r3, #4
 8038e32:	e7a1      	b.n	8038d78 <__gethex+0x174>
 8038e34:	45a8      	cmp	r8, r5
 8038e36:	d8e8      	bhi.n	8038e0a <__gethex+0x206>
 8038e38:	2201      	movs	r2, #1
 8038e3a:	4628      	mov	r0, r5
 8038e3c:	9303      	str	r3, [sp, #12]
 8038e3e:	f7fe fed9 	bl	8037bf4 <strncmp>
 8038e42:	4926      	ldr	r1, [pc, #152]	; (8038edc <__gethex+0x2d8>)
 8038e44:	9b03      	ldr	r3, [sp, #12]
 8038e46:	2800      	cmp	r0, #0
 8038e48:	d1df      	bne.n	8038e0a <__gethex+0x206>
 8038e4a:	e795      	b.n	8038d78 <__gethex+0x174>
 8038e4c:	f04f 0b03 	mov.w	fp, #3
 8038e50:	e7c5      	b.n	8038dde <__gethex+0x1da>
 8038e52:	da0b      	bge.n	8038e6c <__gethex+0x268>
 8038e54:	eba5 0800 	sub.w	r8, r5, r0
 8038e58:	4621      	mov	r1, r4
 8038e5a:	4642      	mov	r2, r8
 8038e5c:	4648      	mov	r0, r9
 8038e5e:	f000 fc2d 	bl	80396bc <__lshift>
 8038e62:	eba6 0608 	sub.w	r6, r6, r8
 8038e66:	4604      	mov	r4, r0
 8038e68:	f100 0a14 	add.w	sl, r0, #20
 8038e6c:	f04f 0b00 	mov.w	fp, #0
 8038e70:	e7ba      	b.n	8038de8 <__gethex+0x1e4>
 8038e72:	687b      	ldr	r3, [r7, #4]
 8038e74:	42b3      	cmp	r3, r6
 8038e76:	dd73      	ble.n	8038f60 <__gethex+0x35c>
 8038e78:	1b9e      	subs	r6, r3, r6
 8038e7a:	42b5      	cmp	r5, r6
 8038e7c:	dc34      	bgt.n	8038ee8 <__gethex+0x2e4>
 8038e7e:	68fb      	ldr	r3, [r7, #12]
 8038e80:	2b02      	cmp	r3, #2
 8038e82:	d023      	beq.n	8038ecc <__gethex+0x2c8>
 8038e84:	2b03      	cmp	r3, #3
 8038e86:	d025      	beq.n	8038ed4 <__gethex+0x2d0>
 8038e88:	2b01      	cmp	r3, #1
 8038e8a:	d115      	bne.n	8038eb8 <__gethex+0x2b4>
 8038e8c:	42b5      	cmp	r5, r6
 8038e8e:	d113      	bne.n	8038eb8 <__gethex+0x2b4>
 8038e90:	2d01      	cmp	r5, #1
 8038e92:	d10b      	bne.n	8038eac <__gethex+0x2a8>
 8038e94:	9a02      	ldr	r2, [sp, #8]
 8038e96:	687b      	ldr	r3, [r7, #4]
 8038e98:	6013      	str	r3, [r2, #0]
 8038e9a:	2301      	movs	r3, #1
 8038e9c:	6123      	str	r3, [r4, #16]
 8038e9e:	f8ca 3000 	str.w	r3, [sl]
 8038ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8038ea4:	f04f 0862 	mov.w	r8, #98	; 0x62
 8038ea8:	601c      	str	r4, [r3, #0]
 8038eaa:	e735      	b.n	8038d18 <__gethex+0x114>
 8038eac:	1e69      	subs	r1, r5, #1
 8038eae:	4620      	mov	r0, r4
 8038eb0:	f000 fe36 	bl	8039b20 <__any_on>
 8038eb4:	2800      	cmp	r0, #0
 8038eb6:	d1ed      	bne.n	8038e94 <__gethex+0x290>
 8038eb8:	4621      	mov	r1, r4
 8038eba:	4648      	mov	r0, r9
 8038ebc:	f000 f9e4 	bl	8039288 <_Bfree>
 8038ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8038ec2:	2300      	movs	r3, #0
 8038ec4:	6013      	str	r3, [r2, #0]
 8038ec6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8038eca:	e725      	b.n	8038d18 <__gethex+0x114>
 8038ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8038ece:	2b00      	cmp	r3, #0
 8038ed0:	d1f2      	bne.n	8038eb8 <__gethex+0x2b4>
 8038ed2:	e7df      	b.n	8038e94 <__gethex+0x290>
 8038ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8038ed6:	2b00      	cmp	r3, #0
 8038ed8:	d1dc      	bne.n	8038e94 <__gethex+0x290>
 8038eda:	e7ed      	b.n	8038eb8 <__gethex+0x2b4>
 8038edc:	0803a938 	.word	0x0803a938
 8038ee0:	0803ab49 	.word	0x0803ab49
 8038ee4:	0803ab5a 	.word	0x0803ab5a
 8038ee8:	f106 38ff 	add.w	r8, r6, #4294967295
 8038eec:	f1bb 0f00 	cmp.w	fp, #0
 8038ef0:	d133      	bne.n	8038f5a <__gethex+0x356>
 8038ef2:	f1b8 0f00 	cmp.w	r8, #0
 8038ef6:	d004      	beq.n	8038f02 <__gethex+0x2fe>
 8038ef8:	4641      	mov	r1, r8
 8038efa:	4620      	mov	r0, r4
 8038efc:	f000 fe10 	bl	8039b20 <__any_on>
 8038f00:	4683      	mov	fp, r0
 8038f02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8038f06:	2301      	movs	r3, #1
 8038f08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8038f0c:	f008 081f 	and.w	r8, r8, #31
 8038f10:	fa03 f308 	lsl.w	r3, r3, r8
 8038f14:	4213      	tst	r3, r2
 8038f16:	4631      	mov	r1, r6
 8038f18:	4620      	mov	r0, r4
 8038f1a:	bf18      	it	ne
 8038f1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8038f20:	1bad      	subs	r5, r5, r6
 8038f22:	f7ff fe07 	bl	8038b34 <rshift>
 8038f26:	687e      	ldr	r6, [r7, #4]
 8038f28:	f04f 0802 	mov.w	r8, #2
 8038f2c:	f1bb 0f00 	cmp.w	fp, #0
 8038f30:	d04a      	beq.n	8038fc8 <__gethex+0x3c4>
 8038f32:	68fb      	ldr	r3, [r7, #12]
 8038f34:	2b02      	cmp	r3, #2
 8038f36:	d016      	beq.n	8038f66 <__gethex+0x362>
 8038f38:	2b03      	cmp	r3, #3
 8038f3a:	d018      	beq.n	8038f6e <__gethex+0x36a>
 8038f3c:	2b01      	cmp	r3, #1
 8038f3e:	d109      	bne.n	8038f54 <__gethex+0x350>
 8038f40:	f01b 0f02 	tst.w	fp, #2
 8038f44:	d006      	beq.n	8038f54 <__gethex+0x350>
 8038f46:	f8da 3000 	ldr.w	r3, [sl]
 8038f4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8038f4e:	f01b 0f01 	tst.w	fp, #1
 8038f52:	d10f      	bne.n	8038f74 <__gethex+0x370>
 8038f54:	f048 0810 	orr.w	r8, r8, #16
 8038f58:	e036      	b.n	8038fc8 <__gethex+0x3c4>
 8038f5a:	f04f 0b01 	mov.w	fp, #1
 8038f5e:	e7d0      	b.n	8038f02 <__gethex+0x2fe>
 8038f60:	f04f 0801 	mov.w	r8, #1
 8038f64:	e7e2      	b.n	8038f2c <__gethex+0x328>
 8038f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8038f68:	f1c3 0301 	rsb	r3, r3, #1
 8038f6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8038f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8038f70:	2b00      	cmp	r3, #0
 8038f72:	d0ef      	beq.n	8038f54 <__gethex+0x350>
 8038f74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8038f78:	f104 0214 	add.w	r2, r4, #20
 8038f7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8038f80:	9301      	str	r3, [sp, #4]
 8038f82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8038f86:	2300      	movs	r3, #0
 8038f88:	4694      	mov	ip, r2
 8038f8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8038f8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8038f92:	d01e      	beq.n	8038fd2 <__gethex+0x3ce>
 8038f94:	3101      	adds	r1, #1
 8038f96:	f8cc 1000 	str.w	r1, [ip]
 8038f9a:	f1b8 0f02 	cmp.w	r8, #2
 8038f9e:	f104 0214 	add.w	r2, r4, #20
 8038fa2:	d13d      	bne.n	8039020 <__gethex+0x41c>
 8038fa4:	683b      	ldr	r3, [r7, #0]
 8038fa6:	3b01      	subs	r3, #1
 8038fa8:	42ab      	cmp	r3, r5
 8038faa:	d10b      	bne.n	8038fc4 <__gethex+0x3c0>
 8038fac:	1169      	asrs	r1, r5, #5
 8038fae:	2301      	movs	r3, #1
 8038fb0:	f005 051f 	and.w	r5, r5, #31
 8038fb4:	fa03 f505 	lsl.w	r5, r3, r5
 8038fb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8038fbc:	421d      	tst	r5, r3
 8038fbe:	bf18      	it	ne
 8038fc0:	f04f 0801 	movne.w	r8, #1
 8038fc4:	f048 0820 	orr.w	r8, r8, #32
 8038fc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8038fca:	601c      	str	r4, [r3, #0]
 8038fcc:	9b02      	ldr	r3, [sp, #8]
 8038fce:	601e      	str	r6, [r3, #0]
 8038fd0:	e6a2      	b.n	8038d18 <__gethex+0x114>
 8038fd2:	4290      	cmp	r0, r2
 8038fd4:	f842 3c04 	str.w	r3, [r2, #-4]
 8038fd8:	d8d6      	bhi.n	8038f88 <__gethex+0x384>
 8038fda:	68a2      	ldr	r2, [r4, #8]
 8038fdc:	4593      	cmp	fp, r2
 8038fde:	db17      	blt.n	8039010 <__gethex+0x40c>
 8038fe0:	6861      	ldr	r1, [r4, #4]
 8038fe2:	4648      	mov	r0, r9
 8038fe4:	3101      	adds	r1, #1
 8038fe6:	f000 f90f 	bl	8039208 <_Balloc>
 8038fea:	4682      	mov	sl, r0
 8038fec:	b918      	cbnz	r0, 8038ff6 <__gethex+0x3f2>
 8038fee:	4b1b      	ldr	r3, [pc, #108]	; (803905c <__gethex+0x458>)
 8038ff0:	4602      	mov	r2, r0
 8038ff2:	2184      	movs	r1, #132	; 0x84
 8038ff4:	e6b3      	b.n	8038d5e <__gethex+0x15a>
 8038ff6:	6922      	ldr	r2, [r4, #16]
 8038ff8:	3202      	adds	r2, #2
 8038ffa:	f104 010c 	add.w	r1, r4, #12
 8038ffe:	0092      	lsls	r2, r2, #2
 8039000:	300c      	adds	r0, #12
 8039002:	f7fe feb9 	bl	8037d78 <memcpy>
 8039006:	4621      	mov	r1, r4
 8039008:	4648      	mov	r0, r9
 803900a:	f000 f93d 	bl	8039288 <_Bfree>
 803900e:	4654      	mov	r4, sl
 8039010:	6922      	ldr	r2, [r4, #16]
 8039012:	1c51      	adds	r1, r2, #1
 8039014:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8039018:	6121      	str	r1, [r4, #16]
 803901a:	2101      	movs	r1, #1
 803901c:	6151      	str	r1, [r2, #20]
 803901e:	e7bc      	b.n	8038f9a <__gethex+0x396>
 8039020:	6921      	ldr	r1, [r4, #16]
 8039022:	4559      	cmp	r1, fp
 8039024:	dd0b      	ble.n	803903e <__gethex+0x43a>
 8039026:	2101      	movs	r1, #1
 8039028:	4620      	mov	r0, r4
 803902a:	f7ff fd83 	bl	8038b34 <rshift>
 803902e:	68bb      	ldr	r3, [r7, #8]
 8039030:	3601      	adds	r6, #1
 8039032:	42b3      	cmp	r3, r6
 8039034:	f6ff aedb 	blt.w	8038dee <__gethex+0x1ea>
 8039038:	f04f 0801 	mov.w	r8, #1
 803903c:	e7c2      	b.n	8038fc4 <__gethex+0x3c0>
 803903e:	f015 051f 	ands.w	r5, r5, #31
 8039042:	d0f9      	beq.n	8039038 <__gethex+0x434>
 8039044:	9b01      	ldr	r3, [sp, #4]
 8039046:	441a      	add	r2, r3
 8039048:	f1c5 0520 	rsb	r5, r5, #32
 803904c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8039050:	f000 f9cc 	bl	80393ec <__hi0bits>
 8039054:	42a8      	cmp	r0, r5
 8039056:	dbe6      	blt.n	8039026 <__gethex+0x422>
 8039058:	e7ee      	b.n	8039038 <__gethex+0x434>
 803905a:	bf00      	nop
 803905c:	0803ab49 	.word	0x0803ab49

08039060 <L_shift>:
 8039060:	f1c2 0208 	rsb	r2, r2, #8
 8039064:	0092      	lsls	r2, r2, #2
 8039066:	b570      	push	{r4, r5, r6, lr}
 8039068:	f1c2 0620 	rsb	r6, r2, #32
 803906c:	6843      	ldr	r3, [r0, #4]
 803906e:	6804      	ldr	r4, [r0, #0]
 8039070:	fa03 f506 	lsl.w	r5, r3, r6
 8039074:	432c      	orrs	r4, r5
 8039076:	40d3      	lsrs	r3, r2
 8039078:	6004      	str	r4, [r0, #0]
 803907a:	f840 3f04 	str.w	r3, [r0, #4]!
 803907e:	4288      	cmp	r0, r1
 8039080:	d3f4      	bcc.n	803906c <L_shift+0xc>
 8039082:	bd70      	pop	{r4, r5, r6, pc}

08039084 <__match>:
 8039084:	b530      	push	{r4, r5, lr}
 8039086:	6803      	ldr	r3, [r0, #0]
 8039088:	3301      	adds	r3, #1
 803908a:	f811 4b01 	ldrb.w	r4, [r1], #1
 803908e:	b914      	cbnz	r4, 8039096 <__match+0x12>
 8039090:	6003      	str	r3, [r0, #0]
 8039092:	2001      	movs	r0, #1
 8039094:	bd30      	pop	{r4, r5, pc}
 8039096:	f813 2b01 	ldrb.w	r2, [r3], #1
 803909a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803909e:	2d19      	cmp	r5, #25
 80390a0:	bf98      	it	ls
 80390a2:	3220      	addls	r2, #32
 80390a4:	42a2      	cmp	r2, r4
 80390a6:	d0f0      	beq.n	803908a <__match+0x6>
 80390a8:	2000      	movs	r0, #0
 80390aa:	e7f3      	b.n	8039094 <__match+0x10>

080390ac <__hexnan>:
 80390ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80390b0:	680b      	ldr	r3, [r1, #0]
 80390b2:	6801      	ldr	r1, [r0, #0]
 80390b4:	115e      	asrs	r6, r3, #5
 80390b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80390ba:	f013 031f 	ands.w	r3, r3, #31
 80390be:	b087      	sub	sp, #28
 80390c0:	bf18      	it	ne
 80390c2:	3604      	addne	r6, #4
 80390c4:	2500      	movs	r5, #0
 80390c6:	1f37      	subs	r7, r6, #4
 80390c8:	4682      	mov	sl, r0
 80390ca:	4690      	mov	r8, r2
 80390cc:	9301      	str	r3, [sp, #4]
 80390ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80390d2:	46b9      	mov	r9, r7
 80390d4:	463c      	mov	r4, r7
 80390d6:	9502      	str	r5, [sp, #8]
 80390d8:	46ab      	mov	fp, r5
 80390da:	784a      	ldrb	r2, [r1, #1]
 80390dc:	1c4b      	adds	r3, r1, #1
 80390de:	9303      	str	r3, [sp, #12]
 80390e0:	b342      	cbz	r2, 8039134 <__hexnan+0x88>
 80390e2:	4610      	mov	r0, r2
 80390e4:	9105      	str	r1, [sp, #20]
 80390e6:	9204      	str	r2, [sp, #16]
 80390e8:	f7ff fd76 	bl	8038bd8 <__hexdig_fun>
 80390ec:	2800      	cmp	r0, #0
 80390ee:	d14f      	bne.n	8039190 <__hexnan+0xe4>
 80390f0:	9a04      	ldr	r2, [sp, #16]
 80390f2:	9905      	ldr	r1, [sp, #20]
 80390f4:	2a20      	cmp	r2, #32
 80390f6:	d818      	bhi.n	803912a <__hexnan+0x7e>
 80390f8:	9b02      	ldr	r3, [sp, #8]
 80390fa:	459b      	cmp	fp, r3
 80390fc:	dd13      	ble.n	8039126 <__hexnan+0x7a>
 80390fe:	454c      	cmp	r4, r9
 8039100:	d206      	bcs.n	8039110 <__hexnan+0x64>
 8039102:	2d07      	cmp	r5, #7
 8039104:	dc04      	bgt.n	8039110 <__hexnan+0x64>
 8039106:	462a      	mov	r2, r5
 8039108:	4649      	mov	r1, r9
 803910a:	4620      	mov	r0, r4
 803910c:	f7ff ffa8 	bl	8039060 <L_shift>
 8039110:	4544      	cmp	r4, r8
 8039112:	d950      	bls.n	80391b6 <__hexnan+0x10a>
 8039114:	2300      	movs	r3, #0
 8039116:	f1a4 0904 	sub.w	r9, r4, #4
 803911a:	f844 3c04 	str.w	r3, [r4, #-4]
 803911e:	f8cd b008 	str.w	fp, [sp, #8]
 8039122:	464c      	mov	r4, r9
 8039124:	461d      	mov	r5, r3
 8039126:	9903      	ldr	r1, [sp, #12]
 8039128:	e7d7      	b.n	80390da <__hexnan+0x2e>
 803912a:	2a29      	cmp	r2, #41	; 0x29
 803912c:	d155      	bne.n	80391da <__hexnan+0x12e>
 803912e:	3102      	adds	r1, #2
 8039130:	f8ca 1000 	str.w	r1, [sl]
 8039134:	f1bb 0f00 	cmp.w	fp, #0
 8039138:	d04f      	beq.n	80391da <__hexnan+0x12e>
 803913a:	454c      	cmp	r4, r9
 803913c:	d206      	bcs.n	803914c <__hexnan+0xa0>
 803913e:	2d07      	cmp	r5, #7
 8039140:	dc04      	bgt.n	803914c <__hexnan+0xa0>
 8039142:	462a      	mov	r2, r5
 8039144:	4649      	mov	r1, r9
 8039146:	4620      	mov	r0, r4
 8039148:	f7ff ff8a 	bl	8039060 <L_shift>
 803914c:	4544      	cmp	r4, r8
 803914e:	d934      	bls.n	80391ba <__hexnan+0x10e>
 8039150:	f1a8 0204 	sub.w	r2, r8, #4
 8039154:	4623      	mov	r3, r4
 8039156:	f853 1b04 	ldr.w	r1, [r3], #4
 803915a:	f842 1f04 	str.w	r1, [r2, #4]!
 803915e:	429f      	cmp	r7, r3
 8039160:	d2f9      	bcs.n	8039156 <__hexnan+0xaa>
 8039162:	1b3b      	subs	r3, r7, r4
 8039164:	f023 0303 	bic.w	r3, r3, #3
 8039168:	3304      	adds	r3, #4
 803916a:	3e03      	subs	r6, #3
 803916c:	3401      	adds	r4, #1
 803916e:	42a6      	cmp	r6, r4
 8039170:	bf38      	it	cc
 8039172:	2304      	movcc	r3, #4
 8039174:	4443      	add	r3, r8
 8039176:	2200      	movs	r2, #0
 8039178:	f843 2b04 	str.w	r2, [r3], #4
 803917c:	429f      	cmp	r7, r3
 803917e:	d2fb      	bcs.n	8039178 <__hexnan+0xcc>
 8039180:	683b      	ldr	r3, [r7, #0]
 8039182:	b91b      	cbnz	r3, 803918c <__hexnan+0xe0>
 8039184:	4547      	cmp	r7, r8
 8039186:	d126      	bne.n	80391d6 <__hexnan+0x12a>
 8039188:	2301      	movs	r3, #1
 803918a:	603b      	str	r3, [r7, #0]
 803918c:	2005      	movs	r0, #5
 803918e:	e025      	b.n	80391dc <__hexnan+0x130>
 8039190:	3501      	adds	r5, #1
 8039192:	2d08      	cmp	r5, #8
 8039194:	f10b 0b01 	add.w	fp, fp, #1
 8039198:	dd06      	ble.n	80391a8 <__hexnan+0xfc>
 803919a:	4544      	cmp	r4, r8
 803919c:	d9c3      	bls.n	8039126 <__hexnan+0x7a>
 803919e:	2300      	movs	r3, #0
 80391a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80391a4:	2501      	movs	r5, #1
 80391a6:	3c04      	subs	r4, #4
 80391a8:	6822      	ldr	r2, [r4, #0]
 80391aa:	f000 000f 	and.w	r0, r0, #15
 80391ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80391b2:	6020      	str	r0, [r4, #0]
 80391b4:	e7b7      	b.n	8039126 <__hexnan+0x7a>
 80391b6:	2508      	movs	r5, #8
 80391b8:	e7b5      	b.n	8039126 <__hexnan+0x7a>
 80391ba:	9b01      	ldr	r3, [sp, #4]
 80391bc:	2b00      	cmp	r3, #0
 80391be:	d0df      	beq.n	8039180 <__hexnan+0xd4>
 80391c0:	f1c3 0320 	rsb	r3, r3, #32
 80391c4:	f04f 32ff 	mov.w	r2, #4294967295
 80391c8:	40da      	lsrs	r2, r3
 80391ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80391ce:	4013      	ands	r3, r2
 80391d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80391d4:	e7d4      	b.n	8039180 <__hexnan+0xd4>
 80391d6:	3f04      	subs	r7, #4
 80391d8:	e7d2      	b.n	8039180 <__hexnan+0xd4>
 80391da:	2004      	movs	r0, #4
 80391dc:	b007      	add	sp, #28
 80391de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080391e2 <__ascii_mbtowc>:
 80391e2:	b082      	sub	sp, #8
 80391e4:	b901      	cbnz	r1, 80391e8 <__ascii_mbtowc+0x6>
 80391e6:	a901      	add	r1, sp, #4
 80391e8:	b142      	cbz	r2, 80391fc <__ascii_mbtowc+0x1a>
 80391ea:	b14b      	cbz	r3, 8039200 <__ascii_mbtowc+0x1e>
 80391ec:	7813      	ldrb	r3, [r2, #0]
 80391ee:	600b      	str	r3, [r1, #0]
 80391f0:	7812      	ldrb	r2, [r2, #0]
 80391f2:	1e10      	subs	r0, r2, #0
 80391f4:	bf18      	it	ne
 80391f6:	2001      	movne	r0, #1
 80391f8:	b002      	add	sp, #8
 80391fa:	4770      	bx	lr
 80391fc:	4610      	mov	r0, r2
 80391fe:	e7fb      	b.n	80391f8 <__ascii_mbtowc+0x16>
 8039200:	f06f 0001 	mvn.w	r0, #1
 8039204:	e7f8      	b.n	80391f8 <__ascii_mbtowc+0x16>
	...

08039208 <_Balloc>:
 8039208:	b570      	push	{r4, r5, r6, lr}
 803920a:	69c6      	ldr	r6, [r0, #28]
 803920c:	4604      	mov	r4, r0
 803920e:	460d      	mov	r5, r1
 8039210:	b976      	cbnz	r6, 8039230 <_Balloc+0x28>
 8039212:	2010      	movs	r0, #16
 8039214:	f7fd f852 	bl	80362bc <malloc>
 8039218:	4602      	mov	r2, r0
 803921a:	61e0      	str	r0, [r4, #28]
 803921c:	b920      	cbnz	r0, 8039228 <_Balloc+0x20>
 803921e:	4b18      	ldr	r3, [pc, #96]	; (8039280 <_Balloc+0x78>)
 8039220:	4818      	ldr	r0, [pc, #96]	; (8039284 <_Balloc+0x7c>)
 8039222:	216b      	movs	r1, #107	; 0x6b
 8039224:	f000 fed2 	bl	8039fcc <__assert_func>
 8039228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803922c:	6006      	str	r6, [r0, #0]
 803922e:	60c6      	str	r6, [r0, #12]
 8039230:	69e6      	ldr	r6, [r4, #28]
 8039232:	68f3      	ldr	r3, [r6, #12]
 8039234:	b183      	cbz	r3, 8039258 <_Balloc+0x50>
 8039236:	69e3      	ldr	r3, [r4, #28]
 8039238:	68db      	ldr	r3, [r3, #12]
 803923a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803923e:	b9b8      	cbnz	r0, 8039270 <_Balloc+0x68>
 8039240:	2101      	movs	r1, #1
 8039242:	fa01 f605 	lsl.w	r6, r1, r5
 8039246:	1d72      	adds	r2, r6, #5
 8039248:	0092      	lsls	r2, r2, #2
 803924a:	4620      	mov	r0, r4
 803924c:	f000 fedc 	bl	803a008 <_calloc_r>
 8039250:	b160      	cbz	r0, 803926c <_Balloc+0x64>
 8039252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8039256:	e00e      	b.n	8039276 <_Balloc+0x6e>
 8039258:	2221      	movs	r2, #33	; 0x21
 803925a:	2104      	movs	r1, #4
 803925c:	4620      	mov	r0, r4
 803925e:	f000 fed3 	bl	803a008 <_calloc_r>
 8039262:	69e3      	ldr	r3, [r4, #28]
 8039264:	60f0      	str	r0, [r6, #12]
 8039266:	68db      	ldr	r3, [r3, #12]
 8039268:	2b00      	cmp	r3, #0
 803926a:	d1e4      	bne.n	8039236 <_Balloc+0x2e>
 803926c:	2000      	movs	r0, #0
 803926e:	bd70      	pop	{r4, r5, r6, pc}
 8039270:	6802      	ldr	r2, [r0, #0]
 8039272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8039276:	2300      	movs	r3, #0
 8039278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803927c:	e7f7      	b.n	803926e <_Balloc+0x66>
 803927e:	bf00      	nop
 8039280:	0803aada 	.word	0x0803aada
 8039284:	0803abba 	.word	0x0803abba

08039288 <_Bfree>:
 8039288:	b570      	push	{r4, r5, r6, lr}
 803928a:	69c6      	ldr	r6, [r0, #28]
 803928c:	4605      	mov	r5, r0
 803928e:	460c      	mov	r4, r1
 8039290:	b976      	cbnz	r6, 80392b0 <_Bfree+0x28>
 8039292:	2010      	movs	r0, #16
 8039294:	f7fd f812 	bl	80362bc <malloc>
 8039298:	4602      	mov	r2, r0
 803929a:	61e8      	str	r0, [r5, #28]
 803929c:	b920      	cbnz	r0, 80392a8 <_Bfree+0x20>
 803929e:	4b09      	ldr	r3, [pc, #36]	; (80392c4 <_Bfree+0x3c>)
 80392a0:	4809      	ldr	r0, [pc, #36]	; (80392c8 <_Bfree+0x40>)
 80392a2:	218f      	movs	r1, #143	; 0x8f
 80392a4:	f000 fe92 	bl	8039fcc <__assert_func>
 80392a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80392ac:	6006      	str	r6, [r0, #0]
 80392ae:	60c6      	str	r6, [r0, #12]
 80392b0:	b13c      	cbz	r4, 80392c2 <_Bfree+0x3a>
 80392b2:	69eb      	ldr	r3, [r5, #28]
 80392b4:	6862      	ldr	r2, [r4, #4]
 80392b6:	68db      	ldr	r3, [r3, #12]
 80392b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80392bc:	6021      	str	r1, [r4, #0]
 80392be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80392c2:	bd70      	pop	{r4, r5, r6, pc}
 80392c4:	0803aada 	.word	0x0803aada
 80392c8:	0803abba 	.word	0x0803abba

080392cc <__multadd>:
 80392cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80392d0:	690d      	ldr	r5, [r1, #16]
 80392d2:	4607      	mov	r7, r0
 80392d4:	460c      	mov	r4, r1
 80392d6:	461e      	mov	r6, r3
 80392d8:	f101 0c14 	add.w	ip, r1, #20
 80392dc:	2000      	movs	r0, #0
 80392de:	f8dc 3000 	ldr.w	r3, [ip]
 80392e2:	b299      	uxth	r1, r3
 80392e4:	fb02 6101 	mla	r1, r2, r1, r6
 80392e8:	0c1e      	lsrs	r6, r3, #16
 80392ea:	0c0b      	lsrs	r3, r1, #16
 80392ec:	fb02 3306 	mla	r3, r2, r6, r3
 80392f0:	b289      	uxth	r1, r1
 80392f2:	3001      	adds	r0, #1
 80392f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80392f8:	4285      	cmp	r5, r0
 80392fa:	f84c 1b04 	str.w	r1, [ip], #4
 80392fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8039302:	dcec      	bgt.n	80392de <__multadd+0x12>
 8039304:	b30e      	cbz	r6, 803934a <__multadd+0x7e>
 8039306:	68a3      	ldr	r3, [r4, #8]
 8039308:	42ab      	cmp	r3, r5
 803930a:	dc19      	bgt.n	8039340 <__multadd+0x74>
 803930c:	6861      	ldr	r1, [r4, #4]
 803930e:	4638      	mov	r0, r7
 8039310:	3101      	adds	r1, #1
 8039312:	f7ff ff79 	bl	8039208 <_Balloc>
 8039316:	4680      	mov	r8, r0
 8039318:	b928      	cbnz	r0, 8039326 <__multadd+0x5a>
 803931a:	4602      	mov	r2, r0
 803931c:	4b0c      	ldr	r3, [pc, #48]	; (8039350 <__multadd+0x84>)
 803931e:	480d      	ldr	r0, [pc, #52]	; (8039354 <__multadd+0x88>)
 8039320:	21ba      	movs	r1, #186	; 0xba
 8039322:	f000 fe53 	bl	8039fcc <__assert_func>
 8039326:	6922      	ldr	r2, [r4, #16]
 8039328:	3202      	adds	r2, #2
 803932a:	f104 010c 	add.w	r1, r4, #12
 803932e:	0092      	lsls	r2, r2, #2
 8039330:	300c      	adds	r0, #12
 8039332:	f7fe fd21 	bl	8037d78 <memcpy>
 8039336:	4621      	mov	r1, r4
 8039338:	4638      	mov	r0, r7
 803933a:	f7ff ffa5 	bl	8039288 <_Bfree>
 803933e:	4644      	mov	r4, r8
 8039340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8039344:	3501      	adds	r5, #1
 8039346:	615e      	str	r6, [r3, #20]
 8039348:	6125      	str	r5, [r4, #16]
 803934a:	4620      	mov	r0, r4
 803934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8039350:	0803ab49 	.word	0x0803ab49
 8039354:	0803abba 	.word	0x0803abba

08039358 <__s2b>:
 8039358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803935c:	460c      	mov	r4, r1
 803935e:	4615      	mov	r5, r2
 8039360:	461f      	mov	r7, r3
 8039362:	2209      	movs	r2, #9
 8039364:	3308      	adds	r3, #8
 8039366:	4606      	mov	r6, r0
 8039368:	fb93 f3f2 	sdiv	r3, r3, r2
 803936c:	2100      	movs	r1, #0
 803936e:	2201      	movs	r2, #1
 8039370:	429a      	cmp	r2, r3
 8039372:	db09      	blt.n	8039388 <__s2b+0x30>
 8039374:	4630      	mov	r0, r6
 8039376:	f7ff ff47 	bl	8039208 <_Balloc>
 803937a:	b940      	cbnz	r0, 803938e <__s2b+0x36>
 803937c:	4602      	mov	r2, r0
 803937e:	4b19      	ldr	r3, [pc, #100]	; (80393e4 <__s2b+0x8c>)
 8039380:	4819      	ldr	r0, [pc, #100]	; (80393e8 <__s2b+0x90>)
 8039382:	21d3      	movs	r1, #211	; 0xd3
 8039384:	f000 fe22 	bl	8039fcc <__assert_func>
 8039388:	0052      	lsls	r2, r2, #1
 803938a:	3101      	adds	r1, #1
 803938c:	e7f0      	b.n	8039370 <__s2b+0x18>
 803938e:	9b08      	ldr	r3, [sp, #32]
 8039390:	6143      	str	r3, [r0, #20]
 8039392:	2d09      	cmp	r5, #9
 8039394:	f04f 0301 	mov.w	r3, #1
 8039398:	6103      	str	r3, [r0, #16]
 803939a:	dd16      	ble.n	80393ca <__s2b+0x72>
 803939c:	f104 0909 	add.w	r9, r4, #9
 80393a0:	46c8      	mov	r8, r9
 80393a2:	442c      	add	r4, r5
 80393a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80393a8:	4601      	mov	r1, r0
 80393aa:	3b30      	subs	r3, #48	; 0x30
 80393ac:	220a      	movs	r2, #10
 80393ae:	4630      	mov	r0, r6
 80393b0:	f7ff ff8c 	bl	80392cc <__multadd>
 80393b4:	45a0      	cmp	r8, r4
 80393b6:	d1f5      	bne.n	80393a4 <__s2b+0x4c>
 80393b8:	f1a5 0408 	sub.w	r4, r5, #8
 80393bc:	444c      	add	r4, r9
 80393be:	1b2d      	subs	r5, r5, r4
 80393c0:	1963      	adds	r3, r4, r5
 80393c2:	42bb      	cmp	r3, r7
 80393c4:	db04      	blt.n	80393d0 <__s2b+0x78>
 80393c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80393ca:	340a      	adds	r4, #10
 80393cc:	2509      	movs	r5, #9
 80393ce:	e7f6      	b.n	80393be <__s2b+0x66>
 80393d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80393d4:	4601      	mov	r1, r0
 80393d6:	3b30      	subs	r3, #48	; 0x30
 80393d8:	220a      	movs	r2, #10
 80393da:	4630      	mov	r0, r6
 80393dc:	f7ff ff76 	bl	80392cc <__multadd>
 80393e0:	e7ee      	b.n	80393c0 <__s2b+0x68>
 80393e2:	bf00      	nop
 80393e4:	0803ab49 	.word	0x0803ab49
 80393e8:	0803abba 	.word	0x0803abba

080393ec <__hi0bits>:
 80393ec:	0c03      	lsrs	r3, r0, #16
 80393ee:	041b      	lsls	r3, r3, #16
 80393f0:	b9d3      	cbnz	r3, 8039428 <__hi0bits+0x3c>
 80393f2:	0400      	lsls	r0, r0, #16
 80393f4:	2310      	movs	r3, #16
 80393f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80393fa:	bf04      	itt	eq
 80393fc:	0200      	lsleq	r0, r0, #8
 80393fe:	3308      	addeq	r3, #8
 8039400:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8039404:	bf04      	itt	eq
 8039406:	0100      	lsleq	r0, r0, #4
 8039408:	3304      	addeq	r3, #4
 803940a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 803940e:	bf04      	itt	eq
 8039410:	0080      	lsleq	r0, r0, #2
 8039412:	3302      	addeq	r3, #2
 8039414:	2800      	cmp	r0, #0
 8039416:	db05      	blt.n	8039424 <__hi0bits+0x38>
 8039418:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 803941c:	f103 0301 	add.w	r3, r3, #1
 8039420:	bf08      	it	eq
 8039422:	2320      	moveq	r3, #32
 8039424:	4618      	mov	r0, r3
 8039426:	4770      	bx	lr
 8039428:	2300      	movs	r3, #0
 803942a:	e7e4      	b.n	80393f6 <__hi0bits+0xa>

0803942c <__lo0bits>:
 803942c:	6803      	ldr	r3, [r0, #0]
 803942e:	f013 0207 	ands.w	r2, r3, #7
 8039432:	d00c      	beq.n	803944e <__lo0bits+0x22>
 8039434:	07d9      	lsls	r1, r3, #31
 8039436:	d422      	bmi.n	803947e <__lo0bits+0x52>
 8039438:	079a      	lsls	r2, r3, #30
 803943a:	bf49      	itett	mi
 803943c:	085b      	lsrmi	r3, r3, #1
 803943e:	089b      	lsrpl	r3, r3, #2
 8039440:	6003      	strmi	r3, [r0, #0]
 8039442:	2201      	movmi	r2, #1
 8039444:	bf5c      	itt	pl
 8039446:	6003      	strpl	r3, [r0, #0]
 8039448:	2202      	movpl	r2, #2
 803944a:	4610      	mov	r0, r2
 803944c:	4770      	bx	lr
 803944e:	b299      	uxth	r1, r3
 8039450:	b909      	cbnz	r1, 8039456 <__lo0bits+0x2a>
 8039452:	0c1b      	lsrs	r3, r3, #16
 8039454:	2210      	movs	r2, #16
 8039456:	b2d9      	uxtb	r1, r3
 8039458:	b909      	cbnz	r1, 803945e <__lo0bits+0x32>
 803945a:	3208      	adds	r2, #8
 803945c:	0a1b      	lsrs	r3, r3, #8
 803945e:	0719      	lsls	r1, r3, #28
 8039460:	bf04      	itt	eq
 8039462:	091b      	lsreq	r3, r3, #4
 8039464:	3204      	addeq	r2, #4
 8039466:	0799      	lsls	r1, r3, #30
 8039468:	bf04      	itt	eq
 803946a:	089b      	lsreq	r3, r3, #2
 803946c:	3202      	addeq	r2, #2
 803946e:	07d9      	lsls	r1, r3, #31
 8039470:	d403      	bmi.n	803947a <__lo0bits+0x4e>
 8039472:	085b      	lsrs	r3, r3, #1
 8039474:	f102 0201 	add.w	r2, r2, #1
 8039478:	d003      	beq.n	8039482 <__lo0bits+0x56>
 803947a:	6003      	str	r3, [r0, #0]
 803947c:	e7e5      	b.n	803944a <__lo0bits+0x1e>
 803947e:	2200      	movs	r2, #0
 8039480:	e7e3      	b.n	803944a <__lo0bits+0x1e>
 8039482:	2220      	movs	r2, #32
 8039484:	e7e1      	b.n	803944a <__lo0bits+0x1e>
	...

08039488 <__i2b>:
 8039488:	b510      	push	{r4, lr}
 803948a:	460c      	mov	r4, r1
 803948c:	2101      	movs	r1, #1
 803948e:	f7ff febb 	bl	8039208 <_Balloc>
 8039492:	4602      	mov	r2, r0
 8039494:	b928      	cbnz	r0, 80394a2 <__i2b+0x1a>
 8039496:	4b05      	ldr	r3, [pc, #20]	; (80394ac <__i2b+0x24>)
 8039498:	4805      	ldr	r0, [pc, #20]	; (80394b0 <__i2b+0x28>)
 803949a:	f240 1145 	movw	r1, #325	; 0x145
 803949e:	f000 fd95 	bl	8039fcc <__assert_func>
 80394a2:	2301      	movs	r3, #1
 80394a4:	6144      	str	r4, [r0, #20]
 80394a6:	6103      	str	r3, [r0, #16]
 80394a8:	bd10      	pop	{r4, pc}
 80394aa:	bf00      	nop
 80394ac:	0803ab49 	.word	0x0803ab49
 80394b0:	0803abba 	.word	0x0803abba

080394b4 <__multiply>:
 80394b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80394b8:	4691      	mov	r9, r2
 80394ba:	690a      	ldr	r2, [r1, #16]
 80394bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80394c0:	429a      	cmp	r2, r3
 80394c2:	bfb8      	it	lt
 80394c4:	460b      	movlt	r3, r1
 80394c6:	460c      	mov	r4, r1
 80394c8:	bfbc      	itt	lt
 80394ca:	464c      	movlt	r4, r9
 80394cc:	4699      	movlt	r9, r3
 80394ce:	6927      	ldr	r7, [r4, #16]
 80394d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80394d4:	68a3      	ldr	r3, [r4, #8]
 80394d6:	6861      	ldr	r1, [r4, #4]
 80394d8:	eb07 060a 	add.w	r6, r7, sl
 80394dc:	42b3      	cmp	r3, r6
 80394de:	b085      	sub	sp, #20
 80394e0:	bfb8      	it	lt
 80394e2:	3101      	addlt	r1, #1
 80394e4:	f7ff fe90 	bl	8039208 <_Balloc>
 80394e8:	b930      	cbnz	r0, 80394f8 <__multiply+0x44>
 80394ea:	4602      	mov	r2, r0
 80394ec:	4b44      	ldr	r3, [pc, #272]	; (8039600 <__multiply+0x14c>)
 80394ee:	4845      	ldr	r0, [pc, #276]	; (8039604 <__multiply+0x150>)
 80394f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80394f4:	f000 fd6a 	bl	8039fcc <__assert_func>
 80394f8:	f100 0514 	add.w	r5, r0, #20
 80394fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8039500:	462b      	mov	r3, r5
 8039502:	2200      	movs	r2, #0
 8039504:	4543      	cmp	r3, r8
 8039506:	d321      	bcc.n	803954c <__multiply+0x98>
 8039508:	f104 0314 	add.w	r3, r4, #20
 803950c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8039510:	f109 0314 	add.w	r3, r9, #20
 8039514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8039518:	9202      	str	r2, [sp, #8]
 803951a:	1b3a      	subs	r2, r7, r4
 803951c:	3a15      	subs	r2, #21
 803951e:	f022 0203 	bic.w	r2, r2, #3
 8039522:	3204      	adds	r2, #4
 8039524:	f104 0115 	add.w	r1, r4, #21
 8039528:	428f      	cmp	r7, r1
 803952a:	bf38      	it	cc
 803952c:	2204      	movcc	r2, #4
 803952e:	9201      	str	r2, [sp, #4]
 8039530:	9a02      	ldr	r2, [sp, #8]
 8039532:	9303      	str	r3, [sp, #12]
 8039534:	429a      	cmp	r2, r3
 8039536:	d80c      	bhi.n	8039552 <__multiply+0x9e>
 8039538:	2e00      	cmp	r6, #0
 803953a:	dd03      	ble.n	8039544 <__multiply+0x90>
 803953c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8039540:	2b00      	cmp	r3, #0
 8039542:	d05b      	beq.n	80395fc <__multiply+0x148>
 8039544:	6106      	str	r6, [r0, #16]
 8039546:	b005      	add	sp, #20
 8039548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803954c:	f843 2b04 	str.w	r2, [r3], #4
 8039550:	e7d8      	b.n	8039504 <__multiply+0x50>
 8039552:	f8b3 a000 	ldrh.w	sl, [r3]
 8039556:	f1ba 0f00 	cmp.w	sl, #0
 803955a:	d024      	beq.n	80395a6 <__multiply+0xf2>
 803955c:	f104 0e14 	add.w	lr, r4, #20
 8039560:	46a9      	mov	r9, r5
 8039562:	f04f 0c00 	mov.w	ip, #0
 8039566:	f85e 2b04 	ldr.w	r2, [lr], #4
 803956a:	f8d9 1000 	ldr.w	r1, [r9]
 803956e:	fa1f fb82 	uxth.w	fp, r2
 8039572:	b289      	uxth	r1, r1
 8039574:	fb0a 110b 	mla	r1, sl, fp, r1
 8039578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 803957c:	f8d9 2000 	ldr.w	r2, [r9]
 8039580:	4461      	add	r1, ip
 8039582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8039586:	fb0a c20b 	mla	r2, sl, fp, ip
 803958a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 803958e:	b289      	uxth	r1, r1
 8039590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8039594:	4577      	cmp	r7, lr
 8039596:	f849 1b04 	str.w	r1, [r9], #4
 803959a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 803959e:	d8e2      	bhi.n	8039566 <__multiply+0xb2>
 80395a0:	9a01      	ldr	r2, [sp, #4]
 80395a2:	f845 c002 	str.w	ip, [r5, r2]
 80395a6:	9a03      	ldr	r2, [sp, #12]
 80395a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80395ac:	3304      	adds	r3, #4
 80395ae:	f1b9 0f00 	cmp.w	r9, #0
 80395b2:	d021      	beq.n	80395f8 <__multiply+0x144>
 80395b4:	6829      	ldr	r1, [r5, #0]
 80395b6:	f104 0c14 	add.w	ip, r4, #20
 80395ba:	46ae      	mov	lr, r5
 80395bc:	f04f 0a00 	mov.w	sl, #0
 80395c0:	f8bc b000 	ldrh.w	fp, [ip]
 80395c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80395c8:	fb09 220b 	mla	r2, r9, fp, r2
 80395cc:	4452      	add	r2, sl
 80395ce:	b289      	uxth	r1, r1
 80395d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80395d4:	f84e 1b04 	str.w	r1, [lr], #4
 80395d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80395dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80395e0:	f8be 1000 	ldrh.w	r1, [lr]
 80395e4:	fb09 110a 	mla	r1, r9, sl, r1
 80395e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80395ec:	4567      	cmp	r7, ip
 80395ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80395f2:	d8e5      	bhi.n	80395c0 <__multiply+0x10c>
 80395f4:	9a01      	ldr	r2, [sp, #4]
 80395f6:	50a9      	str	r1, [r5, r2]
 80395f8:	3504      	adds	r5, #4
 80395fa:	e799      	b.n	8039530 <__multiply+0x7c>
 80395fc:	3e01      	subs	r6, #1
 80395fe:	e79b      	b.n	8039538 <__multiply+0x84>
 8039600:	0803ab49 	.word	0x0803ab49
 8039604:	0803abba 	.word	0x0803abba

08039608 <__pow5mult>:
 8039608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803960c:	4615      	mov	r5, r2
 803960e:	f012 0203 	ands.w	r2, r2, #3
 8039612:	4606      	mov	r6, r0
 8039614:	460f      	mov	r7, r1
 8039616:	d007      	beq.n	8039628 <__pow5mult+0x20>
 8039618:	4c25      	ldr	r4, [pc, #148]	; (80396b0 <__pow5mult+0xa8>)
 803961a:	3a01      	subs	r2, #1
 803961c:	2300      	movs	r3, #0
 803961e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8039622:	f7ff fe53 	bl	80392cc <__multadd>
 8039626:	4607      	mov	r7, r0
 8039628:	10ad      	asrs	r5, r5, #2
 803962a:	d03d      	beq.n	80396a8 <__pow5mult+0xa0>
 803962c:	69f4      	ldr	r4, [r6, #28]
 803962e:	b97c      	cbnz	r4, 8039650 <__pow5mult+0x48>
 8039630:	2010      	movs	r0, #16
 8039632:	f7fc fe43 	bl	80362bc <malloc>
 8039636:	4602      	mov	r2, r0
 8039638:	61f0      	str	r0, [r6, #28]
 803963a:	b928      	cbnz	r0, 8039648 <__pow5mult+0x40>
 803963c:	4b1d      	ldr	r3, [pc, #116]	; (80396b4 <__pow5mult+0xac>)
 803963e:	481e      	ldr	r0, [pc, #120]	; (80396b8 <__pow5mult+0xb0>)
 8039640:	f240 11b3 	movw	r1, #435	; 0x1b3
 8039644:	f000 fcc2 	bl	8039fcc <__assert_func>
 8039648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803964c:	6004      	str	r4, [r0, #0]
 803964e:	60c4      	str	r4, [r0, #12]
 8039650:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8039654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8039658:	b94c      	cbnz	r4, 803966e <__pow5mult+0x66>
 803965a:	f240 2171 	movw	r1, #625	; 0x271
 803965e:	4630      	mov	r0, r6
 8039660:	f7ff ff12 	bl	8039488 <__i2b>
 8039664:	2300      	movs	r3, #0
 8039666:	f8c8 0008 	str.w	r0, [r8, #8]
 803966a:	4604      	mov	r4, r0
 803966c:	6003      	str	r3, [r0, #0]
 803966e:	f04f 0900 	mov.w	r9, #0
 8039672:	07eb      	lsls	r3, r5, #31
 8039674:	d50a      	bpl.n	803968c <__pow5mult+0x84>
 8039676:	4639      	mov	r1, r7
 8039678:	4622      	mov	r2, r4
 803967a:	4630      	mov	r0, r6
 803967c:	f7ff ff1a 	bl	80394b4 <__multiply>
 8039680:	4639      	mov	r1, r7
 8039682:	4680      	mov	r8, r0
 8039684:	4630      	mov	r0, r6
 8039686:	f7ff fdff 	bl	8039288 <_Bfree>
 803968a:	4647      	mov	r7, r8
 803968c:	106d      	asrs	r5, r5, #1
 803968e:	d00b      	beq.n	80396a8 <__pow5mult+0xa0>
 8039690:	6820      	ldr	r0, [r4, #0]
 8039692:	b938      	cbnz	r0, 80396a4 <__pow5mult+0x9c>
 8039694:	4622      	mov	r2, r4
 8039696:	4621      	mov	r1, r4
 8039698:	4630      	mov	r0, r6
 803969a:	f7ff ff0b 	bl	80394b4 <__multiply>
 803969e:	6020      	str	r0, [r4, #0]
 80396a0:	f8c0 9000 	str.w	r9, [r0]
 80396a4:	4604      	mov	r4, r0
 80396a6:	e7e4      	b.n	8039672 <__pow5mult+0x6a>
 80396a8:	4638      	mov	r0, r7
 80396aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80396ae:	bf00      	nop
 80396b0:	0803ad08 	.word	0x0803ad08
 80396b4:	0803aada 	.word	0x0803aada
 80396b8:	0803abba 	.word	0x0803abba

080396bc <__lshift>:
 80396bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80396c0:	460c      	mov	r4, r1
 80396c2:	6849      	ldr	r1, [r1, #4]
 80396c4:	6923      	ldr	r3, [r4, #16]
 80396c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80396ca:	68a3      	ldr	r3, [r4, #8]
 80396cc:	4607      	mov	r7, r0
 80396ce:	4691      	mov	r9, r2
 80396d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80396d4:	f108 0601 	add.w	r6, r8, #1
 80396d8:	42b3      	cmp	r3, r6
 80396da:	db0b      	blt.n	80396f4 <__lshift+0x38>
 80396dc:	4638      	mov	r0, r7
 80396de:	f7ff fd93 	bl	8039208 <_Balloc>
 80396e2:	4605      	mov	r5, r0
 80396e4:	b948      	cbnz	r0, 80396fa <__lshift+0x3e>
 80396e6:	4602      	mov	r2, r0
 80396e8:	4b28      	ldr	r3, [pc, #160]	; (803978c <__lshift+0xd0>)
 80396ea:	4829      	ldr	r0, [pc, #164]	; (8039790 <__lshift+0xd4>)
 80396ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80396f0:	f000 fc6c 	bl	8039fcc <__assert_func>
 80396f4:	3101      	adds	r1, #1
 80396f6:	005b      	lsls	r3, r3, #1
 80396f8:	e7ee      	b.n	80396d8 <__lshift+0x1c>
 80396fa:	2300      	movs	r3, #0
 80396fc:	f100 0114 	add.w	r1, r0, #20
 8039700:	f100 0210 	add.w	r2, r0, #16
 8039704:	4618      	mov	r0, r3
 8039706:	4553      	cmp	r3, sl
 8039708:	db33      	blt.n	8039772 <__lshift+0xb6>
 803970a:	6920      	ldr	r0, [r4, #16]
 803970c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8039710:	f104 0314 	add.w	r3, r4, #20
 8039714:	f019 091f 	ands.w	r9, r9, #31
 8039718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803971c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8039720:	d02b      	beq.n	803977a <__lshift+0xbe>
 8039722:	f1c9 0e20 	rsb	lr, r9, #32
 8039726:	468a      	mov	sl, r1
 8039728:	2200      	movs	r2, #0
 803972a:	6818      	ldr	r0, [r3, #0]
 803972c:	fa00 f009 	lsl.w	r0, r0, r9
 8039730:	4310      	orrs	r0, r2
 8039732:	f84a 0b04 	str.w	r0, [sl], #4
 8039736:	f853 2b04 	ldr.w	r2, [r3], #4
 803973a:	459c      	cmp	ip, r3
 803973c:	fa22 f20e 	lsr.w	r2, r2, lr
 8039740:	d8f3      	bhi.n	803972a <__lshift+0x6e>
 8039742:	ebac 0304 	sub.w	r3, ip, r4
 8039746:	3b15      	subs	r3, #21
 8039748:	f023 0303 	bic.w	r3, r3, #3
 803974c:	3304      	adds	r3, #4
 803974e:	f104 0015 	add.w	r0, r4, #21
 8039752:	4584      	cmp	ip, r0
 8039754:	bf38      	it	cc
 8039756:	2304      	movcc	r3, #4
 8039758:	50ca      	str	r2, [r1, r3]
 803975a:	b10a      	cbz	r2, 8039760 <__lshift+0xa4>
 803975c:	f108 0602 	add.w	r6, r8, #2
 8039760:	3e01      	subs	r6, #1
 8039762:	4638      	mov	r0, r7
 8039764:	612e      	str	r6, [r5, #16]
 8039766:	4621      	mov	r1, r4
 8039768:	f7ff fd8e 	bl	8039288 <_Bfree>
 803976c:	4628      	mov	r0, r5
 803976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039772:	f842 0f04 	str.w	r0, [r2, #4]!
 8039776:	3301      	adds	r3, #1
 8039778:	e7c5      	b.n	8039706 <__lshift+0x4a>
 803977a:	3904      	subs	r1, #4
 803977c:	f853 2b04 	ldr.w	r2, [r3], #4
 8039780:	f841 2f04 	str.w	r2, [r1, #4]!
 8039784:	459c      	cmp	ip, r3
 8039786:	d8f9      	bhi.n	803977c <__lshift+0xc0>
 8039788:	e7ea      	b.n	8039760 <__lshift+0xa4>
 803978a:	bf00      	nop
 803978c:	0803ab49 	.word	0x0803ab49
 8039790:	0803abba 	.word	0x0803abba

08039794 <__mcmp>:
 8039794:	b530      	push	{r4, r5, lr}
 8039796:	6902      	ldr	r2, [r0, #16]
 8039798:	690c      	ldr	r4, [r1, #16]
 803979a:	1b12      	subs	r2, r2, r4
 803979c:	d10e      	bne.n	80397bc <__mcmp+0x28>
 803979e:	f100 0314 	add.w	r3, r0, #20
 80397a2:	3114      	adds	r1, #20
 80397a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80397a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80397ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80397b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80397b4:	42a5      	cmp	r5, r4
 80397b6:	d003      	beq.n	80397c0 <__mcmp+0x2c>
 80397b8:	d305      	bcc.n	80397c6 <__mcmp+0x32>
 80397ba:	2201      	movs	r2, #1
 80397bc:	4610      	mov	r0, r2
 80397be:	bd30      	pop	{r4, r5, pc}
 80397c0:	4283      	cmp	r3, r0
 80397c2:	d3f3      	bcc.n	80397ac <__mcmp+0x18>
 80397c4:	e7fa      	b.n	80397bc <__mcmp+0x28>
 80397c6:	f04f 32ff 	mov.w	r2, #4294967295
 80397ca:	e7f7      	b.n	80397bc <__mcmp+0x28>

080397cc <__mdiff>:
 80397cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80397d0:	460c      	mov	r4, r1
 80397d2:	4606      	mov	r6, r0
 80397d4:	4611      	mov	r1, r2
 80397d6:	4620      	mov	r0, r4
 80397d8:	4690      	mov	r8, r2
 80397da:	f7ff ffdb 	bl	8039794 <__mcmp>
 80397de:	1e05      	subs	r5, r0, #0
 80397e0:	d110      	bne.n	8039804 <__mdiff+0x38>
 80397e2:	4629      	mov	r1, r5
 80397e4:	4630      	mov	r0, r6
 80397e6:	f7ff fd0f 	bl	8039208 <_Balloc>
 80397ea:	b930      	cbnz	r0, 80397fa <__mdiff+0x2e>
 80397ec:	4b3a      	ldr	r3, [pc, #232]	; (80398d8 <__mdiff+0x10c>)
 80397ee:	4602      	mov	r2, r0
 80397f0:	f240 2137 	movw	r1, #567	; 0x237
 80397f4:	4839      	ldr	r0, [pc, #228]	; (80398dc <__mdiff+0x110>)
 80397f6:	f000 fbe9 	bl	8039fcc <__assert_func>
 80397fa:	2301      	movs	r3, #1
 80397fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8039800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039804:	bfa4      	itt	ge
 8039806:	4643      	movge	r3, r8
 8039808:	46a0      	movge	r8, r4
 803980a:	4630      	mov	r0, r6
 803980c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8039810:	bfa6      	itte	ge
 8039812:	461c      	movge	r4, r3
 8039814:	2500      	movge	r5, #0
 8039816:	2501      	movlt	r5, #1
 8039818:	f7ff fcf6 	bl	8039208 <_Balloc>
 803981c:	b920      	cbnz	r0, 8039828 <__mdiff+0x5c>
 803981e:	4b2e      	ldr	r3, [pc, #184]	; (80398d8 <__mdiff+0x10c>)
 8039820:	4602      	mov	r2, r0
 8039822:	f240 2145 	movw	r1, #581	; 0x245
 8039826:	e7e5      	b.n	80397f4 <__mdiff+0x28>
 8039828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 803982c:	6926      	ldr	r6, [r4, #16]
 803982e:	60c5      	str	r5, [r0, #12]
 8039830:	f104 0914 	add.w	r9, r4, #20
 8039834:	f108 0514 	add.w	r5, r8, #20
 8039838:	f100 0e14 	add.w	lr, r0, #20
 803983c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8039840:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8039844:	f108 0210 	add.w	r2, r8, #16
 8039848:	46f2      	mov	sl, lr
 803984a:	2100      	movs	r1, #0
 803984c:	f859 3b04 	ldr.w	r3, [r9], #4
 8039850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8039854:	fa11 f88b 	uxtah	r8, r1, fp
 8039858:	b299      	uxth	r1, r3
 803985a:	0c1b      	lsrs	r3, r3, #16
 803985c:	eba8 0801 	sub.w	r8, r8, r1
 8039860:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8039864:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8039868:	fa1f f888 	uxth.w	r8, r8
 803986c:	1419      	asrs	r1, r3, #16
 803986e:	454e      	cmp	r6, r9
 8039870:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8039874:	f84a 3b04 	str.w	r3, [sl], #4
 8039878:	d8e8      	bhi.n	803984c <__mdiff+0x80>
 803987a:	1b33      	subs	r3, r6, r4
 803987c:	3b15      	subs	r3, #21
 803987e:	f023 0303 	bic.w	r3, r3, #3
 8039882:	3304      	adds	r3, #4
 8039884:	3415      	adds	r4, #21
 8039886:	42a6      	cmp	r6, r4
 8039888:	bf38      	it	cc
 803988a:	2304      	movcc	r3, #4
 803988c:	441d      	add	r5, r3
 803988e:	4473      	add	r3, lr
 8039890:	469e      	mov	lr, r3
 8039892:	462e      	mov	r6, r5
 8039894:	4566      	cmp	r6, ip
 8039896:	d30e      	bcc.n	80398b6 <__mdiff+0xea>
 8039898:	f10c 0203 	add.w	r2, ip, #3
 803989c:	1b52      	subs	r2, r2, r5
 803989e:	f022 0203 	bic.w	r2, r2, #3
 80398a2:	3d03      	subs	r5, #3
 80398a4:	45ac      	cmp	ip, r5
 80398a6:	bf38      	it	cc
 80398a8:	2200      	movcc	r2, #0
 80398aa:	4413      	add	r3, r2
 80398ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80398b0:	b17a      	cbz	r2, 80398d2 <__mdiff+0x106>
 80398b2:	6107      	str	r7, [r0, #16]
 80398b4:	e7a4      	b.n	8039800 <__mdiff+0x34>
 80398b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80398ba:	fa11 f288 	uxtah	r2, r1, r8
 80398be:	1414      	asrs	r4, r2, #16
 80398c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80398c4:	b292      	uxth	r2, r2
 80398c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80398ca:	f84e 2b04 	str.w	r2, [lr], #4
 80398ce:	1421      	asrs	r1, r4, #16
 80398d0:	e7e0      	b.n	8039894 <__mdiff+0xc8>
 80398d2:	3f01      	subs	r7, #1
 80398d4:	e7ea      	b.n	80398ac <__mdiff+0xe0>
 80398d6:	bf00      	nop
 80398d8:	0803ab49 	.word	0x0803ab49
 80398dc:	0803abba 	.word	0x0803abba

080398e0 <__ulp>:
 80398e0:	b082      	sub	sp, #8
 80398e2:	ed8d 0b00 	vstr	d0, [sp]
 80398e6:	9a01      	ldr	r2, [sp, #4]
 80398e8:	4b0f      	ldr	r3, [pc, #60]	; (8039928 <__ulp+0x48>)
 80398ea:	4013      	ands	r3, r2
 80398ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80398f0:	2b00      	cmp	r3, #0
 80398f2:	dc08      	bgt.n	8039906 <__ulp+0x26>
 80398f4:	425b      	negs	r3, r3
 80398f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80398fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80398fe:	da04      	bge.n	803990a <__ulp+0x2a>
 8039900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8039904:	4113      	asrs	r3, r2
 8039906:	2200      	movs	r2, #0
 8039908:	e008      	b.n	803991c <__ulp+0x3c>
 803990a:	f1a2 0314 	sub.w	r3, r2, #20
 803990e:	2b1e      	cmp	r3, #30
 8039910:	bfda      	itte	le
 8039912:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8039916:	40da      	lsrle	r2, r3
 8039918:	2201      	movgt	r2, #1
 803991a:	2300      	movs	r3, #0
 803991c:	4619      	mov	r1, r3
 803991e:	4610      	mov	r0, r2
 8039920:	ec41 0b10 	vmov	d0, r0, r1
 8039924:	b002      	add	sp, #8
 8039926:	4770      	bx	lr
 8039928:	7ff00000 	.word	0x7ff00000

0803992c <__b2d>:
 803992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039930:	6906      	ldr	r6, [r0, #16]
 8039932:	f100 0814 	add.w	r8, r0, #20
 8039936:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 803993a:	1f37      	subs	r7, r6, #4
 803993c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8039940:	4610      	mov	r0, r2
 8039942:	f7ff fd53 	bl	80393ec <__hi0bits>
 8039946:	f1c0 0320 	rsb	r3, r0, #32
 803994a:	280a      	cmp	r0, #10
 803994c:	600b      	str	r3, [r1, #0]
 803994e:	491b      	ldr	r1, [pc, #108]	; (80399bc <__b2d+0x90>)
 8039950:	dc15      	bgt.n	803997e <__b2d+0x52>
 8039952:	f1c0 0c0b 	rsb	ip, r0, #11
 8039956:	fa22 f30c 	lsr.w	r3, r2, ip
 803995a:	45b8      	cmp	r8, r7
 803995c:	ea43 0501 	orr.w	r5, r3, r1
 8039960:	bf34      	ite	cc
 8039962:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8039966:	2300      	movcs	r3, #0
 8039968:	3015      	adds	r0, #21
 803996a:	fa02 f000 	lsl.w	r0, r2, r0
 803996e:	fa23 f30c 	lsr.w	r3, r3, ip
 8039972:	4303      	orrs	r3, r0
 8039974:	461c      	mov	r4, r3
 8039976:	ec45 4b10 	vmov	d0, r4, r5
 803997a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803997e:	45b8      	cmp	r8, r7
 8039980:	bf3a      	itte	cc
 8039982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8039986:	f1a6 0708 	subcc.w	r7, r6, #8
 803998a:	2300      	movcs	r3, #0
 803998c:	380b      	subs	r0, #11
 803998e:	d012      	beq.n	80399b6 <__b2d+0x8a>
 8039990:	f1c0 0120 	rsb	r1, r0, #32
 8039994:	fa23 f401 	lsr.w	r4, r3, r1
 8039998:	4082      	lsls	r2, r0
 803999a:	4322      	orrs	r2, r4
 803999c:	4547      	cmp	r7, r8
 803999e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80399a2:	bf8c      	ite	hi
 80399a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80399a8:	2200      	movls	r2, #0
 80399aa:	4083      	lsls	r3, r0
 80399ac:	40ca      	lsrs	r2, r1
 80399ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80399b2:	4313      	orrs	r3, r2
 80399b4:	e7de      	b.n	8039974 <__b2d+0x48>
 80399b6:	ea42 0501 	orr.w	r5, r2, r1
 80399ba:	e7db      	b.n	8039974 <__b2d+0x48>
 80399bc:	3ff00000 	.word	0x3ff00000

080399c0 <__d2b>:
 80399c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80399c4:	460f      	mov	r7, r1
 80399c6:	2101      	movs	r1, #1
 80399c8:	ec59 8b10 	vmov	r8, r9, d0
 80399cc:	4616      	mov	r6, r2
 80399ce:	f7ff fc1b 	bl	8039208 <_Balloc>
 80399d2:	4604      	mov	r4, r0
 80399d4:	b930      	cbnz	r0, 80399e4 <__d2b+0x24>
 80399d6:	4602      	mov	r2, r0
 80399d8:	4b24      	ldr	r3, [pc, #144]	; (8039a6c <__d2b+0xac>)
 80399da:	4825      	ldr	r0, [pc, #148]	; (8039a70 <__d2b+0xb0>)
 80399dc:	f240 310f 	movw	r1, #783	; 0x30f
 80399e0:	f000 faf4 	bl	8039fcc <__assert_func>
 80399e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80399e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80399ec:	bb2d      	cbnz	r5, 8039a3a <__d2b+0x7a>
 80399ee:	9301      	str	r3, [sp, #4]
 80399f0:	f1b8 0300 	subs.w	r3, r8, #0
 80399f4:	d026      	beq.n	8039a44 <__d2b+0x84>
 80399f6:	4668      	mov	r0, sp
 80399f8:	9300      	str	r3, [sp, #0]
 80399fa:	f7ff fd17 	bl	803942c <__lo0bits>
 80399fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8039a02:	b1e8      	cbz	r0, 8039a40 <__d2b+0x80>
 8039a04:	f1c0 0320 	rsb	r3, r0, #32
 8039a08:	fa02 f303 	lsl.w	r3, r2, r3
 8039a0c:	430b      	orrs	r3, r1
 8039a0e:	40c2      	lsrs	r2, r0
 8039a10:	6163      	str	r3, [r4, #20]
 8039a12:	9201      	str	r2, [sp, #4]
 8039a14:	9b01      	ldr	r3, [sp, #4]
 8039a16:	61a3      	str	r3, [r4, #24]
 8039a18:	2b00      	cmp	r3, #0
 8039a1a:	bf14      	ite	ne
 8039a1c:	2202      	movne	r2, #2
 8039a1e:	2201      	moveq	r2, #1
 8039a20:	6122      	str	r2, [r4, #16]
 8039a22:	b1bd      	cbz	r5, 8039a54 <__d2b+0x94>
 8039a24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8039a28:	4405      	add	r5, r0
 8039a2a:	603d      	str	r5, [r7, #0]
 8039a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8039a30:	6030      	str	r0, [r6, #0]
 8039a32:	4620      	mov	r0, r4
 8039a34:	b003      	add	sp, #12
 8039a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8039a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8039a3e:	e7d6      	b.n	80399ee <__d2b+0x2e>
 8039a40:	6161      	str	r1, [r4, #20]
 8039a42:	e7e7      	b.n	8039a14 <__d2b+0x54>
 8039a44:	a801      	add	r0, sp, #4
 8039a46:	f7ff fcf1 	bl	803942c <__lo0bits>
 8039a4a:	9b01      	ldr	r3, [sp, #4]
 8039a4c:	6163      	str	r3, [r4, #20]
 8039a4e:	3020      	adds	r0, #32
 8039a50:	2201      	movs	r2, #1
 8039a52:	e7e5      	b.n	8039a20 <__d2b+0x60>
 8039a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8039a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8039a5c:	6038      	str	r0, [r7, #0]
 8039a5e:	6918      	ldr	r0, [r3, #16]
 8039a60:	f7ff fcc4 	bl	80393ec <__hi0bits>
 8039a64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8039a68:	e7e2      	b.n	8039a30 <__d2b+0x70>
 8039a6a:	bf00      	nop
 8039a6c:	0803ab49 	.word	0x0803ab49
 8039a70:	0803abba 	.word	0x0803abba

08039a74 <__ratio>:
 8039a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039a78:	4688      	mov	r8, r1
 8039a7a:	4669      	mov	r1, sp
 8039a7c:	4681      	mov	r9, r0
 8039a7e:	f7ff ff55 	bl	803992c <__b2d>
 8039a82:	a901      	add	r1, sp, #4
 8039a84:	4640      	mov	r0, r8
 8039a86:	ec55 4b10 	vmov	r4, r5, d0
 8039a8a:	f7ff ff4f 	bl	803992c <__b2d>
 8039a8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8039a92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8039a96:	eba3 0c02 	sub.w	ip, r3, r2
 8039a9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8039a9e:	1a9b      	subs	r3, r3, r2
 8039aa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8039aa4:	ec51 0b10 	vmov	r0, r1, d0
 8039aa8:	2b00      	cmp	r3, #0
 8039aaa:	bfd6      	itet	le
 8039aac:	460a      	movle	r2, r1
 8039aae:	462a      	movgt	r2, r5
 8039ab0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8039ab4:	468b      	mov	fp, r1
 8039ab6:	462f      	mov	r7, r5
 8039ab8:	bfd4      	ite	le
 8039aba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8039abe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8039ac2:	4620      	mov	r0, r4
 8039ac4:	ee10 2a10 	vmov	r2, s0
 8039ac8:	465b      	mov	r3, fp
 8039aca:	4639      	mov	r1, r7
 8039acc:	f7f6 fece 	bl	803086c <__aeabi_ddiv>
 8039ad0:	ec41 0b10 	vmov	d0, r0, r1
 8039ad4:	b003      	add	sp, #12
 8039ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08039ada <__copybits>:
 8039ada:	3901      	subs	r1, #1
 8039adc:	b570      	push	{r4, r5, r6, lr}
 8039ade:	1149      	asrs	r1, r1, #5
 8039ae0:	6914      	ldr	r4, [r2, #16]
 8039ae2:	3101      	adds	r1, #1
 8039ae4:	f102 0314 	add.w	r3, r2, #20
 8039ae8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8039aec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8039af0:	1f05      	subs	r5, r0, #4
 8039af2:	42a3      	cmp	r3, r4
 8039af4:	d30c      	bcc.n	8039b10 <__copybits+0x36>
 8039af6:	1aa3      	subs	r3, r4, r2
 8039af8:	3b11      	subs	r3, #17
 8039afa:	f023 0303 	bic.w	r3, r3, #3
 8039afe:	3211      	adds	r2, #17
 8039b00:	42a2      	cmp	r2, r4
 8039b02:	bf88      	it	hi
 8039b04:	2300      	movhi	r3, #0
 8039b06:	4418      	add	r0, r3
 8039b08:	2300      	movs	r3, #0
 8039b0a:	4288      	cmp	r0, r1
 8039b0c:	d305      	bcc.n	8039b1a <__copybits+0x40>
 8039b0e:	bd70      	pop	{r4, r5, r6, pc}
 8039b10:	f853 6b04 	ldr.w	r6, [r3], #4
 8039b14:	f845 6f04 	str.w	r6, [r5, #4]!
 8039b18:	e7eb      	b.n	8039af2 <__copybits+0x18>
 8039b1a:	f840 3b04 	str.w	r3, [r0], #4
 8039b1e:	e7f4      	b.n	8039b0a <__copybits+0x30>

08039b20 <__any_on>:
 8039b20:	f100 0214 	add.w	r2, r0, #20
 8039b24:	6900      	ldr	r0, [r0, #16]
 8039b26:	114b      	asrs	r3, r1, #5
 8039b28:	4298      	cmp	r0, r3
 8039b2a:	b510      	push	{r4, lr}
 8039b2c:	db11      	blt.n	8039b52 <__any_on+0x32>
 8039b2e:	dd0a      	ble.n	8039b46 <__any_on+0x26>
 8039b30:	f011 011f 	ands.w	r1, r1, #31
 8039b34:	d007      	beq.n	8039b46 <__any_on+0x26>
 8039b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8039b3a:	fa24 f001 	lsr.w	r0, r4, r1
 8039b3e:	fa00 f101 	lsl.w	r1, r0, r1
 8039b42:	428c      	cmp	r4, r1
 8039b44:	d10b      	bne.n	8039b5e <__any_on+0x3e>
 8039b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8039b4a:	4293      	cmp	r3, r2
 8039b4c:	d803      	bhi.n	8039b56 <__any_on+0x36>
 8039b4e:	2000      	movs	r0, #0
 8039b50:	bd10      	pop	{r4, pc}
 8039b52:	4603      	mov	r3, r0
 8039b54:	e7f7      	b.n	8039b46 <__any_on+0x26>
 8039b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8039b5a:	2900      	cmp	r1, #0
 8039b5c:	d0f5      	beq.n	8039b4a <__any_on+0x2a>
 8039b5e:	2001      	movs	r0, #1
 8039b60:	e7f6      	b.n	8039b50 <__any_on+0x30>

08039b62 <_malloc_usable_size_r>:
 8039b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8039b66:	1f18      	subs	r0, r3, #4
 8039b68:	2b00      	cmp	r3, #0
 8039b6a:	bfbc      	itt	lt
 8039b6c:	580b      	ldrlt	r3, [r1, r0]
 8039b6e:	18c0      	addlt	r0, r0, r3
 8039b70:	4770      	bx	lr

08039b72 <__ascii_wctomb>:
 8039b72:	b149      	cbz	r1, 8039b88 <__ascii_wctomb+0x16>
 8039b74:	2aff      	cmp	r2, #255	; 0xff
 8039b76:	bf85      	ittet	hi
 8039b78:	238a      	movhi	r3, #138	; 0x8a
 8039b7a:	6003      	strhi	r3, [r0, #0]
 8039b7c:	700a      	strbls	r2, [r1, #0]
 8039b7e:	f04f 30ff 	movhi.w	r0, #4294967295
 8039b82:	bf98      	it	ls
 8039b84:	2001      	movls	r0, #1
 8039b86:	4770      	bx	lr
 8039b88:	4608      	mov	r0, r1
 8039b8a:	4770      	bx	lr

08039b8c <__ssputs_r>:
 8039b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8039b90:	688e      	ldr	r6, [r1, #8]
 8039b92:	461f      	mov	r7, r3
 8039b94:	42be      	cmp	r6, r7
 8039b96:	680b      	ldr	r3, [r1, #0]
 8039b98:	4682      	mov	sl, r0
 8039b9a:	460c      	mov	r4, r1
 8039b9c:	4690      	mov	r8, r2
 8039b9e:	d82c      	bhi.n	8039bfa <__ssputs_r+0x6e>
 8039ba0:	898a      	ldrh	r2, [r1, #12]
 8039ba2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8039ba6:	d026      	beq.n	8039bf6 <__ssputs_r+0x6a>
 8039ba8:	6965      	ldr	r5, [r4, #20]
 8039baa:	6909      	ldr	r1, [r1, #16]
 8039bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8039bb0:	eba3 0901 	sub.w	r9, r3, r1
 8039bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8039bb8:	1c7b      	adds	r3, r7, #1
 8039bba:	444b      	add	r3, r9
 8039bbc:	106d      	asrs	r5, r5, #1
 8039bbe:	429d      	cmp	r5, r3
 8039bc0:	bf38      	it	cc
 8039bc2:	461d      	movcc	r5, r3
 8039bc4:	0553      	lsls	r3, r2, #21
 8039bc6:	d527      	bpl.n	8039c18 <__ssputs_r+0x8c>
 8039bc8:	4629      	mov	r1, r5
 8039bca:	f7fc fba7 	bl	803631c <_malloc_r>
 8039bce:	4606      	mov	r6, r0
 8039bd0:	b360      	cbz	r0, 8039c2c <__ssputs_r+0xa0>
 8039bd2:	6921      	ldr	r1, [r4, #16]
 8039bd4:	464a      	mov	r2, r9
 8039bd6:	f7fe f8cf 	bl	8037d78 <memcpy>
 8039bda:	89a3      	ldrh	r3, [r4, #12]
 8039bdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8039be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8039be4:	81a3      	strh	r3, [r4, #12]
 8039be6:	6126      	str	r6, [r4, #16]
 8039be8:	6165      	str	r5, [r4, #20]
 8039bea:	444e      	add	r6, r9
 8039bec:	eba5 0509 	sub.w	r5, r5, r9
 8039bf0:	6026      	str	r6, [r4, #0]
 8039bf2:	60a5      	str	r5, [r4, #8]
 8039bf4:	463e      	mov	r6, r7
 8039bf6:	42be      	cmp	r6, r7
 8039bf8:	d900      	bls.n	8039bfc <__ssputs_r+0x70>
 8039bfa:	463e      	mov	r6, r7
 8039bfc:	6820      	ldr	r0, [r4, #0]
 8039bfe:	4632      	mov	r2, r6
 8039c00:	4641      	mov	r1, r8
 8039c02:	f000 f9c9 	bl	8039f98 <memmove>
 8039c06:	68a3      	ldr	r3, [r4, #8]
 8039c08:	1b9b      	subs	r3, r3, r6
 8039c0a:	60a3      	str	r3, [r4, #8]
 8039c0c:	6823      	ldr	r3, [r4, #0]
 8039c0e:	4433      	add	r3, r6
 8039c10:	6023      	str	r3, [r4, #0]
 8039c12:	2000      	movs	r0, #0
 8039c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039c18:	462a      	mov	r2, r5
 8039c1a:	f7fc fc13 	bl	8036444 <_realloc_r>
 8039c1e:	4606      	mov	r6, r0
 8039c20:	2800      	cmp	r0, #0
 8039c22:	d1e0      	bne.n	8039be6 <__ssputs_r+0x5a>
 8039c24:	6921      	ldr	r1, [r4, #16]
 8039c26:	4650      	mov	r0, sl
 8039c28:	f7fe ff38 	bl	8038a9c <_free_r>
 8039c2c:	230c      	movs	r3, #12
 8039c2e:	f8ca 3000 	str.w	r3, [sl]
 8039c32:	89a3      	ldrh	r3, [r4, #12]
 8039c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039c38:	81a3      	strh	r3, [r4, #12]
 8039c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8039c3e:	e7e9      	b.n	8039c14 <__ssputs_r+0x88>

08039c40 <_svfiprintf_r>:
 8039c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039c44:	4698      	mov	r8, r3
 8039c46:	898b      	ldrh	r3, [r1, #12]
 8039c48:	061b      	lsls	r3, r3, #24
 8039c4a:	b09d      	sub	sp, #116	; 0x74
 8039c4c:	4607      	mov	r7, r0
 8039c4e:	460d      	mov	r5, r1
 8039c50:	4614      	mov	r4, r2
 8039c52:	d50e      	bpl.n	8039c72 <_svfiprintf_r+0x32>
 8039c54:	690b      	ldr	r3, [r1, #16]
 8039c56:	b963      	cbnz	r3, 8039c72 <_svfiprintf_r+0x32>
 8039c58:	2140      	movs	r1, #64	; 0x40
 8039c5a:	f7fc fb5f 	bl	803631c <_malloc_r>
 8039c5e:	6028      	str	r0, [r5, #0]
 8039c60:	6128      	str	r0, [r5, #16]
 8039c62:	b920      	cbnz	r0, 8039c6e <_svfiprintf_r+0x2e>
 8039c64:	230c      	movs	r3, #12
 8039c66:	603b      	str	r3, [r7, #0]
 8039c68:	f04f 30ff 	mov.w	r0, #4294967295
 8039c6c:	e0d0      	b.n	8039e10 <_svfiprintf_r+0x1d0>
 8039c6e:	2340      	movs	r3, #64	; 0x40
 8039c70:	616b      	str	r3, [r5, #20]
 8039c72:	2300      	movs	r3, #0
 8039c74:	9309      	str	r3, [sp, #36]	; 0x24
 8039c76:	2320      	movs	r3, #32
 8039c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8039c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8039c80:	2330      	movs	r3, #48	; 0x30
 8039c82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8039e28 <_svfiprintf_r+0x1e8>
 8039c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8039c8a:	f04f 0901 	mov.w	r9, #1
 8039c8e:	4623      	mov	r3, r4
 8039c90:	469a      	mov	sl, r3
 8039c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8039c96:	b10a      	cbz	r2, 8039c9c <_svfiprintf_r+0x5c>
 8039c98:	2a25      	cmp	r2, #37	; 0x25
 8039c9a:	d1f9      	bne.n	8039c90 <_svfiprintf_r+0x50>
 8039c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8039ca0:	d00b      	beq.n	8039cba <_svfiprintf_r+0x7a>
 8039ca2:	465b      	mov	r3, fp
 8039ca4:	4622      	mov	r2, r4
 8039ca6:	4629      	mov	r1, r5
 8039ca8:	4638      	mov	r0, r7
 8039caa:	f7ff ff6f 	bl	8039b8c <__ssputs_r>
 8039cae:	3001      	adds	r0, #1
 8039cb0:	f000 80a9 	beq.w	8039e06 <_svfiprintf_r+0x1c6>
 8039cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8039cb6:	445a      	add	r2, fp
 8039cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8039cba:	f89a 3000 	ldrb.w	r3, [sl]
 8039cbe:	2b00      	cmp	r3, #0
 8039cc0:	f000 80a1 	beq.w	8039e06 <_svfiprintf_r+0x1c6>
 8039cc4:	2300      	movs	r3, #0
 8039cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8039cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8039cce:	f10a 0a01 	add.w	sl, sl, #1
 8039cd2:	9304      	str	r3, [sp, #16]
 8039cd4:	9307      	str	r3, [sp, #28]
 8039cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8039cda:	931a      	str	r3, [sp, #104]	; 0x68
 8039cdc:	4654      	mov	r4, sl
 8039cde:	2205      	movs	r2, #5
 8039ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8039ce4:	4850      	ldr	r0, [pc, #320]	; (8039e28 <_svfiprintf_r+0x1e8>)
 8039ce6:	f7f6 fa83 	bl	80301f0 <memchr>
 8039cea:	9a04      	ldr	r2, [sp, #16]
 8039cec:	b9d8      	cbnz	r0, 8039d26 <_svfiprintf_r+0xe6>
 8039cee:	06d0      	lsls	r0, r2, #27
 8039cf0:	bf44      	itt	mi
 8039cf2:	2320      	movmi	r3, #32
 8039cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8039cf8:	0711      	lsls	r1, r2, #28
 8039cfa:	bf44      	itt	mi
 8039cfc:	232b      	movmi	r3, #43	; 0x2b
 8039cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8039d02:	f89a 3000 	ldrb.w	r3, [sl]
 8039d06:	2b2a      	cmp	r3, #42	; 0x2a
 8039d08:	d015      	beq.n	8039d36 <_svfiprintf_r+0xf6>
 8039d0a:	9a07      	ldr	r2, [sp, #28]
 8039d0c:	4654      	mov	r4, sl
 8039d0e:	2000      	movs	r0, #0
 8039d10:	f04f 0c0a 	mov.w	ip, #10
 8039d14:	4621      	mov	r1, r4
 8039d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8039d1a:	3b30      	subs	r3, #48	; 0x30
 8039d1c:	2b09      	cmp	r3, #9
 8039d1e:	d94d      	bls.n	8039dbc <_svfiprintf_r+0x17c>
 8039d20:	b1b0      	cbz	r0, 8039d50 <_svfiprintf_r+0x110>
 8039d22:	9207      	str	r2, [sp, #28]
 8039d24:	e014      	b.n	8039d50 <_svfiprintf_r+0x110>
 8039d26:	eba0 0308 	sub.w	r3, r0, r8
 8039d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8039d2e:	4313      	orrs	r3, r2
 8039d30:	9304      	str	r3, [sp, #16]
 8039d32:	46a2      	mov	sl, r4
 8039d34:	e7d2      	b.n	8039cdc <_svfiprintf_r+0x9c>
 8039d36:	9b03      	ldr	r3, [sp, #12]
 8039d38:	1d19      	adds	r1, r3, #4
 8039d3a:	681b      	ldr	r3, [r3, #0]
 8039d3c:	9103      	str	r1, [sp, #12]
 8039d3e:	2b00      	cmp	r3, #0
 8039d40:	bfbb      	ittet	lt
 8039d42:	425b      	neglt	r3, r3
 8039d44:	f042 0202 	orrlt.w	r2, r2, #2
 8039d48:	9307      	strge	r3, [sp, #28]
 8039d4a:	9307      	strlt	r3, [sp, #28]
 8039d4c:	bfb8      	it	lt
 8039d4e:	9204      	strlt	r2, [sp, #16]
 8039d50:	7823      	ldrb	r3, [r4, #0]
 8039d52:	2b2e      	cmp	r3, #46	; 0x2e
 8039d54:	d10c      	bne.n	8039d70 <_svfiprintf_r+0x130>
 8039d56:	7863      	ldrb	r3, [r4, #1]
 8039d58:	2b2a      	cmp	r3, #42	; 0x2a
 8039d5a:	d134      	bne.n	8039dc6 <_svfiprintf_r+0x186>
 8039d5c:	9b03      	ldr	r3, [sp, #12]
 8039d5e:	1d1a      	adds	r2, r3, #4
 8039d60:	681b      	ldr	r3, [r3, #0]
 8039d62:	9203      	str	r2, [sp, #12]
 8039d64:	2b00      	cmp	r3, #0
 8039d66:	bfb8      	it	lt
 8039d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8039d6c:	3402      	adds	r4, #2
 8039d6e:	9305      	str	r3, [sp, #20]
 8039d70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8039e38 <_svfiprintf_r+0x1f8>
 8039d74:	7821      	ldrb	r1, [r4, #0]
 8039d76:	2203      	movs	r2, #3
 8039d78:	4650      	mov	r0, sl
 8039d7a:	f7f6 fa39 	bl	80301f0 <memchr>
 8039d7e:	b138      	cbz	r0, 8039d90 <_svfiprintf_r+0x150>
 8039d80:	9b04      	ldr	r3, [sp, #16]
 8039d82:	eba0 000a 	sub.w	r0, r0, sl
 8039d86:	2240      	movs	r2, #64	; 0x40
 8039d88:	4082      	lsls	r2, r0
 8039d8a:	4313      	orrs	r3, r2
 8039d8c:	3401      	adds	r4, #1
 8039d8e:	9304      	str	r3, [sp, #16]
 8039d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8039d94:	4825      	ldr	r0, [pc, #148]	; (8039e2c <_svfiprintf_r+0x1ec>)
 8039d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8039d9a:	2206      	movs	r2, #6
 8039d9c:	f7f6 fa28 	bl	80301f0 <memchr>
 8039da0:	2800      	cmp	r0, #0
 8039da2:	d038      	beq.n	8039e16 <_svfiprintf_r+0x1d6>
 8039da4:	4b22      	ldr	r3, [pc, #136]	; (8039e30 <_svfiprintf_r+0x1f0>)
 8039da6:	bb1b      	cbnz	r3, 8039df0 <_svfiprintf_r+0x1b0>
 8039da8:	9b03      	ldr	r3, [sp, #12]
 8039daa:	3307      	adds	r3, #7
 8039dac:	f023 0307 	bic.w	r3, r3, #7
 8039db0:	3308      	adds	r3, #8
 8039db2:	9303      	str	r3, [sp, #12]
 8039db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8039db6:	4433      	add	r3, r6
 8039db8:	9309      	str	r3, [sp, #36]	; 0x24
 8039dba:	e768      	b.n	8039c8e <_svfiprintf_r+0x4e>
 8039dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8039dc0:	460c      	mov	r4, r1
 8039dc2:	2001      	movs	r0, #1
 8039dc4:	e7a6      	b.n	8039d14 <_svfiprintf_r+0xd4>
 8039dc6:	2300      	movs	r3, #0
 8039dc8:	3401      	adds	r4, #1
 8039dca:	9305      	str	r3, [sp, #20]
 8039dcc:	4619      	mov	r1, r3
 8039dce:	f04f 0c0a 	mov.w	ip, #10
 8039dd2:	4620      	mov	r0, r4
 8039dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8039dd8:	3a30      	subs	r2, #48	; 0x30
 8039dda:	2a09      	cmp	r2, #9
 8039ddc:	d903      	bls.n	8039de6 <_svfiprintf_r+0x1a6>
 8039dde:	2b00      	cmp	r3, #0
 8039de0:	d0c6      	beq.n	8039d70 <_svfiprintf_r+0x130>
 8039de2:	9105      	str	r1, [sp, #20]
 8039de4:	e7c4      	b.n	8039d70 <_svfiprintf_r+0x130>
 8039de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8039dea:	4604      	mov	r4, r0
 8039dec:	2301      	movs	r3, #1
 8039dee:	e7f0      	b.n	8039dd2 <_svfiprintf_r+0x192>
 8039df0:	ab03      	add	r3, sp, #12
 8039df2:	9300      	str	r3, [sp, #0]
 8039df4:	462a      	mov	r2, r5
 8039df6:	4b0f      	ldr	r3, [pc, #60]	; (8039e34 <_svfiprintf_r+0x1f4>)
 8039df8:	a904      	add	r1, sp, #16
 8039dfa:	4638      	mov	r0, r7
 8039dfc:	f7fd fa0c 	bl	8037218 <_printf_float>
 8039e00:	1c42      	adds	r2, r0, #1
 8039e02:	4606      	mov	r6, r0
 8039e04:	d1d6      	bne.n	8039db4 <_svfiprintf_r+0x174>
 8039e06:	89ab      	ldrh	r3, [r5, #12]
 8039e08:	065b      	lsls	r3, r3, #25
 8039e0a:	f53f af2d 	bmi.w	8039c68 <_svfiprintf_r+0x28>
 8039e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8039e10:	b01d      	add	sp, #116	; 0x74
 8039e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039e16:	ab03      	add	r3, sp, #12
 8039e18:	9300      	str	r3, [sp, #0]
 8039e1a:	462a      	mov	r2, r5
 8039e1c:	4b05      	ldr	r3, [pc, #20]	; (8039e34 <_svfiprintf_r+0x1f4>)
 8039e1e:	a904      	add	r1, sp, #16
 8039e20:	4638      	mov	r0, r7
 8039e22:	f7fd fc9d 	bl	8037760 <_printf_i>
 8039e26:	e7eb      	b.n	8039e00 <_svfiprintf_r+0x1c0>
 8039e28:	0803ad14 	.word	0x0803ad14
 8039e2c:	0803ad1e 	.word	0x0803ad1e
 8039e30:	08037219 	.word	0x08037219
 8039e34:	08039b8d 	.word	0x08039b8d
 8039e38:	0803ad1a 	.word	0x0803ad1a

08039e3c <__sflush_r>:
 8039e3c:	898a      	ldrh	r2, [r1, #12]
 8039e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039e42:	4605      	mov	r5, r0
 8039e44:	0710      	lsls	r0, r2, #28
 8039e46:	460c      	mov	r4, r1
 8039e48:	d458      	bmi.n	8039efc <__sflush_r+0xc0>
 8039e4a:	684b      	ldr	r3, [r1, #4]
 8039e4c:	2b00      	cmp	r3, #0
 8039e4e:	dc05      	bgt.n	8039e5c <__sflush_r+0x20>
 8039e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8039e52:	2b00      	cmp	r3, #0
 8039e54:	dc02      	bgt.n	8039e5c <__sflush_r+0x20>
 8039e56:	2000      	movs	r0, #0
 8039e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8039e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8039e5e:	2e00      	cmp	r6, #0
 8039e60:	d0f9      	beq.n	8039e56 <__sflush_r+0x1a>
 8039e62:	2300      	movs	r3, #0
 8039e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8039e68:	682f      	ldr	r7, [r5, #0]
 8039e6a:	6a21      	ldr	r1, [r4, #32]
 8039e6c:	602b      	str	r3, [r5, #0]
 8039e6e:	d032      	beq.n	8039ed6 <__sflush_r+0x9a>
 8039e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8039e72:	89a3      	ldrh	r3, [r4, #12]
 8039e74:	075a      	lsls	r2, r3, #29
 8039e76:	d505      	bpl.n	8039e84 <__sflush_r+0x48>
 8039e78:	6863      	ldr	r3, [r4, #4]
 8039e7a:	1ac0      	subs	r0, r0, r3
 8039e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8039e7e:	b10b      	cbz	r3, 8039e84 <__sflush_r+0x48>
 8039e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8039e82:	1ac0      	subs	r0, r0, r3
 8039e84:	2300      	movs	r3, #0
 8039e86:	4602      	mov	r2, r0
 8039e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8039e8a:	6a21      	ldr	r1, [r4, #32]
 8039e8c:	4628      	mov	r0, r5
 8039e8e:	47b0      	blx	r6
 8039e90:	1c43      	adds	r3, r0, #1
 8039e92:	89a3      	ldrh	r3, [r4, #12]
 8039e94:	d106      	bne.n	8039ea4 <__sflush_r+0x68>
 8039e96:	6829      	ldr	r1, [r5, #0]
 8039e98:	291d      	cmp	r1, #29
 8039e9a:	d82b      	bhi.n	8039ef4 <__sflush_r+0xb8>
 8039e9c:	4a29      	ldr	r2, [pc, #164]	; (8039f44 <__sflush_r+0x108>)
 8039e9e:	410a      	asrs	r2, r1
 8039ea0:	07d6      	lsls	r6, r2, #31
 8039ea2:	d427      	bmi.n	8039ef4 <__sflush_r+0xb8>
 8039ea4:	2200      	movs	r2, #0
 8039ea6:	6062      	str	r2, [r4, #4]
 8039ea8:	04d9      	lsls	r1, r3, #19
 8039eaa:	6922      	ldr	r2, [r4, #16]
 8039eac:	6022      	str	r2, [r4, #0]
 8039eae:	d504      	bpl.n	8039eba <__sflush_r+0x7e>
 8039eb0:	1c42      	adds	r2, r0, #1
 8039eb2:	d101      	bne.n	8039eb8 <__sflush_r+0x7c>
 8039eb4:	682b      	ldr	r3, [r5, #0]
 8039eb6:	b903      	cbnz	r3, 8039eba <__sflush_r+0x7e>
 8039eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8039eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8039ebc:	602f      	str	r7, [r5, #0]
 8039ebe:	2900      	cmp	r1, #0
 8039ec0:	d0c9      	beq.n	8039e56 <__sflush_r+0x1a>
 8039ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8039ec6:	4299      	cmp	r1, r3
 8039ec8:	d002      	beq.n	8039ed0 <__sflush_r+0x94>
 8039eca:	4628      	mov	r0, r5
 8039ecc:	f7fe fde6 	bl	8038a9c <_free_r>
 8039ed0:	2000      	movs	r0, #0
 8039ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8039ed4:	e7c0      	b.n	8039e58 <__sflush_r+0x1c>
 8039ed6:	2301      	movs	r3, #1
 8039ed8:	4628      	mov	r0, r5
 8039eda:	47b0      	blx	r6
 8039edc:	1c41      	adds	r1, r0, #1
 8039ede:	d1c8      	bne.n	8039e72 <__sflush_r+0x36>
 8039ee0:	682b      	ldr	r3, [r5, #0]
 8039ee2:	2b00      	cmp	r3, #0
 8039ee4:	d0c5      	beq.n	8039e72 <__sflush_r+0x36>
 8039ee6:	2b1d      	cmp	r3, #29
 8039ee8:	d001      	beq.n	8039eee <__sflush_r+0xb2>
 8039eea:	2b16      	cmp	r3, #22
 8039eec:	d101      	bne.n	8039ef2 <__sflush_r+0xb6>
 8039eee:	602f      	str	r7, [r5, #0]
 8039ef0:	e7b1      	b.n	8039e56 <__sflush_r+0x1a>
 8039ef2:	89a3      	ldrh	r3, [r4, #12]
 8039ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039ef8:	81a3      	strh	r3, [r4, #12]
 8039efa:	e7ad      	b.n	8039e58 <__sflush_r+0x1c>
 8039efc:	690f      	ldr	r7, [r1, #16]
 8039efe:	2f00      	cmp	r7, #0
 8039f00:	d0a9      	beq.n	8039e56 <__sflush_r+0x1a>
 8039f02:	0793      	lsls	r3, r2, #30
 8039f04:	680e      	ldr	r6, [r1, #0]
 8039f06:	bf08      	it	eq
 8039f08:	694b      	ldreq	r3, [r1, #20]
 8039f0a:	600f      	str	r7, [r1, #0]
 8039f0c:	bf18      	it	ne
 8039f0e:	2300      	movne	r3, #0
 8039f10:	eba6 0807 	sub.w	r8, r6, r7
 8039f14:	608b      	str	r3, [r1, #8]
 8039f16:	f1b8 0f00 	cmp.w	r8, #0
 8039f1a:	dd9c      	ble.n	8039e56 <__sflush_r+0x1a>
 8039f1c:	6a21      	ldr	r1, [r4, #32]
 8039f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8039f20:	4643      	mov	r3, r8
 8039f22:	463a      	mov	r2, r7
 8039f24:	4628      	mov	r0, r5
 8039f26:	47b0      	blx	r6
 8039f28:	2800      	cmp	r0, #0
 8039f2a:	dc06      	bgt.n	8039f3a <__sflush_r+0xfe>
 8039f2c:	89a3      	ldrh	r3, [r4, #12]
 8039f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039f32:	81a3      	strh	r3, [r4, #12]
 8039f34:	f04f 30ff 	mov.w	r0, #4294967295
 8039f38:	e78e      	b.n	8039e58 <__sflush_r+0x1c>
 8039f3a:	4407      	add	r7, r0
 8039f3c:	eba8 0800 	sub.w	r8, r8, r0
 8039f40:	e7e9      	b.n	8039f16 <__sflush_r+0xda>
 8039f42:	bf00      	nop
 8039f44:	dfbffffe 	.word	0xdfbffffe

08039f48 <_fflush_r>:
 8039f48:	b538      	push	{r3, r4, r5, lr}
 8039f4a:	690b      	ldr	r3, [r1, #16]
 8039f4c:	4605      	mov	r5, r0
 8039f4e:	460c      	mov	r4, r1
 8039f50:	b913      	cbnz	r3, 8039f58 <_fflush_r+0x10>
 8039f52:	2500      	movs	r5, #0
 8039f54:	4628      	mov	r0, r5
 8039f56:	bd38      	pop	{r3, r4, r5, pc}
 8039f58:	b118      	cbz	r0, 8039f62 <_fflush_r+0x1a>
 8039f5a:	6a03      	ldr	r3, [r0, #32]
 8039f5c:	b90b      	cbnz	r3, 8039f62 <_fflush_r+0x1a>
 8039f5e:	f7fd fd9b 	bl	8037a98 <__sinit>
 8039f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8039f66:	2b00      	cmp	r3, #0
 8039f68:	d0f3      	beq.n	8039f52 <_fflush_r+0xa>
 8039f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8039f6c:	07d0      	lsls	r0, r2, #31
 8039f6e:	d404      	bmi.n	8039f7a <_fflush_r+0x32>
 8039f70:	0599      	lsls	r1, r3, #22
 8039f72:	d402      	bmi.n	8039f7a <_fflush_r+0x32>
 8039f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8039f76:	f7fd fefd 	bl	8037d74 <__retarget_lock_acquire_recursive>
 8039f7a:	4628      	mov	r0, r5
 8039f7c:	4621      	mov	r1, r4
 8039f7e:	f7ff ff5d 	bl	8039e3c <__sflush_r>
 8039f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8039f84:	07da      	lsls	r2, r3, #31
 8039f86:	4605      	mov	r5, r0
 8039f88:	d4e4      	bmi.n	8039f54 <_fflush_r+0xc>
 8039f8a:	89a3      	ldrh	r3, [r4, #12]
 8039f8c:	059b      	lsls	r3, r3, #22
 8039f8e:	d4e1      	bmi.n	8039f54 <_fflush_r+0xc>
 8039f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8039f92:	f7fd fef0 	bl	8037d76 <__retarget_lock_release_recursive>
 8039f96:	e7dd      	b.n	8039f54 <_fflush_r+0xc>

08039f98 <memmove>:
 8039f98:	4288      	cmp	r0, r1
 8039f9a:	b510      	push	{r4, lr}
 8039f9c:	eb01 0402 	add.w	r4, r1, r2
 8039fa0:	d902      	bls.n	8039fa8 <memmove+0x10>
 8039fa2:	4284      	cmp	r4, r0
 8039fa4:	4623      	mov	r3, r4
 8039fa6:	d807      	bhi.n	8039fb8 <memmove+0x20>
 8039fa8:	1e43      	subs	r3, r0, #1
 8039faa:	42a1      	cmp	r1, r4
 8039fac:	d008      	beq.n	8039fc0 <memmove+0x28>
 8039fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8039fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8039fb6:	e7f8      	b.n	8039faa <memmove+0x12>
 8039fb8:	4402      	add	r2, r0
 8039fba:	4601      	mov	r1, r0
 8039fbc:	428a      	cmp	r2, r1
 8039fbe:	d100      	bne.n	8039fc2 <memmove+0x2a>
 8039fc0:	bd10      	pop	{r4, pc}
 8039fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8039fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8039fca:	e7f7      	b.n	8039fbc <memmove+0x24>

08039fcc <__assert_func>:
 8039fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8039fce:	4614      	mov	r4, r2
 8039fd0:	461a      	mov	r2, r3
 8039fd2:	4b09      	ldr	r3, [pc, #36]	; (8039ff8 <__assert_func+0x2c>)
 8039fd4:	681b      	ldr	r3, [r3, #0]
 8039fd6:	4605      	mov	r5, r0
 8039fd8:	68d8      	ldr	r0, [r3, #12]
 8039fda:	b14c      	cbz	r4, 8039ff0 <__assert_func+0x24>
 8039fdc:	4b07      	ldr	r3, [pc, #28]	; (8039ffc <__assert_func+0x30>)
 8039fde:	9100      	str	r1, [sp, #0]
 8039fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8039fe4:	4906      	ldr	r1, [pc, #24]	; (803a000 <__assert_func+0x34>)
 8039fe6:	462b      	mov	r3, r5
 8039fe8:	f000 f824 	bl	803a034 <fiprintf>
 8039fec:	f000 f834 	bl	803a058 <abort>
 8039ff0:	4b04      	ldr	r3, [pc, #16]	; (803a004 <__assert_func+0x38>)
 8039ff2:	461c      	mov	r4, r3
 8039ff4:	e7f3      	b.n	8039fde <__assert_func+0x12>
 8039ff6:	bf00      	nop
 8039ff8:	200001e8 	.word	0x200001e8
 8039ffc:	0803ad25 	.word	0x0803ad25
 803a000:	0803ad32 	.word	0x0803ad32
 803a004:	0803ad60 	.word	0x0803ad60

0803a008 <_calloc_r>:
 803a008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803a00a:	fba1 2402 	umull	r2, r4, r1, r2
 803a00e:	b94c      	cbnz	r4, 803a024 <_calloc_r+0x1c>
 803a010:	4611      	mov	r1, r2
 803a012:	9201      	str	r2, [sp, #4]
 803a014:	f7fc f982 	bl	803631c <_malloc_r>
 803a018:	9a01      	ldr	r2, [sp, #4]
 803a01a:	4605      	mov	r5, r0
 803a01c:	b930      	cbnz	r0, 803a02c <_calloc_r+0x24>
 803a01e:	4628      	mov	r0, r5
 803a020:	b003      	add	sp, #12
 803a022:	bd30      	pop	{r4, r5, pc}
 803a024:	220c      	movs	r2, #12
 803a026:	6002      	str	r2, [r0, #0]
 803a028:	2500      	movs	r5, #0
 803a02a:	e7f8      	b.n	803a01e <_calloc_r+0x16>
 803a02c:	4621      	mov	r1, r4
 803a02e:	f7fd fdcc 	bl	8037bca <memset>
 803a032:	e7f4      	b.n	803a01e <_calloc_r+0x16>

0803a034 <fiprintf>:
 803a034:	b40e      	push	{r1, r2, r3}
 803a036:	b503      	push	{r0, r1, lr}
 803a038:	4601      	mov	r1, r0
 803a03a:	ab03      	add	r3, sp, #12
 803a03c:	4805      	ldr	r0, [pc, #20]	; (803a054 <fiprintf+0x20>)
 803a03e:	f853 2b04 	ldr.w	r2, [r3], #4
 803a042:	6800      	ldr	r0, [r0, #0]
 803a044:	9301      	str	r3, [sp, #4]
 803a046:	f000 f837 	bl	803a0b8 <_vfiprintf_r>
 803a04a:	b002      	add	sp, #8
 803a04c:	f85d eb04 	ldr.w	lr, [sp], #4
 803a050:	b003      	add	sp, #12
 803a052:	4770      	bx	lr
 803a054:	200001e8 	.word	0x200001e8

0803a058 <abort>:
 803a058:	b508      	push	{r3, lr}
 803a05a:	2006      	movs	r0, #6
 803a05c:	f000 fa04 	bl	803a468 <raise>
 803a060:	2001      	movs	r0, #1
 803a062:	f7f9 fa9d 	bl	80335a0 <_exit>

0803a066 <__sfputc_r>:
 803a066:	6893      	ldr	r3, [r2, #8]
 803a068:	3b01      	subs	r3, #1
 803a06a:	2b00      	cmp	r3, #0
 803a06c:	b410      	push	{r4}
 803a06e:	6093      	str	r3, [r2, #8]
 803a070:	da08      	bge.n	803a084 <__sfputc_r+0x1e>
 803a072:	6994      	ldr	r4, [r2, #24]
 803a074:	42a3      	cmp	r3, r4
 803a076:	db01      	blt.n	803a07c <__sfputc_r+0x16>
 803a078:	290a      	cmp	r1, #10
 803a07a:	d103      	bne.n	803a084 <__sfputc_r+0x1e>
 803a07c:	f85d 4b04 	ldr.w	r4, [sp], #4
 803a080:	f000 b934 	b.w	803a2ec <__swbuf_r>
 803a084:	6813      	ldr	r3, [r2, #0]
 803a086:	1c58      	adds	r0, r3, #1
 803a088:	6010      	str	r0, [r2, #0]
 803a08a:	7019      	strb	r1, [r3, #0]
 803a08c:	4608      	mov	r0, r1
 803a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 803a092:	4770      	bx	lr

0803a094 <__sfputs_r>:
 803a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a096:	4606      	mov	r6, r0
 803a098:	460f      	mov	r7, r1
 803a09a:	4614      	mov	r4, r2
 803a09c:	18d5      	adds	r5, r2, r3
 803a09e:	42ac      	cmp	r4, r5
 803a0a0:	d101      	bne.n	803a0a6 <__sfputs_r+0x12>
 803a0a2:	2000      	movs	r0, #0
 803a0a4:	e007      	b.n	803a0b6 <__sfputs_r+0x22>
 803a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 803a0aa:	463a      	mov	r2, r7
 803a0ac:	4630      	mov	r0, r6
 803a0ae:	f7ff ffda 	bl	803a066 <__sfputc_r>
 803a0b2:	1c43      	adds	r3, r0, #1
 803a0b4:	d1f3      	bne.n	803a09e <__sfputs_r+0xa>
 803a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0803a0b8 <_vfiprintf_r>:
 803a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a0bc:	460d      	mov	r5, r1
 803a0be:	b09d      	sub	sp, #116	; 0x74
 803a0c0:	4614      	mov	r4, r2
 803a0c2:	4698      	mov	r8, r3
 803a0c4:	4606      	mov	r6, r0
 803a0c6:	b118      	cbz	r0, 803a0d0 <_vfiprintf_r+0x18>
 803a0c8:	6a03      	ldr	r3, [r0, #32]
 803a0ca:	b90b      	cbnz	r3, 803a0d0 <_vfiprintf_r+0x18>
 803a0cc:	f7fd fce4 	bl	8037a98 <__sinit>
 803a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803a0d2:	07d9      	lsls	r1, r3, #31
 803a0d4:	d405      	bmi.n	803a0e2 <_vfiprintf_r+0x2a>
 803a0d6:	89ab      	ldrh	r3, [r5, #12]
 803a0d8:	059a      	lsls	r2, r3, #22
 803a0da:	d402      	bmi.n	803a0e2 <_vfiprintf_r+0x2a>
 803a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803a0de:	f7fd fe49 	bl	8037d74 <__retarget_lock_acquire_recursive>
 803a0e2:	89ab      	ldrh	r3, [r5, #12]
 803a0e4:	071b      	lsls	r3, r3, #28
 803a0e6:	d501      	bpl.n	803a0ec <_vfiprintf_r+0x34>
 803a0e8:	692b      	ldr	r3, [r5, #16]
 803a0ea:	b99b      	cbnz	r3, 803a114 <_vfiprintf_r+0x5c>
 803a0ec:	4629      	mov	r1, r5
 803a0ee:	4630      	mov	r0, r6
 803a0f0:	f000 f93a 	bl	803a368 <__swsetup_r>
 803a0f4:	b170      	cbz	r0, 803a114 <_vfiprintf_r+0x5c>
 803a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803a0f8:	07dc      	lsls	r4, r3, #31
 803a0fa:	d504      	bpl.n	803a106 <_vfiprintf_r+0x4e>
 803a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 803a100:	b01d      	add	sp, #116	; 0x74
 803a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a106:	89ab      	ldrh	r3, [r5, #12]
 803a108:	0598      	lsls	r0, r3, #22
 803a10a:	d4f7      	bmi.n	803a0fc <_vfiprintf_r+0x44>
 803a10c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803a10e:	f7fd fe32 	bl	8037d76 <__retarget_lock_release_recursive>
 803a112:	e7f3      	b.n	803a0fc <_vfiprintf_r+0x44>
 803a114:	2300      	movs	r3, #0
 803a116:	9309      	str	r3, [sp, #36]	; 0x24
 803a118:	2320      	movs	r3, #32
 803a11a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803a11e:	f8cd 800c 	str.w	r8, [sp, #12]
 803a122:	2330      	movs	r3, #48	; 0x30
 803a124:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 803a2d8 <_vfiprintf_r+0x220>
 803a128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803a12c:	f04f 0901 	mov.w	r9, #1
 803a130:	4623      	mov	r3, r4
 803a132:	469a      	mov	sl, r3
 803a134:	f813 2b01 	ldrb.w	r2, [r3], #1
 803a138:	b10a      	cbz	r2, 803a13e <_vfiprintf_r+0x86>
 803a13a:	2a25      	cmp	r2, #37	; 0x25
 803a13c:	d1f9      	bne.n	803a132 <_vfiprintf_r+0x7a>
 803a13e:	ebba 0b04 	subs.w	fp, sl, r4
 803a142:	d00b      	beq.n	803a15c <_vfiprintf_r+0xa4>
 803a144:	465b      	mov	r3, fp
 803a146:	4622      	mov	r2, r4
 803a148:	4629      	mov	r1, r5
 803a14a:	4630      	mov	r0, r6
 803a14c:	f7ff ffa2 	bl	803a094 <__sfputs_r>
 803a150:	3001      	adds	r0, #1
 803a152:	f000 80a9 	beq.w	803a2a8 <_vfiprintf_r+0x1f0>
 803a156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803a158:	445a      	add	r2, fp
 803a15a:	9209      	str	r2, [sp, #36]	; 0x24
 803a15c:	f89a 3000 	ldrb.w	r3, [sl]
 803a160:	2b00      	cmp	r3, #0
 803a162:	f000 80a1 	beq.w	803a2a8 <_vfiprintf_r+0x1f0>
 803a166:	2300      	movs	r3, #0
 803a168:	f04f 32ff 	mov.w	r2, #4294967295
 803a16c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803a170:	f10a 0a01 	add.w	sl, sl, #1
 803a174:	9304      	str	r3, [sp, #16]
 803a176:	9307      	str	r3, [sp, #28]
 803a178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803a17c:	931a      	str	r3, [sp, #104]	; 0x68
 803a17e:	4654      	mov	r4, sl
 803a180:	2205      	movs	r2, #5
 803a182:	f814 1b01 	ldrb.w	r1, [r4], #1
 803a186:	4854      	ldr	r0, [pc, #336]	; (803a2d8 <_vfiprintf_r+0x220>)
 803a188:	f7f6 f832 	bl	80301f0 <memchr>
 803a18c:	9a04      	ldr	r2, [sp, #16]
 803a18e:	b9d8      	cbnz	r0, 803a1c8 <_vfiprintf_r+0x110>
 803a190:	06d1      	lsls	r1, r2, #27
 803a192:	bf44      	itt	mi
 803a194:	2320      	movmi	r3, #32
 803a196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803a19a:	0713      	lsls	r3, r2, #28
 803a19c:	bf44      	itt	mi
 803a19e:	232b      	movmi	r3, #43	; 0x2b
 803a1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803a1a4:	f89a 3000 	ldrb.w	r3, [sl]
 803a1a8:	2b2a      	cmp	r3, #42	; 0x2a
 803a1aa:	d015      	beq.n	803a1d8 <_vfiprintf_r+0x120>
 803a1ac:	9a07      	ldr	r2, [sp, #28]
 803a1ae:	4654      	mov	r4, sl
 803a1b0:	2000      	movs	r0, #0
 803a1b2:	f04f 0c0a 	mov.w	ip, #10
 803a1b6:	4621      	mov	r1, r4
 803a1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 803a1bc:	3b30      	subs	r3, #48	; 0x30
 803a1be:	2b09      	cmp	r3, #9
 803a1c0:	d94d      	bls.n	803a25e <_vfiprintf_r+0x1a6>
 803a1c2:	b1b0      	cbz	r0, 803a1f2 <_vfiprintf_r+0x13a>
 803a1c4:	9207      	str	r2, [sp, #28]
 803a1c6:	e014      	b.n	803a1f2 <_vfiprintf_r+0x13a>
 803a1c8:	eba0 0308 	sub.w	r3, r0, r8
 803a1cc:	fa09 f303 	lsl.w	r3, r9, r3
 803a1d0:	4313      	orrs	r3, r2
 803a1d2:	9304      	str	r3, [sp, #16]
 803a1d4:	46a2      	mov	sl, r4
 803a1d6:	e7d2      	b.n	803a17e <_vfiprintf_r+0xc6>
 803a1d8:	9b03      	ldr	r3, [sp, #12]
 803a1da:	1d19      	adds	r1, r3, #4
 803a1dc:	681b      	ldr	r3, [r3, #0]
 803a1de:	9103      	str	r1, [sp, #12]
 803a1e0:	2b00      	cmp	r3, #0
 803a1e2:	bfbb      	ittet	lt
 803a1e4:	425b      	neglt	r3, r3
 803a1e6:	f042 0202 	orrlt.w	r2, r2, #2
 803a1ea:	9307      	strge	r3, [sp, #28]
 803a1ec:	9307      	strlt	r3, [sp, #28]
 803a1ee:	bfb8      	it	lt
 803a1f0:	9204      	strlt	r2, [sp, #16]
 803a1f2:	7823      	ldrb	r3, [r4, #0]
 803a1f4:	2b2e      	cmp	r3, #46	; 0x2e
 803a1f6:	d10c      	bne.n	803a212 <_vfiprintf_r+0x15a>
 803a1f8:	7863      	ldrb	r3, [r4, #1]
 803a1fa:	2b2a      	cmp	r3, #42	; 0x2a
 803a1fc:	d134      	bne.n	803a268 <_vfiprintf_r+0x1b0>
 803a1fe:	9b03      	ldr	r3, [sp, #12]
 803a200:	1d1a      	adds	r2, r3, #4
 803a202:	681b      	ldr	r3, [r3, #0]
 803a204:	9203      	str	r2, [sp, #12]
 803a206:	2b00      	cmp	r3, #0
 803a208:	bfb8      	it	lt
 803a20a:	f04f 33ff 	movlt.w	r3, #4294967295
 803a20e:	3402      	adds	r4, #2
 803a210:	9305      	str	r3, [sp, #20]
 803a212:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 803a2e8 <_vfiprintf_r+0x230>
 803a216:	7821      	ldrb	r1, [r4, #0]
 803a218:	2203      	movs	r2, #3
 803a21a:	4650      	mov	r0, sl
 803a21c:	f7f5 ffe8 	bl	80301f0 <memchr>
 803a220:	b138      	cbz	r0, 803a232 <_vfiprintf_r+0x17a>
 803a222:	9b04      	ldr	r3, [sp, #16]
 803a224:	eba0 000a 	sub.w	r0, r0, sl
 803a228:	2240      	movs	r2, #64	; 0x40
 803a22a:	4082      	lsls	r2, r0
 803a22c:	4313      	orrs	r3, r2
 803a22e:	3401      	adds	r4, #1
 803a230:	9304      	str	r3, [sp, #16]
 803a232:	f814 1b01 	ldrb.w	r1, [r4], #1
 803a236:	4829      	ldr	r0, [pc, #164]	; (803a2dc <_vfiprintf_r+0x224>)
 803a238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803a23c:	2206      	movs	r2, #6
 803a23e:	f7f5 ffd7 	bl	80301f0 <memchr>
 803a242:	2800      	cmp	r0, #0
 803a244:	d03f      	beq.n	803a2c6 <_vfiprintf_r+0x20e>
 803a246:	4b26      	ldr	r3, [pc, #152]	; (803a2e0 <_vfiprintf_r+0x228>)
 803a248:	bb1b      	cbnz	r3, 803a292 <_vfiprintf_r+0x1da>
 803a24a:	9b03      	ldr	r3, [sp, #12]
 803a24c:	3307      	adds	r3, #7
 803a24e:	f023 0307 	bic.w	r3, r3, #7
 803a252:	3308      	adds	r3, #8
 803a254:	9303      	str	r3, [sp, #12]
 803a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803a258:	443b      	add	r3, r7
 803a25a:	9309      	str	r3, [sp, #36]	; 0x24
 803a25c:	e768      	b.n	803a130 <_vfiprintf_r+0x78>
 803a25e:	fb0c 3202 	mla	r2, ip, r2, r3
 803a262:	460c      	mov	r4, r1
 803a264:	2001      	movs	r0, #1
 803a266:	e7a6      	b.n	803a1b6 <_vfiprintf_r+0xfe>
 803a268:	2300      	movs	r3, #0
 803a26a:	3401      	adds	r4, #1
 803a26c:	9305      	str	r3, [sp, #20]
 803a26e:	4619      	mov	r1, r3
 803a270:	f04f 0c0a 	mov.w	ip, #10
 803a274:	4620      	mov	r0, r4
 803a276:	f810 2b01 	ldrb.w	r2, [r0], #1
 803a27a:	3a30      	subs	r2, #48	; 0x30
 803a27c:	2a09      	cmp	r2, #9
 803a27e:	d903      	bls.n	803a288 <_vfiprintf_r+0x1d0>
 803a280:	2b00      	cmp	r3, #0
 803a282:	d0c6      	beq.n	803a212 <_vfiprintf_r+0x15a>
 803a284:	9105      	str	r1, [sp, #20]
 803a286:	e7c4      	b.n	803a212 <_vfiprintf_r+0x15a>
 803a288:	fb0c 2101 	mla	r1, ip, r1, r2
 803a28c:	4604      	mov	r4, r0
 803a28e:	2301      	movs	r3, #1
 803a290:	e7f0      	b.n	803a274 <_vfiprintf_r+0x1bc>
 803a292:	ab03      	add	r3, sp, #12
 803a294:	9300      	str	r3, [sp, #0]
 803a296:	462a      	mov	r2, r5
 803a298:	4b12      	ldr	r3, [pc, #72]	; (803a2e4 <_vfiprintf_r+0x22c>)
 803a29a:	a904      	add	r1, sp, #16
 803a29c:	4630      	mov	r0, r6
 803a29e:	f7fc ffbb 	bl	8037218 <_printf_float>
 803a2a2:	4607      	mov	r7, r0
 803a2a4:	1c78      	adds	r0, r7, #1
 803a2a6:	d1d6      	bne.n	803a256 <_vfiprintf_r+0x19e>
 803a2a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803a2aa:	07d9      	lsls	r1, r3, #31
 803a2ac:	d405      	bmi.n	803a2ba <_vfiprintf_r+0x202>
 803a2ae:	89ab      	ldrh	r3, [r5, #12]
 803a2b0:	059a      	lsls	r2, r3, #22
 803a2b2:	d402      	bmi.n	803a2ba <_vfiprintf_r+0x202>
 803a2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803a2b6:	f7fd fd5e 	bl	8037d76 <__retarget_lock_release_recursive>
 803a2ba:	89ab      	ldrh	r3, [r5, #12]
 803a2bc:	065b      	lsls	r3, r3, #25
 803a2be:	f53f af1d 	bmi.w	803a0fc <_vfiprintf_r+0x44>
 803a2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 803a2c4:	e71c      	b.n	803a100 <_vfiprintf_r+0x48>
 803a2c6:	ab03      	add	r3, sp, #12
 803a2c8:	9300      	str	r3, [sp, #0]
 803a2ca:	462a      	mov	r2, r5
 803a2cc:	4b05      	ldr	r3, [pc, #20]	; (803a2e4 <_vfiprintf_r+0x22c>)
 803a2ce:	a904      	add	r1, sp, #16
 803a2d0:	4630      	mov	r0, r6
 803a2d2:	f7fd fa45 	bl	8037760 <_printf_i>
 803a2d6:	e7e4      	b.n	803a2a2 <_vfiprintf_r+0x1ea>
 803a2d8:	0803ad14 	.word	0x0803ad14
 803a2dc:	0803ad1e 	.word	0x0803ad1e
 803a2e0:	08037219 	.word	0x08037219
 803a2e4:	0803a095 	.word	0x0803a095
 803a2e8:	0803ad1a 	.word	0x0803ad1a

0803a2ec <__swbuf_r>:
 803a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a2ee:	460e      	mov	r6, r1
 803a2f0:	4614      	mov	r4, r2
 803a2f2:	4605      	mov	r5, r0
 803a2f4:	b118      	cbz	r0, 803a2fe <__swbuf_r+0x12>
 803a2f6:	6a03      	ldr	r3, [r0, #32]
 803a2f8:	b90b      	cbnz	r3, 803a2fe <__swbuf_r+0x12>
 803a2fa:	f7fd fbcd 	bl	8037a98 <__sinit>
 803a2fe:	69a3      	ldr	r3, [r4, #24]
 803a300:	60a3      	str	r3, [r4, #8]
 803a302:	89a3      	ldrh	r3, [r4, #12]
 803a304:	071a      	lsls	r2, r3, #28
 803a306:	d525      	bpl.n	803a354 <__swbuf_r+0x68>
 803a308:	6923      	ldr	r3, [r4, #16]
 803a30a:	b31b      	cbz	r3, 803a354 <__swbuf_r+0x68>
 803a30c:	6823      	ldr	r3, [r4, #0]
 803a30e:	6922      	ldr	r2, [r4, #16]
 803a310:	1a98      	subs	r0, r3, r2
 803a312:	6963      	ldr	r3, [r4, #20]
 803a314:	b2f6      	uxtb	r6, r6
 803a316:	4283      	cmp	r3, r0
 803a318:	4637      	mov	r7, r6
 803a31a:	dc04      	bgt.n	803a326 <__swbuf_r+0x3a>
 803a31c:	4621      	mov	r1, r4
 803a31e:	4628      	mov	r0, r5
 803a320:	f7ff fe12 	bl	8039f48 <_fflush_r>
 803a324:	b9e0      	cbnz	r0, 803a360 <__swbuf_r+0x74>
 803a326:	68a3      	ldr	r3, [r4, #8]
 803a328:	3b01      	subs	r3, #1
 803a32a:	60a3      	str	r3, [r4, #8]
 803a32c:	6823      	ldr	r3, [r4, #0]
 803a32e:	1c5a      	adds	r2, r3, #1
 803a330:	6022      	str	r2, [r4, #0]
 803a332:	701e      	strb	r6, [r3, #0]
 803a334:	6962      	ldr	r2, [r4, #20]
 803a336:	1c43      	adds	r3, r0, #1
 803a338:	429a      	cmp	r2, r3
 803a33a:	d004      	beq.n	803a346 <__swbuf_r+0x5a>
 803a33c:	89a3      	ldrh	r3, [r4, #12]
 803a33e:	07db      	lsls	r3, r3, #31
 803a340:	d506      	bpl.n	803a350 <__swbuf_r+0x64>
 803a342:	2e0a      	cmp	r6, #10
 803a344:	d104      	bne.n	803a350 <__swbuf_r+0x64>
 803a346:	4621      	mov	r1, r4
 803a348:	4628      	mov	r0, r5
 803a34a:	f7ff fdfd 	bl	8039f48 <_fflush_r>
 803a34e:	b938      	cbnz	r0, 803a360 <__swbuf_r+0x74>
 803a350:	4638      	mov	r0, r7
 803a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803a354:	4621      	mov	r1, r4
 803a356:	4628      	mov	r0, r5
 803a358:	f000 f806 	bl	803a368 <__swsetup_r>
 803a35c:	2800      	cmp	r0, #0
 803a35e:	d0d5      	beq.n	803a30c <__swbuf_r+0x20>
 803a360:	f04f 37ff 	mov.w	r7, #4294967295
 803a364:	e7f4      	b.n	803a350 <__swbuf_r+0x64>
	...

0803a368 <__swsetup_r>:
 803a368:	b538      	push	{r3, r4, r5, lr}
 803a36a:	4b2a      	ldr	r3, [pc, #168]	; (803a414 <__swsetup_r+0xac>)
 803a36c:	4605      	mov	r5, r0
 803a36e:	6818      	ldr	r0, [r3, #0]
 803a370:	460c      	mov	r4, r1
 803a372:	b118      	cbz	r0, 803a37c <__swsetup_r+0x14>
 803a374:	6a03      	ldr	r3, [r0, #32]
 803a376:	b90b      	cbnz	r3, 803a37c <__swsetup_r+0x14>
 803a378:	f7fd fb8e 	bl	8037a98 <__sinit>
 803a37c:	89a3      	ldrh	r3, [r4, #12]
 803a37e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a382:	0718      	lsls	r0, r3, #28
 803a384:	d422      	bmi.n	803a3cc <__swsetup_r+0x64>
 803a386:	06d9      	lsls	r1, r3, #27
 803a388:	d407      	bmi.n	803a39a <__swsetup_r+0x32>
 803a38a:	2309      	movs	r3, #9
 803a38c:	602b      	str	r3, [r5, #0]
 803a38e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803a392:	81a3      	strh	r3, [r4, #12]
 803a394:	f04f 30ff 	mov.w	r0, #4294967295
 803a398:	e034      	b.n	803a404 <__swsetup_r+0x9c>
 803a39a:	0758      	lsls	r0, r3, #29
 803a39c:	d512      	bpl.n	803a3c4 <__swsetup_r+0x5c>
 803a39e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a3a0:	b141      	cbz	r1, 803a3b4 <__swsetup_r+0x4c>
 803a3a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a3a6:	4299      	cmp	r1, r3
 803a3a8:	d002      	beq.n	803a3b0 <__swsetup_r+0x48>
 803a3aa:	4628      	mov	r0, r5
 803a3ac:	f7fe fb76 	bl	8038a9c <_free_r>
 803a3b0:	2300      	movs	r3, #0
 803a3b2:	6363      	str	r3, [r4, #52]	; 0x34
 803a3b4:	89a3      	ldrh	r3, [r4, #12]
 803a3b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803a3ba:	81a3      	strh	r3, [r4, #12]
 803a3bc:	2300      	movs	r3, #0
 803a3be:	6063      	str	r3, [r4, #4]
 803a3c0:	6923      	ldr	r3, [r4, #16]
 803a3c2:	6023      	str	r3, [r4, #0]
 803a3c4:	89a3      	ldrh	r3, [r4, #12]
 803a3c6:	f043 0308 	orr.w	r3, r3, #8
 803a3ca:	81a3      	strh	r3, [r4, #12]
 803a3cc:	6923      	ldr	r3, [r4, #16]
 803a3ce:	b94b      	cbnz	r3, 803a3e4 <__swsetup_r+0x7c>
 803a3d0:	89a3      	ldrh	r3, [r4, #12]
 803a3d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803a3d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803a3da:	d003      	beq.n	803a3e4 <__swsetup_r+0x7c>
 803a3dc:	4621      	mov	r1, r4
 803a3de:	4628      	mov	r0, r5
 803a3e0:	f000 f884 	bl	803a4ec <__smakebuf_r>
 803a3e4:	89a0      	ldrh	r0, [r4, #12]
 803a3e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803a3ea:	f010 0301 	ands.w	r3, r0, #1
 803a3ee:	d00a      	beq.n	803a406 <__swsetup_r+0x9e>
 803a3f0:	2300      	movs	r3, #0
 803a3f2:	60a3      	str	r3, [r4, #8]
 803a3f4:	6963      	ldr	r3, [r4, #20]
 803a3f6:	425b      	negs	r3, r3
 803a3f8:	61a3      	str	r3, [r4, #24]
 803a3fa:	6923      	ldr	r3, [r4, #16]
 803a3fc:	b943      	cbnz	r3, 803a410 <__swsetup_r+0xa8>
 803a3fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803a402:	d1c4      	bne.n	803a38e <__swsetup_r+0x26>
 803a404:	bd38      	pop	{r3, r4, r5, pc}
 803a406:	0781      	lsls	r1, r0, #30
 803a408:	bf58      	it	pl
 803a40a:	6963      	ldrpl	r3, [r4, #20]
 803a40c:	60a3      	str	r3, [r4, #8]
 803a40e:	e7f4      	b.n	803a3fa <__swsetup_r+0x92>
 803a410:	2000      	movs	r0, #0
 803a412:	e7f7      	b.n	803a404 <__swsetup_r+0x9c>
 803a414:	200001e8 	.word	0x200001e8

0803a418 <_raise_r>:
 803a418:	291f      	cmp	r1, #31
 803a41a:	b538      	push	{r3, r4, r5, lr}
 803a41c:	4604      	mov	r4, r0
 803a41e:	460d      	mov	r5, r1
 803a420:	d904      	bls.n	803a42c <_raise_r+0x14>
 803a422:	2316      	movs	r3, #22
 803a424:	6003      	str	r3, [r0, #0]
 803a426:	f04f 30ff 	mov.w	r0, #4294967295
 803a42a:	bd38      	pop	{r3, r4, r5, pc}
 803a42c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 803a42e:	b112      	cbz	r2, 803a436 <_raise_r+0x1e>
 803a430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803a434:	b94b      	cbnz	r3, 803a44a <_raise_r+0x32>
 803a436:	4620      	mov	r0, r4
 803a438:	f000 f830 	bl	803a49c <_getpid_r>
 803a43c:	462a      	mov	r2, r5
 803a43e:	4601      	mov	r1, r0
 803a440:	4620      	mov	r0, r4
 803a442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803a446:	f000 b817 	b.w	803a478 <_kill_r>
 803a44a:	2b01      	cmp	r3, #1
 803a44c:	d00a      	beq.n	803a464 <_raise_r+0x4c>
 803a44e:	1c59      	adds	r1, r3, #1
 803a450:	d103      	bne.n	803a45a <_raise_r+0x42>
 803a452:	2316      	movs	r3, #22
 803a454:	6003      	str	r3, [r0, #0]
 803a456:	2001      	movs	r0, #1
 803a458:	e7e7      	b.n	803a42a <_raise_r+0x12>
 803a45a:	2400      	movs	r4, #0
 803a45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803a460:	4628      	mov	r0, r5
 803a462:	4798      	blx	r3
 803a464:	2000      	movs	r0, #0
 803a466:	e7e0      	b.n	803a42a <_raise_r+0x12>

0803a468 <raise>:
 803a468:	4b02      	ldr	r3, [pc, #8]	; (803a474 <raise+0xc>)
 803a46a:	4601      	mov	r1, r0
 803a46c:	6818      	ldr	r0, [r3, #0]
 803a46e:	f7ff bfd3 	b.w	803a418 <_raise_r>
 803a472:	bf00      	nop
 803a474:	200001e8 	.word	0x200001e8

0803a478 <_kill_r>:
 803a478:	b538      	push	{r3, r4, r5, lr}
 803a47a:	4d07      	ldr	r5, [pc, #28]	; (803a498 <_kill_r+0x20>)
 803a47c:	2300      	movs	r3, #0
 803a47e:	4604      	mov	r4, r0
 803a480:	4608      	mov	r0, r1
 803a482:	4611      	mov	r1, r2
 803a484:	602b      	str	r3, [r5, #0]
 803a486:	f7f9 f87b 	bl	8033580 <_kill>
 803a48a:	1c43      	adds	r3, r0, #1
 803a48c:	d102      	bne.n	803a494 <_kill_r+0x1c>
 803a48e:	682b      	ldr	r3, [r5, #0]
 803a490:	b103      	cbz	r3, 803a494 <_kill_r+0x1c>
 803a492:	6023      	str	r3, [r4, #0]
 803a494:	bd38      	pop	{r3, r4, r5, pc}
 803a496:	bf00      	nop
 803a498:	2000cd2c 	.word	0x2000cd2c

0803a49c <_getpid_r>:
 803a49c:	f7f9 b868 	b.w	8033570 <_getpid>

0803a4a0 <__swhatbuf_r>:
 803a4a0:	b570      	push	{r4, r5, r6, lr}
 803a4a2:	460c      	mov	r4, r1
 803a4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a4a8:	2900      	cmp	r1, #0
 803a4aa:	b096      	sub	sp, #88	; 0x58
 803a4ac:	4615      	mov	r5, r2
 803a4ae:	461e      	mov	r6, r3
 803a4b0:	da0d      	bge.n	803a4ce <__swhatbuf_r+0x2e>
 803a4b2:	89a3      	ldrh	r3, [r4, #12]
 803a4b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 803a4b8:	f04f 0100 	mov.w	r1, #0
 803a4bc:	bf0c      	ite	eq
 803a4be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 803a4c2:	2340      	movne	r3, #64	; 0x40
 803a4c4:	2000      	movs	r0, #0
 803a4c6:	6031      	str	r1, [r6, #0]
 803a4c8:	602b      	str	r3, [r5, #0]
 803a4ca:	b016      	add	sp, #88	; 0x58
 803a4cc:	bd70      	pop	{r4, r5, r6, pc}
 803a4ce:	466a      	mov	r2, sp
 803a4d0:	f000 f848 	bl	803a564 <_fstat_r>
 803a4d4:	2800      	cmp	r0, #0
 803a4d6:	dbec      	blt.n	803a4b2 <__swhatbuf_r+0x12>
 803a4d8:	9901      	ldr	r1, [sp, #4]
 803a4da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 803a4de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 803a4e2:	4259      	negs	r1, r3
 803a4e4:	4159      	adcs	r1, r3
 803a4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803a4ea:	e7eb      	b.n	803a4c4 <__swhatbuf_r+0x24>

0803a4ec <__smakebuf_r>:
 803a4ec:	898b      	ldrh	r3, [r1, #12]
 803a4ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803a4f0:	079d      	lsls	r5, r3, #30
 803a4f2:	4606      	mov	r6, r0
 803a4f4:	460c      	mov	r4, r1
 803a4f6:	d507      	bpl.n	803a508 <__smakebuf_r+0x1c>
 803a4f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803a4fc:	6023      	str	r3, [r4, #0]
 803a4fe:	6123      	str	r3, [r4, #16]
 803a500:	2301      	movs	r3, #1
 803a502:	6163      	str	r3, [r4, #20]
 803a504:	b002      	add	sp, #8
 803a506:	bd70      	pop	{r4, r5, r6, pc}
 803a508:	ab01      	add	r3, sp, #4
 803a50a:	466a      	mov	r2, sp
 803a50c:	f7ff ffc8 	bl	803a4a0 <__swhatbuf_r>
 803a510:	9900      	ldr	r1, [sp, #0]
 803a512:	4605      	mov	r5, r0
 803a514:	4630      	mov	r0, r6
 803a516:	f7fb ff01 	bl	803631c <_malloc_r>
 803a51a:	b948      	cbnz	r0, 803a530 <__smakebuf_r+0x44>
 803a51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a520:	059a      	lsls	r2, r3, #22
 803a522:	d4ef      	bmi.n	803a504 <__smakebuf_r+0x18>
 803a524:	f023 0303 	bic.w	r3, r3, #3
 803a528:	f043 0302 	orr.w	r3, r3, #2
 803a52c:	81a3      	strh	r3, [r4, #12]
 803a52e:	e7e3      	b.n	803a4f8 <__smakebuf_r+0xc>
 803a530:	89a3      	ldrh	r3, [r4, #12]
 803a532:	6020      	str	r0, [r4, #0]
 803a534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803a538:	81a3      	strh	r3, [r4, #12]
 803a53a:	9b00      	ldr	r3, [sp, #0]
 803a53c:	6163      	str	r3, [r4, #20]
 803a53e:	9b01      	ldr	r3, [sp, #4]
 803a540:	6120      	str	r0, [r4, #16]
 803a542:	b15b      	cbz	r3, 803a55c <__smakebuf_r+0x70>
 803a544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803a548:	4630      	mov	r0, r6
 803a54a:	f000 f81d 	bl	803a588 <_isatty_r>
 803a54e:	b128      	cbz	r0, 803a55c <__smakebuf_r+0x70>
 803a550:	89a3      	ldrh	r3, [r4, #12]
 803a552:	f023 0303 	bic.w	r3, r3, #3
 803a556:	f043 0301 	orr.w	r3, r3, #1
 803a55a:	81a3      	strh	r3, [r4, #12]
 803a55c:	89a3      	ldrh	r3, [r4, #12]
 803a55e:	431d      	orrs	r5, r3
 803a560:	81a5      	strh	r5, [r4, #12]
 803a562:	e7cf      	b.n	803a504 <__smakebuf_r+0x18>

0803a564 <_fstat_r>:
 803a564:	b538      	push	{r3, r4, r5, lr}
 803a566:	4d07      	ldr	r5, [pc, #28]	; (803a584 <_fstat_r+0x20>)
 803a568:	2300      	movs	r3, #0
 803a56a:	4604      	mov	r4, r0
 803a56c:	4608      	mov	r0, r1
 803a56e:	4611      	mov	r1, r2
 803a570:	602b      	str	r3, [r5, #0]
 803a572:	f7f9 f864 	bl	803363e <_fstat>
 803a576:	1c43      	adds	r3, r0, #1
 803a578:	d102      	bne.n	803a580 <_fstat_r+0x1c>
 803a57a:	682b      	ldr	r3, [r5, #0]
 803a57c:	b103      	cbz	r3, 803a580 <_fstat_r+0x1c>
 803a57e:	6023      	str	r3, [r4, #0]
 803a580:	bd38      	pop	{r3, r4, r5, pc}
 803a582:	bf00      	nop
 803a584:	2000cd2c 	.word	0x2000cd2c

0803a588 <_isatty_r>:
 803a588:	b538      	push	{r3, r4, r5, lr}
 803a58a:	4d06      	ldr	r5, [pc, #24]	; (803a5a4 <_isatty_r+0x1c>)
 803a58c:	2300      	movs	r3, #0
 803a58e:	4604      	mov	r4, r0
 803a590:	4608      	mov	r0, r1
 803a592:	602b      	str	r3, [r5, #0]
 803a594:	f7f9 f863 	bl	803365e <_isatty>
 803a598:	1c43      	adds	r3, r0, #1
 803a59a:	d102      	bne.n	803a5a2 <_isatty_r+0x1a>
 803a59c:	682b      	ldr	r3, [r5, #0]
 803a59e:	b103      	cbz	r3, 803a5a2 <_isatty_r+0x1a>
 803a5a0:	6023      	str	r3, [r4, #0]
 803a5a2:	bd38      	pop	{r3, r4, r5, pc}
 803a5a4:	2000cd2c 	.word	0x2000cd2c

0803a5a8 <_init>:
 803a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a5aa:	bf00      	nop
 803a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803a5ae:	bc08      	pop	{r3}
 803a5b0:	469e      	mov	lr, r3
 803a5b2:	4770      	bx	lr

0803a5b4 <_fini>:
 803a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803a5b6:	bf00      	nop
 803a5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803a5ba:	bc08      	pop	{r3}
 803a5bc:	469e      	mov	lr, r3
 803a5be:	4770      	bx	lr
