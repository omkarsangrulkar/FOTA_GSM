
STM32_M66.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a74c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800a8e0  0800a8e0  0001a8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b09c  0800b09c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a4  0800b0a4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001300  200001f8  0800b2a4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f8  0800b2a4  000214f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f64  00000000  00000000  0002026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d6e  00000000  00000000  000321cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00034f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6a  00000000  00000000  00036150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022faf  00000000  00000000  00036fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015225  00000000  00000000  00059f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc671  00000000  00000000  0006f18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006120  00000000  00000000  0013b800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00141920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8c4 	.word	0x0800a8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a8c4 	.word	0x0800a8c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b9a6 	b.w	8000f6c <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9e08      	ldr	r6, [sp, #32]
 8000caa:	460d      	mov	r5, r1
 8000cac:	4604      	mov	r4, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14a      	bne.n	8000d4a <__udivmoddi4+0xa6>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4694      	mov	ip, r2
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0xe2>
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	b143      	cbz	r3, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	f1c3 0220 	rsb	r2, r3, #32
 8000cc8:	409f      	lsls	r7, r3
 8000cca:	fa20 f202 	lsr.w	r2, r0, r2
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	409c      	lsls	r4, r3
 8000cd2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cd6:	fa1f f58c 	uxth.w	r5, ip
 8000cda:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cde:	0c22      	lsrs	r2, r4, #16
 8000ce0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ce8:	fb01 f005 	mul.w	r0, r1, r5
 8000cec:	4290      	cmp	r0, r2
 8000cee:	d90a      	bls.n	8000d06 <__udivmoddi4+0x62>
 8000cf0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cf8:	f080 811c 	bcs.w	8000f34 <__udivmoddi4+0x290>
 8000cfc:	4290      	cmp	r0, r2
 8000cfe:	f240 8119 	bls.w	8000f34 <__udivmoddi4+0x290>
 8000d02:	3902      	subs	r1, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d16:	fb00 f505 	mul.w	r5, r0, r5
 8000d1a:	42a5      	cmp	r5, r4
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x90>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x294>
 8000d2a:	42a5      	cmp	r5, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x294>
 8000d30:	4464      	add	r4, ip
 8000d32:	3802      	subs	r0, #2
 8000d34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	b11e      	cbz	r6, 8000d46 <__udivmoddi4+0xa2>
 8000d3e:	40dc      	lsrs	r4, r3
 8000d40:	2300      	movs	r3, #0
 8000d42:	e9c6 4300 	strd	r4, r3, [r6]
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0xbc>
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f000 80ed 	beq.w	8000f2e <__udivmoddi4+0x28a>
 8000d54:	2100      	movs	r1, #0
 8000d56:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	fab3 f183 	clz	r1, r3
 8000d64:	2900      	cmp	r1, #0
 8000d66:	d149      	bne.n	8000dfc <__udivmoddi4+0x158>
 8000d68:	42ab      	cmp	r3, r5
 8000d6a:	d302      	bcc.n	8000d72 <__udivmoddi4+0xce>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	f200 80f8 	bhi.w	8000f62 <__udivmoddi4+0x2be>
 8000d72:	1a84      	subs	r4, r0, r2
 8000d74:	eb65 0203 	sbc.w	r2, r5, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d0e2      	beq.n	8000d46 <__udivmoddi4+0xa2>
 8000d80:	e9c6 4700 	strd	r4, r7, [r6]
 8000d84:	e7df      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000d86:	b902      	cbnz	r2, 8000d8a <__udivmoddi4+0xe6>
 8000d88:	deff      	udf	#255	; 0xff
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8090 	bne.w	8000eb4 <__udivmoddi4+0x210>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da4:	fb07 2015 	mls	r0, r7, r5, r2
 8000da8:	0c22      	lsrs	r2, r4, #16
 8000daa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dae:	fb0e f005 	mul.w	r0, lr, r5
 8000db2:	4290      	cmp	r0, r2
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x124>
 8000db6:	eb1c 0202 	adds.w	r2, ip, r2
 8000dba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x122>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2b8>
 8000dc6:	4645      	mov	r5, r8
 8000dc8:	1a12      	subs	r2, r2, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x14e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x14c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2c2>
 8000df0:	4610      	mov	r0, r2
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfa:	e79f      	b.n	8000d3c <__udivmoddi4+0x98>
 8000dfc:	f1c1 0720 	rsb	r7, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e12:	40fd      	lsrs	r5, r7
 8000e14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e1e:	fa1f fe8c 	uxth.w	lr, ip
 8000e22:	fb09 5518 	mls	r5, r9, r8, r5
 8000e26:	0c1c      	lsrs	r4, r3, #16
 8000e28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b0>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2b4>
 8000e48:	42a5      	cmp	r5, r4
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2b4>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4464      	add	r4, ip
 8000e54:	1b64      	subs	r4, r4, r5
 8000e56:	b29d      	uxth	r5, r3
 8000e58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1da>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2ac>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2ac>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e82:	fba3 9502 	umull	r9, r5, r3, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	42ac      	cmp	r4, r5
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46ae      	mov	lr, r5
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x29c>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x298>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x208>
 8000e96:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40ca      	lsrs	r2, r1
 8000ea4:	40cc      	lsrs	r4, r1
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	e9c6 7400 	strd	r7, r4, [r6]
 8000eac:	4618      	mov	r0, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	f1c3 0120 	rsb	r1, r3, #32
 8000eb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ebc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec4:	409d      	lsls	r5, r3
 8000ec6:	432a      	orrs	r2, r5
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ede:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee2:	428d      	cmp	r5, r1
 8000ee4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x258>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef4:	428d      	cmp	r5, r1
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b0>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1b49      	subs	r1, r1, r5
 8000efe:	b292      	uxth	r2, r2
 8000f00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f04:	fb07 1115 	mls	r1, r7, r5, r1
 8000f08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f10:	4291      	cmp	r1, r2
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x282>
 8000f14:	eb1c 0202 	adds.w	r2, ip, r2
 8000f18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000f1e:	4291      	cmp	r1, r2
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000f22:	3d02      	subs	r5, #2
 8000f24:	4462      	add	r2, ip
 8000f26:	1a52      	subs	r2, r2, r1
 8000f28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0xfc>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e708      	b.n	8000d46 <__udivmoddi4+0xa2>
 8000f34:	4639      	mov	r1, r7
 8000f36:	e6e6      	b.n	8000d06 <__udivmoddi4+0x62>
 8000f38:	4610      	mov	r0, r2
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x90>
 8000f3c:	4548      	cmp	r0, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f0>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f0>
 8000f4c:	4645      	mov	r5, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x282>
 8000f50:	462b      	mov	r3, r5
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1da>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x258>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b0>
 8000f5c:	3d02      	subs	r5, #2
 8000f5e:	4462      	add	r2, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x124>
 8000f62:	4608      	mov	r0, r1
 8000f64:	e70a      	b.n	8000d7c <__udivmoddi4+0xd8>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x14e>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <__NVIC_SystemReset+0x24>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f82:	4904      	ldr	r1, [pc, #16]	; (8000f94 <__NVIC_SystemReset+0x24>)
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_SystemReset+0x28>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f8a:	f3bf 8f4f 	dsb	sy
}
 8000f8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <__NVIC_SystemReset+0x20>
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0004 	.word	0x05fa0004

08000f9c <Delay>:
uint32_t firmware_size = 0;
uint32_t buffer_index = 0;
volatile uint32_t current_flash_address = START_FLASH_ADDRESS;


void Delay(uint32_t milliseconds) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    // Calculate the number of clock cycles required for the desired delay
    // The actual calculation may vary depending on your microcontroller and clock settings
    uint32_t delay_cycles = milliseconds * (SystemCoreClock / 1000) / 1000;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <Delay+0x48>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <Delay+0x4c>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	099b      	lsrs	r3, r3, #6
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <Delay+0x4c>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	099b      	lsrs	r3, r3, #6
 8000fbe:	60bb      	str	r3, [r7, #8]

    // Perform the delay using a simple loop
    for (uint32_t i = 0; i < delay_cycles; i++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e002      	b.n	8000fcc <Delay+0x30>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3f8      	bcc.n	8000fc6 <Delay+0x2a>
        // This loop will take some time to execute, creating a delay
        // The exact duration of the delay depends on your microcontroller's clock frequency
        // Adjust the loop count or use a hardware timer for more precise delays
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000024 	.word	0x20000024
 8000fe8:	10624dd3 	.word	0x10624dd3

08000fec <Initialize_Modem>:
//	HAL_Delay(1000);
//
//}
//Have to work on certificate configuration.
void Initialize_Modem(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
//    {
//        return; // If we didn't get an OK, exit
//    }

    // Reset state
    at_state = AT_IDLE;
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <Initialize_Modem+0x13c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]

    // Proceed with other commands using the same pattern
    send_at_command("AT", "OK");
 8000ff6:	494d      	ldr	r1, [pc, #308]	; (800112c <Initialize_Modem+0x140>)
 8000ff8:	484d      	ldr	r0, [pc, #308]	; (8001130 <Initialize_Modem+0x144>)
 8000ffa:	f000 feaf 	bl	8001d5c <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8000ffe:	bf00      	nop
 8001000:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001004:	b29b      	uxth	r3, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fed2 	bl	8001db0 <check_at_command_response>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d0f6      	beq.n	8001000 <Initialize_Modem+0x14>
    if(at_state != AT_RESPONSE_RECEIVED)
 8001012:	4b45      	ldr	r3, [pc, #276]	; (8001128 <Initialize_Modem+0x13c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d177      	bne.n	800110a <Initialize_Modem+0x11e>
        return;
    }



    send_at_command("AT+CPIN?", "+CPIN: READY");
 800101a:	4946      	ldr	r1, [pc, #280]	; (8001134 <Initialize_Modem+0x148>)
 800101c:	4846      	ldr	r0, [pc, #280]	; (8001138 <Initialize_Modem+0x14c>)
 800101e:	f000 fe9d 	bl	8001d5c <send_at_command>
    while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8001022:	bf00      	nop
 8001024:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001028:	b29b      	uxth	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fec0 	bl	8001db0 <check_at_command_response>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d0f6      	beq.n	8001024 <Initialize_Modem+0x38>
    if(at_state != AT_RESPONSE_RECEIVED)
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <Initialize_Modem+0x13c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d167      	bne.n	800110e <Initialize_Modem+0x122>
        return;
    }



     send_at_command("AT+CREG?", "+CREG: 0,1");
 800103e:	493f      	ldr	r1, [pc, #252]	; (800113c <Initialize_Modem+0x150>)
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <Initialize_Modem+0x154>)
 8001042:	f000 fe8b 	bl	8001d5c <send_at_command>
     while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 8001046:	bf00      	nop
 8001048:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800104c:	b29b      	uxth	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 feae 	bl	8001db0 <check_at_command_response>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d0f6      	beq.n	8001048 <Initialize_Modem+0x5c>
     if(at_state != AT_RESPONSE_RECEIVED)
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <Initialize_Modem+0x13c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d157      	bne.n	8001112 <Initialize_Modem+0x126>
         return;
     }



      send_at_command("AT+QICSGP=1,\"airtelgprs.com\"", "OK");
 8001062:	4932      	ldr	r1, [pc, #200]	; (800112c <Initialize_Modem+0x140>)
 8001064:	4837      	ldr	r0, [pc, #220]	; (8001144 <Initialize_Modem+0x158>)
 8001066:	f000 fe79 	bl	8001d5c <send_at_command>
      while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 800106a:	bf00      	nop
 800106c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001070:	b29b      	uxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fe9c 	bl	8001db0 <check_at_command_response>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d0f6      	beq.n	800106c <Initialize_Modem+0x80>
      if(at_state != AT_RESPONSE_RECEIVED)
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <Initialize_Modem+0x13c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d147      	bne.n	8001116 <Initialize_Modem+0x12a>
          return;
      }



       send_at_command("AT+QICSGP?", "+QICSGP: 1");
 8001086:	4930      	ldr	r1, [pc, #192]	; (8001148 <Initialize_Modem+0x15c>)
 8001088:	4830      	ldr	r0, [pc, #192]	; (800114c <Initialize_Modem+0x160>)
 800108a:	f000 fe67 	bl	8001d5c <send_at_command>
       while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 800108e:	bf00      	nop
 8001090:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001094:	b29b      	uxth	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fe8a 	bl	8001db0 <check_at_command_response>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d0f6      	beq.n	8001090 <Initialize_Modem+0xa4>
       if(at_state != AT_RESPONSE_RECEIVED)
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <Initialize_Modem+0x13c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d137      	bne.n	800111a <Initialize_Modem+0x12e>
           return;
       }



        send_at_command("AT+QIREGAPP", "OK");
 80010aa:	4920      	ldr	r1, [pc, #128]	; (800112c <Initialize_Modem+0x140>)
 80010ac:	4828      	ldr	r0, [pc, #160]	; (8001150 <Initialize_Modem+0x164>)
 80010ae:	f000 fe55 	bl	8001d5c <send_at_command>
        while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 80010b2:	bf00      	nop
 80010b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fe78 	bl	8001db0 <check_at_command_response>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d0f6      	beq.n	80010b4 <Initialize_Modem+0xc8>
        if(at_state != AT_RESPONSE_RECEIVED)
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <Initialize_Modem+0x13c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d127      	bne.n	800111e <Initialize_Modem+0x132>
            return;
        }
//        HAL_Delay(DELAY);


         send_at_command("AT+QIACT", "OK");
 80010ce:	4917      	ldr	r1, [pc, #92]	; (800112c <Initialize_Modem+0x140>)
 80010d0:	4820      	ldr	r0, [pc, #128]	; (8001154 <Initialize_Modem+0x168>)
 80010d2:	f000 fe43 	bl	8001d5c <send_at_command>
         while (check_at_command_response(SHORT_DELAY) == AT_WAITING_RESPONSE);
 80010d6:	bf00      	nop
 80010d8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe66 	bl	8001db0 <check_at_command_response>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d0f6      	beq.n	80010d8 <Initialize_Modem+0xec>
         if(at_state != AT_RESPONSE_RECEIVED)
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <Initialize_Modem+0x13c>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d117      	bne.n	8001122 <Initialize_Modem+0x136>
         {
             return;
         }
         HAL_Delay(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f6:	f002 fd2f 	bl	8003b58 <HAL_Delay>


//         HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QILOCIP\r\n", strlen("AT+QILOCIP\r\n"), 1000);
         UART_Send("AT+QILOCIP\r\n");
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <Initialize_Modem+0x16c>)
 80010fc:	f000 fe94 	bl	8001e28 <UART_Send>
         Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f7ff ff4a 	bl	8000f9c <Delay>
 8001108:	e00c      	b.n	8001124 <Initialize_Modem+0x138>
        return;
 800110a:	bf00      	nop
 800110c:	e00a      	b.n	8001124 <Initialize_Modem+0x138>
        return;
 800110e:	bf00      	nop
 8001110:	e008      	b.n	8001124 <Initialize_Modem+0x138>
         return;
 8001112:	bf00      	nop
 8001114:	e006      	b.n	8001124 <Initialize_Modem+0x138>
          return;
 8001116:	bf00      	nop
 8001118:	e004      	b.n	8001124 <Initialize_Modem+0x138>
           return;
 800111a:	bf00      	nop
 800111c:	e002      	b.n	8001124 <Initialize_Modem+0x138>
            return;
 800111e:	bf00      	nop
 8001120:	e000      	b.n	8001124 <Initialize_Modem+0x138>
             return;
 8001122:	bf00      	nop




}
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000123c 	.word	0x2000123c
 800112c:	0800a8e0 	.word	0x0800a8e0
 8001130:	0800a8e4 	.word	0x0800a8e4
 8001134:	0800a8e8 	.word	0x0800a8e8
 8001138:	0800a8f8 	.word	0x0800a8f8
 800113c:	0800a904 	.word	0x0800a904
 8001140:	0800a910 	.word	0x0800a910
 8001144:	0800a91c 	.word	0x0800a91c
 8001148:	0800a93c 	.word	0x0800a93c
 800114c:	0800a948 	.word	0x0800a948
 8001150:	0800a954 	.word	0x0800a954
 8001154:	0800a960 	.word	0x0800a960
 8001158:	0800a96c 	.word	0x0800a96c

0800115c <SSL_Config>:


void SSL_Config(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
EiBeaDGu2GFxU3xMC4Pco1+qoetbHse8Sw5FF4dgWLoPvax2694XQG2nPk4kZ1go\n\
FSFcEE0C9x2LB5Busc2qSAEaxuZOmQ4NJZX40Sh/23Bx5j/uR4nP9eY=\n\
-----END RSA PRIVATE KEY-----\r\n";
#endif

	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTCFG=\"SSL\",0,1,2\r\n", strlen("AT+QMTCFG=\"SSL\",0,1,2\r\n"), 1000);
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	2217      	movs	r2, #23
 8001166:	492b      	ldr	r1, [pc, #172]	; (8001214 <SSL_Config+0xb8>)
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <SSL_Config+0xbc>)
 800116a:	f004 f9fd 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800116e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001172:	f002 fcf1 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSECWRITE=\"user_key.pem\",1679,100\r\n", strlen("AT+QSECWRITE=\"user_key.pem\",1679,100\r\n"), 1000);
	HAL_Delay(300);
	HAL_UART_Transmit(&huart2, (uint8_t *)Usr_KEY, strlen(Usr_KEY), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
#endif
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n", strlen("AT+QSSLCFG=\"cacert\",2,\"cacert.pem\"\r\n"), 1000);
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	4927      	ldr	r1, [pc, #156]	; (800121c <SSL_Config+0xc0>)
 800117e:	4826      	ldr	r0, [pc, #152]	; (8001218 <SSL_Config+0xbc>)
 8001180:	f004 f9f2 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001188:	f002 fce6 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n", strlen("AT+QSSLCFG=\"clientcert\",2,\"client.pem\"\r\n"), 1000);
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	2228      	movs	r2, #40	; 0x28
 8001192:	4923      	ldr	r1, [pc, #140]	; (8001220 <SSL_Config+0xc4>)
 8001194:	4820      	ldr	r0, [pc, #128]	; (8001218 <SSL_Config+0xbc>)
 8001196:	f004 f9e7 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 800119a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119e:	f002 fcdb 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n", strlen("AT+QSSLCFG=\"clientkey\",2,\"user_key.pem\"\r\n"), 1000);
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	2229      	movs	r2, #41	; 0x29
 80011a8:	491e      	ldr	r1, [pc, #120]	; (8001224 <SSL_Config+0xc8>)
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <SSL_Config+0xbc>)
 80011ac:	f004 f9dc 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b4:	f002 fcd0 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"seclevel\",2,2\r\n", strlen("AT+QSSLCFG=\"seclevel\",2,2\r\n"), 1000);
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	221b      	movs	r2, #27
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <SSL_Config+0xcc>)
 80011c0:	4815      	ldr	r0, [pc, #84]	; (8001218 <SSL_Config+0xbc>)
 80011c2:	f004 f9d1 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ca:	f002 fcc5 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"sslversion\",2,4\r\n", strlen("AT+QSSLCFG=\"sslversion\",2,4\r\n"), 1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	221d      	movs	r2, #29
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <SSL_Config+0xd0>)
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <SSL_Config+0xbc>)
 80011d8:	f004 f9c6 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f002 fcba 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n", strlen("AT+QSSLCFG=\"ciphersuite\",2,\"0xFFFF\"\r\n"), 1000);
 80011e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e8:	2225      	movs	r2, #37	; 0x25
 80011ea:	4911      	ldr	r1, [pc, #68]	; (8001230 <SSL_Config+0xd4>)
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <SSL_Config+0xbc>)
 80011ee:	f004 f9bb 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f6:	f002 fcaf 	bl	8003b58 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QSSLCFG=\"ignorertctime\",1\r\n", strlen("AT+QSSLCFG=\"ignorertctime\",1\r\n"), 1000);
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	221e      	movs	r2, #30
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <SSL_Config+0xd8>)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <SSL_Config+0xbc>)
 8001204:	f004 f9b0 	bl	8005568 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8001208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120c:	f002 fca4 	bl	8003b58 <HAL_Delay>

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800a97c 	.word	0x0800a97c
 8001218:	200012fc 	.word	0x200012fc
 800121c:	0800a994 	.word	0x0800a994
 8001220:	0800a9bc 	.word	0x0800a9bc
 8001224:	0800a9e8 	.word	0x0800a9e8
 8001228:	0800aa14 	.word	0x0800aa14
 800122c:	0800aa30 	.word	0x0800aa30
 8001230:	0800aa50 	.word	0x0800aa50
 8001234:	0800aa78 	.word	0x0800aa78

08001238 <AWS_MQTT>:

const char* mqtt_broker = "a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com";
const char* client_id = "M66";
const char* topic = "$aws/things/M66/shadow";
void AWS_MQTT(void){
 8001238:	b580      	push	{r7, lr}
 800123a:	b0e0      	sub	sp, #384	; 0x180
 800123c:	af00      	add	r7, sp, #0


//	HAL_UART_Transmit(&huart2, (uint8_t *)"AT+QMTOPEN=0,\"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com\",8883\r\n",74 , 1000);
	char mqtt_open_command[128];
	sprintf(mqtt_open_command, "AT+QMTOPEN=0,\"%s\",8883", mqtt_broker);
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <AWS_MQTT+0xcc>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001246:	4930      	ldr	r1, [pc, #192]	; (8001308 <AWS_MQTT+0xd0>)
 8001248:	4618      	mov	r0, r3
 800124a:	f006 fddb 	bl	8007e04 <siprintf>
	send_at_command(mqtt_open_command,"+QMTOPEN: 0,0");
 800124e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001252:	492e      	ldr	r1, [pc, #184]	; (800130c <AWS_MQTT+0xd4>)
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fd81 	bl	8001d5c <send_at_command>
    while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 800125a:	bf00      	nop
 800125c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fda4 	bl	8001db0 <check_at_command_response>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d0f6      	beq.n	800125c <AWS_MQTT+0x24>
    if(at_state != AT_RESPONSE_RECEIVED)
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <AWS_MQTT+0xd8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d13c      	bne.n	80012f0 <AWS_MQTT+0xb8>
//	UART_Send(mqtt_open_command);
//	HAL_Delay(LONG_DELAY);
//	send_at_command("AT+QMTOPEN=0,\"%s\",1883\r\n", mqtt_broker);
//	send_at_command("AT+QMTCONN=0,\"%s\"\r\n", client_id);
	char mqtt_conn_command[128];
	sprintf(mqtt_conn_command, "AT+QMTCONN=0,\"%s\"", client_id);
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <AWS_MQTT+0xdc>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800127e:	4926      	ldr	r1, [pc, #152]	; (8001318 <AWS_MQTT+0xe0>)
 8001280:	4618      	mov	r0, r3
 8001282:	f006 fdbf 	bl	8007e04 <siprintf>
	send_at_command(mqtt_conn_command, "+QMTCONN: 0,0,0");
 8001286:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800128a:	4924      	ldr	r1, [pc, #144]	; (800131c <AWS_MQTT+0xe4>)
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd65 	bl	8001d5c <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 8001292:	bf00      	nop
 8001294:	f242 7310 	movw	r3, #10000	; 0x2710
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fd88 	bl	8001db0 <check_at_command_response>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d0f6      	beq.n	8001294 <AWS_MQTT+0x5c>
    if(at_state != AT_RESPONSE_RECEIVED)
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <AWS_MQTT+0xd8>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d122      	bne.n	80012f4 <AWS_MQTT+0xbc>
    {
        return;
    }
//    UART_Send(mqtt_conn_command);

    at_state = AT_IDLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <AWS_MQTT+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
	char mqtt_sub_command[128];
	sprintf(mqtt_sub_command, "AT+QMTSUB=0,1,\"%s\",1", topic);
 80012b4:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <AWS_MQTT+0xe8>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	463b      	mov	r3, r7
 80012ba:	491a      	ldr	r1, [pc, #104]	; (8001324 <AWS_MQTT+0xec>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f006 fda1 	bl	8007e04 <siprintf>
	send_at_command(mqtt_sub_command, "+QMTSUB: 0,1,0,1");
 80012c2:	463b      	mov	r3, r7
 80012c4:	4918      	ldr	r1, [pc, #96]	; (8001328 <AWS_MQTT+0xf0>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fd48 	bl	8001d5c <send_at_command>
    while (check_at_command_response(DELAY) == AT_WAITING_RESPONSE);
 80012cc:	bf00      	nop
 80012ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fd6b 	bl	8001db0 <check_at_command_response>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d0f6      	beq.n	80012ce <AWS_MQTT+0x96>
    if(at_state != AT_RESPONSE_RECEIVED)
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <AWS_MQTT+0xd8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d107      	bne.n	80012f8 <AWS_MQTT+0xc0>
    {
        return;
    }
//	UART_Send(mqtt_sub_command);
    current_mode = MODE_MQTT;
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <AWS_MQTT+0xf4>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e004      	b.n	80012fa <AWS_MQTT+0xc2>
        return;
 80012f0:	bf00      	nop
 80012f2:	e002      	b.n	80012fa <AWS_MQTT+0xc2>
        return;
 80012f4:	bf00      	nop
 80012f6:	e000      	b.n	80012fa <AWS_MQTT+0xc2>
        return;
 80012f8:	bf00      	nop
}
 80012fa:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000000c 	.word	0x2000000c
 8001308:	0800aae4 	.word	0x0800aae4
 800130c:	0800aafc 	.word	0x0800aafc
 8001310:	2000123c 	.word	0x2000123c
 8001314:	20000010 	.word	0x20000010
 8001318:	0800ab0c 	.word	0x0800ab0c
 800131c:	0800ab20 	.word	0x0800ab20
 8001320:	20000014 	.word	0x20000014
 8001324:	0800ab30 	.word	0x0800ab30
 8001328:	0800ab48 	.word	0x0800ab48
 800132c:	2000062c 	.word	0x2000062c

08001330 <receive_data>:


//AT+QMTOPEN=0,"a2lrvn2efyqxdn-ats.iot.us-east-1.amazonaws.com",8883

uint32_t receive_data(uint8_t* buffer, uint32_t buffer_size){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
    uint32_t last_data_time = HAL_GetTick(); // Initialize with current tick
 800133e:	f002 fbff 	bl	8003b40 <HAL_GetTick>
 8001342:	60b8      	str	r0, [r7, #8]

    DISABLE_UART_INTERRUPT();

    while (bytes_read < buffer_size) {
 8001344:	e036      	b.n	80013b4 <receive_data+0x84>
        if ((HAL_GetTick() - last_data_time) > UART_TIMEOUT) {
 8001346:	f002 fbfb 	bl	8003b40 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f247 5230 	movw	r2, #30000	; 0x7530
 8001354:	4293      	cmp	r3, r2
 8001356:	d832      	bhi.n	80013be <receive_data+0x8e>
            break;  // Timeout if no new data for a defined duration
        }

        // Only process data if there's new data in the UART buffer
        while (uart_buffer.read_index != uart_buffer.write_index && bytes_read < buffer_size) {
 8001358:	e020      	b.n	800139c <receive_data+0x6c>
            buffer[bytes_read] = uart_buffer.data[uart_buffer.read_index];
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <receive_data+0x9c>)
 800135c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001360:	4619      	mov	r1, r3
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <receive_data+0x9c>)
 800136a:	5c52      	ldrb	r2, [r2, r1]
 800136c:	701a      	strb	r2, [r3, #0]
            bytes_read++;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
            last_data_time = HAL_GetTick();  // Update the last data time when new data is received
 8001374:	f002 fbe4 	bl	8003b40 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]

            uart_buffer.read_index++;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <receive_data+0x9c>)
 800137c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001380:	3301      	adds	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <receive_data+0x9c>)
 8001386:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            if (uart_buffer.read_index >= UART_BUFFER_SIZE) {
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <receive_data+0x9c>)
 800138c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d903      	bls.n	800139c <receive_data+0x6c>
                uart_buffer.read_index = 0;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <receive_data+0x9c>)
 8001396:	2200      	movs	r2, #0
 8001398:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        while (uart_buffer.read_index != uart_buffer.write_index && bytes_read < buffer_size) {
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <receive_data+0x9c>)
 800139e:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <receive_data+0x9c>)
 80013a4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d003      	beq.n	80013b4 <receive_data+0x84>
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d3d2      	bcc.n	800135a <receive_data+0x2a>
    while (bytes_read < buffer_size) {
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3c4      	bcc.n	8001346 <receive_data+0x16>
 80013bc:	e000      	b.n	80013c0 <receive_data+0x90>
            break;  // Timeout if no new data for a defined duration
 80013be:	bf00      	nop
        }
    }

    ENABLE_UART_INTERRUPT();

    return bytes_read;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000528 	.word	0x20000528

080013d0 <handle_default_byte>:

    // Return the actual number of bytes received
//    return bytes_received;
//}

void handle_default_byte(uint8_t byte) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	receive_buffer[buffer_idx++] = byte;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <handle_default_byte+0x64>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	4914      	ldr	r1, [pc, #80]	; (8001434 <handle_default_byte+0x64>)
 80013e2:	600a      	str	r2, [r1, #0]
 80013e4:	4914      	ldr	r1, [pc, #80]	; (8001438 <handle_default_byte+0x68>)
 80013e6:	79fa      	ldrb	r2, [r7, #7]
 80013e8:	54ca      	strb	r2, [r1, r3]

	    // Null-terminate the buffer for string functions
	    if (buffer_idx < BUFFER_MAX_SIZE) {
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <handle_default_byte+0x64>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d804      	bhi.n	80013fc <handle_default_byte+0x2c>
	        receive_buffer[buffer_idx] = '\0';
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <handle_default_byte+0x64>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <handle_default_byte+0x68>)
 80013f8:	2100      	movs	r1, #0
 80013fa:	54d1      	strb	r1, [r2, r3]
	    }

	    // Check for end of HTTP response or other markers
	    if (strstr((char*)receive_buffer, "\r\nOK\r\n") != NULL) {
 80013fc:	490f      	ldr	r1, [pc, #60]	; (800143c <handle_default_byte+0x6c>)
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <handle_default_byte+0x68>)
 8001400:	f006 fdc7 	bl	8007f92 <strstr>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <handle_default_byte+0x40>
	        firmware_download_complete = true;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <handle_default_byte+0x70>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
	    }

	    // If the buffer is almost full or some other condition arises, you can process or reset
	    if (buffer_idx >= BUFFER_MAX_SIZE - 1) {
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <handle_default_byte+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2bfe      	cmp	r3, #254	; 0xfe
 8001416:	d908      	bls.n	800142a <handle_default_byte+0x5a>
	        // TODO: Handle overflow or reset buffer_idx
	        buffer_idx = 0; // Reset as an example
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <handle_default_byte+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	        memset(receive_buffer, 0, BUFFER_MAX_SIZE); // Clear buffer (if needed)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	2100      	movs	r1, #0
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <handle_default_byte+0x68>)
 8001426:	f006 fd7a 	bl	8007f1e <memset>
	    }
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000051c 	.word	0x2000051c
 8001438:	20000e38 	.word	0x20000e38
 800143c:	0800ab5c 	.word	0x0800ab5c
 8001440:	20000520 	.word	0x20000520

08001444 <handle_mqtt_byte>:

void handle_mqtt_byte(uint8_t byte) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
    // Append the received byte to the MQTT buffer
    if (mqtt_buffer_idx < MQTT_BUFFER_SIZE - 1) {
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <handle_mqtt_byte+0x5c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001456:	d810      	bhi.n	800147a <handle_mqtt_byte+0x36>
        mqtt_buffer[mqtt_buffer_idx++] = byte;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <handle_mqtt_byte+0x5c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4910      	ldr	r1, [pc, #64]	; (80014a0 <handle_mqtt_byte+0x5c>)
 8001460:	600a      	str	r2, [r1, #0]
 8001462:	4910      	ldr	r1, [pc, #64]	; (80014a4 <handle_mqtt_byte+0x60>)
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	54ca      	strb	r2, [r1, r3]
        mqtt_buffer[mqtt_buffer_idx] = '\0'; // Null-terminate for string functions
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <handle_mqtt_byte+0x5c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <handle_mqtt_byte+0x60>)
 800146e:	2100      	movs	r1, #0
 8001470:	54d1      	strb	r1, [r2, r3]
        mqtt_buffer_idx = 0;
        return;
    }

    // Check if we have a complete MQTT message, e.g., by looking for }
    if (byte == '}') {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b7d      	cmp	r3, #125	; 0x7d
 8001476:	d10f      	bne.n	8001498 <handle_mqtt_byte+0x54>
 8001478:	e003      	b.n	8001482 <handle_mqtt_byte+0x3e>
        mqtt_buffer_idx = 0;
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <handle_mqtt_byte+0x5c>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
        return;
 8001480:	e00a      	b.n	8001498 <handle_mqtt_byte+0x54>
        // Null-terminate the message for safety
        mqtt_buffer[mqtt_buffer_idx] = '\0';
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <handle_mqtt_byte+0x5c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <handle_mqtt_byte+0x60>)
 8001488:	2100      	movs	r1, #0
 800148a:	54d1      	strb	r1, [r2, r3]

        // Handle the complete MQTT message
        handle_mqtt_message((const char*)mqtt_buffer);
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <handle_mqtt_byte+0x60>)
 800148e:	f000 f80b 	bl	80014a8 <handle_mqtt_message>

        // Reset the MQTT buffer for the next message
        mqtt_buffer_idx = 0;
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <handle_mqtt_byte+0x5c>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
    }
}
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000514 	.word	0x20000514
 80014a4:	20000314 	.word	0x20000314

080014a8 <handle_mqtt_message>:

void handle_mqtt_message(const char* message) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    const char* json_start = strchr(message, '{'); // Find the first '{' character
 80014b0:	217b      	movs	r1, #123	; 0x7b
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 fd3b 	bl	8007f2e <strchr>
 80014b8:	61f8      	str	r0, [r7, #28]
    cJSON* root = cJSON_Parse(json_start);
 80014ba:	69f8      	ldr	r0, [r7, #28]
 80014bc:	f001 fa2e 	bl	800291c <cJSON_Parse>
 80014c0:	61b8      	str	r0, [r7, #24]

    if (root != NULL) {
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d02d      	beq.n	8001524 <handle_mqtt_message+0x7c>
        cJSON* messageTypeObj = cJSON_GetObjectItem(root, "message_type");
 80014c8:	4918      	ldr	r1, [pc, #96]	; (800152c <handle_mqtt_message+0x84>)
 80014ca:	69b8      	ldr	r0, [r7, #24]
 80014cc:	f001 fd2b 	bl	8002f26 <cJSON_GetObjectItem>
 80014d0:	6178      	str	r0, [r7, #20]
        cJSON* firmwareUrlObj = cJSON_GetObjectItem(root, "firmware_url");
 80014d2:	4917      	ldr	r1, [pc, #92]	; (8001530 <handle_mqtt_message+0x88>)
 80014d4:	69b8      	ldr	r0, [r7, #24]
 80014d6:	f001 fd26 	bl	8002f26 <cJSON_GetObjectItem>
 80014da:	6138      	str	r0, [r7, #16]

        if (messageTypeObj != NULL && firmwareUrlObj != NULL) {
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01d      	beq.n	800151e <handle_mqtt_message+0x76>
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01a      	beq.n	800151e <handle_mqtt_message+0x76>
            const char* message_type = messageTypeObj->valuestring;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	60fb      	str	r3, [r7, #12]
            if (strcmp(message_type, "update_available") == 0) {
 80014ee:	4911      	ldr	r1, [pc, #68]	; (8001534 <handle_mqtt_message+0x8c>)
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7fe fe6d 	bl	80001d0 <strcmp>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d110      	bne.n	800151e <handle_mqtt_message+0x76>
                // Copy firmware URL to global variable
                strncpy(firmware_url, firmwareUrlObj->valuestring, MAX_URL_LENGTH - 1);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	22ff      	movs	r2, #255	; 0xff
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <handle_mqtt_message+0x90>)
 8001506:	f006 fd31 	bl	8007f6c <strncpy>
                firmware_url[MAX_URL_LENGTH - 1] = '\0'; // Null-terminate to ensure it's a valid string
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <handle_mqtt_message+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

                // Set the state to begin downloading
                current_mode = MODE_DEFAULT;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <handle_mqtt_message+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
                fwUpdateState = DOWNLOAD_PENDING;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <handle_mqtt_message+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
            }
        }
        cJSON_Delete(root);
 800151e:	69b8      	ldr	r0, [r7, #24]
 8001520:	f000 fd22 	bl	8001f68 <cJSON_Delete>
    }
}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0800ab64 	.word	0x0800ab64
 8001530:	0800ab74 	.word	0x0800ab74
 8001534:	0800ab84 	.word	0x0800ab84
 8001538:	20000214 	.word	0x20000214
 800153c:	2000062c 	.word	0x2000062c
 8001540:	20000634 	.word	0x20000634

08001544 <download_firmware>:
//        return false;
//    }
//}


bool download_firmware(const char* firmware_url) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b0a4      	sub	sp, #144	; 0x90
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	bool result = false; // Default return value
 800154c:	2300      	movs	r3, #0
 800154e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    switch (current_state) {
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <download_firmware+0x158>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b05      	cmp	r3, #5
 8001558:	f200 8092 	bhi.w	8001680 <download_firmware+0x13c>
 800155c:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <download_firmware+0x20>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	0800157d 	.word	0x0800157d
 8001568:	080015cf 	.word	0x080015cf
 800156c:	08001613 	.word	0x08001613
 8001570:	08001655 	.word	0x08001655
 8001574:	0800166d 	.word	0x0800166d
 8001578:	08001681 	.word	0x08001681
        case INIT_HTTP:
            send_at_command("AT+QSSLCFG=\"https\",1", "OK");
 800157c:	4948      	ldr	r1, [pc, #288]	; (80016a0 <download_firmware+0x15c>)
 800157e:	4849      	ldr	r0, [pc, #292]	; (80016a4 <download_firmware+0x160>)
 8001580:	f000 fbec 	bl	8001d5c <send_at_command>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 8001584:	f242 7310 	movw	r3, #10000	; 0x2710
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fc10 	bl	8001db0 <check_at_command_response>
 8001590:	4603      	mov	r3, r0
 8001592:	2b02      	cmp	r3, #2
 8001594:	d10e      	bne.n	80015b4 <download_firmware+0x70>
            	send_at_command("AT+QSSLCFG=\"httpsctxi\",1", "OK");
 8001596:	4942      	ldr	r1, [pc, #264]	; (80016a0 <download_firmware+0x15c>)
 8001598:	4843      	ldr	r0, [pc, #268]	; (80016a8 <download_firmware+0x164>)
 800159a:	f000 fbdf 	bl	8001d5c <send_at_command>
//            	if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
            		Delay(1000);
 800159e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a2:	f7ff fcfb 	bl	8000f9c <Delay>
            		current_state = SET_HTTP_URL;
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <download_firmware+0x158>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
            		firmware_download_busy = false;
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <download_firmware+0x168>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
//            	}
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
//                firmware_download_busy = false;
            }
            break;
 80015b2:	e067      	b.n	8001684 <download_firmware+0x140>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 80015b4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fbf8 	bl	8001db0 <check_at_command_response>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d15e      	bne.n	8001684 <download_firmware+0x140>
                current_state = DOWNLOAD_ERROR;
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <download_firmware+0x158>)
 80015c8:	2205      	movs	r2, #5
 80015ca:	701a      	strb	r2, [r3, #0]
            break;
 80015cc:	e05a      	b.n	8001684 <download_firmware+0x140>

        case SET_HTTP_URL:
            char http_get_command[128];
            sprintf(http_get_command, "AT+QHTTPURL=%d,60", strlen(firmware_url));
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fe5e 	bl	8000290 <strlen>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4935      	ldr	r1, [pc, #212]	; (80016b0 <download_firmware+0x16c>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f006 fc11 	bl	8007e04 <siprintf>
            send_at_command(http_get_command, "CONNECT");
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4933      	ldr	r1, [pc, #204]	; (80016b4 <download_firmware+0x170>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fbb7 	bl	8001d5c <send_at_command>
            Delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f2:	f7ff fcd3 	bl	8000f9c <Delay>
//            send_at_command(firmware_url, "OK");
            UART_Send(firmware_url);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fc16 	bl	8001e28 <UART_Send>
            Delay(1000);
 80015fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001600:	f7ff fccc 	bl	8000f9c <Delay>
            firmware_download_busy = false;
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <download_firmware+0x168>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
            current_state = INITIATE_HTTP_GET;
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <download_firmware+0x158>)
 800160c:	2202      	movs	r2, #2
 800160e:	701a      	strb	r2, [r3, #0]
//                firmware_download_busy = false;
//            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
//                current_state = DOWNLOAD_ERROR;
////                firmware_download_busy = false;
//            }
            break;
 8001610:	e03d      	b.n	800168e <download_firmware+0x14a>
//        	Delay(1000);
//            send_at_command(firmware_url, "OK");
//        	UART_Send("AT+QHTTPGET=60");
//        	Delay(1000);
//        	current_state = RECEIVE_HTTP_RESPONSE;
            send_at_command("AT+QHTTPGET=60", "OK");
 8001612:	4923      	ldr	r1, [pc, #140]	; (80016a0 <download_firmware+0x15c>)
 8001614:	4828      	ldr	r0, [pc, #160]	; (80016b8 <download_firmware+0x174>)
 8001616:	f000 fba1 	bl	8001d5c <send_at_command>
            if (check_at_command_response(DELAY) == AT_RESPONSE_RECEIVED) {
 800161a:	f242 7310 	movw	r3, #10000	; 0x2710
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fbc5 	bl	8001db0 <check_at_command_response>
 8001626:	4603      	mov	r3, r0
 8001628:	2b02      	cmp	r3, #2
 800162a:	d106      	bne.n	800163a <download_firmware+0xf6>
                current_state = RECEIVE_HTTP_RESPONSE;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <download_firmware+0x158>)
 800162e:	2203      	movs	r2, #3
 8001630:	701a      	strb	r2, [r3, #0]
                firmware_download_busy = false;
 8001632:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <download_firmware+0x168>)
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
                current_state = DOWNLOAD_ERROR;
//                firmware_download_busy = false;
            }
            break;
 8001638:	e026      	b.n	8001688 <download_firmware+0x144>
            } else if (check_at_command_response(LONG_DELAY) == AT_RESPONSE_TIMEOUT) {
 800163a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fbb5 	bl	8001db0 <check_at_command_response>
 8001646:	4603      	mov	r3, r0
 8001648:	2b03      	cmp	r3, #3
 800164a:	d11d      	bne.n	8001688 <download_firmware+0x144>
                current_state = DOWNLOAD_ERROR;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <download_firmware+0x158>)
 800164e:	2205      	movs	r2, #5
 8001650:	701a      	strb	r2, [r3, #0]
            break;
 8001652:	e019      	b.n	8001688 <download_firmware+0x144>


        case RECEIVE_HTTP_RESPONSE:
        	if (firmware_update_process()){
 8001654:	f000 f92c 	bl	80018b0 <firmware_update_process>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <download_firmware+0x148>
               	firmware_download_busy = false;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <download_firmware+0x168>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
                current_state = DOWNLOAD_COMPLETE;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <download_firmware+0x158>)
 8001666:	2204      	movs	r2, #4
 8001668:	701a      	strb	r2, [r3, #0]
        	}
            break;
 800166a:	e00f      	b.n	800168c <download_firmware+0x148>


        case DOWNLOAD_COMPLETE:
            current_state = INIT_HTTP;  // Reset state for next time
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <download_firmware+0x158>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
            firmware_download_busy = false;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <download_firmware+0x168>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
            result = true;
 8001678:	2301      	movs	r3, #1
 800167a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            break;
 800167e:	e006      	b.n	800168e <download_firmware+0x14a>
//            current_state = INIT_HTTP;  // Reset for next time
//            firmware_download_busy = false;
            break;

        default:
            break;
 8001680:	bf00      	nop
 8001682:	e004      	b.n	800168e <download_firmware+0x14a>
            break;
 8001684:	bf00      	nop
 8001686:	e002      	b.n	800168e <download_firmware+0x14a>
            break;
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <download_firmware+0x14a>
            break;
 800168c:	bf00      	nop
    }
    return result;
 800168e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8001692:	4618      	mov	r0, r3
 8001694:	3790      	adds	r7, #144	; 0x90
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000635 	.word	0x20000635
 80016a0:	0800a8e0 	.word	0x0800a8e0
 80016a4:	0800ab98 	.word	0x0800ab98
 80016a8:	0800abb0 	.word	0x0800abb0
 80016ac:	20000521 	.word	0x20000521
 80016b0:	0800abcc 	.word	0x0800abcc
 80016b4:	0800abe0 	.word	0x0800abe0
 80016b8:	0800abe8 	.word	0x0800abe8

080016bc <verify_firmware_update>:

// Verify firmware update with CRC
bool verify_firmware_update() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
    // Calculate the starting address of the firmware in flash
    uint8_t* firmware_data = (uint8_t*) START_FLASH_ADDRESS;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <verify_firmware_update+0x58>)
 80016c4:	60fb      	str	r3, [r7, #12]

    // Calculate the length of the firmware data by excluding the CRC
    uint32_t firmware_length = current_flash_address - START_FLASH_ADDRESS - sizeof(uint32_t);
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <verify_firmware_update+0x5c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <verify_firmware_update+0x60>)
 80016cc:	4413      	add	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]

    // Ensure that the firmware length is valid
    if (!is_firmware_size_valid(firmware_length)) {
 80016d0:	68b8      	ldr	r0, [r7, #8]
 80016d2:	f000 f825 	bl	8001720 <is_firmware_size_valid>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <verify_firmware_update+0x2a>
        return false;  // Firmware data length is invalid
 80016e2:	2300      	movs	r3, #0
 80016e4:	e012      	b.n	800170c <verify_firmware_update+0x50>
    }

    // Address where the appended CRC is stored
    uint32_t* stored_crc_ptr = (uint32_t*)(START_FLASH_ADDRESS + firmware_length);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016ec:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 80016f0:	607b      	str	r3, [r7, #4]

    // Calculate CRC for the stored firmware data
    uint32_t calculated_crc = calculate_crc32(firmware_data, firmware_length);
 80016f2:	68b9      	ldr	r1, [r7, #8]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f823 	bl	8001740 <calculate_crc32>
 80016fa:	6038      	str	r0, [r7, #0]

    // Compare the stored and calculated CRC values
    return (*stored_crc_ptr == calculated_crc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	bf0c      	ite	eq
 8001706:	2301      	moveq	r3, #1
 8001708:	2300      	movne	r3, #0
 800170a:	b2db      	uxtb	r3, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	080c0000 	.word	0x080c0000
 8001718:	20000008 	.word	0x20000008
 800171c:	f7f3fffc 	.word	0xf7f3fffc

08001720 <is_firmware_size_valid>:



bool is_firmware_size_valid(uint32_t firmware_length) {
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    return firmware_length > sizeof(uint32_t);  // Ensure firmware_length is more than just the CRC size.
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf8c      	ite	hi
 800172e:	2301      	movhi	r3, #1
 8001730:	2300      	movls	r3, #0
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <calculate_crc32>:
    return *crc_ptr;
}


// Function to calculate CRC32 for a buffer
uint32_t calculate_crc32(uint8_t *data, uint32_t size) {
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < size; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e021      	b.n	800179a <calculate_crc32+0x5a>
        crc ^= data[i];
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	4053      	eors	r3, r2
 8001764:	617b      	str	r3, [r7, #20]

        for (uint32_t j = 0; j < 8; j++) {
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e010      	b.n	800178e <calculate_crc32+0x4e>
            if (crc & 0x00000001) {
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <calculate_crc32+0x42>
                crc = (crc >> 1) ^ CRC_POLYNOMIAL;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	085a      	lsrs	r2, r3, #1
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <calculate_crc32+0x74>)
 800177c:	4053      	eors	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e002      	b.n	8001788 <calculate_crc32+0x48>
            } else {
                crc = crc >> 1;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	617b      	str	r3, [r7, #20]
        for (uint32_t j = 0; j < 8; j++) {
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3301      	adds	r3, #1
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b07      	cmp	r3, #7
 8001792:	d9eb      	bls.n	800176c <calculate_crc32+0x2c>
    for (uint32_t i = 0; i < size; i++) {
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	3301      	adds	r3, #1
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3d9      	bcc.n	8001756 <calculate_crc32+0x16>
            }
        }
    }

    return ~crc;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	43db      	mvns	r3, r3
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	edb88320 	.word	0xedb88320

080017b8 <firmware_update_handler>:
    return true;
}


void firmware_update_handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    switch (fwUpdateState)
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <firmware_update_handler+0xcc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d855      	bhi.n	8001872 <firmware_update_handler+0xba>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <firmware_update_handler+0x14>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	08001811 	.word	0x08001811
 80017d4:	0800183b 	.word	0x0800183b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	08001873 	.word	0x08001873
 80017e0:	0800185f 	.word	0x0800185f
    {
        case DOWNLOAD_PENDING:
            if (!firmware_download_busy) {
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <firmware_update_handler+0xd0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	f083 0301 	eor.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d041      	beq.n	8001876 <firmware_update_handler+0xbe>
                firmware_download_busy = true; // Set the flag as we're initiating the download
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <firmware_update_handler+0xd0>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
                if (download_firmware(firmware_url)) {
 80017f8:	4824      	ldr	r0, [pc, #144]	; (800188c <firmware_update_handler+0xd4>)
 80017fa:	f7ff fea3 	bl	8001544 <download_firmware>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d038      	beq.n	8001876 <firmware_update_handler+0xbe>
                    fwUpdateState = VERIFY_PENDING;
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <firmware_update_handler+0xcc>)
 8001806:	2202      	movs	r2, #2
 8001808:	701a      	strb	r2, [r3, #0]
                    resetAction();
 800180a:	f000 f845 	bl	8001898 <resetAction>
                } else {
//                    firmware_download_busy = false; // Reset the flag if download fails

                }
            }
            break;
 800180e:	e032      	b.n	8001876 <firmware_update_handler+0xbe>

        case VERIFY_PENDING:
            if (!firmware_verify_busy) {
 8001810:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <firmware_update_handler+0xd8>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f083 0301 	eor.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d02d      	beq.n	800187a <firmware_update_handler+0xc2>
                firmware_verify_busy = true;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <firmware_update_handler+0xd8>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
                if (verify_firmware_update()) {
 8001824:	f7ff ff4a 	bl	80016bc <verify_firmware_update>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d025      	beq.n	800187a <firmware_update_handler+0xc2>
                    fwUpdateState = WRITE_PENDING;
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <firmware_update_handler+0xcc>)
 8001830:	2203      	movs	r2, #3
 8001832:	701a      	strb	r2, [r3, #0]
                    resetAction();
 8001834:	f000 f830 	bl	8001898 <resetAction>
                } else {
//                    firmware_verify_busy = false; // Reset the flag if verification fails
                }
            }
            break;
 8001838:	e01f      	b.n	800187a <firmware_update_handler+0xc2>

        case WRITE_PENDING:
            if (!firmware_write_busy) {
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <firmware_update_handler+0xdc>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f083 0301 	eor.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01a      	beq.n	800187e <firmware_update_handler+0xc6>
                firmware_write_busy = true;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <firmware_update_handler+0xdc>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
//                if (write_firmware_to_flash(firmware_buffer, firmware_size)) {
                    fwUpdateState = RESET_PENDING;
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <firmware_update_handler+0xcc>)
 8001850:	2204      	movs	r2, #4
 8001852:	701a      	strb	r2, [r3, #0]
                    resetAction();
 8001854:	f000 f820 	bl	8001898 <resetAction>
//                } else {
////                    firmware_write_busy = false; // Reset the flag if writing fails
//                }
            }
            break;
 8001858:	e011      	b.n	800187e <firmware_update_handler+0xc6>

        case RESET_PENDING:
            NVIC_SystemReset();
 800185a:	f7ff fb89 	bl	8000f70 <__NVIC_SystemReset>
            break;

        case ERROR_STATE:
            // Handle error, etc.
            // Reset all flags as we're in an error state
            firmware_download_busy = false;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <firmware_update_handler+0xd0>)
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
            firmware_verify_busy = false;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <firmware_update_handler+0xd8>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
            firmware_write_busy = false;
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <firmware_update_handler+0xdc>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
            break;
 8001870:	e006      	b.n	8001880 <firmware_update_handler+0xc8>

        default:
            /* IDLE, ACTION_IN_PROGRESS, or other states. No operation. */
            break;
 8001872:	bf00      	nop
 8001874:	e004      	b.n	8001880 <firmware_update_handler+0xc8>
            break;
 8001876:	bf00      	nop
 8001878:	e002      	b.n	8001880 <firmware_update_handler+0xc8>
            break;
 800187a:	bf00      	nop
 800187c:	e000      	b.n	8001880 <firmware_update_handler+0xc8>
            break;
 800187e:	bf00      	nop
    }
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000634 	.word	0x20000634
 8001888:	20000521 	.word	0x20000521
 800188c:	20000214 	.word	0x20000214
 8001890:	20000522 	.word	0x20000522
 8001894:	20000523 	.word	0x20000523

08001898 <resetAction>:

void resetAction() {
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
    retry_count = 0;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <resetAction+0x14>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	20000630 	.word	0x20000630

080018b0 <firmware_update_process>:

bool firmware_update_process() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
    // Attempt to erase flash
    if (HAL_OK != erase_flash(START_FLASH_ADDRESS, END_FLASH_ADDRESS)) {
 80018b6:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 80018ba:	486d      	ldr	r0, [pc, #436]	; (8001a70 <firmware_update_process+0x1c0>)
 80018bc:	f000 f910 	bl	8001ae0 <erase_flash>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <firmware_update_process+0x1a>
        // Handle error: Erasing flash failed
        return false;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e0ce      	b.n	8001a68 <firmware_update_process+0x1b8>
    }

    bool end_marker_found = false;
 80018ca:	2300      	movs	r3, #0
 80018cc:	77fb      	strb	r3, [r7, #31]
    bool first_marker_skipped = false;
 80018ce:	2300      	movs	r3, #0
 80018d0:	77bb      	strb	r3, [r7, #30]
    do {
        if (!read_request) {
 80018d2:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <firmware_update_process+0x1c4>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d07a      	beq.n	80019d6 <firmware_update_process+0x126>
            send_at_command("AT+QHTTPREAD=30\r\n", "CONNECT");
 80018e0:	4965      	ldr	r1, [pc, #404]	; (8001a78 <firmware_update_process+0x1c8>)
 80018e2:	4866      	ldr	r0, [pc, #408]	; (8001a7c <firmware_update_process+0x1cc>)
 80018e4:	f000 fa3a 	bl	8001d5c <send_at_command>
            while (check_at_command_response(LONG_DELAY) == AT_WAITING_RESPONSE);
 80018e8:	bf00      	nop
 80018ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fa5d 	bl	8001db0 <check_at_command_response>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d0f6      	beq.n	80018ea <firmware_update_process+0x3a>

            if (at_state != AT_RESPONSE_RECEIVED) {
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <firmware_update_process+0x1d0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d004      	beq.n	800190e <firmware_update_process+0x5e>
                current_state = DOWNLOAD_ERROR;
 8001904:	4b5f      	ldr	r3, [pc, #380]	; (8001a84 <firmware_update_process+0x1d4>)
 8001906:	2205      	movs	r2, #5
 8001908:	701a      	strb	r2, [r3, #0]
                return false;
 800190a:	2300      	movs	r3, #0
 800190c:	e0ac      	b.n	8001a68 <firmware_update_process+0x1b8>
            }
            clear_uart_buffer();
 800190e:	f000 f9ed 	bl	8001cec <clear_uart_buffer>
            read_request = true;
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <firmware_update_process+0x1c4>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
        }

        // Read data until active buffer is full or END_MARKER is detected
        while (buffer_index < BUFFER_SIZE) {
 8001918:	e05d      	b.n	80019d6 <firmware_update_process+0x126>
            uint32_t bytes_received = receive_data(&active_buffer[buffer_index], BUFFER_SIZE - buffer_index);
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <firmware_update_process+0x1d8>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b5b      	ldr	r3, [pc, #364]	; (8001a8c <firmware_update_process+0x1dc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	441a      	add	r2, r3
 8001924:	4b59      	ldr	r3, [pc, #356]	; (8001a8c <firmware_update_process+0x1dc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f7ff fcfe 	bl	8001330 <receive_data>
 8001934:	61b8      	str	r0, [r7, #24]

            if (bytes_received == 0) {
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d052      	beq.n	80019e2 <firmware_update_process+0x132>
                break;
            }

            buffer_index += bytes_received;
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <firmware_update_process+0x1dc>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	4413      	add	r3, r2
 8001944:	4a51      	ldr	r2, [pc, #324]	; (8001a8c <firmware_update_process+0x1dc>)
 8001946:	6013      	str	r3, [r2, #0]


            if (find_end_marker(active_buffer, buffer_index)) {
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <firmware_update_process+0x1d8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <firmware_update_process+0x1dc>)
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f8a0 	bl	8001a98 <find_end_marker>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03b      	beq.n	80019d6 <firmware_update_process+0x126>
//                    buffer_index = residue;
//
//                    break;
//
//                }
                end_marker_found = true;
 800195e:	2301      	movs	r3, #1
 8001960:	77fb      	strb	r3, [r7, #31]
                buffer_index = (uint32_t)(find_end_marker_position(active_buffer, buffer_index) - active_buffer) + strlen(END_MARKER);
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <firmware_update_process+0x1d8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <firmware_update_process+0x1dc>)
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f9cf 	bl	8001d10 <find_end_marker_position>
 8001972:	4602      	mov	r2, r0
 8001974:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <firmware_update_process+0x1d8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	3306      	adds	r3, #6
 800197c:	4a43      	ldr	r2, [pc, #268]	; (8001a8c <firmware_update_process+0x1dc>)
 800197e:	6013      	str	r3, [r2, #0]
                // Switch buffers immediately
                uint8_t *temp = active_buffer;
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <firmware_update_process+0x1d8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	617b      	str	r3, [r7, #20]
                active_buffer = write_buffer;
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <firmware_update_process+0x1e0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <firmware_update_process+0x1d8>)
 800198c:	6013      	str	r3, [r2, #0]
                write_buffer = temp;
 800198e:	4a40      	ldr	r2, [pc, #256]	; (8001a90 <firmware_update_process+0x1e0>)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	6013      	str	r3, [r2, #0]

                // Write data to flash
                uint32_t residue = buffer_index % 4;
 8001994:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <firmware_update_process+0x1dc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	613b      	str	r3, [r7, #16]
                uint32_t write_size = buffer_index - residue;
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <firmware_update_process+0x1dc>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
                if (HAL_OK != write_to_flash(current_flash_address, write_buffer, write_size)) {
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <firmware_update_process+0x1e4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <firmware_update_process+0x1e0>)
 80019ae:	6811      	ldr	r1, [r2, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f8e2 	bl	8001b7c <write_to_flash>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <firmware_update_process+0x112>
                    return false;
 80019be:	2300      	movs	r3, #0
 80019c0:	e052      	b.n	8001a68 <firmware_update_process+0x1b8>
                }
                current_flash_address += write_size;
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <firmware_update_process+0x1e4>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <firmware_update_process+0x1e4>)
 80019cc:	6013      	str	r3, [r2, #0]
                buffer_index = residue;
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <firmware_update_process+0x1dc>)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	6013      	str	r3, [r2, #0]

                break;
 80019d4:	e006      	b.n	80019e4 <firmware_update_process+0x134>
        while (buffer_index < BUFFER_SIZE) {
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <firmware_update_process+0x1dc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d39c      	bcc.n	800191a <firmware_update_process+0x6a>
 80019e0:	e000      	b.n	80019e4 <firmware_update_process+0x134>
                break;
 80019e2:	bf00      	nop
            }

        }

        // Switch buffers
        uint8_t *temp = active_buffer;
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <firmware_update_process+0x1d8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60bb      	str	r3, [r7, #8]
        active_buffer = write_buffer;
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <firmware_update_process+0x1e0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a26      	ldr	r2, [pc, #152]	; (8001a88 <firmware_update_process+0x1d8>)
 80019f0:	6013      	str	r3, [r2, #0]
        write_buffer = temp;
 80019f2:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <firmware_update_process+0x1e0>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6013      	str	r3, [r2, #0]

        // At this point, the write_buffer is full (or has END_MARKER), so write it to flash
        uint32_t residue = buffer_index % 4;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <firmware_update_process+0x1dc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	607b      	str	r3, [r7, #4]
        uint32_t write_size = buffer_index - residue;
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <firmware_update_process+0x1dc>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	603b      	str	r3, [r7, #0]
        if (HAL_OK != write_to_flash(current_flash_address, write_buffer, write_size)) {
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <firmware_update_process+0x1e4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <firmware_update_process+0x1e0>)
 8001a12:	6811      	ldr	r1, [r2, #0]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f8b0 	bl	8001b7c <write_to_flash>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <firmware_update_process+0x176>
            return false;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e020      	b.n	8001a68 <firmware_update_process+0x1b8>
        }
        current_flash_address += write_size;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <firmware_update_process+0x1e4>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <firmware_update_process+0x1e4>)
 8001a30:	6013      	str	r3, [r2, #0]

        if (residue) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <firmware_update_process+0x19c>
            memmove(write_buffer, &write_buffer[write_size], residue);
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <firmware_update_process+0x1e0>)
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <firmware_update_process+0x1e0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4619      	mov	r1, r3
 8001a48:	f006 fa4f 	bl	8007eea <memmove>
        }

        buffer_index = residue;
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <firmware_update_process+0x1dc>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]

    } while (!end_marker_found);
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f af39 	bne.w	80018d2 <firmware_update_process+0x22>
    current_state = DOWNLOAD_COMPLETE;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <firmware_update_process+0x1d4>)
 8001a62:	2204      	movs	r2, #4
 8001a64:	701a      	strb	r2, [r3, #0]
    return true; // Firmware update was successful
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	080c0000 	.word	0x080c0000
 8001a74:	20000524 	.word	0x20000524
 8001a78:	0800abe0 	.word	0x0800abe0
 8001a7c:	0800abf8 	.word	0x0800abf8
 8001a80:	2000123c 	.word	0x2000123c
 8001a84:	20000635 	.word	0x20000635
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20001238 	.word	0x20001238
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000008 	.word	0x20000008

08001a98 <find_end_marker>:
	bool find_end_marker(uint8_t *buffer, uint32_t size) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
		for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e00f      	b.n	8001ac8 <find_end_marker+0x30>
			if (memcmp(&buffer[i], END_MARKER, strlen(END_MARKER)) == 0) {
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	2206      	movs	r2, #6
 8001ab0:	490a      	ldr	r1, [pc, #40]	; (8001adc <find_end_marker+0x44>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 fa09 	bl	8007eca <memcmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <find_end_marker+0x2a>
				return true;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e008      	b.n	8001ad4 <find_end_marker+0x3c>
		for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3b05      	subs	r3, #5
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3ea      	bcc.n	8001aa8 <find_end_marker+0x10>
			}
		}
		return false;
 8001ad2:	2300      	movs	r3, #0
	}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	0800ab5c 	.word	0x0800ab5c

08001ae0 <erase_flash>:

HAL_StatusTypeDef erase_flash(uint32_t start_address, uint32_t end_address) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef erase;
    uint32_t error;

    // Unlock the flash
   status = HAL_FLASH_Unlock();
 8001aea:	f002 fa51 	bl	8003f90 <HAL_FLASH_Unlock>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   if (status != HAL_OK) {
 8001af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <erase_flash+0x28>
       // Handle flash unlock error
   	firmware_write_busy = false;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <erase_flash+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
       return status;
 8001b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b06:	e033      	b.n	8001b70 <erase_flash+0x90>
   }

    // Define the erase parameters
    erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Adjust according to your needs
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
    erase.Sector = get_flash_sector(start_address); // You need to implement the get_flash_sector function
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f87b 	bl	8001c0c <get_flash_sector>
 8001b16:	4603      	mov	r3, r0
 8001b18:	61bb      	str	r3, [r7, #24]
    erase.NbSectors = get_flash_sector(end_address) - erase.Sector + 1;
 8001b1a:	6838      	ldr	r0, [r7, #0]
 8001b1c:	f000 f876 	bl	8001c0c <get_flash_sector>
 8001b20:	4602      	mov	r2, r0
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&erase, &error);
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fb8d 	bl	8004254 <HAL_FLASHEx_Erase>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status != HAL_OK) {
 8001b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <erase_flash+0x74>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <erase_flash+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
        return status;
 8001b4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b52:	e00d      	b.n	8001b70 <erase_flash+0x90>
    }

    // Lock the flash
    HAL_FLASH_Lock();
 8001b54:	f002 fa3e 	bl	8003fd4 <HAL_FLASH_Lock>
    if (status != HAL_OK) {
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <erase_flash+0x8c>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <erase_flash+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
        return status;
 8001b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b6a:	e001      	b.n	8001b70 <erase_flash+0x90>
    }

    return status;
 8001b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3728      	adds	r7, #40	; 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000523 	.word	0x20000523

08001b7c <write_to_flash>:

HAL_StatusTypeDef write_to_flash(uint32_t address, uint8_t *data, uint32_t length) {
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    // Unlock the flash
    status = HAL_FLASH_Unlock();
 8001b88:	f002 fa02 	bl	8003f90 <HAL_FLASH_Unlock>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) {
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <write_to_flash+0x24>
        // Handle flash unlock error
    	firmware_write_busy = false;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <write_to_flash+0x8c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
        return status;
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	e02f      	b.n	8001c00 <write_to_flash+0x84>
    }

    for (uint32_t i = 0; i < length; i += 4) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e01b      	b.n	8001bde <write_to_flash+0x62>
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, *(uint32_t*)(data + i));
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	18d1      	adds	r1, r2, r3
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	461c      	mov	r4, r3
 8001bb8:	4615      	mov	r5, r2
 8001bba:	4622      	mov	r2, r4
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f002 f992 	bl	8003ee8 <HAL_FLASH_Program>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK) {
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <write_to_flash+0x5c>
        	firmware_write_busy = false;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <write_to_flash+0x8c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
            return status;
 8001bd4:	7cfb      	ldrb	r3, [r7, #19]
 8001bd6:	e013      	b.n	8001c00 <write_to_flash+0x84>
    for (uint32_t i = 0; i < length; i += 4) {
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3df      	bcc.n	8001ba6 <write_to_flash+0x2a>
        }
    }

    // Lock the flash
    status = HAL_FLASH_Lock();
 8001be6:	f002 f9f5 	bl	8003fd4 <HAL_FLASH_Lock>
 8001bea:	4603      	mov	r3, r0
 8001bec:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) {
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d004      	beq.n	8001bfe <write_to_flash+0x82>
    	firmware_write_busy = false;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <write_to_flash+0x8c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    	return status;
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	e000      	b.n	8001c00 <write_to_flash+0x84>
    }

    return status;
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdb0      	pop	{r4, r5, r7, pc}
 8001c08:	20000523 	.word	0x20000523

08001c0c <get_flash_sector>:

uint32_t get_flash_sector(uint32_t address) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    uint32_t sector;

    // STM32F407VG flash sectors
    if (address <= 0x08004000) sector = FLASH_SECTOR_0;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <get_flash_sector+0xb4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d802      	bhi.n	8001c22 <get_flash_sector+0x16>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e047      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08008000) sector = FLASH_SECTOR_1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <get_flash_sector+0xb8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d802      	bhi.n	8001c30 <get_flash_sector+0x24>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e040      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x0800C000) sector = FLASH_SECTOR_2;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <get_flash_sector+0xbc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d802      	bhi.n	8001c3e <get_flash_sector+0x32>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e039      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08010000) sector = FLASH_SECTOR_3;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <get_flash_sector+0xc0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d802      	bhi.n	8001c4c <get_flash_sector+0x40>
 8001c46:	2303      	movs	r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e032      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08020000) sector = FLASH_SECTOR_4;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <get_flash_sector+0xc4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d802      	bhi.n	8001c5a <get_flash_sector+0x4e>
 8001c54:	2304      	movs	r3, #4
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	e02b      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08040000) sector = FLASH_SECTOR_5;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <get_flash_sector+0xc8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d802      	bhi.n	8001c68 <get_flash_sector+0x5c>
 8001c62:	2305      	movs	r3, #5
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e024      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08060000) sector = FLASH_SECTOR_6;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <get_flash_sector+0xcc>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d802      	bhi.n	8001c76 <get_flash_sector+0x6a>
 8001c70:	2306      	movs	r3, #6
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e01d      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x08080000) sector = FLASH_SECTOR_7;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <get_flash_sector+0xd0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d802      	bhi.n	8001c84 <get_flash_sector+0x78>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e016      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x080A0000) sector = FLASH_SECTOR_8;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <get_flash_sector+0xd4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d802      	bhi.n	8001c92 <get_flash_sector+0x86>
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e00f      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x080C0000) sector = FLASH_SECTOR_9;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <get_flash_sector+0xd8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d802      	bhi.n	8001ca0 <get_flash_sector+0x94>
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	e008      	b.n	8001cb2 <get_flash_sector+0xa6>
    else if (address <= 0x080E0000) sector = FLASH_SECTOR_10;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a11      	ldr	r2, [pc, #68]	; (8001ce8 <get_flash_sector+0xdc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d802      	bhi.n	8001cae <get_flash_sector+0xa2>
 8001ca8:	230a      	movs	r3, #10
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e001      	b.n	8001cb2 <get_flash_sector+0xa6>
    else sector = FLASH_SECTOR_11;  // covers up to 0x08100000
 8001cae:	230b      	movs	r3, #11
 8001cb0:	60fb      	str	r3, [r7, #12]

    return sector;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	08004000 	.word	0x08004000
 8001cc4:	08008000 	.word	0x08008000
 8001cc8:	0800c000 	.word	0x0800c000
 8001ccc:	08010000 	.word	0x08010000
 8001cd0:	08020000 	.word	0x08020000
 8001cd4:	08040000 	.word	0x08040000
 8001cd8:	08060000 	.word	0x08060000
 8001cdc:	08080000 	.word	0x08080000
 8001ce0:	080a0000 	.word	0x080a0000
 8001ce4:	080c0000 	.word	0x080c0000
 8001ce8:	080e0000 	.word	0x080e0000

08001cec <clear_uart_buffer>:

void clear_uart_buffer() {
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
    uart_buffer.write_index = 0;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <clear_uart_buffer+0x20>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    uart_buffer.read_index = 0;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <clear_uart_buffer+0x20>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000528 	.word	0x20000528

08001d10 <find_end_marker_position>:

uint8_t* find_end_marker_position(uint8_t *buffer, uint32_t size) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e011      	b.n	8001d44 <find_end_marker_position+0x34>
        if (memcmp(&buffer[i], END_MARKER, strlen(END_MARKER)) == 0) {
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	2206      	movs	r2, #6
 8001d28:	490b      	ldr	r1, [pc, #44]	; (8001d58 <find_end_marker_position+0x48>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 f8cd 	bl	8007eca <memcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <find_end_marker_position+0x2e>
            return &buffer[i]; // Return pointer to the starting position of END_MARKER
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	e008      	b.n	8001d50 <find_end_marker_position+0x40>
    for (uint32_t i = 0; i < size - strlen(END_MARKER) + 1; i++) {
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	3b05      	subs	r3, #5
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d3e8      	bcc.n	8001d20 <find_end_marker_position+0x10>
        }
    }
    return NULL; // END_MARKER not found in the buffer
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	0800ab5c 	.word	0x0800ab5c

08001d5c <send_at_command>:
// Assuming extern definitions



// Function to send AT command to Quectel M66
void send_at_command(const char* command, const char* expected_resp) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	if (at_state == AT_IDLE || AT_RESPONSE_RECEIVED) {
	        // Clear UART buffer
	        memset(uart_buffer.data, 0, UART_BUFFER_SIZE);
 8001d66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <send_at_command+0x40>)
 8001d6e:	f006 f8d6 	bl	8007f1e <memset>

	        // Send the AT command
	        UART_Send(command);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f858 	bl	8001e28 <UART_Send>
	        UART_Send("\r\n");
 8001d78:	4809      	ldr	r0, [pc, #36]	; (8001da0 <send_at_command+0x44>)
 8001d7a:	f000 f855 	bl	8001e28 <UART_Send>

	        // Set the state to waiting for a response
	        at_state = AT_WAITING_RESPONSE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <send_at_command+0x48>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
	        expected_at_response = expected_resp;
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <send_at_command+0x4c>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6013      	str	r3, [r2, #0]

	        // Capture the current time (however you measure time in your system)
	        at_command_start_time = get_system_time();  // This function needs to be implemented based on your system
 8001d8a:	f000 f863 	bl	8001e54 <get_system_time>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a06      	ldr	r2, [pc, #24]	; (8001dac <send_at_command+0x50>)
 8001d92:	6013      	str	r3, [r2, #0]
	    }

}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000528 	.word	0x20000528
 8001da0:	0800ac0c 	.word	0x0800ac0c
 8001da4:	2000123c 	.word	0x2000123c
 8001da8:	20001240 	.word	0x20001240
 8001dac:	20001244 	.word	0x20001244

08001db0 <check_at_command_response>:
at_command_state_t check_at_command_response(uint16_t timeout) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
    if (at_state == AT_WAITING_RESPONSE) {
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <check_at_command_response+0x64>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d121      	bne.n	8001e06 <check_at_command_response+0x56>
        if (data_received_flag) {
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <check_at_command_response+0x68>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00f      	beq.n	8001dec <check_at_command_response+0x3c>
            if (strstr((char*)receive_buffer, expected_at_response) != NULL) {
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <check_at_command_response+0x6c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4813      	ldr	r0, [pc, #76]	; (8001e20 <check_at_command_response+0x70>)
 8001dd4:	f006 f8dd 	bl	8007f92 <strstr>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <check_at_command_response+0x34>
                at_state = AT_RESPONSE_RECEIVED;
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <check_at_command_response+0x64>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]

            }

            // Reset the flag after processing
            data_received_flag = false;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <check_at_command_response+0x68>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e00c      	b.n	8001e06 <check_at_command_response+0x56>
        } else {
            uint32_t current_time = get_system_time();
 8001dec:	f000 f832 	bl	8001e54 <get_system_time>
 8001df0:	60f8      	str	r0, [r7, #12]
            if ((current_time - at_command_start_time) >= timeout) {
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <check_at_command_response+0x74>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d302      	bcc.n	8001e06 <check_at_command_response+0x56>
                at_state = AT_RESPONSE_TIMEOUT;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <check_at_command_response+0x64>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return at_state;
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <check_at_command_response+0x64>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000123c 	.word	0x2000123c
 8001e18:	20000518 	.word	0x20000518
 8001e1c:	20001240 	.word	0x20001240
 8001e20:	20000e38 	.word	0x20000e38
 8001e24:	20001244 	.word	0x20001244

08001e28 <UART_Send>:

void UART_Send(const char* str) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);  // Transmitting via UART2 in this example
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7fe fa2d 	bl	8000290 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <UART_Send+0x28>)
 8001e42:	f003 fb91 	bl	8005568 <HAL_UART_Transmit>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200012fc 	.word	0x200012fc

08001e54 <get_system_time>:

uint32_t get_system_time(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // Returns the system tick count since start-up
 8001e58:	f001 fe72 	bl	8003b40 <HAL_GetTick>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <case_insensitive_strcmp+0x16>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e056      	b.n	8001f2c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10d      	bne.n	8001ea2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e050      	b.n	8001f2c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e04a      	b.n	8001f2c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <case_insensitive_strcmp+0xd4>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d103      	bne.n	8001ec2 <case_insensitive_strcmp+0x5e>
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	f103 0220 	add.w	r2, r3, #32
 8001ec0:	e000      	b.n	8001ec4 <case_insensitive_strcmp+0x60>
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	73bb      	strb	r3, [r7, #14]
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	491a      	ldr	r1, [pc, #104]	; (8001f38 <case_insensitive_strcmp+0xd4>)
 8001ed0:	440b      	add	r3, r1
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d102      	bne.n	8001ee2 <case_insensitive_strcmp+0x7e>
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	3320      	adds	r3, #32
 8001ee0:	e000      	b.n	8001ee4 <case_insensitive_strcmp+0x80>
 8001ee2:	7bbb      	ldrb	r3, [r7, #14]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d0d0      	beq.n	8001e8a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	737b      	strb	r3, [r7, #13]
 8001eee:	7b7b      	ldrb	r3, [r7, #13]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <case_insensitive_strcmp+0xd4>)
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d103      	bne.n	8001f08 <case_insensitive_strcmp+0xa4>
 8001f00:	7b7b      	ldrb	r3, [r7, #13]
 8001f02:	f103 0220 	add.w	r2, r3, #32
 8001f06:	e000      	b.n	8001f0a <case_insensitive_strcmp+0xa6>
 8001f08:	7b7a      	ldrb	r2, [r7, #13]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	733b      	strb	r3, [r7, #12]
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4908      	ldr	r1, [pc, #32]	; (8001f38 <case_insensitive_strcmp+0xd4>)
 8001f16:	440b      	add	r3, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <case_insensitive_strcmp+0xc4>
 8001f22:	7b3b      	ldrb	r3, [r7, #12]
 8001f24:	3320      	adds	r3, #32
 8001f26:	e000      	b.n	8001f2a <case_insensitive_strcmp+0xc6>
 8001f28:	7b3b      	ldrb	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	0800acc8 	.word	0x0800acc8

08001f3c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2028      	movs	r0, #40	; 0x28
 8001f4a:	4798      	blx	r3
 8001f4c:	60f8      	str	r0, [r7, #12]
    if (node)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001f54:	2228      	movs	r2, #40	; 0x28
 8001f56:	2100      	movs	r1, #0
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f005 ffe0 	bl	8007f1e <memset>
    }

    return node;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001f74:	e037      	b.n	8001fe6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <cJSON_Delete+0x32>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ffe7 	bl	8001f68 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <cJSON_Delete+0x52>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <cJSON_Delete+0x90>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6912      	ldr	r2, [r2, #16]
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <cJSON_Delete+0x72>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <cJSON_Delete+0x90>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a12      	ldr	r2, [r2, #32]
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <cJSON_Delete+0x90>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        item = next;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1c4      	bne.n	8001f76 <cJSON_Delete+0xe>
    }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000018 	.word	0x20000018

08001ffc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002000:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	0000      	movs	r0, r0
	...

08002010 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b098      	sub	sp, #96	; 0x60
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    double number = 0;
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800202a:	f7ff ffe7 	bl	8001ffc <get_decimal_point>
 800202e:	4603      	mov	r3, r0
 8002030:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <parse_number+0x36>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <parse_number+0x3a>
    {
        return false;
 8002046:	2300      	movs	r3, #0
 8002048:	e0a0      	b.n	800218c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800204a:	2300      	movs	r3, #0
 800204c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800204e:	e03d      	b.n	80020cc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6899      	ldr	r1, [r3, #8]
 8002058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205a:	440b      	add	r3, r1
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b45      	cmp	r3, #69	; 0x45
 8002062:	dc17      	bgt.n	8002094 <parse_number+0x84>
 8002064:	2b2b      	cmp	r3, #43	; 0x2b
 8002066:	db40      	blt.n	80020ea <parse_number+0xda>
 8002068:	3b2b      	subs	r3, #43	; 0x2b
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <parse_number+0x190>)
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <parse_number+0x88>
 8002080:	f002 0308 	and.w	r3, r2, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d111      	bne.n	80020b6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8002092:	e02a      	b.n	80020ea <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8002094:	2b65      	cmp	r3, #101	; 0x65
 8002096:	d128      	bne.n	80020ea <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a2:	440b      	add	r3, r1
 80020a4:	4413      	add	r3, r2
 80020a6:	7819      	ldrb	r1, [r3, #0]
 80020a8:	f107 0208 	add.w	r2, r7, #8
 80020ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ae:	4413      	add	r3, r2
 80020b0:	460a      	mov	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
                break;
 80020b4:	e007      	b.n	80020c6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80020b6:	f107 0208 	add.w	r2, r7, #8
 80020ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020bc:	4413      	add	r3, r2
 80020be:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80020c2:	701a      	strb	r2, [r3, #0]
                break;
 80020c4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	3301      	adds	r3, #1
 80020ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ce:	2b3e      	cmp	r3, #62	; 0x3e
 80020d0:	d80d      	bhi.n	80020ee <parse_number+0xde>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <parse_number+0xde>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020de:	441a      	add	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d3b3      	bcc.n	8002050 <parse_number+0x40>
        }
    }
loop_end:
 80020e8:	e001      	b.n	80020ee <parse_number+0xde>
                goto loop_end;
 80020ea:	bf00      	nop
 80020ec:	e000      	b.n	80020f0 <parse_number+0xe0>
loop_end:
 80020ee:	bf00      	nop
    number_c_string[i] = '\0';
 80020f0:	f107 0208 	add.w	r2, r7, #8
 80020f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f6:	4413      	add	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80020fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f005 f95a 	bl	80073c0 <strtod>
 800210c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8002110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	429a      	cmp	r2, r3
 8002118:	d101      	bne.n	800211e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800211a:	2300      	movs	r3, #0
 800211c:	e036      	b.n	800218c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002124:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8002128:	a31b      	add	r3, pc, #108	; (adr r3, 8002198 <parse_number+0x188>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002132:	f7fe fcf7 	bl	8000b24 <__aeabi_dcmpge>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002142:	615a      	str	r2, [r3, #20]
 8002144:	e015      	b.n	8002172 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <parse_number+0x194>)
 800214c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002150:	f7fe fcde 	bl	8000b10 <__aeabi_dcmple>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d004      	beq.n	8002164 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002160:	615a      	str	r2, [r3, #20]
 8002162:	e006      	b.n	8002172 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8002164:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002168:	f7fe fd06 	bl	8000b78 <__aeabi_d2iz>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800217e:	f107 0208 	add.w	r2, r7, #8
 8002182:	1a8a      	subs	r2, r1, r2
 8002184:	441a      	add	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	609a      	str	r2, [r3, #8]
    return true;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3760      	adds	r7, #96	; 0x60
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f3af 8000 	nop.w
 8002198:	ffc00000 	.word	0xffc00000
 800219c:	41dfffff 	.word	0x41dfffff
 80021a0:	04007fe5 	.word	0x04007fe5
 80021a4:	c1e00000 	.word	0xc1e00000

080021a8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	e04c      	b.n	8002258 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b2f      	cmp	r3, #47	; 0x2f
 80021c8:	d90f      	bls.n	80021ea <parse_hex4+0x42>
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b39      	cmp	r3, #57	; 0x39
 80021d4:	d809      	bhi.n	80021ea <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	3b30      	subs	r3, #48	; 0x30
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e02d      	b.n	8002246 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d90f      	bls.n	8002216 <parse_hex4+0x6e>
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b46      	cmp	r3, #70	; 0x46
 8002200:	d809      	bhi.n	8002216 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	3b37      	subs	r3, #55	; 0x37
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e017      	b.n	8002246 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b60      	cmp	r3, #96	; 0x60
 8002220:	d90f      	bls.n	8002242 <parse_hex4+0x9a>
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b66      	cmp	r3, #102	; 0x66
 800222c:	d809      	bhi.n	8002242 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	3b57      	subs	r3, #87	; 0x57
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8002242:	2300      	movs	r3, #0
 8002244:	e00c      	b.n	8002260 <parse_hex4+0xb8>
        }

        if (i < 3)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d802      	bhi.n	8002252 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d9af      	bls.n	80021be <parse_hex4+0x16>
        }
    }

    return h;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	f340 80b7 	ble.w	8002416 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	3302      	adds	r3, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff7b 	bl	80021a8 <parse_hex4>
 80022b2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80022ba:	d304      	bcc.n	80022c6 <utf16_literal_to_utf8+0x5a>
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80022c2:	f0c0 80aa 	bcc.w	800241a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80022cc:	d337      	bcc.n	800233e <utf16_literal_to_utf8+0xd2>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80022d4:	d233      	bcs.n	800233e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3306      	adds	r3, #6
 80022da:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80022e0:	230c      	movs	r3, #12
 80022e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	f340 8096 	ble.w	800241e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b5c      	cmp	r3, #92	; 0x5c
 80022f8:	f040 8093 	bne.w	8002422 <utf16_literal_to_utf8+0x1b6>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b75      	cmp	r3, #117	; 0x75
 8002304:	f040 808d 	bne.w	8002422 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3302      	adds	r3, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff4b 	bl	80021a8 <parse_hex4>
 8002312:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800231a:	f0c0 8084 	bcc.w	8002426 <utf16_literal_to_utf8+0x1ba>
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002324:	d27f      	bcs.n	8002426 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	029a      	lsls	r2, r3, #10
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <utf16_literal_to_utf8+0x1cc>)
 800232c:	4013      	ands	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002334:	4313      	orrs	r3, r2
 8002336:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800233c:	e004      	b.n	8002348 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800233e:	2306      	movs	r3, #6
 8002340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	2b7f      	cmp	r3, #127	; 0x7f
 800234c:	d803      	bhi.n	8002356 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002354:	e01f      	b.n	8002396 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235c:	d206      	bcs.n	800236c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800235e:	2302      	movs	r3, #2
 8002360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	f887 3020 	strb.w	r3, [r7, #32]
 800236a:	e014      	b.n	8002396 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002372:	d206      	bcs.n	8002382 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002374:	2303      	movs	r3, #3
 8002376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800237a:	23e0      	movs	r3, #224	; 0xe0
 800237c:	f887 3020 	strb.w	r3, [r7, #32]
 8002380:	e009      	b.n	8002396 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002388:	d24f      	bcs.n	800242a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800238a:	2304      	movs	r3, #4
 800238c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002390:	23f0      	movs	r3, #240	; 0xf0
 8002392:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800239a:	3b01      	subs	r3, #1
 800239c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023a0:	e015      	b.n	80023ce <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6819      	ldr	r1, [r3, #0]
 80023b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023b4:	440b      	add	r3, r1
 80023b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80023c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023c8:	3b01      	subs	r3, #1
 80023ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80023ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e5      	bne.n	80023a2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80023d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d909      	bls.n	80023f2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	b2d9      	uxtb	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e007      	b.n	8002402 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800240a:	441a      	add	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8002410:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002414:	e00b      	b.n	800242e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8002416:	bf00      	nop
 8002418:	e008      	b.n	800242c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800241a:	bf00      	nop
 800241c:	e006      	b.n	800242c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800241e:	bf00      	nop
 8002420:	e004      	b.n	800242c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800242a:	bf00      	nop

fail:
    return 0;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3728      	adds	r7, #40	; 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	000ffc00 	.word	0x000ffc00

0800243c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	3301      	adds	r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b22      	cmp	r3, #34	; 0x22
 8002478:	f040 8103 	bne.w	8002682 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002484:	e017      	b.n	80024b6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b5c      	cmp	r3, #92	; 0x5c
 800248c:	d110      	bne.n	80024b0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	461a      	mov	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	f080 80f1 	bcs.w	8002686 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	3301      	adds	r3, #1
 80024ae:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	3301      	adds	r3, #1
 80024b4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a3a      	ldr	r2, [r7, #32]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d203      	bcs.n	80024d0 <parse_string+0x94>
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b22      	cmp	r3, #34	; 0x22
 80024ce:	d1da      	bne.n	8002486 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a3a      	ldr	r2, [r7, #32]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	f080 80d3 	bcs.w	800268a <parse_string+0x24e>
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b22      	cmp	r3, #34	; 0x22
 80024ea:	f040 80ce 	bne.w	800268a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4413      	add	r3, r2
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	3201      	adds	r2, #1
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
 8002510:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80ba 	beq.w	800268e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800251e:	e094      	b.n	800264a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b5c      	cmp	r3, #92	; 0x5c
 8002526:	d008      	beq.n	800253a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8002528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252a:	1c53      	adds	r3, r2, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1c59      	adds	r1, r3, #1
 8002532:	60f9      	str	r1, [r7, #12]
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e087      	b.n	800264a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	f340 80a4 	ble.w	8002692 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b75      	cmp	r3, #117	; 0x75
 8002552:	f300 80a0 	bgt.w	8002696 <parse_string+0x25a>
 8002556:	2b5c      	cmp	r3, #92	; 0x5c
 8002558:	da04      	bge.n	8002564 <parse_string+0x128>
 800255a:	2b22      	cmp	r3, #34	; 0x22
 800255c:	d05c      	beq.n	8002618 <parse_string+0x1dc>
 800255e:	2b2f      	cmp	r3, #47	; 0x2f
 8002560:	d05a      	beq.n	8002618 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8002562:	e098      	b.n	8002696 <parse_string+0x25a>
            switch (input_pointer[1])
 8002564:	3b5c      	subs	r3, #92	; 0x5c
 8002566:	2b19      	cmp	r3, #25
 8002568:	f200 8095 	bhi.w	8002696 <parse_string+0x25a>
 800256c:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <parse_string+0x138>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	08002619 	.word	0x08002619
 8002578:	08002697 	.word	0x08002697
 800257c:	08002697 	.word	0x08002697
 8002580:	08002697 	.word	0x08002697
 8002584:	08002697 	.word	0x08002697
 8002588:	08002697 	.word	0x08002697
 800258c:	080025dd 	.word	0x080025dd
 8002590:	08002697 	.word	0x08002697
 8002594:	08002697 	.word	0x08002697
 8002598:	08002697 	.word	0x08002697
 800259c:	080025e9 	.word	0x080025e9
 80025a0:	08002697 	.word	0x08002697
 80025a4:	08002697 	.word	0x08002697
 80025a8:	08002697 	.word	0x08002697
 80025ac:	08002697 	.word	0x08002697
 80025b0:	08002697 	.word	0x08002697
 80025b4:	08002697 	.word	0x08002697
 80025b8:	08002697 	.word	0x08002697
 80025bc:	080025f5 	.word	0x080025f5
 80025c0:	08002697 	.word	0x08002697
 80025c4:	08002697 	.word	0x08002697
 80025c8:	08002697 	.word	0x08002697
 80025cc:	08002601 	.word	0x08002601
 80025d0:	08002697 	.word	0x08002697
 80025d4:	0800260d 	.word	0x0800260d
 80025d8:	08002629 	.word	0x08002629
                    *output_pointer++ = '\b';
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	60fa      	str	r2, [r7, #12]
 80025e2:	2208      	movs	r2, #8
 80025e4:	701a      	strb	r2, [r3, #0]
                    break;
 80025e6:	e02c      	b.n	8002642 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	60fa      	str	r2, [r7, #12]
 80025ee:	220c      	movs	r2, #12
 80025f0:	701a      	strb	r2, [r3, #0]
                    break;
 80025f2:	e026      	b.n	8002642 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	60fa      	str	r2, [r7, #12]
 80025fa:	220a      	movs	r2, #10
 80025fc:	701a      	strb	r2, [r3, #0]
                    break;
 80025fe:	e020      	b.n	8002642 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60fa      	str	r2, [r7, #12]
 8002606:	220d      	movs	r2, #13
 8002608:	701a      	strb	r2, [r3, #0]
                    break;
 800260a:	e01a      	b.n	8002642 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	60fa      	str	r2, [r7, #12]
 8002612:	2209      	movs	r2, #9
 8002614:	701a      	strb	r2, [r3, #0]
                    break;
 8002616:	e014      	b.n	8002642 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1c59      	adds	r1, r3, #1
 8002620:	60f9      	str	r1, [r7, #12]
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	701a      	strb	r2, [r3, #0]
                    break;
 8002626:	e00c      	b.n	8002642 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	461a      	mov	r2, r3
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002632:	f7ff fe1b 	bl	800226c <utf16_literal_to_utf8>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02c      	beq.n	800269a <parse_string+0x25e>
                    break;
 8002640:	bf00      	nop
            }
            input_pointer += sequence_length;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	4413      	add	r3, r2
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	429a      	cmp	r2, r3
 8002650:	f4ff af66 	bcc.w	8002520 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2210      	movs	r2, #16
 800265e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	461a      	mov	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	609a      	str	r2, [r3, #8]

    return true;
 800267e:	2301      	movs	r3, #1
 8002680:	e01e      	b.n	80026c0 <parse_string+0x284>
        goto fail;
 8002682:	bf00      	nop
 8002684:	e00a      	b.n	800269c <parse_string+0x260>
                    goto fail;
 8002686:	bf00      	nop
 8002688:	e008      	b.n	800269c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800268a:	bf00      	nop
 800268c:	e006      	b.n	800269c <parse_string+0x260>
            goto fail; /* allocation failure */
 800268e:	bf00      	nop
 8002690:	e004      	b.n	800269c <parse_string+0x260>
                goto fail;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <parse_string+0x260>
                    goto fail;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <parse_string+0x260>
                        goto fail;
 800269a:	bf00      	nop

fail:
    if (output != NULL)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	69f8      	ldr	r0, [r7, #28]
 80026a8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	609a      	str	r2, [r3, #8]
    }

    return false;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <buffer_skip_whitespace+0x16>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	e02c      	b.n	800273c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <buffer_skip_whitespace+0x2c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d306      	bcc.n	8002702 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	e021      	b.n	800273c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <buffer_skip_whitespace+0x5c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <buffer_skip_whitespace+0x5c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b20      	cmp	r3, #32
 8002722:	d9e9      	bls.n	80026f8 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	d104      	bne.n	800273a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <skip_utf8_bom+0x1e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <skip_utf8_bom+0x1e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <skip_utf8_bom+0x22>
    {
        return NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	e01c      	b.n	80027a4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d018      	beq.n	80027a2 <skip_utf8_bom+0x5a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	1d1a      	adds	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d211      	bcs.n	80027a2 <skip_utf8_bom+0x5a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	4413      	add	r3, r2
 8002788:	2203      	movs	r2, #3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <skip_utf8_bom+0x64>)
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fbdb 	bl	8007f48 <strncmp>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d104      	bne.n	80027a2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	1cda      	adds	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	0800ac48 	.word	0x0800ac48

080027b0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e00c      	b.n	80027e0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7fd fd62 	bl	8000290 <strlen>
 80027cc:	4603      	mov	r3, r0
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	6979      	ldr	r1, [r7, #20]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f805 	bl	80027e8 <cJSON_ParseWithLengthOpts>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08e      	sub	sp, #56	; 0x38
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80027f6:	f107 0318 	add.w	r3, r7, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <cJSON_ParseWithLengthOpts+0x12c>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8002814:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <cJSON_ParseWithLengthOpts+0x12c>)
 8002816:	2200      	movs	r2, #0
 8002818:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d042      	beq.n	80028a6 <cJSON_ParseWithLengthOpts+0xbe>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03f      	beq.n	80028a6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8002832:	4a39      	ldr	r2, [pc, #228]	; (8002918 <cJSON_ParseWithLengthOpts+0x130>)
 8002834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002838:	ca07      	ldmia	r2, {r0, r1, r2}
 800283a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800283e:	4836      	ldr	r0, [pc, #216]	; (8002918 <cJSON_ParseWithLengthOpts+0x130>)
 8002840:	f7ff fb7c 	bl	8001f3c <cJSON_New_Item>
 8002844:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02e      	beq.n	80028aa <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800284c:	f107 0318 	add.w	r3, r7, #24
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff79 	bl	8002748 <skip_utf8_bom>
 8002856:	4603      	mov	r3, r0
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff35 	bl	80026c8 <buffer_skip_whitespace>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002864:	f000 f868 	bl	8002938 <parse_value>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff25 	bl	80026c8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d215      	bcs.n	80028b2 <cJSON_ParseWithLengthOpts+0xca>
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	4413      	add	r3, r2
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	601a      	str	r2, [r3, #0]
    }

    return item;
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	e031      	b.n	800290a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80028a6:	bf00      	nop
 80028a8:	e004      	b.n	80028b4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80028b2:	bf00      	nop

fail:
    if (item != NULL)
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80028ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028bc:	f7ff fb54 	bl	8001f68 <cJSON_Delete>
    }

    if (value != NULL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d202      	bcs.n	80028dc <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e005      	b.n	80028e8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	441a      	add	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <cJSON_ParseWithLengthOpts+0x12c>)
 80028fa:	461a      	mov	r2, r3
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002904:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3738      	adds	r7, #56	; 0x38
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20001248 	.word	0x20001248
 8002918:	20000018 	.word	0x20000018

0800291c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff41 	bl	80027b0 <cJSON_ParseWithOpts>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <parse_value+0x18>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <parse_value+0x1c>
    {
        return false; /* no input */
 8002950:	2300      	movs	r3, #0
 8002952:	e0d2      	b.n	8002afa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01d      	beq.n	8002996 <parse_value+0x5e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d816      	bhi.n	8002996 <parse_value+0x5e>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4413      	add	r3, r2
 8002972:	2204      	movs	r2, #4
 8002974:	4963      	ldr	r1, [pc, #396]	; (8002b04 <parse_value+0x1cc>)
 8002976:	4618      	mov	r0, r3
 8002978:	f005 fae6 	bl	8007f48 <strncmp>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2204      	movs	r2, #4
 8002986:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	609a      	str	r2, [r3, #8]
        return true;
 8002992:	2301      	movs	r3, #1
 8002994:	e0b1      	b.n	8002afa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01d      	beq.n	80029d8 <parse_value+0xa0>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	1d5a      	adds	r2, r3, #5
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d816      	bhi.n	80029d8 <parse_value+0xa0>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4413      	add	r3, r2
 80029b4:	2205      	movs	r2, #5
 80029b6:	4954      	ldr	r1, [pc, #336]	; (8002b08 <parse_value+0x1d0>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f005 fac5 	bl	8007f48 <strncmp>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	1d5a      	adds	r2, r3, #5
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	609a      	str	r2, [r3, #8]
        return true;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e090      	b.n	8002afa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d020      	beq.n	8002a20 <parse_value+0xe8>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d819      	bhi.n	8002a20 <parse_value+0xe8>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4413      	add	r3, r2
 80029f6:	2204      	movs	r2, #4
 80029f8:	4944      	ldr	r1, [pc, #272]	; (8002b0c <parse_value+0x1d4>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 faa4 	bl	8007f48 <strncmp>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	1d1a      	adds	r2, r3, #4
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	609a      	str	r2, [r3, #8]
        return true;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e06c      	b.n	8002afa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d013      	beq.n	8002a4e <parse_value+0x116>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20d      	bcs.n	8002a4e <parse_value+0x116>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b22      	cmp	r3, #34	; 0x22
 8002a40:	d105      	bne.n	8002a4e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002a42:	6839      	ldr	r1, [r7, #0]
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fcf9 	bl	800243c <parse_string>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	e055      	b.n	8002afa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <parse_value+0x164>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d21d      	bcs.n	8002a9c <parse_value+0x164>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b2d      	cmp	r3, #45	; 0x2d
 8002a6e:	d00f      	beq.n	8002a90 <parse_value+0x158>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8002a7e:	d90d      	bls.n	8002a9c <parse_value+0x164>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b39      	cmp	r3, #57	; 0x39
 8002a8e:	d805      	bhi.n	8002a9c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fabc 	bl	8002010 <parse_number>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	e02e      	b.n	8002afa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d013      	beq.n	8002aca <parse_value+0x192>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20d      	bcs.n	8002aca <parse_value+0x192>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b5b      	cmp	r3, #91	; 0x5b
 8002abc:	d105      	bne.n	8002aca <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f825 	bl	8002b10 <parse_array>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	e017      	b.n	8002afa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <parse_value+0x1c0>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d20d      	bcs.n	8002af8 <parse_value+0x1c0>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b7b      	cmp	r3, #123	; 0x7b
 8002aea:	d105      	bne.n	8002af8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8d2 	bl	8002c98 <parse_object>
 8002af4:	4603      	mov	r3, r0
 8002af6:	e000      	b.n	8002afa <parse_value+0x1c2>
    }

    return false;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	0800ac1c 	.word	0x0800ac1c
 8002b08:	0800ac4c 	.word	0x0800ac4c
 8002b0c:	0800ac54 	.word	0x0800ac54

08002b10 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2a:	d301      	bcc.n	8002b30 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e0af      	b.n	8002c90 <parse_array+0x180>
    }
    input_buffer->depth++;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4413      	add	r3, r2
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b5b      	cmp	r3, #91	; 0x5b
 8002b48:	f040 8094 	bne.w	8002c74 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f7ff fdb6 	bl	80026c8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <parse_array+0x6e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d207      	bcs.n	8002b7e <parse_array+0x6e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b5d      	cmp	r3, #93	; 0x5d
 8002b7c:	d061      	beq.n	8002c42 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <parse_array+0x80>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d305      	bcc.n	8002b9c <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	609a      	str	r2, [r3, #8]
        goto fail;
 8002b9a:	e072      	b.n	8002c82 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	3310      	adds	r3, #16
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff f9c6 	bl	8001f3c <cJSON_New_Item>
 8002bb0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05f      	beq.n	8002c78 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d104      	bne.n	8002bc8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	e007      	b.n	8002bd8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f7ff fd70 	bl	80026c8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	6938      	ldr	r0, [r7, #16]
 8002bec:	f7ff fea4 	bl	8002938 <parse_value>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d042      	beq.n	8002c7c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	f7ff fd66 	bl	80026c8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <parse_array+0x10e>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d207      	bcs.n	8002c1e <parse_array+0x10e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b2c      	cmp	r3, #44	; 0x2c
 8002c1c:	d0c3      	beq.n	8002ba6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02d      	beq.n	8002c80 <parse_array+0x170>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d227      	bcs.n	8002c80 <parse_array+0x170>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b5d      	cmp	r3, #93	; 0x5d
 8002c3e:	d11f      	bne.n	8002c80 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002c40:	e000      	b.n	8002c44 <parse_array+0x134>
        goto success;
 8002c42:	bf00      	nop
    input_buffer->depth--;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	1e5a      	subs	r2, r3, #1
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <parse_array+0x14a>
        head->prev = current_item;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	609a      	str	r2, [r3, #8]

    return true;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e00d      	b.n	8002c90 <parse_array+0x180>
        goto fail;
 8002c74:	bf00      	nop
 8002c76:	e004      	b.n	8002c82 <parse_array+0x172>
            goto fail; /* allocation failure */
 8002c78:	bf00      	nop
 8002c7a:	e002      	b.n	8002c82 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <parse_array+0x172>
        goto fail; /* expected end of array */
 8002c80:	bf00      	nop

fail:
    if (head != NULL)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f7ff f96d 	bl	8001f68 <cJSON_Delete>
    }

    return false;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb2:	d301      	bcc.n	8002cb8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e0ea      	b.n	8002e8e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80d0 	beq.w	8002e6a <parse_object+0x1d2>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	f080 80c9 	bcs.w	8002e6a <parse_object+0x1d2>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b7b      	cmp	r3, #123	; 0x7b
 8002ce6:	f040 80c0 	bne.w	8002e6a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002cf4:	6838      	ldr	r0, [r7, #0]
 8002cf6:	f7ff fce7 	bl	80026c8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00e      	beq.n	8002d1e <parse_object+0x86>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <parse_object+0x86>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b7d      	cmp	r3, #125	; 0x7d
 8002d1a:	f000 808d 	beq.w	8002e38 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <parse_object+0x98>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d305      	bcc.n	8002d3c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	609a      	str	r2, [r3, #8]
        goto fail;
 8002d3a:	e0a1      	b.n	8002e80 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	1e5a      	subs	r2, r3, #1
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	3310      	adds	r3, #16
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f8f6 	bl	8001f3c <cJSON_New_Item>
 8002d50:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 808a 	beq.w	8002e6e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e007      	b.n	8002d7a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002d84:	6838      	ldr	r0, [r7, #0]
 8002d86:	f7ff fc9f 	bl	80026c8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002d8a:	6839      	ldr	r1, [r7, #0]
 8002d8c:	6938      	ldr	r0, [r7, #16]
 8002d8e:	f7ff fb55 	bl	800243c <parse_string>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d06c      	beq.n	8002e72 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f7ff fc95 	bl	80026c8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d061      	beq.n	8002e76 <parse_object+0x1de>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d25b      	bcs.n	8002e76 <parse_object+0x1de>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b3a      	cmp	r3, #58	; 0x3a
 8002dcc:	d153      	bne.n	8002e76 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	f7ff fc75 	bl	80026c8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	6938      	ldr	r0, [r7, #16]
 8002de2:	f7ff fda9 	bl	8002938 <parse_value>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d046      	beq.n	8002e7a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002dec:	6838      	ldr	r0, [r7, #0]
 8002dee:	f7ff fc6b 	bl	80026c8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <parse_object+0x17c>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d207      	bcs.n	8002e14 <parse_object+0x17c>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b2c      	cmp	r3, #44	; 0x2c
 8002e12:	d098      	beq.n	8002d46 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <parse_object+0x1e6>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d22b      	bcs.n	8002e7e <parse_object+0x1e6>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b7d      	cmp	r3, #125	; 0x7d
 8002e34:	d123      	bne.n	8002e7e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8002e36:	e000      	b.n	8002e3a <parse_object+0x1a2>
        goto success; /* empty object */
 8002e38:	bf00      	nop
    input_buffer->depth--;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	1e5a      	subs	r2, r3, #1
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <parse_object+0x1b8>
        head->prev = current_item;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	609a      	str	r2, [r3, #8]
    return true;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e011      	b.n	8002e8e <parse_object+0x1f6>
        goto fail; /* not an object */
 8002e6a:	bf00      	nop
 8002e6c:	e008      	b.n	8002e80 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8002e6e:	bf00      	nop
 8002e70:	e006      	b.n	8002e80 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8002e72:	bf00      	nop
 8002e74:	e004      	b.n	8002e80 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8002e76:	bf00      	nop
 8002e78:	e002      	b.n	8002e80 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8002e7e:	bf00      	nop

fail:
    if (head != NULL)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff f86e 	bl	8001f68 <cJSON_Delete>
    }

    return false;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <get_object_item+0x1c>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <get_object_item+0x20>
    {
        return NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e033      	b.n	8002f1e <get_object_item+0x88>
    }

    current_element = object->child;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d017      	beq.n	8002ef2 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002ec2:	e002      	b.n	8002eca <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01c      	beq.n	8002f0a <get_object_item+0x74>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d018      	beq.n	8002f0a <get_object_item+0x74>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4619      	mov	r1, r3
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f7fd f976 	bl	80001d0 <strcmp>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ec      	bne.n	8002ec4 <get_object_item+0x2e>
 8002eea:	e00e      	b.n	8002f0a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <get_object_item+0x74>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4619      	mov	r1, r3
 8002efe:	68b8      	ldr	r0, [r7, #8]
 8002f00:	f7fe ffb0 	bl	8001e64 <case_insensitive_strcmp>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <get_object_item+0x82>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <get_object_item+0x86>
        return NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <get_object_item+0x88>
    }

    return current_element;
 8002f1c:	697b      	ldr	r3, [r7, #20]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002f30:	2200      	movs	r2, #0
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ffae 	bl	8002e96 <get_object_item>
 8002f3a:	4603      	mov	r3, r0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f48:	f000 fd94 	bl	8003a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f4c:	f000 f810 	bl	8002f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f50:	f000 f930 	bl	80031b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f54:	f000 f876 	bl	8003044 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002f58:	f000 f8a2 	bl	80030a0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002f5c:	f000 f8d6 	bl	800310c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f60:	f000 f8fe 	bl	8003160 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  modem_setup();
 8002f64:	f000 fa62 	bl	800342c <modem_setup>
    /* USER CODE END WHILE */
//	  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_rx_buffer, 170);

    /* USER CODE BEGIN 3 */

    firmware_update_handler();
 8002f68:	f7fe fc26 	bl	80017b8 <firmware_update_handler>
 8002f6c:	e7fc      	b.n	8002f68 <main+0x24>
	...

08002f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b094      	sub	sp, #80	; 0x50
 8002f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f76:	f107 0320 	add.w	r3, r7, #32
 8002f7a:	2230      	movs	r2, #48	; 0x30
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f004 ffcd 	bl	8007f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	4b28      	ldr	r3, [pc, #160]	; (800303c <SystemClock_Config+0xcc>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <SystemClock_Config+0xcc>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <SystemClock_Config+0xcc>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <SystemClock_Config+0xd0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <SystemClock_Config+0xd0>)
 8002fba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbe:	6013      	str	r3, [r2, #0]
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <SystemClock_Config+0xd0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002fe4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fea:	2302      	movs	r3, #2
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff2:	f107 0320 	add.w	r3, r7, #32
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fd48 	bl	8004a8c <HAL_RCC_OscConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003002:	f000 fa27 	bl	8003454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003006:	230f      	movs	r3, #15
 8003008:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300a:	2302      	movs	r3, #2
 800300c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003012:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003016:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800301c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	2105      	movs	r1, #5
 8003024:	4618      	mov	r0, r3
 8003026:	f001 ffa9 	bl	8004f7c <HAL_RCC_ClockConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003030:	f000 fa10 	bl	8003454 <Error_Handler>
  }
}
 8003034:	bf00      	nop
 8003036:	3750      	adds	r7, #80	; 0x50
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40023800 	.word	0x40023800
 8003040:	40007000 	.word	0x40007000

08003044 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <MX_I2C1_Init+0x50>)
 800304a:	4a13      	ldr	r2, [pc, #76]	; (8003098 <MX_I2C1_Init+0x54>)
 800304c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <MX_I2C1_Init+0x50>)
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <MX_I2C1_Init+0x58>)
 8003052:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <MX_I2C1_Init+0x50>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <MX_I2C1_Init+0x50>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <MX_I2C1_Init+0x50>)
 8003062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003066:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <MX_I2C1_Init+0x50>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <MX_I2C1_Init+0x50>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <MX_I2C1_Init+0x50>)
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <MX_I2C1_Init+0x50>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003080:	4804      	ldr	r0, [pc, #16]	; (8003094 <MX_I2C1_Init+0x50>)
 8003082:	f001 fbbf 	bl	8004804 <HAL_I2C_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800308c:	f000 f9e2 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20001250 	.word	0x20001250
 8003098:	40005400 	.word	0x40005400
 800309c:	000186a0 	.word	0x000186a0

080030a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
	static void MX_SPI1_Init(void)
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN SPI1_Init 1 */

	  /* USER CODE END SPI1_Init 1 */
	  /* SPI1 parameter configuration*/
	  hspi1.Instance = SPI1;
 80030a4:	4b17      	ldr	r3, [pc, #92]	; (8003104 <MX_SPI1_Init+0x64>)
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <MX_SPI1_Init+0x68>)
 80030a8:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030aa:	4b16      	ldr	r3, [pc, #88]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030b0:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <MX_SPI1_Init+0x64>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <MX_SPI1_Init+0x64>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <MX_SPI1_Init+0x64>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <MX_SPI1_Init+0x64>)
 80030cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d0:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <MX_SPI1_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <MX_SPI1_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <MX_SPI1_Init+0x64>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <MX_SPI1_Init+0x64>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <MX_SPI1_Init+0x64>)
 80030ec:	220a      	movs	r2, #10
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <MX_SPI1_Init+0x64>)
 80030f2:	f002 f963 	bl	80053bc <HAL_SPI_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_SPI1_Init+0x60>
	  {
		Error_Handler();
 80030fc:	f000 f9aa 	bl	8003454 <Error_Handler>
	  }
	  /* USER CODE BEGIN SPI1_Init 2 */

	  /* USER CODE END SPI1_Init 2 */

	}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200012a4 	.word	0x200012a4
 8003108:	40013000 	.word	0x40013000

0800310c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <MX_USART2_UART_Init+0x50>)
 8003114:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800311c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003130:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003132:	220c      	movs	r2, #12
 8003134:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 800313e:	2200      	movs	r2, #0
 8003140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	; (8003158 <MX_USART2_UART_Init+0x4c>)
 8003144:	f002 f9c3 	bl	80054ce <HAL_UART_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800314e:	f000 f981 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200012fc 	.word	0x200012fc
 800315c:	40004400 	.word	0x40004400

08003160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003166:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <MX_USART3_UART_Init+0x50>)
 8003168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800316c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003186:	220c      	movs	r2, #12
 8003188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003196:	4805      	ldr	r0, [pc, #20]	; (80031ac <MX_USART3_UART_Init+0x4c>)
 8003198:	f002 f999 	bl	80054ce <HAL_UART_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031a2:	f000 f957 	bl	8003454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20001340 	.word	0x20001340
 80031b0:	40004800 	.word	0x40004800

080031b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
 80031c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	4b91      	ldr	r3, [pc, #580]	; (8003414 <MX_GPIO_Init+0x260>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a90      	ldr	r2, [pc, #576]	; (8003414 <MX_GPIO_Init+0x260>)
 80031d4:	f043 0310 	orr.w	r3, r3, #16
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b8e      	ldr	r3, [pc, #568]	; (8003414 <MX_GPIO_Init+0x260>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	4b8a      	ldr	r3, [pc, #552]	; (8003414 <MX_GPIO_Init+0x260>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a89      	ldr	r2, [pc, #548]	; (8003414 <MX_GPIO_Init+0x260>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b87      	ldr	r3, [pc, #540]	; (8003414 <MX_GPIO_Init+0x260>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	4b83      	ldr	r3, [pc, #524]	; (8003414 <MX_GPIO_Init+0x260>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a82      	ldr	r2, [pc, #520]	; (8003414 <MX_GPIO_Init+0x260>)
 800320c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b80      	ldr	r3, [pc, #512]	; (8003414 <MX_GPIO_Init+0x260>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <MX_GPIO_Init+0x260>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a7b      	ldr	r2, [pc, #492]	; (8003414 <MX_GPIO_Init+0x260>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b79      	ldr	r3, [pc, #484]	; (8003414 <MX_GPIO_Init+0x260>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	4b75      	ldr	r3, [pc, #468]	; (8003414 <MX_GPIO_Init+0x260>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a74      	ldr	r2, [pc, #464]	; (8003414 <MX_GPIO_Init+0x260>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <MX_GPIO_Init+0x260>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	4b6e      	ldr	r3, [pc, #440]	; (8003414 <MX_GPIO_Init+0x260>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a6d      	ldr	r2, [pc, #436]	; (8003414 <MX_GPIO_Init+0x260>)
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b6b      	ldr	r3, [pc, #428]	; (8003414 <MX_GPIO_Init+0x260>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003272:	2200      	movs	r2, #0
 8003274:	2108      	movs	r1, #8
 8003276:	4868      	ldr	r0, [pc, #416]	; (8003418 <MX_GPIO_Init+0x264>)
 8003278:	f001 faaa 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800327c:	2201      	movs	r2, #1
 800327e:	2101      	movs	r1, #1
 8003280:	4866      	ldr	r0, [pc, #408]	; (800341c <MX_GPIO_Init+0x268>)
 8003282:	f001 faa5 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003286:	2200      	movs	r2, #0
 8003288:	f24f 0110 	movw	r1, #61456	; 0xf010
 800328c:	4864      	ldr	r0, [pc, #400]	; (8003420 <MX_GPIO_Init+0x26c>)
 800328e:	f001 fa9f 	bl	80047d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003292:	2308      	movs	r3, #8
 8003294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003296:	2301      	movs	r3, #1
 8003298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	485b      	ldr	r0, [pc, #364]	; (8003418 <MX_GPIO_Init+0x264>)
 80032aa:	f001 f8f5 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b2:	2301      	movs	r3, #1
 80032b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	4619      	mov	r1, r3
 80032c4:	4855      	ldr	r0, [pc, #340]	; (800341c <MX_GPIO_Init+0x268>)
 80032c6:	f001 f8e7 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80032ca:	2308      	movs	r3, #8
 80032cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032da:	2305      	movs	r3, #5
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	4619      	mov	r1, r3
 80032e4:	484d      	ldr	r0, [pc, #308]	; (800341c <MX_GPIO_Init+0x268>)
 80032e6:	f001 f8d7 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80032ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80032f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	4849      	ldr	r0, [pc, #292]	; (8003424 <MX_GPIO_Init+0x270>)
 8003300:	f001 f8ca 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003304:	2310      	movs	r3, #16
 8003306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003314:	2306      	movs	r3, #6
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4841      	ldr	r0, [pc, #260]	; (8003424 <MX_GPIO_Init+0x270>)
 8003320:	f001 f8ba 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003324:	2304      	movs	r3, #4
 8003326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003328:	2300      	movs	r3, #0
 800332a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003330:	f107 031c 	add.w	r3, r7, #28
 8003334:	4619      	mov	r1, r3
 8003336:	483c      	ldr	r0, [pc, #240]	; (8003428 <MX_GPIO_Init+0x274>)
 8003338:	f001 f8ae 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800333c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800334e:	2305      	movs	r3, #5
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4833      	ldr	r0, [pc, #204]	; (8003428 <MX_GPIO_Init+0x274>)
 800335a:	f001 f89d 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800335e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003362:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003364:	2301      	movs	r3, #1
 8003366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	4619      	mov	r1, r3
 8003376:	482a      	ldr	r0, [pc, #168]	; (8003420 <MX_GPIO_Init+0x26c>)
 8003378:	f001 f88e 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800337c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800338e:	2306      	movs	r3, #6
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4820      	ldr	r0, [pc, #128]	; (800341c <MX_GPIO_Init+0x268>)
 800339a:	f001 f87d 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800339e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	481c      	ldr	r0, [pc, #112]	; (8003424 <MX_GPIO_Init+0x270>)
 80033b4:	f001 f870 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80033b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80033bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80033ca:	230a      	movs	r3, #10
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ce:	f107 031c 	add.w	r3, r7, #28
 80033d2:	4619      	mov	r1, r3
 80033d4:	4813      	ldr	r0, [pc, #76]	; (8003424 <MX_GPIO_Init+0x270>)
 80033d6:	f001 f85f 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80033da:	2320      	movs	r3, #32
 80033dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <MX_GPIO_Init+0x26c>)
 80033ee:	f001 f853 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80033f2:	2302      	movs	r3, #2
 80033f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80033fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	4804      	ldr	r0, [pc, #16]	; (8003418 <MX_GPIO_Init+0x264>)
 8003408:	f001 f846 	bl	8004498 <HAL_GPIO_Init>

}
 800340c:	bf00      	nop
 800340e:	3730      	adds	r7, #48	; 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	40021000 	.word	0x40021000
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400

0800342c <modem_setup>:

/* USER CODE BEGIN 4 */

void modem_setup(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8003430:	2201      	movs	r2, #1
 8003432:	4906      	ldr	r1, [pc, #24]	; (800344c <modem_setup+0x20>)
 8003434:	4806      	ldr	r0, [pc, #24]	; (8003450 <modem_setup+0x24>)
 8003436:	f002 f929 	bl	800568c <HAL_UART_Receive_IT>
    Initialize_Modem();
 800343a:	f7fd fdd7 	bl	8000fec <Initialize_Modem>
    SSL_Config();
 800343e:	f7fd fe8d 	bl	800115c <SSL_Config>
    AWS_MQTT();
 8003442:	f7fd fef9 	bl	8001238 <AWS_MQTT>
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000519 	.word	0x20000519
 8003450:	200012fc 	.word	0x200012fc

08003454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003458:	b672      	cpsid	i
}
 800345a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800345c:	e7fe      	b.n	800345c <Error_Handler+0x8>
	...

08003460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_MspInit+0x4c>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_MspInit+0x4c>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_MspInit+0x4c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_MspInit+0x4c>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_MspInit+0x4c>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_MspInit+0x4c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800349e:	2007      	movs	r0, #7
 80034a0:	f000 fc4e 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_I2C_MspInit+0x84>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12c      	bne.n	800352c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_I2C_MspInit+0x88>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a17      	ldr	r2, [pc, #92]	; (8003538 <HAL_I2C_MspInit+0x88>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_I2C_MspInit+0x88>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80034ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034f4:	2312      	movs	r3, #18
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f8:	2301      	movs	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003500:	2304      	movs	r3, #4
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4619      	mov	r1, r3
 800350a:	480c      	ldr	r0, [pc, #48]	; (800353c <HAL_I2C_MspInit+0x8c>)
 800350c:	f000 ffc4 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_I2C_MspInit+0x88>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_I2C_MspInit+0x88>)
 800351a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_I2C_MspInit+0x88>)
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40005400 	.word	0x40005400
 8003538:	40023800 	.word	0x40023800
 800353c:	40020400 	.word	0x40020400

08003540 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_SPI_MspInit+0x84>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12b      	bne.n	80035ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 800356c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003570:	6453      	str	r3, [r2, #68]	; 0x44
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a10      	ldr	r2, [pc, #64]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_SPI_MspInit+0x88>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800359a:	23e0      	movs	r3, #224	; 0xe0
 800359c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035aa:	2305      	movs	r3, #5
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 0314 	add.w	r3, r7, #20
 80035b2:	4619      	mov	r1, r3
 80035b4:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_SPI_MspInit+0x8c>)
 80035b6:	f000 ff6f 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013000 	.word	0x40013000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020000 	.word	0x40020000

080035d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08c      	sub	sp, #48	; 0x30
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 031c 	add.w	r3, r7, #28
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_UART_MspInit+0x148>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d134      	bne.n	800365c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_UART_MspInit+0x14c>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a48      	ldr	r2, [pc, #288]	; (800371c <HAL_UART_MspInit+0x14c>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b46      	ldr	r3, [pc, #280]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800362a:	230c      	movs	r3, #12
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800363a:	2307      	movs	r3, #7
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	4836      	ldr	r0, [pc, #216]	; (8003720 <HAL_UART_MspInit+0x150>)
 8003646:	f000 ff27 	bl	8004498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	2026      	movs	r0, #38	; 0x26
 8003650:	f000 fb81 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003654:	2026      	movs	r0, #38	; 0x26
 8003656:	f000 fb9a 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800365a:	e058      	b.n	800370e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a30      	ldr	r2, [pc, #192]	; (8003724 <HAL_UART_MspInit+0x154>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d153      	bne.n	800370e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_UART_MspInit+0x14c>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a2b      	ldr	r2, [pc, #172]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367e:	613b      	str	r3, [r7, #16]
 8003680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <HAL_UART_MspInit+0x14c>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <HAL_UART_MspInit+0x14c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_UART_MspInit+0x14c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_UART_MspInit+0x14c>)
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	6313      	str	r3, [r2, #48]	; 0x30
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_UART_MspInit+0x14c>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c8:	2303      	movs	r3, #3
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036cc:	2307      	movs	r3, #7
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	f107 031c 	add.w	r3, r7, #28
 80036d4:	4619      	mov	r1, r3
 80036d6:	4814      	ldr	r0, [pc, #80]	; (8003728 <HAL_UART_MspInit+0x158>)
 80036d8:	f000 fede 	bl	8004498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ea:	2303      	movs	r3, #3
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036ee:	2307      	movs	r3, #7
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036f2:	f107 031c 	add.w	r3, r7, #28
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <HAL_UART_MspInit+0x15c>)
 80036fa:	f000 fecd 	bl	8004498 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2027      	movs	r0, #39	; 0x27
 8003704:	f000 fb27 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003708:	2027      	movs	r0, #39	; 0x27
 800370a:	f000 fb40 	bl	8003d8e <HAL_NVIC_EnableIRQ>
}
 800370e:	bf00      	nop
 8003710:	3730      	adds	r7, #48	; 0x30
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40004400 	.word	0x40004400
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000
 8003724:	40004800 	.word	0x40004800
 8003728:	40020400 	.word	0x40020400
 800372c:	40020c00 	.word	0x40020c00

08003730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003734:	e7fe      	b.n	8003734 <NMI_Handler+0x4>

08003736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800373a:	e7fe      	b.n	800373a <HardFault_Handler+0x4>

0800373c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <MemManage_Handler+0x4>

08003742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003746:	e7fe      	b.n	8003746 <BusFault_Handler+0x4>

08003748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800374c:	e7fe      	b.n	800374c <UsageFault_Handler+0x4>

0800374e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800377c:	f000 f9cc 	bl	8003b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	bd80      	pop	{r7, pc}

08003784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <USART2_IRQHandler+0x10>)
 800378a:	f001 ffaf 	bl	80056ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200012fc 	.word	0x200012fc

08003798 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <USART3_IRQHandler+0x10>)
 800379e:	f001 ffa5 	bl	80056ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20001340 	.word	0x20001340

080037ac <HAL_UART_RxCpltCallback>:
//
//        // Indicate that new data has been received
//        data_received_flag = true;
//    }
//}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <HAL_UART_RxCpltCallback+0xac>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d148      	bne.n	8003850 <HAL_UART_RxCpltCallback+0xa4>
        // Insert the received byte into your UART buffer
        uart_buffer.data[uart_buffer.write_index] = received_byte;
 80037be:	4b27      	ldr	r3, [pc, #156]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037c0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <HAL_UART_RxCpltCallback+0xb4>)
 80037c8:	7819      	ldrb	r1, [r3, #0]
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037cc:	5499      	strb	r1, [r3, r2]
        uart_buffer.write_index++;
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037d0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80037d4:	3301      	adds	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037da:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100

        if (uart_buffer.write_index >= UART_BUFFER_SIZE) {
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037e0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 80037e4:	2bff      	cmp	r3, #255	; 0xff
 80037e6:	d903      	bls.n	80037f0 <HAL_UART_RxCpltCallback+0x44>
            uart_buffer.write_index = 0; // Wrap around
 80037e8:	4b1c      	ldr	r3, [pc, #112]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
        }

        // Handle buffer overflow (optional, but recommended)
        if (uart_buffer.write_index == uart_buffer.read_index) {
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037f2:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 80037f8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d110      	bne.n	8003822 <HAL_UART_RxCpltCallback+0x76>
            // Buffer is full; handle the overflow. For now, let's reset the read index.
            uart_buffer.read_index++;
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 8003802:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8003806:	3301      	adds	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 800380c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            if (uart_buffer.read_index >= UART_BUFFER_SIZE) {
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 8003812:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d903      	bls.n	8003822 <HAL_UART_RxCpltCallback+0x76>
                uart_buffer.read_index = 0;
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_UART_RxCpltCallback+0xb0>)
 800381c:	2200      	movs	r2, #0
 800381e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
            }
        }

        // Process the received byte
        if (current_mode == MODE_MQTT) {
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_UART_RxCpltCallback+0xb8>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_UART_RxCpltCallback+0x8a>
            handle_mqtt_byte(received_byte);
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_UART_RxCpltCallback+0xb4>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fe08 	bl	8001444 <handle_mqtt_byte>
 8003834:	e004      	b.n	8003840 <HAL_UART_RxCpltCallback+0x94>
        } else {
            handle_default_byte(received_byte);
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_UART_RxCpltCallback+0xb4>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fdc8 	bl	80013d0 <handle_default_byte>
        }

        // Reactivate the UART receive interrupt
        HAL_UART_Receive_IT(&huart2, &received_byte, 1);
 8003840:	2201      	movs	r2, #1
 8003842:	4907      	ldr	r1, [pc, #28]	; (8003860 <HAL_UART_RxCpltCallback+0xb4>)
 8003844:	4808      	ldr	r0, [pc, #32]	; (8003868 <HAL_UART_RxCpltCallback+0xbc>)
 8003846:	f001 ff21 	bl	800568c <HAL_UART_Receive_IT>

        // Indicate that new data has been received
        data_received_flag = true;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_UART_RxCpltCallback+0xc0>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40004400 	.word	0x40004400
 800385c:	20000528 	.word	0x20000528
 8003860:	20000519 	.word	0x20000519
 8003864:	2000062c 	.word	0x2000062c
 8003868:	200012fc 	.word	0x200012fc
 800386c:	20000518 	.word	0x20000518

08003870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_kill>:

int _kill(int pid, int sig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800388a:	f004 fbf3 	bl	8008074 <__errno>
 800388e:	4603      	mov	r3, r0
 8003890:	2216      	movs	r2, #22
 8003892:	601a      	str	r2, [r3, #0]
  return -1;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <_exit>:

void _exit (int status)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038a8:	f04f 31ff 	mov.w	r1, #4294967295
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ffe7 	bl	8003880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80038b2:	e7fe      	b.n	80038b2 <_exit+0x12>

080038b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e00a      	b.n	80038dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038c6:	f3af 8000 	nop.w
 80038ca:	4601      	mov	r1, r0
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60ba      	str	r2, [r7, #8]
 80038d2:	b2ca      	uxtb	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dbf0      	blt.n	80038c6 <_read+0x12>
  }

  return len;
 80038e4:	687b      	ldr	r3, [r7, #4]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e009      	b.n	8003914 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	60ba      	str	r2, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	3301      	adds	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	dbf1      	blt.n	8003900 <_write+0x12>
  }
  return len;
 800391c:	687b      	ldr	r3, [r7, #4]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_close>:

int _close(int file)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800394e:	605a      	str	r2, [r3, #4]
  return 0;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <_isatty>:

int _isatty(int file)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <_sbrk+0x5c>)
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <_sbrk+0x60>)
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <_sbrk+0x64>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <_sbrk+0x64>)
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <_sbrk+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <_sbrk+0x64>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d207      	bcs.n	80039d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c0:	f004 fb58 	bl	8008074 <__errno>
 80039c4:	4603      	mov	r3, r0
 80039c6:	220c      	movs	r2, #12
 80039c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	e009      	b.n	80039e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <_sbrk+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039d6:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <_sbrk+0x64>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <_sbrk+0x64>)
 80039e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e2:	68fb      	ldr	r3, [r7, #12]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20020000 	.word	0x20020000
 80039f0:	00000400 	.word	0x00000400
 80039f4:	20001384 	.word	0x20001384
 80039f8:	200014f8 	.word	0x200014f8

080039fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <SystemInit+0x20>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <SystemInit+0x20>)
 8003a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a26:	490e      	ldr	r1, [pc, #56]	; (8003a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a2c:	e002      	b.n	8003a34 <LoopCopyDataInit>

08003a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a32:	3304      	adds	r3, #4

08003a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a38:	d3f9      	bcc.n	8003a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3a:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a3c:	4c0b      	ldr	r4, [pc, #44]	; (8003a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a40:	e001      	b.n	8003a46 <LoopFillZerobss>

08003a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a44:	3204      	adds	r2, #4

08003a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a48:	d3fb      	bcc.n	8003a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a4a:	f7ff ffd7 	bl	80039fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a4e:	f004 fb17 	bl	8008080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a52:	f7ff fa77 	bl	8002f44 <main>
  bx  lr    
 8003a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a60:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003a64:	0800b0ac 	.word	0x0800b0ac
  ldr r2, =_sbss
 8003a68:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003a6c:	200014f8 	.word	0x200014f8

08003a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a70:	e7fe      	b.n	8003a70 <ADC_IRQHandler>
	...

08003a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_Init+0x40>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <HAL_Init+0x40>)
 8003a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_Init+0x40>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <HAL_Init+0x40>)
 8003a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_Init+0x40>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <HAL_Init+0x40>)
 8003a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9c:	2003      	movs	r0, #3
 8003a9e:	f000 f94f 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f000 f808 	bl	8003ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa8:	f7ff fcda 	bl	8003460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023c00 	.word	0x40023c00

08003ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_InitTick+0x54>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_InitTick+0x58>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 f967 	bl	8003daa <HAL_SYSTICK_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00e      	b.n	8003b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d80a      	bhi.n	8003b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aec:	2200      	movs	r2, #0
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	f000 f92f 	bl	8003d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af8:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <HAL_InitTick+0x5c>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e000      	b.n	8003b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000024 	.word	0x20000024
 8003b10:	2000002c 	.word	0x2000002c
 8003b14:	20000028 	.word	0x20000028

08003b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x20>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x24>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_IncTick+0x24>)
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	2000002c 	.word	0x2000002c
 8003b3c:	20001388 	.word	0x20001388

08003b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return uwTick;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_GetTick+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20001388 	.word	0x20001388

08003b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff ffee 	bl	8003b40 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d005      	beq.n	8003b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_Delay+0x44>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7e:	bf00      	nop
 8003b80:	f7ff ffde 	bl	8003b40 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d8f7      	bhi.n	8003b80 <HAL_Delay+0x28>
  {
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	2000002c 	.word	0x2000002c

08003ba0 <__NVIC_SetPriorityGrouping>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_GetPriorityGrouping>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f7ff ff8e 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff29 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff3e 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff8e 	bl	8003c94 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5d 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff31 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa2 	bl	8003cfc <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dd0:	f7ff feb6 	bl	8003b40 <HAL_GetTick>
 8003dd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d008      	beq.n	8003df4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e052      	b.n	8003e9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0216 	bic.w	r2, r2, #22
 8003e02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <HAL_DMA_Abort+0x62>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0208 	bic.w	r2, r2, #8
 8003e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e44:	e013      	b.n	8003e6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e46:	f7ff fe7b 	bl	8003b40 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d90c      	bls.n	8003e6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e015      	b.n	8003e9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e4      	bne.n	8003e46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	223f      	movs	r2, #63	; 0x3f
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e00c      	b.n	8003eda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_FLASH_Program+0xa0>)
 8003efc:	7e1b      	ldrb	r3, [r3, #24]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_FLASH_Program+0x1e>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e03b      	b.n	8003f7e <HAL_FLASH_Program+0x96>
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_FLASH_Program+0xa0>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f10:	f000 f870 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003f14:	4603      	mov	r3, r0
 8003f16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d12b      	bne.n	8003f76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003f24:	783b      	ldrb	r3, [r7, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	68b8      	ldr	r0, [r7, #8]
 8003f2a:	f000 f91b 	bl	8004164 <FLASH_Program_Byte>
 8003f2e:	e016      	b.n	8003f5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003f36:	883b      	ldrh	r3, [r7, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68b8      	ldr	r0, [r7, #8]
 8003f3c:	f000 f8ee 	bl	800411c <FLASH_Program_HalfWord>
 8003f40:	e00d      	b.n	8003f5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d105      	bne.n	8003f54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f000 f8c3 	bl	80040d8 <FLASH_Program_Word>
 8003f52:	e004      	b.n	8003f5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f58:	68b8      	ldr	r0, [r7, #8]
 8003f5a:	f000 f88b 	bl	8004074 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f62:	f000 f847 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003f66:	4603      	mov	r3, r0
 8003f68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_FLASH_Program+0xa4>)
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	4a07      	ldr	r2, [pc, #28]	; (8003f8c <HAL_FLASH_Program+0xa4>)
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_FLASH_Program+0xa0>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000138c 	.word	0x2000138c
 8003f8c:	40023c00 	.word	0x40023c00

08003f90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_FLASH_Unlock+0x38>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da0b      	bge.n	8003fba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_FLASH_Unlock+0x38>)
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_FLASH_Unlock+0x3c>)
 8003fa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_FLASH_Unlock+0x38>)
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <HAL_FLASH_Unlock+0x40>)
 8003fac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_FLASH_Unlock+0x38>)
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	da01      	bge.n	8003fba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fba:	79fb      	ldrb	r3, [r7, #7]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40023c00 	.word	0x40023c00
 8003fcc:	45670123 	.word	0x45670123
 8003fd0:	cdef89ab 	.word	0xcdef89ab

08003fd4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_FLASH_Lock+0x1c>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_FLASH_Lock+0x1c>)
 8003fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40023c00 	.word	0x40023c00

08003ff4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <FLASH_WaitForLastOperation+0x78>)
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004006:	f7ff fd9b 	bl	8003b40 <HAL_GetTick>
 800400a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800400c:	e010      	b.n	8004030 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d00c      	beq.n	8004030 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <FLASH_WaitForLastOperation+0x38>
 800401c:	f7ff fd90 	bl	8003b40 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d201      	bcs.n	8004030 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e019      	b.n	8004064 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <FLASH_WaitForLastOperation+0x7c>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e8      	bne.n	800400e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <FLASH_WaitForLastOperation+0x7c>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <FLASH_WaitForLastOperation+0x7c>)
 800404a:	2201      	movs	r2, #1
 800404c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <FLASH_WaitForLastOperation+0x7c>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800405a:	f000 f8a5 	bl	80041a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
  
}  
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	2000138c 	.word	0x2000138c
 8004070:	40023c00 	.word	0x40023c00

08004074 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 8004086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 8004092:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <FLASH_Program_DoubleWord+0x60>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80040aa:	f3bf 8f6f 	isb	sy
}
 80040ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80040b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	000a      	movs	r2, r1
 80040be:	2300      	movs	r3, #0
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	3104      	adds	r1, #4
 80040c4:	4613      	mov	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40023c00 	.word	0x40023c00

080040d8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <FLASH_Program_Word+0x40>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <FLASH_Program_Word+0x40>)
 80040e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <FLASH_Program_Word+0x40>)
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <FLASH_Program_Word+0x40>)
 80040f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <FLASH_Program_Word+0x40>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	4a06      	ldr	r2, [pc, #24]	; (8004118 <FLASH_Program_Word+0x40>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	601a      	str	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40023c00 	.word	0x40023c00

0800411c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4a06      	ldr	r2, [pc, #24]	; (8004160 <FLASH_Program_HalfWord+0x44>)
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	801a      	strh	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40023c00 	.word	0x40023c00

08004164 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <FLASH_Program_Byte+0x40>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <FLASH_Program_Byte+0x40>)
 8004176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <FLASH_Program_Byte+0x40>)
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <FLASH_Program_Byte+0x40>)
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <FLASH_Program_Byte+0x40>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <FLASH_Program_Byte+0x40>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	701a      	strb	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00

080041a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <FLASH_SetErrorCode+0xa4>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f043 0310 	orr.w	r3, r3, #16
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <FLASH_SetErrorCode+0xa4>)
 80041c6:	2210      	movs	r2, #16
 80041c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <FLASH_SetErrorCode+0xa4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f043 0308 	orr.w	r3, r3, #8
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <FLASH_SetErrorCode+0xa4>)
 80041e4:	2220      	movs	r2, #32
 80041e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <FLASH_SetErrorCode+0xa4>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80041f4:	4b16      	ldr	r3, [pc, #88]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 80041fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <FLASH_SetErrorCode+0xa4>)
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <FLASH_SetErrorCode+0xa4>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 800421c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <FLASH_SetErrorCode+0xa4>)
 8004220:	2280      	movs	r2, #128	; 0x80
 8004222:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <FLASH_SetErrorCode+0xa4>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f043 0320 	orr.w	r3, r3, #32
 8004238:	4a05      	ldr	r2, [pc, #20]	; (8004250 <FLASH_SetErrorCode+0xa8>)
 800423a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <FLASH_SetErrorCode+0xa4>)
 800423e:	2202      	movs	r2, #2
 8004240:	60da      	str	r2, [r3, #12]
  }
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40023c00 	.word	0x40023c00
 8004250:	2000138c 	.word	0x2000138c

08004254 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <HAL_FLASHEx_Erase+0xd8>)
 8004268:	7e1b      	ldrb	r3, [r3, #24]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_FLASHEx_Erase+0x1e>
 800426e:	2302      	movs	r3, #2
 8004270:	e058      	b.n	8004324 <HAL_FLASHEx_Erase+0xd0>
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_FLASHEx_Erase+0xd8>)
 8004274:	2201      	movs	r2, #1
 8004276:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004278:	f24c 3050 	movw	r0, #50000	; 0xc350
 800427c:	f7ff feba 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d148      	bne.n	800431c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d115      	bne.n	80042c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 f844 	bl	8004334 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042b0:	f7ff fea0 	bl	8003ff4 <FLASH_WaitForLastOperation>
 80042b4:	4603      	mov	r3, r0
 80042b6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80042b8:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_FLASHEx_Erase+0xdc>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_FLASHEx_Erase+0xdc>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6113      	str	r3, [r2, #16]
 80042c4:	e028      	b.n	8004318 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	e01c      	b.n	8004308 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	68b8      	ldr	r0, [r7, #8]
 80042d8:	f000 f850 	bl	800437c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042e0:	f7ff fe88 	bl	8003ff4 <FLASH_WaitForLastOperation>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_FLASHEx_Erase+0xdc>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_FLASHEx_Erase+0xdc>)
 80042ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80042f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	601a      	str	r2, [r3, #0]
          break;
 8004300:	e00a      	b.n	8004318 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3301      	adds	r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4413      	add	r3, r2
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d3da      	bcc.n	80042ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004318:	f000 f878 	bl	800440c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_FLASHEx_Erase+0xd8>)
 800431e:	2200      	movs	r2, #0
 8004320:	761a      	strb	r2, [r3, #24]

  return status;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000138c 	.word	0x2000138c
 8004330:	40023c00 	.word	0x40023c00

08004334 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004340:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <FLASH_MassErase+0x44>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <FLASH_MassErase+0x44>)
 8004346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <FLASH_MassErase+0x44>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4a09      	ldr	r2, [pc, #36]	; (8004378 <FLASH_MassErase+0x44>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <FLASH_MassErase+0x44>)
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	4313      	orrs	r3, r2
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <FLASH_MassErase+0x44>)
 8004364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004368:	6113      	str	r3, [r2, #16]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00

0800437c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e010      	b.n	80043ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d103      	bne.n	80043a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800439e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e009      	b.n	80043ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d103      	bne.n	80043b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80043ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e002      	b.n	80043ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80043b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	4a12      	ldr	r2, [pc, #72]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80043c6:	4b10      	ldr	r3, [pc, #64]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	490f      	ldr	r1, [pc, #60]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4313      	orrs	r3, r2
 80043e8:	4a07      	ldr	r2, [pc, #28]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043ea:	f043 0302 	orr.w	r3, r3, #2
 80043ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <FLASH_Erase_Sector+0x8c>)
 80043f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043fa:	6113      	str	r3, [r2, #16]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40023c00 	.word	0x40023c00

0800440c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004410:	4b20      	ldr	r3, [pc, #128]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800441c:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <FLASH_FlushCaches+0x88>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004422:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004426:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <FLASH_FlushCaches+0x88>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <FLASH_FlushCaches+0x88>)
 800442e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b17      	ldr	r3, [pc, #92]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a16      	ldr	r2, [pc, #88]	; (8004494 <FLASH_FlushCaches+0x88>)
 800443a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a13      	ldr	r2, [pc, #76]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800444a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800444c:	4b11      	ldr	r3, [pc, #68]	; (8004494 <FLASH_FlushCaches+0x88>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d017      	beq.n	8004488 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <FLASH_FlushCaches+0x88>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <FLASH_FlushCaches+0x88>)
 800445e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004462:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <FLASH_FlushCaches+0x88>)
 800446a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <FLASH_FlushCaches+0x88>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <FLASH_FlushCaches+0x88>)
 8004482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004486:	6013      	str	r3, [r2, #0]
  }
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40023c00 	.word	0x40023c00

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e16b      	b.n	800478c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 815a 	bne.w	8004786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d005      	beq.n	80044ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d130      	bne.n	800454c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0201 	and.w	r2, r3, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d017      	beq.n	8004588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b4 	beq.w	8004786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_GPIO_Init+0x310>)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_GPIO_Init+0x314>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a51      	ldr	r2, [pc, #324]	; (80047b0 <HAL_GPIO_Init+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a50      	ldr	r2, [pc, #320]	; (80047b4 <HAL_GPIO_Init+0x31c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x320>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x324>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x328>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x32c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x330>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x20a>
 800469e:	2307      	movs	r3, #7
 80046a0:	e00e      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a2:	2308      	movs	r3, #8
 80046a4:	e00c      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e00a      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046aa:	2305      	movs	r3, #5
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ae:	2304      	movs	r3, #4
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046be:	2300      	movs	r3, #0
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d0:	4935      	ldr	r1, [pc, #212]	; (80047a8 <HAL_GPIO_Init+0x310>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_GPIO_Init+0x334>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <HAL_GPIO_Init+0x334>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_GPIO_Init+0x334>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_GPIO_Init+0x334>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	f67f ae90 	bls.w	80044b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40021400 	.word	0x40021400
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40021c00 	.word	0x40021c00
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ec:	e003      	b.n	80047f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	041a      	lsls	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e12b      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fe40 	bl	80034b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0201 	bic.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004868:	f000 fd80 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 800486c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4a81      	ldr	r2, [pc, #516]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d807      	bhi.n	8004888 <HAL_I2C_Init+0x84>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a80      	ldr	r2, [pc, #512]	; (8004a7c <HAL_I2C_Init+0x278>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e006      	b.n	8004896 <HAL_I2C_Init+0x92>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a7d      	ldr	r2, [pc, #500]	; (8004a80 <HAL_I2C_Init+0x27c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	bf94      	ite	ls
 8004890:	2301      	movls	r3, #1
 8004892:	2300      	movhi	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0e7      	b.n	8004a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a78      	ldr	r2, [pc, #480]	; (8004a84 <HAL_I2C_Init+0x280>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	0c9b      	lsrs	r3, r3, #18
 80048a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4a6a      	ldr	r2, [pc, #424]	; (8004a78 <HAL_I2C_Init+0x274>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <HAL_I2C_Init+0xd4>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	3301      	adds	r3, #1
 80048d6:	e009      	b.n	80048ec <HAL_I2C_Init+0xe8>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	4a69      	ldr	r2, [pc, #420]	; (8004a88 <HAL_I2C_Init+0x284>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	3301      	adds	r3, #1
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	495c      	ldr	r1, [pc, #368]	; (8004a78 <HAL_I2C_Init+0x274>)
 8004908:	428b      	cmp	r3, r1
 800490a:	d819      	bhi.n	8004940 <HAL_I2C_Init+0x13c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	1e59      	subs	r1, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fbb1 f3f3 	udiv	r3, r1, r3
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004920:	400b      	ands	r3, r1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_I2C_Init+0x138>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e59      	subs	r1, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fbb1 f3f3 	udiv	r3, r1, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493a:	e051      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800493c:	2304      	movs	r3, #4
 800493e:	e04f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <HAL_I2C_Init+0x168>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e58      	subs	r0, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6859      	ldr	r1, [r3, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	440b      	add	r3, r1
 8004956:	fbb0 f3f3 	udiv	r3, r0, r3
 800495a:	3301      	adds	r3, #1
 800495c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e012      	b.n	8004992 <HAL_I2C_Init+0x18e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Init+0x196>
 8004996:	2301      	movs	r3, #1
 8004998:	e022      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <HAL_I2C_Init+0x1bc>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e58      	subs	r0, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	440b      	add	r3, r1
 80049b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	e00f      	b.n	80049e0 <HAL_I2C_Init+0x1dc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e58      	subs	r0, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6859      	ldr	r1, [r3, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	0099      	lsls	r1, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	6809      	ldr	r1, [r1, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6911      	ldr	r1, [r2, #16]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68d2      	ldr	r2, [r2, #12]
 8004a1a:	4311      	orrs	r1, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	430b      	orrs	r3, r1
 8004a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	000186a0 	.word	0x000186a0
 8004a7c:	001e847f 	.word	0x001e847f
 8004a80:	003d08ff 	.word	0x003d08ff
 8004a84:	431bde83 	.word	0x431bde83
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e267      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d075      	beq.n	8004b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aaa:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00c      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab6:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d112      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac2:	4b82      	ldr	r3, [pc, #520]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ace:	d10b      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	4b7e      	ldr	r3, [pc, #504]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d05b      	beq.n	8004b94 <HAL_RCC_OscConfig+0x108>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d157      	bne.n	8004b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e242      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x74>
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a75      	ldr	r2, [pc, #468]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e01d      	b.n	8004b3c <HAL_RCC_OscConfig+0xb0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x98>
 8004b0a:	4b70      	ldr	r3, [pc, #448]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6f      	ldr	r2, [pc, #444]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a6c      	ldr	r2, [pc, #432]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e00b      	b.n	8004b3c <HAL_RCC_OscConfig+0xb0>
 8004b24:	4b69      	ldr	r3, [pc, #420]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a68      	ldr	r2, [pc, #416]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b66      	ldr	r3, [pc, #408]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a65      	ldr	r2, [pc, #404]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d013      	beq.n	8004b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe fffc 	bl	8003b40 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b4c:	f7fe fff8 	bl	8003b40 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b64      	cmp	r3, #100	; 0x64
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e207      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	4b5b      	ldr	r3, [pc, #364]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0xc0>
 8004b6a:	e014      	b.n	8004b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fe ffe8 	bl	8003b40 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fe ffe4 	bl	8003b40 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1f3      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b86:	4b51      	ldr	r3, [pc, #324]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0xe8>
 8004b92:	e000      	b.n	8004b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d063      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00b      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d11c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bba:	4b44      	ldr	r3, [pc, #272]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d116      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCC_OscConfig+0x152>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e1c7      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4b3b      	ldr	r3, [pc, #236]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4937      	ldr	r1, [pc, #220]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf2:	e03a      	b.n	8004c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bfc:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fe ff9d 	bl	8003b40 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c0a:	f7fe ff99 	bl	8003b40 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e1a8      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0f0      	beq.n	8004c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4925      	ldr	r1, [pc, #148]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
 8004c3c:	e015      	b.n	8004c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4b24      	ldr	r3, [pc, #144]	; (8004cd0 <HAL_RCC_OscConfig+0x244>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe ff7c 	bl	8003b40 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fe ff78 	bl	8003b40 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e187      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d036      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <HAL_RCC_OscConfig+0x248>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7fe ff5c 	bl	8003b40 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c8c:	f7fe ff58 	bl	8003b40 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e167      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCC_OscConfig+0x240>)
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x200>
 8004caa:	e01b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <HAL_RCC_OscConfig+0x248>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb2:	f7fe ff45 	bl	8003b40 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	e00e      	b.n	8004cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fe ff41 	bl	8003b40 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d907      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e150      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	42470000 	.word	0x42470000
 8004cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd8:	4b88      	ldr	r3, [pc, #544]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ea      	bne.n	8004cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8097 	beq.w	8004e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf6:	4b81      	ldr	r3, [pc, #516]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10f      	bne.n	8004d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	4b7d      	ldr	r3, [pc, #500]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	4a7c      	ldr	r2, [pc, #496]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6413      	str	r3, [r2, #64]	; 0x40
 8004d12:	4b7a      	ldr	r3, [pc, #488]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b77      	ldr	r3, [pc, #476]	; (8004f00 <HAL_RCC_OscConfig+0x474>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b74      	ldr	r3, [pc, #464]	; (8004f00 <HAL_RCC_OscConfig+0x474>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a73      	ldr	r2, [pc, #460]	; (8004f00 <HAL_RCC_OscConfig+0x474>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3a:	f7fe ff01 	bl	8003b40 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe fefd 	bl	8003b40 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e10c      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCC_OscConfig+0x474>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x2ea>
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4a63      	ldr	r2, [pc, #396]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6713      	str	r3, [r2, #112]	; 0x70
 8004d74:	e01c      	b.n	8004db0 <HAL_RCC_OscConfig+0x324>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2b05      	cmp	r3, #5
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x30c>
 8004d7e:	4b5f      	ldr	r3, [pc, #380]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a5e      	ldr	r2, [pc, #376]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d84:	f043 0304 	orr.w	r3, r3, #4
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8a:	4b5c      	ldr	r3, [pc, #368]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6713      	str	r3, [r2, #112]	; 0x70
 8004d96:	e00b      	b.n	8004db0 <HAL_RCC_OscConfig+0x324>
 8004d98:	4b58      	ldr	r3, [pc, #352]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	4a57      	ldr	r2, [pc, #348]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	6713      	str	r3, [r2, #112]	; 0x70
 8004da4:	4b55      	ldr	r3, [pc, #340]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	4a54      	ldr	r2, [pc, #336]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004daa:	f023 0304 	bic.w	r3, r3, #4
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fe fec2 	bl	8003b40 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fe febe 	bl	8003b40 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e0cb      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd6:	4b49      	ldr	r3, [pc, #292]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ee      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x334>
 8004de2:	e014      	b.n	8004e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de4:	f7fe feac 	bl	8003b40 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fe fea8 	bl	8003b40 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e0b5      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ee      	bne.n	8004dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e14:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	4a38      	ldr	r2, [pc, #224]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80a1 	beq.w	8004f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 030c 	and.w	r3, r3, #12
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d05c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d141      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <HAL_RCC_OscConfig+0x478>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7fe fe7c 	bl	8003b40 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fe fe78 	bl	8003b40 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e087      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5e:	4b27      	ldr	r3, [pc, #156]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	3b01      	subs	r3, #1
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	491b      	ldr	r1, [pc, #108]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e94:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <HAL_RCC_OscConfig+0x478>)
 8004e96:	2201      	movs	r2, #1
 8004e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fe fe51 	bl	8003b40 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fe fe4d 	bl	8003b40 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e05c      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f0      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x416>
 8004ec0:	e054      	b.n	8004f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <HAL_RCC_OscConfig+0x478>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fe3a 	bl	8003b40 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fe fe36 	bl	8003b40 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e045      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCC_OscConfig+0x470>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x444>
 8004eee:	e03d      	b.n	8004f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e038      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40007000 	.word	0x40007000
 8004f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCC_OscConfig+0x4ec>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d028      	beq.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d121      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d11a      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d111      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d107      	bne.n	8004f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40023800 	.word	0x40023800

08004f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0cc      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f90:	4b68      	ldr	r3, [pc, #416]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d90c      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9e:	4b65      	ldr	r3, [pc, #404]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b63      	ldr	r3, [pc, #396]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0b8      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a58      	ldr	r2, [pc, #352]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a52      	ldr	r2, [pc, #328]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	494d      	ldr	r1, [pc, #308]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d044      	beq.n	800509c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d119      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e07f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d003      	beq.n	800503a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005036:	2b03      	cmp	r3, #3
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e06f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	4b3b      	ldr	r3, [pc, #236]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e067      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505a:	4b37      	ldr	r3, [pc, #220]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4934      	ldr	r1, [pc, #208]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800506c:	f7fe fd68 	bl	8003b40 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fe fd64 	bl	8003b40 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e04f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	4b2b      	ldr	r3, [pc, #172]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 020c 	and.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1eb      	bne.n	8005074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800509c:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d20c      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e032      	b.n	800512a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4916      	ldr	r1, [pc, #88]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	490e      	ldr	r1, [pc, #56]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005102:	f000 f821 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 8005106:	4602      	mov	r2, r0
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	490a      	ldr	r1, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x1c0>)
 8005114:	5ccb      	ldrb	r3, [r1, r3]
 8005116:	fa22 f303 	lsr.w	r3, r2, r3
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x1c8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fcc8 	bl	8003ab8 <HAL_InitTick>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023c00 	.word	0x40023c00
 8005138:	40023800 	.word	0x40023800
 800513c:	0800ac5c 	.word	0x0800ac5c
 8005140:	20000024 	.word	0x20000024
 8005144:	20000028 	.word	0x20000028

08005148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b094      	sub	sp, #80	; 0x50
 800514e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	2300      	movs	r3, #0
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005158:	2300      	movs	r3, #0
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005160:	4b79      	ldr	r3, [pc, #484]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b08      	cmp	r3, #8
 800516a:	d00d      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x40>
 800516c:	2b08      	cmp	r3, #8
 800516e:	f200 80e1 	bhi.w	8005334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0x34>
 8005176:	2b04      	cmp	r3, #4
 8005178:	d003      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0x3a>
 800517a:	e0db      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517c:	4b73      	ldr	r3, [pc, #460]	; (800534c <HAL_RCC_GetSysClockFreq+0x204>)
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005180:	e0db      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005182:	4b73      	ldr	r3, [pc, #460]	; (8005350 <HAL_RCC_GetSysClockFreq+0x208>)
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005186:	e0d8      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005188:	4b6f      	ldr	r3, [pc, #444]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005192:	4b6d      	ldr	r3, [pc, #436]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d063      	beq.n	8005266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b6a      	ldr	r3, [pc, #424]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	2200      	movs	r2, #0
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
 80051b2:	2300      	movs	r3, #0
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
 80051b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	f04f 0000 	mov.w	r0, #0
 80051c2:	f04f 0100 	mov.w	r1, #0
 80051c6:	0159      	lsls	r1, r3, #5
 80051c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051cc:	0150      	lsls	r0, r2, #5
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4621      	mov	r1, r4
 80051d4:	1a51      	subs	r1, r2, r1
 80051d6:	6139      	str	r1, [r7, #16]
 80051d8:	4629      	mov	r1, r5
 80051da:	eb63 0301 	sbc.w	r3, r3, r1
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ec:	4659      	mov	r1, fp
 80051ee:	018b      	lsls	r3, r1, #6
 80051f0:	4651      	mov	r1, sl
 80051f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051f6:	4651      	mov	r1, sl
 80051f8:	018a      	lsls	r2, r1, #6
 80051fa:	4651      	mov	r1, sl
 80051fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005200:	4659      	mov	r1, fp
 8005202:	eb63 0901 	sbc.w	r9, r3, r1
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521a:	4690      	mov	r8, r2
 800521c:	4699      	mov	r9, r3
 800521e:	4623      	mov	r3, r4
 8005220:	eb18 0303 	adds.w	r3, r8, r3
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	462b      	mov	r3, r5
 8005228:	eb49 0303 	adc.w	r3, r9, r3
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800523a:	4629      	mov	r1, r5
 800523c:	024b      	lsls	r3, r1, #9
 800523e:	4621      	mov	r1, r4
 8005240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005244:	4621      	mov	r1, r4
 8005246:	024a      	lsls	r2, r1, #9
 8005248:	4610      	mov	r0, r2
 800524a:	4619      	mov	r1, r3
 800524c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524e:	2200      	movs	r2, #0
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005258:	f7fb fcd6 	bl	8000c08 <__aeabi_uldivmod>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4613      	mov	r3, r2
 8005262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005264:	e058      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005266:	4b38      	ldr	r3, [pc, #224]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	099b      	lsrs	r3, r3, #6
 800526c:	2200      	movs	r2, #0
 800526e:	4618      	mov	r0, r3
 8005270:	4611      	mov	r1, r2
 8005272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005280:	4642      	mov	r2, r8
 8005282:	464b      	mov	r3, r9
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	0159      	lsls	r1, r3, #5
 800528e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005292:	0150      	lsls	r0, r2, #5
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4641      	mov	r1, r8
 800529a:	ebb2 0a01 	subs.w	sl, r2, r1
 800529e:	4649      	mov	r1, r9
 80052a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052b8:	ebb2 040a 	subs.w	r4, r2, sl
 80052bc:	eb63 050b 	sbc.w	r5, r3, fp
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	00eb      	lsls	r3, r5, #3
 80052ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ce:	00e2      	lsls	r2, r4, #3
 80052d0:	4614      	mov	r4, r2
 80052d2:	461d      	mov	r5, r3
 80052d4:	4643      	mov	r3, r8
 80052d6:	18e3      	adds	r3, r4, r3
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	464b      	mov	r3, r9
 80052dc:	eb45 0303 	adc.w	r3, r5, r3
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ee:	4629      	mov	r1, r5
 80052f0:	028b      	lsls	r3, r1, #10
 80052f2:	4621      	mov	r1, r4
 80052f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f8:	4621      	mov	r1, r4
 80052fa:	028a      	lsls	r2, r1, #10
 80052fc:	4610      	mov	r0, r2
 80052fe:	4619      	mov	r1, r3
 8005300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005302:	2200      	movs	r2, #0
 8005304:	61bb      	str	r3, [r7, #24]
 8005306:	61fa      	str	r2, [r7, #28]
 8005308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800530c:	f7fb fc7c 	bl	8000c08 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4613      	mov	r3, r2
 8005316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_GetSysClockFreq+0x200>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	3301      	adds	r3, #1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800532a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005332:	e002      	b.n	800533a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetSysClockFreq+0x204>)
 8005336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800533c:	4618      	mov	r0, r3
 800533e:	3750      	adds	r7, #80	; 0x50
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000024 	.word	0x20000024

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005370:	f7ff fff0 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a9b      	lsrs	r3, r3, #10
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40023800 	.word	0x40023800
 8005390:	0800ac6c 	.word	0x0800ac6c

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005398:	f7ff ffdc 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0b5b      	lsrs	r3, r3, #13
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	0800ac6c 	.word	0x0800ac6c

080053bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07b      	b.n	80054c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d108      	bne.n	80053e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053de:	d009      	beq.n	80053f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
 80053e6:	e005      	b.n	80053f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fe f896 	bl	8003540 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	ea42 0103 	orr.w	r1, r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	f003 0104 	and.w	r1, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	f003 0210 	and.w	r2, r3, #16
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e03f      	b.n	8005560 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fe f86b 	bl	80035d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2224      	movs	r2, #36	; 0x24
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005510:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fdde 	bl	80060d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005536:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005546:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	; 0x28
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b20      	cmp	r3, #32
 8005586:	d17c      	bne.n	8005682 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_UART_Transmit+0x2c>
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e075      	b.n	8005684 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Transmit+0x3e>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e06e      	b.n	8005684 <HAL_UART_Transmit+0x11c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2221      	movs	r2, #33	; 0x21
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055bc:	f7fe fac0 	bl	8003b40 <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d6:	d108      	bne.n	80055ea <HAL_UART_Transmit+0x82>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	e003      	b.n	80055f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055fa:	e02a      	b.n	8005652 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb1e 	bl	8005c48 <UART_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e036      	b.n	8005684 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800562a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	3302      	adds	r3, #2
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e007      	b.n	8005644 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3301      	adds	r3, #1
 8005642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1cf      	bne.n	80055fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2200      	movs	r2, #0
 8005664:	2140      	movs	r1, #64	; 0x40
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 faee 	bl	8005c48 <UART_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e006      	b.n	8005684 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e000      	b.n	8005684 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d11d      	bne.n	80056e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_UART_Receive_IT+0x26>
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e016      	b.n	80056e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_UART_Receive_IT+0x38>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e00f      	b.n	80056e4 <HAL_UART_Receive_IT+0x58>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	461a      	mov	r2, r3
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fb23 	bl	8005d24 <UART_Start_Receive_IT>
 80056de:	4603      	mov	r3, r0
 80056e0:	e000      	b.n	80056e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056e2:	2302      	movs	r3, #2
  }
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b0ba      	sub	sp, #232	; 0xe8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800572a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10f      	bne.n	8005752 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <HAL_UART_IRQHandler+0x66>
 800573e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fc07 	bl	8005f5e <UART_Receive_IT>
      return;
 8005750:	e256      	b.n	8005c00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80de 	beq.w	8005918 <HAL_UART_IRQHandler+0x22c>
 800575c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80d1 	beq.w	8005918 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_UART_IRQHandler+0xae>
 8005782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f043 0201 	orr.w	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0304 	and.w	r3, r3, #4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_UART_IRQHandler+0xd2>
 80057a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f043 0202 	orr.w	r2, r3, #2
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_UART_IRQHandler+0xf6>
 80057ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f043 0204 	orr.w	r2, r3, #4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_UART_IRQHandler+0x126>
 80057ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d105      	bne.n	8005806 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f043 0208 	orr.w	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 81ed 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <HAL_UART_IRQHandler+0x14e>
 8005828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582c:	f003 0320 	and.w	r3, r3, #32
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fb92 	bl	8005f5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d103      	bne.n	8005866 <HAL_UART_IRQHandler+0x17a>
 800585e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005862:	2b00      	cmp	r3, #0
 8005864:	d04f      	beq.n	8005906 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa9a 	bl	8005da0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d141      	bne.n	80058fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3314      	adds	r3, #20
 80058a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1d9      	bne.n	800587a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d013      	beq.n	80058f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	4a7d      	ldr	r2, [pc, #500]	; (8005ac8 <HAL_UART_IRQHandler+0x3dc>)
 80058d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fae1 	bl	8003ea2 <HAL_DMA_Abort_IT>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058f0:	4610      	mov	r0, r2
 80058f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f4:	e00e      	b.n	8005914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f990 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	e00a      	b.n	8005914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f98c 	bl	8005c1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e006      	b.n	8005914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f988 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005912:	e170      	b.n	8005bf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	bf00      	nop
    return;
 8005916:	e16e      	b.n	8005bf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	2b01      	cmp	r3, #1
 800591e:	f040 814a 	bne.w	8005bb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8143 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 813c 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	f040 80b4 	bne.w	8005acc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005970:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8140 	beq.w	8005bfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800597e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005982:	429a      	cmp	r2, r3
 8005984:	f080 8139 	bcs.w	8005bfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800598e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599a:	f000 8088 	beq.w	8005aae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1d9      	bne.n	800599e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e1      	bne.n	80059ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a90:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e3      	bne.n	8005a6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe f98a 	bl	8003dc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8b6 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ac4:	e099      	b.n	8005bfa <HAL_UART_IRQHandler+0x50e>
 8005ac6:	bf00      	nop
 8005ac8:	08005e67 	.word	0x08005e67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 808b 	beq.w	8005bfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8086 	beq.w	8005bfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b16:	647a      	str	r2, [r7, #68]	; 0x44
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e3      	bne.n	8005af2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3314      	adds	r3, #20
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	623b      	str	r3, [r7, #32]
   return(result);
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b4e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e3      	bne.n	8005b2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b94:	61fa      	str	r2, [r7, #28]
 8005b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	69b9      	ldr	r1, [r7, #24]
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	e841 2300 	strex	r3, r2, [r1]
 8005ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1e3      	bne.n	8005b70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f83e 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bb4:	e023      	b.n	8005bfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x4ea>
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f95d 	bl	8005e8e <UART_Transmit_IT>
    return;
 8005bd4:	e014      	b.n	8005c00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <HAL_UART_IRQHandler+0x514>
 8005be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f99d 	bl	8005f2e <UART_EndTransmit_IT>
    return;
 8005bf4:	e004      	b.n	8005c00 <HAL_UART_IRQHandler+0x514>
    return;
 8005bf6:	bf00      	nop
 8005bf8:	e002      	b.n	8005c00 <HAL_UART_IRQHandler+0x514>
      return;
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <HAL_UART_IRQHandler+0x514>
      return;
 8005bfe:	bf00      	nop
  }
}
 8005c00:	37e8      	adds	r7, #232	; 0xe8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop

08005c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b090      	sub	sp, #64	; 0x40
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c58:	e050      	b.n	8005cfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d04c      	beq.n	8005cfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c68:	f7fd ff6a 	bl	8003b40 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d241      	bcs.n	8005cfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	330c      	adds	r3, #12
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	330c      	adds	r3, #12
 8005c96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c98:	637a      	str	r2, [r7, #52]	; 0x34
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e5      	bne.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3314      	adds	r3, #20
 8005cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ccc:	623a      	str	r2, [r7, #32]
 8005cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e00f      	b.n	8005d1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4013      	ands	r3, r2
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d09f      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3740      	adds	r7, #64	; 0x40
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	88fa      	ldrh	r2, [r7, #6]
 8005d42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2222      	movs	r2, #34	; 0x22
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0220 	orr.w	r2, r2, #32
 8005d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b095      	sub	sp, #84	; 0x54
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dc8:	643a      	str	r2, [r7, #64]	; 0x40
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3314      	adds	r3, #20
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d119      	bne.n	8005e4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	61ba      	str	r2, [r7, #24]
 8005e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e5a:	bf00      	nop
 8005e5c:	3754      	adds	r7, #84	; 0x54
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fecb 	bl	8005c1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b21      	cmp	r3, #33	; 0x21
 8005ea0:	d13e      	bne.n	8005f20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	d114      	bne.n	8005ed6 <UART_Transmit_IT+0x48>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d110      	bne.n	8005ed6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	1c9a      	adds	r2, r3, #2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]
 8005ed4:	e008      	b.n	8005ee8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6211      	str	r1, [r2, #32]
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e000      	b.n	8005f22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fe5a 	bl	8005c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b08c      	sub	sp, #48	; 0x30
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b22      	cmp	r3, #34	; 0x22
 8005f70:	f040 80ab 	bne.w	80060ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d117      	bne.n	8005fae <UART_Receive_IT+0x50>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d113      	bne.n	8005fae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	1c9a      	adds	r2, r3, #2
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	; 0x28
 8005fac:	e026      	b.n	8005ffc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc0:	d007      	beq.n	8005fd2 <UART_Receive_IT+0x74>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <UART_Receive_IT+0x82>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e008      	b.n	8005ff2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29b      	uxth	r3, r3
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	4619      	mov	r1, r3
 800600a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800600c:	2b00      	cmp	r3, #0
 800600e:	d15a      	bne.n	80060c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0220 	bic.w	r2, r2, #32
 800601e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800602e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	2b01      	cmp	r3, #1
 800604e:	d135      	bne.n	80060bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	613b      	str	r3, [r7, #16]
   return(result);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006076:	623a      	str	r2, [r7, #32]
 8006078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	69f9      	ldr	r1, [r7, #28]
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	61bb      	str	r3, [r7, #24]
   return(result);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b10      	cmp	r3, #16
 8006096:	d10a      	bne.n	80060ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fdbb 	bl	8005c30 <HAL_UARTEx_RxEventCallback>
 80060ba:	e002      	b.n	80060c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fd fb75 	bl	80037ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e002      	b.n	80060cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	e000      	b.n	80060cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3730      	adds	r7, #48	; 0x30
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d8:	b0c0      	sub	sp, #256	; 0x100
 80060da:	af00      	add	r7, sp, #0
 80060dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	68d9      	ldr	r1, [r3, #12]
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	ea40 0301 	orr.w	r3, r0, r1
 80060fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	431a      	orrs	r2, r3
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	431a      	orrs	r2, r3
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800612c:	f021 010c 	bic.w	r1, r1, #12
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800613a:	430b      	orrs	r3, r1
 800613c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	6999      	ldr	r1, [r3, #24]
 8006150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	ea40 0301 	orr.w	r3, r0, r1
 800615a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b8f      	ldr	r3, [pc, #572]	; (80063a0 <UART_SetConfig+0x2cc>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d005      	beq.n	8006174 <UART_SetConfig+0xa0>
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <UART_SetConfig+0x2d0>)
 8006170:	429a      	cmp	r2, r3
 8006172:	d104      	bne.n	800617e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006174:	f7ff f90e 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006178:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800617c:	e003      	b.n	8006186 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800617e:	f7ff f8f5 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8006182:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	f040 810c 	bne.w	80063ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800619e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061a6:	4622      	mov	r2, r4
 80061a8:	462b      	mov	r3, r5
 80061aa:	1891      	adds	r1, r2, r2
 80061ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ae:	415b      	adcs	r3, r3
 80061b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061b6:	4621      	mov	r1, r4
 80061b8:	eb12 0801 	adds.w	r8, r2, r1
 80061bc:	4629      	mov	r1, r5
 80061be:	eb43 0901 	adc.w	r9, r3, r1
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061d6:	4690      	mov	r8, r2
 80061d8:	4699      	mov	r9, r3
 80061da:	4623      	mov	r3, r4
 80061dc:	eb18 0303 	adds.w	r3, r8, r3
 80061e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061e4:	462b      	mov	r3, r5
 80061e6:	eb49 0303 	adc.w	r3, r9, r3
 80061ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006202:	460b      	mov	r3, r1
 8006204:	18db      	adds	r3, r3, r3
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
 8006208:	4613      	mov	r3, r2
 800620a:	eb42 0303 	adc.w	r3, r2, r3
 800620e:	657b      	str	r3, [r7, #84]	; 0x54
 8006210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006214:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006218:	f7fa fcf6 	bl	8000c08 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4b61      	ldr	r3, [pc, #388]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006222:	fba3 2302 	umull	r2, r3, r3, r2
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	011c      	lsls	r4, r3, #4
 800622a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622e:	2200      	movs	r2, #0
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006234:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006238:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800623c:	4642      	mov	r2, r8
 800623e:	464b      	mov	r3, r9
 8006240:	1891      	adds	r1, r2, r2
 8006242:	64b9      	str	r1, [r7, #72]	; 0x48
 8006244:	415b      	adcs	r3, r3
 8006246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006248:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800624c:	4641      	mov	r1, r8
 800624e:	eb12 0a01 	adds.w	sl, r2, r1
 8006252:	4649      	mov	r1, r9
 8006254:	eb43 0b01 	adc.w	fp, r3, r1
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006264:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800626c:	4692      	mov	sl, r2
 800626e:	469b      	mov	fp, r3
 8006270:	4643      	mov	r3, r8
 8006272:	eb1a 0303 	adds.w	r3, sl, r3
 8006276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627a:	464b      	mov	r3, r9
 800627c:	eb4b 0303 	adc.w	r3, fp, r3
 8006280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006290:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006294:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006298:	460b      	mov	r3, r1
 800629a:	18db      	adds	r3, r3, r3
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	4613      	mov	r3, r2
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
 80062a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ae:	f7fa fcab 	bl	8000c08 <__aeabi_uldivmod>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4611      	mov	r1, r2
 80062b8:	4b3b      	ldr	r3, [pc, #236]	; (80063a8 <UART_SetConfig+0x2d4>)
 80062ba:	fba3 2301 	umull	r2, r3, r3, r1
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2264      	movs	r2, #100	; 0x64
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	1acb      	subs	r3, r1, r3
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ce:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <UART_SetConfig+0x2d4>)
 80062d0:	fba3 2302 	umull	r2, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062dc:	441c      	add	r4, r3
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80062f8:	415b      	adcs	r3, r3
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6339      	str	r1, [r7, #48]	; 0x30
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800634c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006354:	460b      	mov	r3, r1
 8006356:	18db      	adds	r3, r3, r3
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 800635a:	4613      	mov	r3, r2
 800635c:	eb42 0303 	adc.w	r3, r2, r3
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006362:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006366:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800636a:	f7fa fc4d 	bl	8000c08 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006374:	fba3 1302 	umull	r1, r3, r3, r2
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	2164      	movs	r1, #100	; 0x64
 800637c:	fb01 f303 	mul.w	r3, r1, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	3332      	adds	r3, #50	; 0x32
 8006386:	4a08      	ldr	r2, [pc, #32]	; (80063a8 <UART_SetConfig+0x2d4>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	f003 0207 	and.w	r2, r3, #7
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4422      	add	r2, r4
 800639a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800639c:	e106      	b.n	80065ac <UART_SetConfig+0x4d8>
 800639e:	bf00      	nop
 80063a0:	40011000 	.word	0x40011000
 80063a4:	40011400 	.word	0x40011400
 80063a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063be:	4642      	mov	r2, r8
 80063c0:	464b      	mov	r3, r9
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	6239      	str	r1, [r7, #32]
 80063c6:	415b      	adcs	r3, r3
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
 80063ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ce:	4641      	mov	r1, r8
 80063d0:	1854      	adds	r4, r2, r1
 80063d2:	4649      	mov	r1, r9
 80063d4:	eb43 0501 	adc.w	r5, r3, r1
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	00eb      	lsls	r3, r5, #3
 80063e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063e6:	00e2      	lsls	r2, r4, #3
 80063e8:	4614      	mov	r4, r2
 80063ea:	461d      	mov	r5, r3
 80063ec:	4643      	mov	r3, r8
 80063ee:	18e3      	adds	r3, r4, r3
 80063f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063f4:	464b      	mov	r3, r9
 80063f6:	eb45 0303 	adc.w	r3, r5, r3
 80063fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800641a:	4629      	mov	r1, r5
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	4621      	mov	r1, r4
 8006420:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006424:	4621      	mov	r1, r4
 8006426:	008a      	lsls	r2, r1, #2
 8006428:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800642c:	f7fa fbec 	bl	8000c08 <__aeabi_uldivmod>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4b60      	ldr	r3, [pc, #384]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006436:	fba3 2302 	umull	r2, r3, r3, r2
 800643a:	095b      	lsrs	r3, r3, #5
 800643c:	011c      	lsls	r4, r3, #4
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006448:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800644c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006450:	4642      	mov	r2, r8
 8006452:	464b      	mov	r3, r9
 8006454:	1891      	adds	r1, r2, r2
 8006456:	61b9      	str	r1, [r7, #24]
 8006458:	415b      	adcs	r3, r3
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006460:	4641      	mov	r1, r8
 8006462:	1851      	adds	r1, r2, r1
 8006464:	6139      	str	r1, [r7, #16]
 8006466:	4649      	mov	r1, r9
 8006468:	414b      	adcs	r3, r1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006478:	4659      	mov	r1, fp
 800647a:	00cb      	lsls	r3, r1, #3
 800647c:	4651      	mov	r1, sl
 800647e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006482:	4651      	mov	r1, sl
 8006484:	00ca      	lsls	r2, r1, #3
 8006486:	4610      	mov	r0, r2
 8006488:	4619      	mov	r1, r3
 800648a:	4603      	mov	r3, r0
 800648c:	4642      	mov	r2, r8
 800648e:	189b      	adds	r3, r3, r2
 8006490:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006494:	464b      	mov	r3, r9
 8006496:	460a      	mov	r2, r1
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80064aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064b8:	4649      	mov	r1, r9
 80064ba:	008b      	lsls	r3, r1, #2
 80064bc:	4641      	mov	r1, r8
 80064be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c2:	4641      	mov	r1, r8
 80064c4:	008a      	lsls	r2, r1, #2
 80064c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064ca:	f7fa fb9d 	bl	8000c08 <__aeabi_uldivmod>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	4b38      	ldr	r3, [pc, #224]	; (80065b8 <UART_SetConfig+0x4e4>)
 80064d6:	fba3 2301 	umull	r2, r3, r3, r1
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2264      	movs	r2, #100	; 0x64
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	1acb      	subs	r3, r1, r3
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a33      	ldr	r2, [pc, #204]	; (80065b8 <UART_SetConfig+0x4e4>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f4:	441c      	add	r4, r3
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	673b      	str	r3, [r7, #112]	; 0x70
 80064fe:	677a      	str	r2, [r7, #116]	; 0x74
 8006500:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	1891      	adds	r1, r2, r2
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	415b      	adcs	r3, r3
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006514:	4641      	mov	r1, r8
 8006516:	1851      	adds	r1, r2, r1
 8006518:	6039      	str	r1, [r7, #0]
 800651a:	4649      	mov	r1, r9
 800651c:	414b      	adcs	r3, r1
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800652c:	4659      	mov	r1, fp
 800652e:	00cb      	lsls	r3, r1, #3
 8006530:	4651      	mov	r1, sl
 8006532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006536:	4651      	mov	r1, sl
 8006538:	00ca      	lsls	r2, r1, #3
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	4603      	mov	r3, r0
 8006540:	4642      	mov	r2, r8
 8006542:	189b      	adds	r3, r3, r2
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
 8006546:	464b      	mov	r3, r9
 8006548:	460a      	mov	r2, r1
 800654a:	eb42 0303 	adc.w	r3, r2, r3
 800654e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	663b      	str	r3, [r7, #96]	; 0x60
 800655a:	667a      	str	r2, [r7, #100]	; 0x64
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006568:	4649      	mov	r1, r9
 800656a:	008b      	lsls	r3, r1, #2
 800656c:	4641      	mov	r1, r8
 800656e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006572:	4641      	mov	r1, r8
 8006574:	008a      	lsls	r2, r1, #2
 8006576:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800657a:	f7fa fb45 	bl	8000c08 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a08      	ldr	r2, [pc, #32]	; (80065b8 <UART_SetConfig+0x4e4>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4422      	add	r2, r4
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065b8:	51eb851f 	.word	0x51eb851f

080065bc <malloc>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <malloc+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f000 b82b 	b.w	800661c <_malloc_r>
 80065c6:	bf00      	nop
 80065c8:	200001f4 	.word	0x200001f4

080065cc <free>:
 80065cc:	4b02      	ldr	r3, [pc, #8]	; (80065d8 <free+0xc>)
 80065ce:	4601      	mov	r1, r0
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f002 bc0b 	b.w	8008dec <_free_r>
 80065d6:	bf00      	nop
 80065d8:	200001f4 	.word	0x200001f4

080065dc <sbrk_aligned>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4e0e      	ldr	r6, [pc, #56]	; (8006618 <sbrk_aligned+0x3c>)
 80065e0:	460c      	mov	r4, r1
 80065e2:	6831      	ldr	r1, [r6, #0]
 80065e4:	4605      	mov	r5, r0
 80065e6:	b911      	cbnz	r1, 80065ee <sbrk_aligned+0x12>
 80065e8:	f001 fd22 	bl	8008030 <_sbrk_r>
 80065ec:	6030      	str	r0, [r6, #0]
 80065ee:	4621      	mov	r1, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f001 fd1d 	bl	8008030 <_sbrk_r>
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	d00a      	beq.n	8006610 <sbrk_aligned+0x34>
 80065fa:	1cc4      	adds	r4, r0, #3
 80065fc:	f024 0403 	bic.w	r4, r4, #3
 8006600:	42a0      	cmp	r0, r4
 8006602:	d007      	beq.n	8006614 <sbrk_aligned+0x38>
 8006604:	1a21      	subs	r1, r4, r0
 8006606:	4628      	mov	r0, r5
 8006608:	f001 fd12 	bl	8008030 <_sbrk_r>
 800660c:	3001      	adds	r0, #1
 800660e:	d101      	bne.n	8006614 <sbrk_aligned+0x38>
 8006610:	f04f 34ff 	mov.w	r4, #4294967295
 8006614:	4620      	mov	r0, r4
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	200013b0 	.word	0x200013b0

0800661c <_malloc_r>:
 800661c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006620:	1ccd      	adds	r5, r1, #3
 8006622:	f025 0503 	bic.w	r5, r5, #3
 8006626:	3508      	adds	r5, #8
 8006628:	2d0c      	cmp	r5, #12
 800662a:	bf38      	it	cc
 800662c:	250c      	movcc	r5, #12
 800662e:	2d00      	cmp	r5, #0
 8006630:	4607      	mov	r7, r0
 8006632:	db01      	blt.n	8006638 <_malloc_r+0x1c>
 8006634:	42a9      	cmp	r1, r5
 8006636:	d905      	bls.n	8006644 <_malloc_r+0x28>
 8006638:	230c      	movs	r3, #12
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	2600      	movs	r6, #0
 800663e:	4630      	mov	r0, r6
 8006640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006644:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006718 <_malloc_r+0xfc>
 8006648:	f000 f868 	bl	800671c <__malloc_lock>
 800664c:	f8d8 3000 	ldr.w	r3, [r8]
 8006650:	461c      	mov	r4, r3
 8006652:	bb5c      	cbnz	r4, 80066ac <_malloc_r+0x90>
 8006654:	4629      	mov	r1, r5
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ffc0 	bl	80065dc <sbrk_aligned>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	4604      	mov	r4, r0
 8006660:	d155      	bne.n	800670e <_malloc_r+0xf2>
 8006662:	f8d8 4000 	ldr.w	r4, [r8]
 8006666:	4626      	mov	r6, r4
 8006668:	2e00      	cmp	r6, #0
 800666a:	d145      	bne.n	80066f8 <_malloc_r+0xdc>
 800666c:	2c00      	cmp	r4, #0
 800666e:	d048      	beq.n	8006702 <_malloc_r+0xe6>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	eb04 0903 	add.w	r9, r4, r3
 800667a:	f001 fcd9 	bl	8008030 <_sbrk_r>
 800667e:	4581      	cmp	r9, r0
 8006680:	d13f      	bne.n	8006702 <_malloc_r+0xe6>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	1a6d      	subs	r5, r5, r1
 8006686:	4629      	mov	r1, r5
 8006688:	4638      	mov	r0, r7
 800668a:	f7ff ffa7 	bl	80065dc <sbrk_aligned>
 800668e:	3001      	adds	r0, #1
 8006690:	d037      	beq.n	8006702 <_malloc_r+0xe6>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	442b      	add	r3, r5
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	f8d8 3000 	ldr.w	r3, [r8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d038      	beq.n	8006712 <_malloc_r+0xf6>
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	42a2      	cmp	r2, r4
 80066a4:	d12b      	bne.n	80066fe <_malloc_r+0xe2>
 80066a6:	2200      	movs	r2, #0
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	e00f      	b.n	80066cc <_malloc_r+0xb0>
 80066ac:	6822      	ldr	r2, [r4, #0]
 80066ae:	1b52      	subs	r2, r2, r5
 80066b0:	d41f      	bmi.n	80066f2 <_malloc_r+0xd6>
 80066b2:	2a0b      	cmp	r2, #11
 80066b4:	d917      	bls.n	80066e6 <_malloc_r+0xca>
 80066b6:	1961      	adds	r1, r4, r5
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	6025      	str	r5, [r4, #0]
 80066bc:	bf18      	it	ne
 80066be:	6059      	strne	r1, [r3, #4]
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	bf08      	it	eq
 80066c4:	f8c8 1000 	streq.w	r1, [r8]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 f829 	bl	8006728 <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0ae      	beq.n	800663e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7ab      	b.n	800663e <_malloc_r+0x22>
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	6862      	ldr	r2, [r4, #4]
 80066ea:	d1dd      	bne.n	80066a8 <_malloc_r+0x8c>
 80066ec:	f8c8 2000 	str.w	r2, [r8]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xb0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7ac      	b.n	8006652 <_malloc_r+0x36>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b4      	b.n	8006668 <_malloc_r+0x4c>
 80066fe:	4613      	mov	r3, r2
 8006700:	e7cc      	b.n	800669c <_malloc_r+0x80>
 8006702:	230c      	movs	r3, #12
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4638      	mov	r0, r7
 8006708:	f000 f80e 	bl	8006728 <__malloc_unlock>
 800670c:	e797      	b.n	800663e <_malloc_r+0x22>
 800670e:	6025      	str	r5, [r4, #0]
 8006710:	e7dc      	b.n	80066cc <_malloc_r+0xb0>
 8006712:	605b      	str	r3, [r3, #4]
 8006714:	deff      	udf	#255	; 0xff
 8006716:	bf00      	nop
 8006718:	200013ac 	.word	0x200013ac

0800671c <__malloc_lock>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__malloc_lock+0x8>)
 800671e:	f001 bcd3 	b.w	80080c8 <__retarget_lock_acquire_recursive>
 8006722:	bf00      	nop
 8006724:	200014f4 	.word	0x200014f4

08006728 <__malloc_unlock>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__malloc_unlock+0x8>)
 800672a:	f001 bcce 	b.w	80080ca <__retarget_lock_release_recursive>
 800672e:	bf00      	nop
 8006730:	200014f4 	.word	0x200014f4

08006734 <realloc>:
 8006734:	4b02      	ldr	r3, [pc, #8]	; (8006740 <realloc+0xc>)
 8006736:	460a      	mov	r2, r1
 8006738:	4601      	mov	r1, r0
 800673a:	6818      	ldr	r0, [r3, #0]
 800673c:	f000 b802 	b.w	8006744 <_realloc_r>
 8006740:	200001f4 	.word	0x200001f4

08006744 <_realloc_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4680      	mov	r8, r0
 800674a:	4614      	mov	r4, r2
 800674c:	460e      	mov	r6, r1
 800674e:	b921      	cbnz	r1, 800675a <_realloc_r+0x16>
 8006750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4611      	mov	r1, r2
 8006756:	f7ff bf61 	b.w	800661c <_malloc_r>
 800675a:	b92a      	cbnz	r2, 8006768 <_realloc_r+0x24>
 800675c:	f002 fb46 	bl	8008dec <_free_r>
 8006760:	4625      	mov	r5, r4
 8006762:	4628      	mov	r0, r5
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	f003 fba3 	bl	8009eb2 <_malloc_usable_size_r>
 800676c:	4284      	cmp	r4, r0
 800676e:	4607      	mov	r7, r0
 8006770:	d802      	bhi.n	8006778 <_realloc_r+0x34>
 8006772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006776:	d812      	bhi.n	800679e <_realloc_r+0x5a>
 8006778:	4621      	mov	r1, r4
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff ff4e 	bl	800661c <_malloc_r>
 8006780:	4605      	mov	r5, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ed      	beq.n	8006762 <_realloc_r+0x1e>
 8006786:	42bc      	cmp	r4, r7
 8006788:	4622      	mov	r2, r4
 800678a:	4631      	mov	r1, r6
 800678c:	bf28      	it	cs
 800678e:	463a      	movcs	r2, r7
 8006790:	f001 fc9c 	bl	80080cc <memcpy>
 8006794:	4631      	mov	r1, r6
 8006796:	4640      	mov	r0, r8
 8006798:	f002 fb28 	bl	8008dec <_free_r>
 800679c:	e7e1      	b.n	8006762 <_realloc_r+0x1e>
 800679e:	4635      	mov	r5, r6
 80067a0:	e7df      	b.n	8006762 <_realloc_r+0x1e>

080067a2 <sulp>:
 80067a2:	b570      	push	{r4, r5, r6, lr}
 80067a4:	4604      	mov	r4, r0
 80067a6:	460d      	mov	r5, r1
 80067a8:	ec45 4b10 	vmov	d0, r4, r5
 80067ac:	4616      	mov	r6, r2
 80067ae:	f003 fa3f 	bl	8009c30 <__ulp>
 80067b2:	ec51 0b10 	vmov	r0, r1, d0
 80067b6:	b17e      	cbz	r6, 80067d8 <sulp+0x36>
 80067b8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	dd09      	ble.n	80067d8 <sulp+0x36>
 80067c4:	051b      	lsls	r3, r3, #20
 80067c6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067ca:	2400      	movs	r4, #0
 80067cc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	f7f9 ff20 	bl	8000618 <__aeabi_dmul>
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
 80067da:	0000      	movs	r0, r0
 80067dc:	0000      	movs	r0, r0
	...

080067e0 <_strtod_l>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	ed2d 8b02 	vpush	{d8}
 80067e8:	b09b      	sub	sp, #108	; 0x6c
 80067ea:	4604      	mov	r4, r0
 80067ec:	9213      	str	r2, [sp, #76]	; 0x4c
 80067ee:	2200      	movs	r2, #0
 80067f0:	9216      	str	r2, [sp, #88]	; 0x58
 80067f2:	460d      	mov	r5, r1
 80067f4:	f04f 0800 	mov.w	r8, #0
 80067f8:	f04f 0900 	mov.w	r9, #0
 80067fc:	460a      	mov	r2, r1
 80067fe:	9215      	str	r2, [sp, #84]	; 0x54
 8006800:	7811      	ldrb	r1, [r2, #0]
 8006802:	292b      	cmp	r1, #43	; 0x2b
 8006804:	d04c      	beq.n	80068a0 <_strtod_l+0xc0>
 8006806:	d83a      	bhi.n	800687e <_strtod_l+0x9e>
 8006808:	290d      	cmp	r1, #13
 800680a:	d834      	bhi.n	8006876 <_strtod_l+0x96>
 800680c:	2908      	cmp	r1, #8
 800680e:	d834      	bhi.n	800687a <_strtod_l+0x9a>
 8006810:	2900      	cmp	r1, #0
 8006812:	d03d      	beq.n	8006890 <_strtod_l+0xb0>
 8006814:	2200      	movs	r2, #0
 8006816:	920a      	str	r2, [sp, #40]	; 0x28
 8006818:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800681a:	7832      	ldrb	r2, [r6, #0]
 800681c:	2a30      	cmp	r2, #48	; 0x30
 800681e:	f040 80b4 	bne.w	800698a <_strtod_l+0x1aa>
 8006822:	7872      	ldrb	r2, [r6, #1]
 8006824:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006828:	2a58      	cmp	r2, #88	; 0x58
 800682a:	d170      	bne.n	800690e <_strtod_l+0x12e>
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	ab16      	add	r3, sp, #88	; 0x58
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	4a8e      	ldr	r2, [pc, #568]	; (8006a70 <_strtod_l+0x290>)
 8006838:	ab17      	add	r3, sp, #92	; 0x5c
 800683a:	a915      	add	r1, sp, #84	; 0x54
 800683c:	4620      	mov	r0, r4
 800683e:	f002 fb89 	bl	8008f54 <__gethex>
 8006842:	f010 070f 	ands.w	r7, r0, #15
 8006846:	4605      	mov	r5, r0
 8006848:	d005      	beq.n	8006856 <_strtod_l+0x76>
 800684a:	2f06      	cmp	r7, #6
 800684c:	d12a      	bne.n	80068a4 <_strtod_l+0xc4>
 800684e:	3601      	adds	r6, #1
 8006850:	2300      	movs	r3, #0
 8006852:	9615      	str	r6, [sp, #84]	; 0x54
 8006854:	930a      	str	r3, [sp, #40]	; 0x28
 8006856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 857f 	bne.w	800735c <_strtod_l+0xb7c>
 800685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006860:	b1db      	cbz	r3, 800689a <_strtod_l+0xba>
 8006862:	4642      	mov	r2, r8
 8006864:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006868:	ec43 2b10 	vmov	d0, r2, r3
 800686c:	b01b      	add	sp, #108	; 0x6c
 800686e:	ecbd 8b02 	vpop	{d8}
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	2920      	cmp	r1, #32
 8006878:	d1cc      	bne.n	8006814 <_strtod_l+0x34>
 800687a:	3201      	adds	r2, #1
 800687c:	e7bf      	b.n	80067fe <_strtod_l+0x1e>
 800687e:	292d      	cmp	r1, #45	; 0x2d
 8006880:	d1c8      	bne.n	8006814 <_strtod_l+0x34>
 8006882:	2101      	movs	r1, #1
 8006884:	910a      	str	r1, [sp, #40]	; 0x28
 8006886:	1c51      	adds	r1, r2, #1
 8006888:	9115      	str	r1, [sp, #84]	; 0x54
 800688a:	7852      	ldrb	r2, [r2, #1]
 800688c:	2a00      	cmp	r2, #0
 800688e:	d1c3      	bne.n	8006818 <_strtod_l+0x38>
 8006890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006892:	9515      	str	r5, [sp, #84]	; 0x54
 8006894:	2b00      	cmp	r3, #0
 8006896:	f040 855f 	bne.w	8007358 <_strtod_l+0xb78>
 800689a:	4642      	mov	r2, r8
 800689c:	464b      	mov	r3, r9
 800689e:	e7e3      	b.n	8006868 <_strtod_l+0x88>
 80068a0:	2100      	movs	r1, #0
 80068a2:	e7ef      	b.n	8006884 <_strtod_l+0xa4>
 80068a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068a6:	b13a      	cbz	r2, 80068b8 <_strtod_l+0xd8>
 80068a8:	2135      	movs	r1, #53	; 0x35
 80068aa:	a818      	add	r0, sp, #96	; 0x60
 80068ac:	f003 fabd 	bl	8009e2a <__copybits>
 80068b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80068b2:	4620      	mov	r0, r4
 80068b4:	f002 fe90 	bl	80095d8 <_Bfree>
 80068b8:	3f01      	subs	r7, #1
 80068ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068bc:	2f04      	cmp	r7, #4
 80068be:	d806      	bhi.n	80068ce <_strtod_l+0xee>
 80068c0:	e8df f007 	tbb	[pc, r7]
 80068c4:	201d0314 	.word	0x201d0314
 80068c8:	14          	.byte	0x14
 80068c9:	00          	.byte	0x00
 80068ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80068ce:	05e9      	lsls	r1, r5, #23
 80068d0:	bf48      	it	mi
 80068d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80068d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068da:	0d1b      	lsrs	r3, r3, #20
 80068dc:	051b      	lsls	r3, r3, #20
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1b9      	bne.n	8006856 <_strtod_l+0x76>
 80068e2:	f001 fbc7 	bl	8008074 <__errno>
 80068e6:	2322      	movs	r3, #34	; 0x22
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	e7b4      	b.n	8006856 <_strtod_l+0x76>
 80068ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80068f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80068fc:	e7e7      	b.n	80068ce <_strtod_l+0xee>
 80068fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006a78 <_strtod_l+0x298>
 8006902:	e7e4      	b.n	80068ce <_strtod_l+0xee>
 8006904:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006908:	f04f 38ff 	mov.w	r8, #4294967295
 800690c:	e7df      	b.n	80068ce <_strtod_l+0xee>
 800690e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	9215      	str	r2, [sp, #84]	; 0x54
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b30      	cmp	r3, #48	; 0x30
 8006918:	d0f9      	beq.n	800690e <_strtod_l+0x12e>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d09b      	beq.n	8006856 <_strtod_l+0x76>
 800691e:	2301      	movs	r3, #1
 8006920:	f04f 0a00 	mov.w	sl, #0
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006928:	930b      	str	r3, [sp, #44]	; 0x2c
 800692a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800692e:	46d3      	mov	fp, sl
 8006930:	220a      	movs	r2, #10
 8006932:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006934:	7806      	ldrb	r6, [r0, #0]
 8006936:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800693a:	b2d9      	uxtb	r1, r3
 800693c:	2909      	cmp	r1, #9
 800693e:	d926      	bls.n	800698e <_strtod_l+0x1ae>
 8006940:	494c      	ldr	r1, [pc, #304]	; (8006a74 <_strtod_l+0x294>)
 8006942:	2201      	movs	r2, #1
 8006944:	f001 fb00 	bl	8007f48 <strncmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	d030      	beq.n	80069ae <_strtod_l+0x1ce>
 800694c:	2000      	movs	r0, #0
 800694e:	4632      	mov	r2, r6
 8006950:	9005      	str	r0, [sp, #20]
 8006952:	465e      	mov	r6, fp
 8006954:	4603      	mov	r3, r0
 8006956:	2a65      	cmp	r2, #101	; 0x65
 8006958:	d001      	beq.n	800695e <_strtod_l+0x17e>
 800695a:	2a45      	cmp	r2, #69	; 0x45
 800695c:	d113      	bne.n	8006986 <_strtod_l+0x1a6>
 800695e:	b91e      	cbnz	r6, 8006968 <_strtod_l+0x188>
 8006960:	9a04      	ldr	r2, [sp, #16]
 8006962:	4302      	orrs	r2, r0
 8006964:	d094      	beq.n	8006890 <_strtod_l+0xb0>
 8006966:	2600      	movs	r6, #0
 8006968:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800696a:	1c6a      	adds	r2, r5, #1
 800696c:	9215      	str	r2, [sp, #84]	; 0x54
 800696e:	786a      	ldrb	r2, [r5, #1]
 8006970:	2a2b      	cmp	r2, #43	; 0x2b
 8006972:	d074      	beq.n	8006a5e <_strtod_l+0x27e>
 8006974:	2a2d      	cmp	r2, #45	; 0x2d
 8006976:	d078      	beq.n	8006a6a <_strtod_l+0x28a>
 8006978:	f04f 0c00 	mov.w	ip, #0
 800697c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006980:	2909      	cmp	r1, #9
 8006982:	d97f      	bls.n	8006a84 <_strtod_l+0x2a4>
 8006984:	9515      	str	r5, [sp, #84]	; 0x54
 8006986:	2700      	movs	r7, #0
 8006988:	e09e      	b.n	8006ac8 <_strtod_l+0x2e8>
 800698a:	2300      	movs	r3, #0
 800698c:	e7c8      	b.n	8006920 <_strtod_l+0x140>
 800698e:	f1bb 0f08 	cmp.w	fp, #8
 8006992:	bfd8      	it	le
 8006994:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006996:	f100 0001 	add.w	r0, r0, #1
 800699a:	bfda      	itte	le
 800699c:	fb02 3301 	mlale	r3, r2, r1, r3
 80069a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80069a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80069a6:	f10b 0b01 	add.w	fp, fp, #1
 80069aa:	9015      	str	r0, [sp, #84]	; 0x54
 80069ac:	e7c1      	b.n	8006932 <_strtod_l+0x152>
 80069ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	9215      	str	r2, [sp, #84]	; 0x54
 80069b4:	785a      	ldrb	r2, [r3, #1]
 80069b6:	f1bb 0f00 	cmp.w	fp, #0
 80069ba:	d037      	beq.n	8006a2c <_strtod_l+0x24c>
 80069bc:	9005      	str	r0, [sp, #20]
 80069be:	465e      	mov	r6, fp
 80069c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	d912      	bls.n	80069ee <_strtod_l+0x20e>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e7c4      	b.n	8006956 <_strtod_l+0x176>
 80069cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	9215      	str	r2, [sp, #84]	; 0x54
 80069d2:	785a      	ldrb	r2, [r3, #1]
 80069d4:	3001      	adds	r0, #1
 80069d6:	2a30      	cmp	r2, #48	; 0x30
 80069d8:	d0f8      	beq.n	80069cc <_strtod_l+0x1ec>
 80069da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80069de:	2b08      	cmp	r3, #8
 80069e0:	f200 84c1 	bhi.w	8007366 <_strtod_l+0xb86>
 80069e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069e6:	9005      	str	r0, [sp, #20]
 80069e8:	2000      	movs	r0, #0
 80069ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ec:	4606      	mov	r6, r0
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	f100 0301 	add.w	r3, r0, #1
 80069f4:	d014      	beq.n	8006a20 <_strtod_l+0x240>
 80069f6:	9905      	ldr	r1, [sp, #20]
 80069f8:	4419      	add	r1, r3
 80069fa:	9105      	str	r1, [sp, #20]
 80069fc:	4633      	mov	r3, r6
 80069fe:	eb00 0c06 	add.w	ip, r0, r6
 8006a02:	210a      	movs	r1, #10
 8006a04:	4563      	cmp	r3, ip
 8006a06:	d113      	bne.n	8006a30 <_strtod_l+0x250>
 8006a08:	1833      	adds	r3, r6, r0
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	f106 0601 	add.w	r6, r6, #1
 8006a10:	4406      	add	r6, r0
 8006a12:	dc1a      	bgt.n	8006a4a <_strtod_l+0x26a>
 8006a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a16:	230a      	movs	r3, #10
 8006a18:	fb03 2301 	mla	r3, r3, r1, r2
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	2300      	movs	r3, #0
 8006a20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a22:	1c51      	adds	r1, r2, #1
 8006a24:	9115      	str	r1, [sp, #84]	; 0x54
 8006a26:	7852      	ldrb	r2, [r2, #1]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	e7c9      	b.n	80069c0 <_strtod_l+0x1e0>
 8006a2c:	4658      	mov	r0, fp
 8006a2e:	e7d2      	b.n	80069d6 <_strtod_l+0x1f6>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	f103 0301 	add.w	r3, r3, #1
 8006a36:	dc03      	bgt.n	8006a40 <_strtod_l+0x260>
 8006a38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a3a:	434f      	muls	r7, r1
 8006a3c:	9709      	str	r7, [sp, #36]	; 0x24
 8006a3e:	e7e1      	b.n	8006a04 <_strtod_l+0x224>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	bfd8      	it	le
 8006a44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006a48:	e7dc      	b.n	8006a04 <_strtod_l+0x224>
 8006a4a:	2e10      	cmp	r6, #16
 8006a4c:	bfdc      	itt	le
 8006a4e:	230a      	movle	r3, #10
 8006a50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006a54:	e7e3      	b.n	8006a1e <_strtod_l+0x23e>
 8006a56:	2300      	movs	r3, #0
 8006a58:	9305      	str	r3, [sp, #20]
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e780      	b.n	8006960 <_strtod_l+0x180>
 8006a5e:	f04f 0c00 	mov.w	ip, #0
 8006a62:	1caa      	adds	r2, r5, #2
 8006a64:	9215      	str	r2, [sp, #84]	; 0x54
 8006a66:	78aa      	ldrb	r2, [r5, #2]
 8006a68:	e788      	b.n	800697c <_strtod_l+0x19c>
 8006a6a:	f04f 0c01 	mov.w	ip, #1
 8006a6e:	e7f8      	b.n	8006a62 <_strtod_l+0x282>
 8006a70:	0800ac78 	.word	0x0800ac78
 8006a74:	0800ac74 	.word	0x0800ac74
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a7e:	1c51      	adds	r1, r2, #1
 8006a80:	9115      	str	r1, [sp, #84]	; 0x54
 8006a82:	7852      	ldrb	r2, [r2, #1]
 8006a84:	2a30      	cmp	r2, #48	; 0x30
 8006a86:	d0f9      	beq.n	8006a7c <_strtod_l+0x29c>
 8006a88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a8c:	2908      	cmp	r1, #8
 8006a8e:	f63f af7a 	bhi.w	8006986 <_strtod_l+0x1a6>
 8006a92:	3a30      	subs	r2, #48	; 0x30
 8006a94:	9208      	str	r2, [sp, #32]
 8006a96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a98:	920c      	str	r2, [sp, #48]	; 0x30
 8006a9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a9c:	1c57      	adds	r7, r2, #1
 8006a9e:	9715      	str	r7, [sp, #84]	; 0x54
 8006aa0:	7852      	ldrb	r2, [r2, #1]
 8006aa2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006aa6:	f1be 0f09 	cmp.w	lr, #9
 8006aaa:	d938      	bls.n	8006b1e <_strtod_l+0x33e>
 8006aac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006aae:	1a7f      	subs	r7, r7, r1
 8006ab0:	2f08      	cmp	r7, #8
 8006ab2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006ab6:	dc03      	bgt.n	8006ac0 <_strtod_l+0x2e0>
 8006ab8:	9908      	ldr	r1, [sp, #32]
 8006aba:	428f      	cmp	r7, r1
 8006abc:	bfa8      	it	ge
 8006abe:	460f      	movge	r7, r1
 8006ac0:	f1bc 0f00 	cmp.w	ip, #0
 8006ac4:	d000      	beq.n	8006ac8 <_strtod_l+0x2e8>
 8006ac6:	427f      	negs	r7, r7
 8006ac8:	2e00      	cmp	r6, #0
 8006aca:	d14f      	bne.n	8006b6c <_strtod_l+0x38c>
 8006acc:	9904      	ldr	r1, [sp, #16]
 8006ace:	4301      	orrs	r1, r0
 8006ad0:	f47f aec1 	bne.w	8006856 <_strtod_l+0x76>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f47f aedb 	bne.w	8006890 <_strtod_l+0xb0>
 8006ada:	2a69      	cmp	r2, #105	; 0x69
 8006adc:	d029      	beq.n	8006b32 <_strtod_l+0x352>
 8006ade:	dc26      	bgt.n	8006b2e <_strtod_l+0x34e>
 8006ae0:	2a49      	cmp	r2, #73	; 0x49
 8006ae2:	d026      	beq.n	8006b32 <_strtod_l+0x352>
 8006ae4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ae6:	f47f aed3 	bne.w	8006890 <_strtod_l+0xb0>
 8006aea:	499b      	ldr	r1, [pc, #620]	; (8006d58 <_strtod_l+0x578>)
 8006aec:	a815      	add	r0, sp, #84	; 0x54
 8006aee:	f002 fc71 	bl	80093d4 <__match>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f43f aecc 	beq.w	8006890 <_strtod_l+0xb0>
 8006af8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b28      	cmp	r3, #40	; 0x28
 8006afe:	d12f      	bne.n	8006b60 <_strtod_l+0x380>
 8006b00:	4996      	ldr	r1, [pc, #600]	; (8006d5c <_strtod_l+0x57c>)
 8006b02:	aa18      	add	r2, sp, #96	; 0x60
 8006b04:	a815      	add	r0, sp, #84	; 0x54
 8006b06:	f002 fc79 	bl	80093fc <__hexnan>
 8006b0a:	2805      	cmp	r0, #5
 8006b0c:	d128      	bne.n	8006b60 <_strtod_l+0x380>
 8006b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006b18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006b1c:	e69b      	b.n	8006856 <_strtod_l+0x76>
 8006b1e:	9f08      	ldr	r7, [sp, #32]
 8006b20:	210a      	movs	r1, #10
 8006b22:	fb01 2107 	mla	r1, r1, r7, r2
 8006b26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006b2a:	9208      	str	r2, [sp, #32]
 8006b2c:	e7b5      	b.n	8006a9a <_strtod_l+0x2ba>
 8006b2e:	2a6e      	cmp	r2, #110	; 0x6e
 8006b30:	e7d9      	b.n	8006ae6 <_strtod_l+0x306>
 8006b32:	498b      	ldr	r1, [pc, #556]	; (8006d60 <_strtod_l+0x580>)
 8006b34:	a815      	add	r0, sp, #84	; 0x54
 8006b36:	f002 fc4d 	bl	80093d4 <__match>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f43f aea8 	beq.w	8006890 <_strtod_l+0xb0>
 8006b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b42:	4988      	ldr	r1, [pc, #544]	; (8006d64 <_strtod_l+0x584>)
 8006b44:	3b01      	subs	r3, #1
 8006b46:	a815      	add	r0, sp, #84	; 0x54
 8006b48:	9315      	str	r3, [sp, #84]	; 0x54
 8006b4a:	f002 fc43 	bl	80093d4 <__match>
 8006b4e:	b910      	cbnz	r0, 8006b56 <_strtod_l+0x376>
 8006b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b52:	3301      	adds	r3, #1
 8006b54:	9315      	str	r3, [sp, #84]	; 0x54
 8006b56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006d74 <_strtod_l+0x594>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	e67a      	b.n	8006856 <_strtod_l+0x76>
 8006b60:	4881      	ldr	r0, [pc, #516]	; (8006d68 <_strtod_l+0x588>)
 8006b62:	f001 fac1 	bl	80080e8 <nan>
 8006b66:	ec59 8b10 	vmov	r8, r9, d0
 8006b6a:	e674      	b.n	8006856 <_strtod_l+0x76>
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b70:	1afb      	subs	r3, r7, r3
 8006b72:	f1bb 0f00 	cmp.w	fp, #0
 8006b76:	bf08      	it	eq
 8006b78:	46b3      	moveq	fp, r6
 8006b7a:	2e10      	cmp	r6, #16
 8006b7c:	9308      	str	r3, [sp, #32]
 8006b7e:	4635      	mov	r5, r6
 8006b80:	bfa8      	it	ge
 8006b82:	2510      	movge	r5, #16
 8006b84:	f7f9 fcce 	bl	8000524 <__aeabi_ui2d>
 8006b88:	2e09      	cmp	r6, #9
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	dd13      	ble.n	8006bb8 <_strtod_l+0x3d8>
 8006b90:	4b76      	ldr	r3, [pc, #472]	; (8006d6c <_strtod_l+0x58c>)
 8006b92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b9a:	f7f9 fd3d 	bl	8000618 <__aeabi_dmul>
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	f7f9 fcbe 	bl	8000524 <__aeabi_ui2d>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4640      	mov	r0, r8
 8006bae:	4649      	mov	r1, r9
 8006bb0:	f7f9 fb7c 	bl	80002ac <__adddf3>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	2e0f      	cmp	r6, #15
 8006bba:	dc38      	bgt.n	8006c2e <_strtod_l+0x44e>
 8006bbc:	9b08      	ldr	r3, [sp, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f43f ae49 	beq.w	8006856 <_strtod_l+0x76>
 8006bc4:	dd24      	ble.n	8006c10 <_strtod_l+0x430>
 8006bc6:	2b16      	cmp	r3, #22
 8006bc8:	dc0b      	bgt.n	8006be2 <_strtod_l+0x402>
 8006bca:	4968      	ldr	r1, [pc, #416]	; (8006d6c <_strtod_l+0x58c>)
 8006bcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	f7f9 fd1e 	bl	8000618 <__aeabi_dmul>
 8006bdc:	4680      	mov	r8, r0
 8006bde:	4689      	mov	r9, r1
 8006be0:	e639      	b.n	8006856 <_strtod_l+0x76>
 8006be2:	9a08      	ldr	r2, [sp, #32]
 8006be4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006be8:	4293      	cmp	r3, r2
 8006bea:	db20      	blt.n	8006c2e <_strtod_l+0x44e>
 8006bec:	4c5f      	ldr	r4, [pc, #380]	; (8006d6c <_strtod_l+0x58c>)
 8006bee:	f1c6 060f 	rsb	r6, r6, #15
 8006bf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bfe:	f7f9 fd0b 	bl	8000618 <__aeabi_dmul>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	1b9e      	subs	r6, r3, r6
 8006c06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006c0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c0e:	e7e3      	b.n	8006bd8 <_strtod_l+0x3f8>
 8006c10:	9b08      	ldr	r3, [sp, #32]
 8006c12:	3316      	adds	r3, #22
 8006c14:	db0b      	blt.n	8006c2e <_strtod_l+0x44e>
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	1bdf      	subs	r7, r3, r7
 8006c1a:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <_strtod_l+0x58c>)
 8006c1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 fe20 	bl	800086c <__aeabi_ddiv>
 8006c2c:	e7d6      	b.n	8006bdc <_strtod_l+0x3fc>
 8006c2e:	9b08      	ldr	r3, [sp, #32]
 8006c30:	1b75      	subs	r5, r6, r5
 8006c32:	441d      	add	r5, r3
 8006c34:	2d00      	cmp	r5, #0
 8006c36:	dd70      	ble.n	8006d1a <_strtod_l+0x53a>
 8006c38:	f015 030f 	ands.w	r3, r5, #15
 8006c3c:	d00a      	beq.n	8006c54 <_strtod_l+0x474>
 8006c3e:	494b      	ldr	r1, [pc, #300]	; (8006d6c <_strtod_l+0x58c>)
 8006c40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4c:	f7f9 fce4 	bl	8000618 <__aeabi_dmul>
 8006c50:	4680      	mov	r8, r0
 8006c52:	4689      	mov	r9, r1
 8006c54:	f035 050f 	bics.w	r5, r5, #15
 8006c58:	d04d      	beq.n	8006cf6 <_strtod_l+0x516>
 8006c5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006c5e:	dd22      	ble.n	8006ca6 <_strtod_l+0x4c6>
 8006c60:	2500      	movs	r5, #0
 8006c62:	46ab      	mov	fp, r5
 8006c64:	9509      	str	r5, [sp, #36]	; 0x24
 8006c66:	9505      	str	r5, [sp, #20]
 8006c68:	2322      	movs	r3, #34	; 0x22
 8006c6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006d74 <_strtod_l+0x594>
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	f04f 0800 	mov.w	r8, #0
 8006c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f43f aded 	beq.w	8006856 <_strtod_l+0x76>
 8006c7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f002 fcaa 	bl	80095d8 <_Bfree>
 8006c84:	9905      	ldr	r1, [sp, #20]
 8006c86:	4620      	mov	r0, r4
 8006c88:	f002 fca6 	bl	80095d8 <_Bfree>
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f002 fca2 	bl	80095d8 <_Bfree>
 8006c94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c96:	4620      	mov	r0, r4
 8006c98:	f002 fc9e 	bl	80095d8 <_Bfree>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f002 fc9a 	bl	80095d8 <_Bfree>
 8006ca4:	e5d7      	b.n	8006856 <_strtod_l+0x76>
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <_strtod_l+0x590>)
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	2300      	movs	r3, #0
 8006cac:	112d      	asrs	r5, r5, #4
 8006cae:	4640      	mov	r0, r8
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	469a      	mov	sl, r3
 8006cb4:	2d01      	cmp	r5, #1
 8006cb6:	dc21      	bgt.n	8006cfc <_strtod_l+0x51c>
 8006cb8:	b10b      	cbz	r3, 8006cbe <_strtod_l+0x4de>
 8006cba:	4680      	mov	r8, r0
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	492c      	ldr	r1, [pc, #176]	; (8006d70 <_strtod_l+0x590>)
 8006cc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006cc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd0:	f7f9 fca2 	bl	8000618 <__aeabi_dmul>
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <_strtod_l+0x594>)
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	400b      	ands	r3, r1
 8006cda:	4927      	ldr	r1, [pc, #156]	; (8006d78 <_strtod_l+0x598>)
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	4680      	mov	r8, r0
 8006ce0:	d8be      	bhi.n	8006c60 <_strtod_l+0x480>
 8006ce2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ce6:	428b      	cmp	r3, r1
 8006ce8:	bf86      	itte	hi
 8006cea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006d7c <_strtod_l+0x59c>
 8006cee:	f04f 38ff 	movhi.w	r8, #4294967295
 8006cf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	e07b      	b.n	8006df4 <_strtod_l+0x614>
 8006cfc:	07ea      	lsls	r2, r5, #31
 8006cfe:	d505      	bpl.n	8006d0c <_strtod_l+0x52c>
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f7f9 fc87 	bl	8000618 <__aeabi_dmul>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	9a04      	ldr	r2, [sp, #16]
 8006d0e:	3208      	adds	r2, #8
 8006d10:	f10a 0a01 	add.w	sl, sl, #1
 8006d14:	106d      	asrs	r5, r5, #1
 8006d16:	9204      	str	r2, [sp, #16]
 8006d18:	e7cc      	b.n	8006cb4 <_strtod_l+0x4d4>
 8006d1a:	d0ec      	beq.n	8006cf6 <_strtod_l+0x516>
 8006d1c:	426d      	negs	r5, r5
 8006d1e:	f015 020f 	ands.w	r2, r5, #15
 8006d22:	d00a      	beq.n	8006d3a <_strtod_l+0x55a>
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <_strtod_l+0x58c>)
 8006d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fd9b 	bl	800086c <__aeabi_ddiv>
 8006d36:	4680      	mov	r8, r0
 8006d38:	4689      	mov	r9, r1
 8006d3a:	112d      	asrs	r5, r5, #4
 8006d3c:	d0db      	beq.n	8006cf6 <_strtod_l+0x516>
 8006d3e:	2d1f      	cmp	r5, #31
 8006d40:	dd1e      	ble.n	8006d80 <_strtod_l+0x5a0>
 8006d42:	2500      	movs	r5, #0
 8006d44:	46ab      	mov	fp, r5
 8006d46:	9509      	str	r5, [sp, #36]	; 0x24
 8006d48:	9505      	str	r5, [sp, #20]
 8006d4a:	2322      	movs	r3, #34	; 0x22
 8006d4c:	f04f 0800 	mov.w	r8, #0
 8006d50:	f04f 0900 	mov.w	r9, #0
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	e78d      	b.n	8006c74 <_strtod_l+0x494>
 8006d58:	0800add6 	.word	0x0800add6
 8006d5c:	0800ac8c 	.word	0x0800ac8c
 8006d60:	0800adce 	.word	0x0800adce
 8006d64:	0800ae08 	.word	0x0800ae08
 8006d68:	0800b098 	.word	0x0800b098
 8006d6c:	0800af78 	.word	0x0800af78
 8006d70:	0800af50 	.word	0x0800af50
 8006d74:	7ff00000 	.word	0x7ff00000
 8006d78:	7ca00000 	.word	0x7ca00000
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	f015 0310 	ands.w	r3, r5, #16
 8006d84:	bf18      	it	ne
 8006d86:	236a      	movne	r3, #106	; 0x6a
 8006d88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800712c <_strtod_l+0x94c>
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	4640      	mov	r0, r8
 8006d90:	4649      	mov	r1, r9
 8006d92:	2300      	movs	r3, #0
 8006d94:	07ea      	lsls	r2, r5, #31
 8006d96:	d504      	bpl.n	8006da2 <_strtod_l+0x5c2>
 8006d98:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d9c:	f7f9 fc3c 	bl	8000618 <__aeabi_dmul>
 8006da0:	2301      	movs	r3, #1
 8006da2:	106d      	asrs	r5, r5, #1
 8006da4:	f10a 0a08 	add.w	sl, sl, #8
 8006da8:	d1f4      	bne.n	8006d94 <_strtod_l+0x5b4>
 8006daa:	b10b      	cbz	r3, 8006db0 <_strtod_l+0x5d0>
 8006dac:	4680      	mov	r8, r0
 8006dae:	4689      	mov	r9, r1
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	b1bb      	cbz	r3, 8006de4 <_strtod_l+0x604>
 8006db4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006db8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	dd10      	ble.n	8006de4 <_strtod_l+0x604>
 8006dc2:	2b1f      	cmp	r3, #31
 8006dc4:	f340 811e 	ble.w	8007004 <_strtod_l+0x824>
 8006dc8:	2b34      	cmp	r3, #52	; 0x34
 8006dca:	bfde      	ittt	le
 8006dcc:	f04f 33ff 	movle.w	r3, #4294967295
 8006dd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006dd4:	4093      	lslle	r3, r2
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	bfcc      	ite	gt
 8006ddc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006de0:	ea03 0901 	andle.w	r9, r3, r1
 8006de4:	2200      	movs	r2, #0
 8006de6:	2300      	movs	r3, #0
 8006de8:	4640      	mov	r0, r8
 8006dea:	4649      	mov	r1, r9
 8006dec:	f7f9 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1a6      	bne.n	8006d42 <_strtod_l+0x562>
 8006df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dfa:	4633      	mov	r3, r6
 8006dfc:	465a      	mov	r2, fp
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f002 fc52 	bl	80096a8 <__s2b>
 8006e04:	9009      	str	r0, [sp, #36]	; 0x24
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f af2a 	beq.w	8006c60 <_strtod_l+0x480>
 8006e0c:	9a08      	ldr	r2, [sp, #32]
 8006e0e:	9b05      	ldr	r3, [sp, #20]
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	eba3 0307 	sub.w	r3, r3, r7
 8006e16:	bfa8      	it	ge
 8006e18:	2300      	movge	r3, #0
 8006e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e1c:	2500      	movs	r5, #0
 8006e1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e22:	9312      	str	r3, [sp, #72]	; 0x48
 8006e24:	46ab      	mov	fp, r5
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	4620      	mov	r0, r4
 8006e2a:	6859      	ldr	r1, [r3, #4]
 8006e2c:	f002 fb94 	bl	8009558 <_Balloc>
 8006e30:	9005      	str	r0, [sp, #20]
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f43f af18 	beq.w	8006c68 <_strtod_l+0x488>
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	3202      	adds	r2, #2
 8006e3e:	f103 010c 	add.w	r1, r3, #12
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	300c      	adds	r0, #12
 8006e46:	f001 f941 	bl	80080cc <memcpy>
 8006e4a:	ec49 8b10 	vmov	d0, r8, r9
 8006e4e:	aa18      	add	r2, sp, #96	; 0x60
 8006e50:	a917      	add	r1, sp, #92	; 0x5c
 8006e52:	4620      	mov	r0, r4
 8006e54:	f002 ff5c 	bl	8009d10 <__d2b>
 8006e58:	ec49 8b18 	vmov	d8, r8, r9
 8006e5c:	9016      	str	r0, [sp, #88]	; 0x58
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f af02 	beq.w	8006c68 <_strtod_l+0x488>
 8006e64:	2101      	movs	r1, #1
 8006e66:	4620      	mov	r0, r4
 8006e68:	f002 fcb6 	bl	80097d8 <__i2b>
 8006e6c:	4683      	mov	fp, r0
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f43f aefa 	beq.w	8006c68 <_strtod_l+0x488>
 8006e74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	bfab      	itete	ge
 8006e7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006e7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006e80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006e86:	bfac      	ite	ge
 8006e88:	eb06 0a03 	addge.w	sl, r6, r3
 8006e8c:	1b9f      	sublt	r7, r3, r6
 8006e8e:	9b04      	ldr	r3, [sp, #16]
 8006e90:	1af6      	subs	r6, r6, r3
 8006e92:	4416      	add	r6, r2
 8006e94:	4ba0      	ldr	r3, [pc, #640]	; (8007118 <_strtod_l+0x938>)
 8006e96:	3e01      	subs	r6, #1
 8006e98:	429e      	cmp	r6, r3
 8006e9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e9e:	f280 80c4 	bge.w	800702a <_strtod_l+0x84a>
 8006ea2:	1b9b      	subs	r3, r3, r6
 8006ea4:	2b1f      	cmp	r3, #31
 8006ea6:	eba2 0203 	sub.w	r2, r2, r3
 8006eaa:	f04f 0101 	mov.w	r1, #1
 8006eae:	f300 80b0 	bgt.w	8007012 <_strtod_l+0x832>
 8006eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8006eb8:	2300      	movs	r3, #0
 8006eba:	930d      	str	r3, [sp, #52]	; 0x34
 8006ebc:	eb0a 0602 	add.w	r6, sl, r2
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	45b2      	cmp	sl, r6
 8006ec4:	4417      	add	r7, r2
 8006ec6:	441f      	add	r7, r3
 8006ec8:	4653      	mov	r3, sl
 8006eca:	bfa8      	it	ge
 8006ecc:	4633      	movge	r3, r6
 8006ece:	42bb      	cmp	r3, r7
 8006ed0:	bfa8      	it	ge
 8006ed2:	463b      	movge	r3, r7
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfc2      	ittt	gt
 8006ed8:	1af6      	subgt	r6, r6, r3
 8006eda:	1aff      	subgt	r7, r7, r3
 8006edc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	dd17      	ble.n	8006f16 <_strtod_l+0x736>
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4620      	mov	r0, r4
 8006eec:	f002 fd34 	bl	8009958 <__pow5mult>
 8006ef0:	4683      	mov	fp, r0
 8006ef2:	2800      	cmp	r0, #0
 8006ef4:	f43f aeb8 	beq.w	8006c68 <_strtod_l+0x488>
 8006ef8:	4601      	mov	r1, r0
 8006efa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006efc:	4620      	mov	r0, r4
 8006efe:	f002 fc81 	bl	8009804 <__multiply>
 8006f02:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f43f aeaf 	beq.w	8006c68 <_strtod_l+0x488>
 8006f0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f002 fb63 	bl	80095d8 <_Bfree>
 8006f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f14:	9316      	str	r3, [sp, #88]	; 0x58
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	f300 808c 	bgt.w	8007034 <_strtod_l+0x854>
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dd08      	ble.n	8006f34 <_strtod_l+0x754>
 8006f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f24:	9905      	ldr	r1, [sp, #20]
 8006f26:	4620      	mov	r0, r4
 8006f28:	f002 fd16 	bl	8009958 <__pow5mult>
 8006f2c:	9005      	str	r0, [sp, #20]
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f ae9a 	beq.w	8006c68 <_strtod_l+0x488>
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	dd08      	ble.n	8006f4a <_strtod_l+0x76a>
 8006f38:	9905      	ldr	r1, [sp, #20]
 8006f3a:	463a      	mov	r2, r7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f002 fd65 	bl	8009a0c <__lshift>
 8006f42:	9005      	str	r0, [sp, #20]
 8006f44:	2800      	cmp	r0, #0
 8006f46:	f43f ae8f 	beq.w	8006c68 <_strtod_l+0x488>
 8006f4a:	f1ba 0f00 	cmp.w	sl, #0
 8006f4e:	dd08      	ble.n	8006f62 <_strtod_l+0x782>
 8006f50:	4659      	mov	r1, fp
 8006f52:	4652      	mov	r2, sl
 8006f54:	4620      	mov	r0, r4
 8006f56:	f002 fd59 	bl	8009a0c <__lshift>
 8006f5a:	4683      	mov	fp, r0
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	f43f ae83 	beq.w	8006c68 <_strtod_l+0x488>
 8006f62:	9a05      	ldr	r2, [sp, #20]
 8006f64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f66:	4620      	mov	r0, r4
 8006f68:	f002 fdd8 	bl	8009b1c <__mdiff>
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	f43f ae7a 	beq.w	8006c68 <_strtod_l+0x488>
 8006f74:	68c3      	ldr	r3, [r0, #12]
 8006f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60c3      	str	r3, [r0, #12]
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f002 fdb1 	bl	8009ae4 <__mcmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	da60      	bge.n	8007048 <_strtod_l+0x868>
 8006f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f88:	ea53 0308 	orrs.w	r3, r3, r8
 8006f8c:	f040 8084 	bne.w	8007098 <_strtod_l+0x8b8>
 8006f90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d17f      	bne.n	8007098 <_strtod_l+0x8b8>
 8006f98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	051b      	lsls	r3, r3, #20
 8006fa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fa4:	d978      	bls.n	8007098 <_strtod_l+0x8b8>
 8006fa6:	696b      	ldr	r3, [r5, #20]
 8006fa8:	b913      	cbnz	r3, 8006fb0 <_strtod_l+0x7d0>
 8006faa:	692b      	ldr	r3, [r5, #16]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	dd73      	ble.n	8007098 <_strtod_l+0x8b8>
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f002 fd29 	bl	8009a0c <__lshift>
 8006fba:	4659      	mov	r1, fp
 8006fbc:	4605      	mov	r5, r0
 8006fbe:	f002 fd91 	bl	8009ae4 <__mcmp>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	dd68      	ble.n	8007098 <_strtod_l+0x8b8>
 8006fc6:	9904      	ldr	r1, [sp, #16]
 8006fc8:	4a54      	ldr	r2, [pc, #336]	; (800711c <_strtod_l+0x93c>)
 8006fca:	464b      	mov	r3, r9
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	f000 8084 	beq.w	80070da <_strtod_l+0x8fa>
 8006fd2:	ea02 0109 	and.w	r1, r2, r9
 8006fd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006fda:	dc7e      	bgt.n	80070da <_strtod_l+0x8fa>
 8006fdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006fe0:	f77f aeb3 	ble.w	8006d4a <_strtod_l+0x56a>
 8006fe4:	4b4e      	ldr	r3, [pc, #312]	; (8007120 <_strtod_l+0x940>)
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	4649      	mov	r1, r9
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 fb14 	bl	8000618 <__aeabi_dmul>
 8006ff0:	4b4a      	ldr	r3, [pc, #296]	; (800711c <_strtod_l+0x93c>)
 8006ff2:	400b      	ands	r3, r1
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4689      	mov	r9, r1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f47f ae3f 	bne.w	8006c7c <_strtod_l+0x49c>
 8006ffe:	2322      	movs	r3, #34	; 0x22
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	e63b      	b.n	8006c7c <_strtod_l+0x49c>
 8007004:	f04f 32ff 	mov.w	r2, #4294967295
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	ea03 0808 	and.w	r8, r3, r8
 8007010:	e6e8      	b.n	8006de4 <_strtod_l+0x604>
 8007012:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007016:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800701a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800701e:	36e2      	adds	r6, #226	; 0xe2
 8007020:	fa01 f306 	lsl.w	r3, r1, r6
 8007024:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007028:	e748      	b.n	8006ebc <_strtod_l+0x6dc>
 800702a:	2100      	movs	r1, #0
 800702c:	2301      	movs	r3, #1
 800702e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007032:	e743      	b.n	8006ebc <_strtod_l+0x6dc>
 8007034:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007036:	4632      	mov	r2, r6
 8007038:	4620      	mov	r0, r4
 800703a:	f002 fce7 	bl	8009a0c <__lshift>
 800703e:	9016      	str	r0, [sp, #88]	; 0x58
 8007040:	2800      	cmp	r0, #0
 8007042:	f47f af6b 	bne.w	8006f1c <_strtod_l+0x73c>
 8007046:	e60f      	b.n	8006c68 <_strtod_l+0x488>
 8007048:	46ca      	mov	sl, r9
 800704a:	d171      	bne.n	8007130 <_strtod_l+0x950>
 800704c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800704e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007052:	b352      	cbz	r2, 80070aa <_strtod_l+0x8ca>
 8007054:	4a33      	ldr	r2, [pc, #204]	; (8007124 <_strtod_l+0x944>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d12a      	bne.n	80070b0 <_strtod_l+0x8d0>
 800705a:	9b04      	ldr	r3, [sp, #16]
 800705c:	4641      	mov	r1, r8
 800705e:	b1fb      	cbz	r3, 80070a0 <_strtod_l+0x8c0>
 8007060:	4b2e      	ldr	r3, [pc, #184]	; (800711c <_strtod_l+0x93c>)
 8007062:	ea09 0303 	and.w	r3, r9, r3
 8007066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	d81a      	bhi.n	80070a6 <_strtod_l+0x8c6>
 8007070:	0d1b      	lsrs	r3, r3, #20
 8007072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007076:	fa02 f303 	lsl.w	r3, r2, r3
 800707a:	4299      	cmp	r1, r3
 800707c:	d118      	bne.n	80070b0 <_strtod_l+0x8d0>
 800707e:	4b2a      	ldr	r3, [pc, #168]	; (8007128 <_strtod_l+0x948>)
 8007080:	459a      	cmp	sl, r3
 8007082:	d102      	bne.n	800708a <_strtod_l+0x8aa>
 8007084:	3101      	adds	r1, #1
 8007086:	f43f adef 	beq.w	8006c68 <_strtod_l+0x488>
 800708a:	4b24      	ldr	r3, [pc, #144]	; (800711c <_strtod_l+0x93c>)
 800708c:	ea0a 0303 	and.w	r3, sl, r3
 8007090:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007094:	f04f 0800 	mov.w	r8, #0
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1a2      	bne.n	8006fe4 <_strtod_l+0x804>
 800709e:	e5ed      	b.n	8006c7c <_strtod_l+0x49c>
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	e7e9      	b.n	800707a <_strtod_l+0x89a>
 80070a6:	4613      	mov	r3, r2
 80070a8:	e7e7      	b.n	800707a <_strtod_l+0x89a>
 80070aa:	ea53 0308 	orrs.w	r3, r3, r8
 80070ae:	d08a      	beq.n	8006fc6 <_strtod_l+0x7e6>
 80070b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b2:	b1e3      	cbz	r3, 80070ee <_strtod_l+0x90e>
 80070b4:	ea13 0f0a 	tst.w	r3, sl
 80070b8:	d0ee      	beq.n	8007098 <_strtod_l+0x8b8>
 80070ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	4640      	mov	r0, r8
 80070c0:	4649      	mov	r1, r9
 80070c2:	b1c3      	cbz	r3, 80070f6 <_strtod_l+0x916>
 80070c4:	f7ff fb6d 	bl	80067a2 <sulp>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	ec51 0b18 	vmov	r0, r1, d8
 80070d0:	f7f9 f8ec 	bl	80002ac <__adddf3>
 80070d4:	4680      	mov	r8, r0
 80070d6:	4689      	mov	r9, r1
 80070d8:	e7de      	b.n	8007098 <_strtod_l+0x8b8>
 80070da:	4013      	ands	r3, r2
 80070dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80070e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80070e8:	f04f 38ff 	mov.w	r8, #4294967295
 80070ec:	e7d4      	b.n	8007098 <_strtod_l+0x8b8>
 80070ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f0:	ea13 0f08 	tst.w	r3, r8
 80070f4:	e7e0      	b.n	80070b8 <_strtod_l+0x8d8>
 80070f6:	f7ff fb54 	bl	80067a2 <sulp>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	ec51 0b18 	vmov	r0, r1, d8
 8007102:	f7f9 f8d1 	bl	80002a8 <__aeabi_dsub>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4680      	mov	r8, r0
 800710c:	4689      	mov	r9, r1
 800710e:	f7f9 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007112:	2800      	cmp	r0, #0
 8007114:	d0c0      	beq.n	8007098 <_strtod_l+0x8b8>
 8007116:	e618      	b.n	8006d4a <_strtod_l+0x56a>
 8007118:	fffffc02 	.word	0xfffffc02
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	39500000 	.word	0x39500000
 8007124:	000fffff 	.word	0x000fffff
 8007128:	7fefffff 	.word	0x7fefffff
 800712c:	0800aca0 	.word	0x0800aca0
 8007130:	4659      	mov	r1, fp
 8007132:	4628      	mov	r0, r5
 8007134:	f002 fe46 	bl	8009dc4 <__ratio>
 8007138:	ec57 6b10 	vmov	r6, r7, d0
 800713c:	ee10 0a10 	vmov	r0, s0
 8007140:	2200      	movs	r2, #0
 8007142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007146:	4639      	mov	r1, r7
 8007148:	f7f9 fce2 	bl	8000b10 <__aeabi_dcmple>
 800714c:	2800      	cmp	r0, #0
 800714e:	d071      	beq.n	8007234 <_strtod_l+0xa54>
 8007150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d17c      	bne.n	8007250 <_strtod_l+0xa70>
 8007156:	f1b8 0f00 	cmp.w	r8, #0
 800715a:	d15a      	bne.n	8007212 <_strtod_l+0xa32>
 800715c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007160:	2b00      	cmp	r3, #0
 8007162:	d15d      	bne.n	8007220 <_strtod_l+0xa40>
 8007164:	4b90      	ldr	r3, [pc, #576]	; (80073a8 <_strtod_l+0xbc8>)
 8007166:	2200      	movs	r2, #0
 8007168:	4630      	mov	r0, r6
 800716a:	4639      	mov	r1, r7
 800716c:	f7f9 fcc6 	bl	8000afc <__aeabi_dcmplt>
 8007170:	2800      	cmp	r0, #0
 8007172:	d15c      	bne.n	800722e <_strtod_l+0xa4e>
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	4b8c      	ldr	r3, [pc, #560]	; (80073ac <_strtod_l+0xbcc>)
 800717a:	2200      	movs	r2, #0
 800717c:	f7f9 fa4c 	bl	8000618 <__aeabi_dmul>
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007188:	9606      	str	r6, [sp, #24]
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007190:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007194:	4b86      	ldr	r3, [pc, #536]	; (80073b0 <_strtod_l+0xbd0>)
 8007196:	ea0a 0303 	and.w	r3, sl, r3
 800719a:	930d      	str	r3, [sp, #52]	; 0x34
 800719c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800719e:	4b85      	ldr	r3, [pc, #532]	; (80073b4 <_strtod_l+0xbd4>)
 80071a0:	429a      	cmp	r2, r3
 80071a2:	f040 8090 	bne.w	80072c6 <_strtod_l+0xae6>
 80071a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80071aa:	ec49 8b10 	vmov	d0, r8, r9
 80071ae:	f002 fd3f 	bl	8009c30 <__ulp>
 80071b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071b6:	ec51 0b10 	vmov	r0, r1, d0
 80071ba:	f7f9 fa2d 	bl	8000618 <__aeabi_dmul>
 80071be:	4642      	mov	r2, r8
 80071c0:	464b      	mov	r3, r9
 80071c2:	f7f9 f873 	bl	80002ac <__adddf3>
 80071c6:	460b      	mov	r3, r1
 80071c8:	4979      	ldr	r1, [pc, #484]	; (80073b0 <_strtod_l+0xbd0>)
 80071ca:	4a7b      	ldr	r2, [pc, #492]	; (80073b8 <_strtod_l+0xbd8>)
 80071cc:	4019      	ands	r1, r3
 80071ce:	4291      	cmp	r1, r2
 80071d0:	4680      	mov	r8, r0
 80071d2:	d944      	bls.n	800725e <_strtod_l+0xa7e>
 80071d4:	ee18 2a90 	vmov	r2, s17
 80071d8:	4b78      	ldr	r3, [pc, #480]	; (80073bc <_strtod_l+0xbdc>)
 80071da:	429a      	cmp	r2, r3
 80071dc:	d104      	bne.n	80071e8 <_strtod_l+0xa08>
 80071de:	ee18 3a10 	vmov	r3, s16
 80071e2:	3301      	adds	r3, #1
 80071e4:	f43f ad40 	beq.w	8006c68 <_strtod_l+0x488>
 80071e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80073bc <_strtod_l+0xbdc>
 80071ec:	f04f 38ff 	mov.w	r8, #4294967295
 80071f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071f2:	4620      	mov	r0, r4
 80071f4:	f002 f9f0 	bl	80095d8 <_Bfree>
 80071f8:	9905      	ldr	r1, [sp, #20]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f002 f9ec 	bl	80095d8 <_Bfree>
 8007200:	4659      	mov	r1, fp
 8007202:	4620      	mov	r0, r4
 8007204:	f002 f9e8 	bl	80095d8 <_Bfree>
 8007208:	4629      	mov	r1, r5
 800720a:	4620      	mov	r0, r4
 800720c:	f002 f9e4 	bl	80095d8 <_Bfree>
 8007210:	e609      	b.n	8006e26 <_strtod_l+0x646>
 8007212:	f1b8 0f01 	cmp.w	r8, #1
 8007216:	d103      	bne.n	8007220 <_strtod_l+0xa40>
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	f43f ad95 	beq.w	8006d4a <_strtod_l+0x56a>
 8007220:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007378 <_strtod_l+0xb98>
 8007224:	4f60      	ldr	r7, [pc, #384]	; (80073a8 <_strtod_l+0xbc8>)
 8007226:	ed8d 7b06 	vstr	d7, [sp, #24]
 800722a:	2600      	movs	r6, #0
 800722c:	e7ae      	b.n	800718c <_strtod_l+0x9ac>
 800722e:	4f5f      	ldr	r7, [pc, #380]	; (80073ac <_strtod_l+0xbcc>)
 8007230:	2600      	movs	r6, #0
 8007232:	e7a7      	b.n	8007184 <_strtod_l+0x9a4>
 8007234:	4b5d      	ldr	r3, [pc, #372]	; (80073ac <_strtod_l+0xbcc>)
 8007236:	4630      	mov	r0, r6
 8007238:	4639      	mov	r1, r7
 800723a:	2200      	movs	r2, #0
 800723c:	f7f9 f9ec 	bl	8000618 <__aeabi_dmul>
 8007240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d09c      	beq.n	8007184 <_strtod_l+0x9a4>
 800724a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800724e:	e79d      	b.n	800718c <_strtod_l+0x9ac>
 8007250:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007380 <_strtod_l+0xba0>
 8007254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007258:	ec57 6b17 	vmov	r6, r7, d7
 800725c:	e796      	b.n	800718c <_strtod_l+0x9ac>
 800725e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	46ca      	mov	sl, r9
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1c2      	bne.n	80071f0 <_strtod_l+0xa10>
 800726a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800726e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007270:	0d1b      	lsrs	r3, r3, #20
 8007272:	051b      	lsls	r3, r3, #20
 8007274:	429a      	cmp	r2, r3
 8007276:	d1bb      	bne.n	80071f0 <_strtod_l+0xa10>
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 fcdc 	bl	8000c38 <__aeabi_d2lz>
 8007280:	f7f9 f99c 	bl	80005bc <__aeabi_l2d>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4630      	mov	r0, r6
 800728a:	4639      	mov	r1, r7
 800728c:	f7f9 f80c 	bl	80002a8 <__aeabi_dsub>
 8007290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007296:	ea43 0308 	orr.w	r3, r3, r8
 800729a:	4313      	orrs	r3, r2
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	d054      	beq.n	800734c <_strtod_l+0xb6c>
 80072a2:	a339      	add	r3, pc, #228	; (adr r3, 8007388 <_strtod_l+0xba8>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f9 fc28 	bl	8000afc <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f47f ace5 	bne.w	8006c7c <_strtod_l+0x49c>
 80072b2:	a337      	add	r3, pc, #220	; (adr r3, 8007390 <_strtod_l+0xbb0>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	4630      	mov	r0, r6
 80072ba:	4639      	mov	r1, r7
 80072bc:	f7f9 fc3c 	bl	8000b38 <__aeabi_dcmpgt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d095      	beq.n	80071f0 <_strtod_l+0xa10>
 80072c4:	e4da      	b.n	8006c7c <_strtod_l+0x49c>
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	b333      	cbz	r3, 8007318 <_strtod_l+0xb38>
 80072ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072d0:	d822      	bhi.n	8007318 <_strtod_l+0xb38>
 80072d2:	a331      	add	r3, pc, #196	; (adr r3, 8007398 <_strtod_l+0xbb8>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fc18 	bl	8000b10 <__aeabi_dcmple>
 80072e0:	b1a0      	cbz	r0, 800730c <_strtod_l+0xb2c>
 80072e2:	4639      	mov	r1, r7
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7f9 fc6f 	bl	8000bc8 <__aeabi_d2uiz>
 80072ea:	2801      	cmp	r0, #1
 80072ec:	bf38      	it	cc
 80072ee:	2001      	movcc	r0, #1
 80072f0:	f7f9 f918 	bl	8000524 <__aeabi_ui2d>
 80072f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	bb23      	cbnz	r3, 8007346 <_strtod_l+0xb66>
 80072fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007300:	9010      	str	r0, [sp, #64]	; 0x40
 8007302:	9311      	str	r3, [sp, #68]	; 0x44
 8007304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007308:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800730c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800730e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007310:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	930f      	str	r3, [sp, #60]	; 0x3c
 8007318:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800731c:	eeb0 0a48 	vmov.f32	s0, s16
 8007320:	eef0 0a68 	vmov.f32	s1, s17
 8007324:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007328:	f002 fc82 	bl	8009c30 <__ulp>
 800732c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007330:	ec53 2b10 	vmov	r2, r3, d0
 8007334:	f7f9 f970 	bl	8000618 <__aeabi_dmul>
 8007338:	ec53 2b18 	vmov	r2, r3, d8
 800733c:	f7f8 ffb6 	bl	80002ac <__adddf3>
 8007340:	4680      	mov	r8, r0
 8007342:	4689      	mov	r9, r1
 8007344:	e78d      	b.n	8007262 <_strtod_l+0xa82>
 8007346:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800734a:	e7db      	b.n	8007304 <_strtod_l+0xb24>
 800734c:	a314      	add	r3, pc, #80	; (adr r3, 80073a0 <_strtod_l+0xbc0>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f9 fbd3 	bl	8000afc <__aeabi_dcmplt>
 8007356:	e7b3      	b.n	80072c0 <_strtod_l+0xae0>
 8007358:	2300      	movs	r3, #0
 800735a:	930a      	str	r3, [sp, #40]	; 0x28
 800735c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800735e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	f7ff ba7c 	b.w	800685e <_strtod_l+0x7e>
 8007366:	2a65      	cmp	r2, #101	; 0x65
 8007368:	f43f ab75 	beq.w	8006a56 <_strtod_l+0x276>
 800736c:	2a45      	cmp	r2, #69	; 0x45
 800736e:	f43f ab72 	beq.w	8006a56 <_strtod_l+0x276>
 8007372:	2301      	movs	r3, #1
 8007374:	f7ff bbaa 	b.w	8006acc <_strtod_l+0x2ec>
 8007378:	00000000 	.word	0x00000000
 800737c:	bff00000 	.word	0xbff00000
 8007380:	00000000 	.word	0x00000000
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	94a03595 	.word	0x94a03595
 800738c:	3fdfffff 	.word	0x3fdfffff
 8007390:	35afe535 	.word	0x35afe535
 8007394:	3fe00000 	.word	0x3fe00000
 8007398:	ffc00000 	.word	0xffc00000
 800739c:	41dfffff 	.word	0x41dfffff
 80073a0:	94a03595 	.word	0x94a03595
 80073a4:	3fcfffff 	.word	0x3fcfffff
 80073a8:	3ff00000 	.word	0x3ff00000
 80073ac:	3fe00000 	.word	0x3fe00000
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	7fe00000 	.word	0x7fe00000
 80073b8:	7c9fffff 	.word	0x7c9fffff
 80073bc:	7fefffff 	.word	0x7fefffff

080073c0 <strtod>:
 80073c0:	460a      	mov	r2, r1
 80073c2:	4601      	mov	r1, r0
 80073c4:	4802      	ldr	r0, [pc, #8]	; (80073d0 <strtod+0x10>)
 80073c6:	4b03      	ldr	r3, [pc, #12]	; (80073d4 <strtod+0x14>)
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	f7ff ba09 	b.w	80067e0 <_strtod_l>
 80073ce:	bf00      	nop
 80073d0:	200001f4 	.word	0x200001f4
 80073d4:	2000003c 	.word	0x2000003c

080073d8 <__cvt>:
 80073d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	ec55 4b10 	vmov	r4, r5, d0
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	460e      	mov	r6, r1
 80073e4:	4619      	mov	r1, r3
 80073e6:	462b      	mov	r3, r5
 80073e8:	bfbb      	ittet	lt
 80073ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073ee:	461d      	movlt	r5, r3
 80073f0:	2300      	movge	r3, #0
 80073f2:	232d      	movlt	r3, #45	; 0x2d
 80073f4:	700b      	strb	r3, [r1, #0]
 80073f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073fc:	4691      	mov	r9, r2
 80073fe:	f023 0820 	bic.w	r8, r3, #32
 8007402:	bfbc      	itt	lt
 8007404:	4622      	movlt	r2, r4
 8007406:	4614      	movlt	r4, r2
 8007408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800740c:	d005      	beq.n	800741a <__cvt+0x42>
 800740e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007412:	d100      	bne.n	8007416 <__cvt+0x3e>
 8007414:	3601      	adds	r6, #1
 8007416:	2102      	movs	r1, #2
 8007418:	e000      	b.n	800741c <__cvt+0x44>
 800741a:	2103      	movs	r1, #3
 800741c:	ab03      	add	r3, sp, #12
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	ab02      	add	r3, sp, #8
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	ec45 4b10 	vmov	d0, r4, r5
 8007428:	4653      	mov	r3, sl
 800742a:	4632      	mov	r2, r6
 800742c:	f000 feec 	bl	8008208 <_dtoa_r>
 8007430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007434:	4607      	mov	r7, r0
 8007436:	d102      	bne.n	800743e <__cvt+0x66>
 8007438:	f019 0f01 	tst.w	r9, #1
 800743c:	d022      	beq.n	8007484 <__cvt+0xac>
 800743e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007442:	eb07 0906 	add.w	r9, r7, r6
 8007446:	d110      	bne.n	800746a <__cvt+0x92>
 8007448:	783b      	ldrb	r3, [r7, #0]
 800744a:	2b30      	cmp	r3, #48	; 0x30
 800744c:	d10a      	bne.n	8007464 <__cvt+0x8c>
 800744e:	2200      	movs	r2, #0
 8007450:	2300      	movs	r3, #0
 8007452:	4620      	mov	r0, r4
 8007454:	4629      	mov	r1, r5
 8007456:	f7f9 fb47 	bl	8000ae8 <__aeabi_dcmpeq>
 800745a:	b918      	cbnz	r0, 8007464 <__cvt+0x8c>
 800745c:	f1c6 0601 	rsb	r6, r6, #1
 8007460:	f8ca 6000 	str.w	r6, [sl]
 8007464:	f8da 3000 	ldr.w	r3, [sl]
 8007468:	4499      	add	r9, r3
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f9 fb39 	bl	8000ae8 <__aeabi_dcmpeq>
 8007476:	b108      	cbz	r0, 800747c <__cvt+0xa4>
 8007478:	f8cd 900c 	str.w	r9, [sp, #12]
 800747c:	2230      	movs	r2, #48	; 0x30
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	454b      	cmp	r3, r9
 8007482:	d307      	bcc.n	8007494 <__cvt+0xbc>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007488:	1bdb      	subs	r3, r3, r7
 800748a:	4638      	mov	r0, r7
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	b004      	add	sp, #16
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	1c59      	adds	r1, r3, #1
 8007496:	9103      	str	r1, [sp, #12]
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e7f0      	b.n	800747e <__cvt+0xa6>

0800749c <__exponent>:
 800749c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749e:	4603      	mov	r3, r0
 80074a0:	2900      	cmp	r1, #0
 80074a2:	bfb8      	it	lt
 80074a4:	4249      	neglt	r1, r1
 80074a6:	f803 2b02 	strb.w	r2, [r3], #2
 80074aa:	bfb4      	ite	lt
 80074ac:	222d      	movlt	r2, #45	; 0x2d
 80074ae:	222b      	movge	r2, #43	; 0x2b
 80074b0:	2909      	cmp	r1, #9
 80074b2:	7042      	strb	r2, [r0, #1]
 80074b4:	dd2a      	ble.n	800750c <__exponent+0x70>
 80074b6:	f10d 0207 	add.w	r2, sp, #7
 80074ba:	4617      	mov	r7, r2
 80074bc:	260a      	movs	r6, #10
 80074be:	4694      	mov	ip, r2
 80074c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80074c4:	fb06 1415 	mls	r4, r6, r5, r1
 80074c8:	3430      	adds	r4, #48	; 0x30
 80074ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074ce:	460c      	mov	r4, r1
 80074d0:	2c63      	cmp	r4, #99	; 0x63
 80074d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80074d6:	4629      	mov	r1, r5
 80074d8:	dcf1      	bgt.n	80074be <__exponent+0x22>
 80074da:	3130      	adds	r1, #48	; 0x30
 80074dc:	f1ac 0402 	sub.w	r4, ip, #2
 80074e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074e4:	1c41      	adds	r1, r0, #1
 80074e6:	4622      	mov	r2, r4
 80074e8:	42ba      	cmp	r2, r7
 80074ea:	d30a      	bcc.n	8007502 <__exponent+0x66>
 80074ec:	f10d 0209 	add.w	r2, sp, #9
 80074f0:	eba2 020c 	sub.w	r2, r2, ip
 80074f4:	42bc      	cmp	r4, r7
 80074f6:	bf88      	it	hi
 80074f8:	2200      	movhi	r2, #0
 80074fa:	4413      	add	r3, r2
 80074fc:	1a18      	subs	r0, r3, r0
 80074fe:	b003      	add	sp, #12
 8007500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007502:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007506:	f801 5f01 	strb.w	r5, [r1, #1]!
 800750a:	e7ed      	b.n	80074e8 <__exponent+0x4c>
 800750c:	2330      	movs	r3, #48	; 0x30
 800750e:	3130      	adds	r1, #48	; 0x30
 8007510:	7083      	strb	r3, [r0, #2]
 8007512:	70c1      	strb	r1, [r0, #3]
 8007514:	1d03      	adds	r3, r0, #4
 8007516:	e7f1      	b.n	80074fc <__exponent+0x60>

08007518 <_printf_float>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	ed2d 8b02 	vpush	{d8}
 8007520:	b08d      	sub	sp, #52	; 0x34
 8007522:	460c      	mov	r4, r1
 8007524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007528:	4616      	mov	r6, r2
 800752a:	461f      	mov	r7, r3
 800752c:	4605      	mov	r5, r0
 800752e:	f000 fd47 	bl	8007fc0 <_localeconv_r>
 8007532:	f8d0 a000 	ldr.w	sl, [r0]
 8007536:	4650      	mov	r0, sl
 8007538:	f7f8 feaa 	bl	8000290 <strlen>
 800753c:	2300      	movs	r3, #0
 800753e:	930a      	str	r3, [sp, #40]	; 0x28
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	f8d8 3000 	ldr.w	r3, [r8]
 8007548:	f894 b018 	ldrb.w	fp, [r4, #24]
 800754c:	3307      	adds	r3, #7
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	f103 0208 	add.w	r2, r3, #8
 8007556:	f8c8 2000 	str.w	r2, [r8]
 800755a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800755e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007562:	9307      	str	r3, [sp, #28]
 8007564:	f8cd 8018 	str.w	r8, [sp, #24]
 8007568:	ee08 0a10 	vmov	s16, r0
 800756c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007574:	4b9e      	ldr	r3, [pc, #632]	; (80077f0 <_printf_float+0x2d8>)
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	f7f9 fae7 	bl	8000b4c <__aeabi_dcmpun>
 800757e:	bb88      	cbnz	r0, 80075e4 <_printf_float+0xcc>
 8007580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007584:	4b9a      	ldr	r3, [pc, #616]	; (80077f0 <_printf_float+0x2d8>)
 8007586:	f04f 32ff 	mov.w	r2, #4294967295
 800758a:	f7f9 fac1 	bl	8000b10 <__aeabi_dcmple>
 800758e:	bb48      	cbnz	r0, 80075e4 <_printf_float+0xcc>
 8007590:	2200      	movs	r2, #0
 8007592:	2300      	movs	r3, #0
 8007594:	4640      	mov	r0, r8
 8007596:	4649      	mov	r1, r9
 8007598:	f7f9 fab0 	bl	8000afc <__aeabi_dcmplt>
 800759c:	b110      	cbz	r0, 80075a4 <_printf_float+0x8c>
 800759e:	232d      	movs	r3, #45	; 0x2d
 80075a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a4:	4a93      	ldr	r2, [pc, #588]	; (80077f4 <_printf_float+0x2dc>)
 80075a6:	4b94      	ldr	r3, [pc, #592]	; (80077f8 <_printf_float+0x2e0>)
 80075a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075ac:	bf94      	ite	ls
 80075ae:	4690      	movls	r8, r2
 80075b0:	4698      	movhi	r8, r3
 80075b2:	2303      	movs	r3, #3
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	9b05      	ldr	r3, [sp, #20]
 80075b8:	f023 0304 	bic.w	r3, r3, #4
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	9700      	str	r7, [sp, #0]
 80075c4:	4633      	mov	r3, r6
 80075c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075c8:	4621      	mov	r1, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	f000 f9da 	bl	8007984 <_printf_common>
 80075d0:	3001      	adds	r0, #1
 80075d2:	f040 8090 	bne.w	80076f6 <_printf_float+0x1de>
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	b00d      	add	sp, #52	; 0x34
 80075dc:	ecbd 8b02 	vpop	{d8}
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	4642      	mov	r2, r8
 80075e6:	464b      	mov	r3, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	4649      	mov	r1, r9
 80075ec:	f7f9 faae 	bl	8000b4c <__aeabi_dcmpun>
 80075f0:	b140      	cbz	r0, 8007604 <_printf_float+0xec>
 80075f2:	464b      	mov	r3, r9
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bfbc      	itt	lt
 80075f8:	232d      	movlt	r3, #45	; 0x2d
 80075fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075fe:	4a7f      	ldr	r2, [pc, #508]	; (80077fc <_printf_float+0x2e4>)
 8007600:	4b7f      	ldr	r3, [pc, #508]	; (8007800 <_printf_float+0x2e8>)
 8007602:	e7d1      	b.n	80075a8 <_printf_float+0x90>
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800760a:	9206      	str	r2, [sp, #24]
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	d13f      	bne.n	8007690 <_printf_float+0x178>
 8007610:	2306      	movs	r3, #6
 8007612:	6063      	str	r3, [r4, #4]
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	6861      	ldr	r1, [r4, #4]
 8007618:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800761c:	2300      	movs	r3, #0
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	ab0a      	add	r3, sp, #40	; 0x28
 8007622:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007626:	ab09      	add	r3, sp, #36	; 0x24
 8007628:	ec49 8b10 	vmov	d0, r8, r9
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007634:	4628      	mov	r0, r5
 8007636:	f7ff fecf 	bl	80073d8 <__cvt>
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763e:	2b47      	cmp	r3, #71	; 0x47
 8007640:	4680      	mov	r8, r0
 8007642:	d108      	bne.n	8007656 <_printf_float+0x13e>
 8007644:	1cc8      	adds	r0, r1, #3
 8007646:	db02      	blt.n	800764e <_printf_float+0x136>
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	4299      	cmp	r1, r3
 800764c:	dd41      	ble.n	80076d2 <_printf_float+0x1ba>
 800764e:	f1ab 0302 	sub.w	r3, fp, #2
 8007652:	fa5f fb83 	uxtb.w	fp, r3
 8007656:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800765a:	d820      	bhi.n	800769e <_printf_float+0x186>
 800765c:	3901      	subs	r1, #1
 800765e:	465a      	mov	r2, fp
 8007660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007664:	9109      	str	r1, [sp, #36]	; 0x24
 8007666:	f7ff ff19 	bl	800749c <__exponent>
 800766a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766c:	1813      	adds	r3, r2, r0
 800766e:	2a01      	cmp	r2, #1
 8007670:	4681      	mov	r9, r0
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	dc02      	bgt.n	800767c <_printf_float+0x164>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	07d2      	lsls	r2, r2, #31
 800767a:	d501      	bpl.n	8007680 <_printf_float+0x168>
 800767c:	3301      	adds	r3, #1
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007684:	2b00      	cmp	r3, #0
 8007686:	d09c      	beq.n	80075c2 <_printf_float+0xaa>
 8007688:	232d      	movs	r3, #45	; 0x2d
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768e:	e798      	b.n	80075c2 <_printf_float+0xaa>
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	2a47      	cmp	r2, #71	; 0x47
 8007694:	d1be      	bne.n	8007614 <_printf_float+0xfc>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1bc      	bne.n	8007614 <_printf_float+0xfc>
 800769a:	2301      	movs	r3, #1
 800769c:	e7b9      	b.n	8007612 <_printf_float+0xfa>
 800769e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076a2:	d118      	bne.n	80076d6 <_printf_float+0x1be>
 80076a4:	2900      	cmp	r1, #0
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	dd0b      	ble.n	80076c2 <_printf_float+0x1aa>
 80076aa:	6121      	str	r1, [r4, #16]
 80076ac:	b913      	cbnz	r3, 80076b4 <_printf_float+0x19c>
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	07d0      	lsls	r0, r2, #31
 80076b2:	d502      	bpl.n	80076ba <_printf_float+0x1a2>
 80076b4:	3301      	adds	r3, #1
 80076b6:	440b      	add	r3, r1
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80076bc:	f04f 0900 	mov.w	r9, #0
 80076c0:	e7de      	b.n	8007680 <_printf_float+0x168>
 80076c2:	b913      	cbnz	r3, 80076ca <_printf_float+0x1b2>
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	07d2      	lsls	r2, r2, #31
 80076c8:	d501      	bpl.n	80076ce <_printf_float+0x1b6>
 80076ca:	3302      	adds	r3, #2
 80076cc:	e7f4      	b.n	80076b8 <_printf_float+0x1a0>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e7f2      	b.n	80076b8 <_printf_float+0x1a0>
 80076d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d8:	4299      	cmp	r1, r3
 80076da:	db05      	blt.n	80076e8 <_printf_float+0x1d0>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	6121      	str	r1, [r4, #16]
 80076e0:	07d8      	lsls	r0, r3, #31
 80076e2:	d5ea      	bpl.n	80076ba <_printf_float+0x1a2>
 80076e4:	1c4b      	adds	r3, r1, #1
 80076e6:	e7e7      	b.n	80076b8 <_printf_float+0x1a0>
 80076e8:	2900      	cmp	r1, #0
 80076ea:	bfd4      	ite	le
 80076ec:	f1c1 0202 	rsble	r2, r1, #2
 80076f0:	2201      	movgt	r2, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	e7e0      	b.n	80076b8 <_printf_float+0x1a0>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	055a      	lsls	r2, r3, #21
 80076fa:	d407      	bmi.n	800770c <_printf_float+0x1f4>
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	4642      	mov	r2, r8
 8007700:	4631      	mov	r1, r6
 8007702:	4628      	mov	r0, r5
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	d12c      	bne.n	8007764 <_printf_float+0x24c>
 800770a:	e764      	b.n	80075d6 <_printf_float+0xbe>
 800770c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007710:	f240 80e0 	bls.w	80078d4 <_printf_float+0x3bc>
 8007714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007718:	2200      	movs	r2, #0
 800771a:	2300      	movs	r3, #0
 800771c:	f7f9 f9e4 	bl	8000ae8 <__aeabi_dcmpeq>
 8007720:	2800      	cmp	r0, #0
 8007722:	d034      	beq.n	800778e <_printf_float+0x276>
 8007724:	4a37      	ldr	r2, [pc, #220]	; (8007804 <_printf_float+0x2ec>)
 8007726:	2301      	movs	r3, #1
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f af51 	beq.w	80075d6 <_printf_float+0xbe>
 8007734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007738:	429a      	cmp	r2, r3
 800773a:	db02      	blt.n	8007742 <_printf_float+0x22a>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	07d8      	lsls	r0, r3, #31
 8007740:	d510      	bpl.n	8007764 <_printf_float+0x24c>
 8007742:	ee18 3a10 	vmov	r3, s16
 8007746:	4652      	mov	r2, sl
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af41 	beq.w	80075d6 <_printf_float+0xbe>
 8007754:	f04f 0800 	mov.w	r8, #0
 8007758:	f104 091a 	add.w	r9, r4, #26
 800775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775e:	3b01      	subs	r3, #1
 8007760:	4543      	cmp	r3, r8
 8007762:	dc09      	bgt.n	8007778 <_printf_float+0x260>
 8007764:	6823      	ldr	r3, [r4, #0]
 8007766:	079b      	lsls	r3, r3, #30
 8007768:	f100 8107 	bmi.w	800797a <_printf_float+0x462>
 800776c:	68e0      	ldr	r0, [r4, #12]
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	4298      	cmp	r0, r3
 8007772:	bfb8      	it	lt
 8007774:	4618      	movlt	r0, r3
 8007776:	e730      	b.n	80075da <_printf_float+0xc2>
 8007778:	2301      	movs	r3, #1
 800777a:	464a      	mov	r2, r9
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f af27 	beq.w	80075d6 <_printf_float+0xbe>
 8007788:	f108 0801 	add.w	r8, r8, #1
 800778c:	e7e6      	b.n	800775c <_printf_float+0x244>
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc39      	bgt.n	8007808 <_printf_float+0x2f0>
 8007794:	4a1b      	ldr	r2, [pc, #108]	; (8007804 <_printf_float+0x2ec>)
 8007796:	2301      	movs	r3, #1
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af19 	beq.w	80075d6 <_printf_float+0xbe>
 80077a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077a8:	4313      	orrs	r3, r2
 80077aa:	d102      	bne.n	80077b2 <_printf_float+0x29a>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07d9      	lsls	r1, r3, #31
 80077b0:	d5d8      	bpl.n	8007764 <_printf_float+0x24c>
 80077b2:	ee18 3a10 	vmov	r3, s16
 80077b6:	4652      	mov	r2, sl
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af09 	beq.w	80075d6 <_printf_float+0xbe>
 80077c4:	f04f 0900 	mov.w	r9, #0
 80077c8:	f104 0a1a 	add.w	sl, r4, #26
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	425b      	negs	r3, r3
 80077d0:	454b      	cmp	r3, r9
 80077d2:	dc01      	bgt.n	80077d8 <_printf_float+0x2c0>
 80077d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d6:	e792      	b.n	80076fe <_printf_float+0x1e6>
 80077d8:	2301      	movs	r3, #1
 80077da:	4652      	mov	r2, sl
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	f43f aef7 	beq.w	80075d6 <_printf_float+0xbe>
 80077e8:	f109 0901 	add.w	r9, r9, #1
 80077ec:	e7ee      	b.n	80077cc <_printf_float+0x2b4>
 80077ee:	bf00      	nop
 80077f0:	7fefffff 	.word	0x7fefffff
 80077f4:	0800adc9 	.word	0x0800adc9
 80077f8:	0800adcd 	.word	0x0800adcd
 80077fc:	0800add1 	.word	0x0800add1
 8007800:	0800add5 	.word	0x0800add5
 8007804:	0800add9 	.word	0x0800add9
 8007808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800780c:	429a      	cmp	r2, r3
 800780e:	bfa8      	it	ge
 8007810:	461a      	movge	r2, r3
 8007812:	2a00      	cmp	r2, #0
 8007814:	4691      	mov	r9, r2
 8007816:	dc37      	bgt.n	8007888 <_printf_float+0x370>
 8007818:	f04f 0b00 	mov.w	fp, #0
 800781c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007820:	f104 021a 	add.w	r2, r4, #26
 8007824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007826:	9305      	str	r3, [sp, #20]
 8007828:	eba3 0309 	sub.w	r3, r3, r9
 800782c:	455b      	cmp	r3, fp
 800782e:	dc33      	bgt.n	8007898 <_printf_float+0x380>
 8007830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007834:	429a      	cmp	r2, r3
 8007836:	db3b      	blt.n	80078b0 <_printf_float+0x398>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	07da      	lsls	r2, r3, #31
 800783c:	d438      	bmi.n	80078b0 <_printf_float+0x398>
 800783e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007842:	eba2 0903 	sub.w	r9, r2, r3
 8007846:	9b05      	ldr	r3, [sp, #20]
 8007848:	1ad2      	subs	r2, r2, r3
 800784a:	4591      	cmp	r9, r2
 800784c:	bfa8      	it	ge
 800784e:	4691      	movge	r9, r2
 8007850:	f1b9 0f00 	cmp.w	r9, #0
 8007854:	dc35      	bgt.n	80078c2 <_printf_float+0x3aa>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785e:	f104 0a1a 	add.w	sl, r4, #26
 8007862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	eba3 0309 	sub.w	r3, r3, r9
 800786c:	4543      	cmp	r3, r8
 800786e:	f77f af79 	ble.w	8007764 <_printf_float+0x24c>
 8007872:	2301      	movs	r3, #1
 8007874:	4652      	mov	r2, sl
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	f43f aeaa 	beq.w	80075d6 <_printf_float+0xbe>
 8007882:	f108 0801 	add.w	r8, r8, #1
 8007886:	e7ec      	b.n	8007862 <_printf_float+0x34a>
 8007888:	4613      	mov	r3, r2
 800788a:	4631      	mov	r1, r6
 800788c:	4642      	mov	r2, r8
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	d1c0      	bne.n	8007818 <_printf_float+0x300>
 8007896:	e69e      	b.n	80075d6 <_printf_float+0xbe>
 8007898:	2301      	movs	r3, #1
 800789a:	4631      	mov	r1, r6
 800789c:	4628      	mov	r0, r5
 800789e:	9205      	str	r2, [sp, #20]
 80078a0:	47b8      	blx	r7
 80078a2:	3001      	adds	r0, #1
 80078a4:	f43f ae97 	beq.w	80075d6 <_printf_float+0xbe>
 80078a8:	9a05      	ldr	r2, [sp, #20]
 80078aa:	f10b 0b01 	add.w	fp, fp, #1
 80078ae:	e7b9      	b.n	8007824 <_printf_float+0x30c>
 80078b0:	ee18 3a10 	vmov	r3, s16
 80078b4:	4652      	mov	r2, sl
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d1be      	bne.n	800783e <_printf_float+0x326>
 80078c0:	e689      	b.n	80075d6 <_printf_float+0xbe>
 80078c2:	9a05      	ldr	r2, [sp, #20]
 80078c4:	464b      	mov	r3, r9
 80078c6:	4442      	add	r2, r8
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	d1c1      	bne.n	8007856 <_printf_float+0x33e>
 80078d2:	e680      	b.n	80075d6 <_printf_float+0xbe>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d6:	2a01      	cmp	r2, #1
 80078d8:	dc01      	bgt.n	80078de <_printf_float+0x3c6>
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	d53a      	bpl.n	8007954 <_printf_float+0x43c>
 80078de:	2301      	movs	r3, #1
 80078e0:	4642      	mov	r2, r8
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	f43f ae74 	beq.w	80075d6 <_printf_float+0xbe>
 80078ee:	ee18 3a10 	vmov	r3, s16
 80078f2:	4652      	mov	r2, sl
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f ae6b 	beq.w	80075d6 <_printf_float+0xbe>
 8007900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007904:	2200      	movs	r2, #0
 8007906:	2300      	movs	r3, #0
 8007908:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800790c:	f7f9 f8ec 	bl	8000ae8 <__aeabi_dcmpeq>
 8007910:	b9d8      	cbnz	r0, 800794a <_printf_float+0x432>
 8007912:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007916:	f108 0201 	add.w	r2, r8, #1
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	d10e      	bne.n	8007942 <_printf_float+0x42a>
 8007924:	e657      	b.n	80075d6 <_printf_float+0xbe>
 8007926:	2301      	movs	r3, #1
 8007928:	4652      	mov	r2, sl
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae50 	beq.w	80075d6 <_printf_float+0xbe>
 8007936:	f108 0801 	add.w	r8, r8, #1
 800793a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793c:	3b01      	subs	r3, #1
 800793e:	4543      	cmp	r3, r8
 8007940:	dcf1      	bgt.n	8007926 <_printf_float+0x40e>
 8007942:	464b      	mov	r3, r9
 8007944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007948:	e6da      	b.n	8007700 <_printf_float+0x1e8>
 800794a:	f04f 0800 	mov.w	r8, #0
 800794e:	f104 0a1a 	add.w	sl, r4, #26
 8007952:	e7f2      	b.n	800793a <_printf_float+0x422>
 8007954:	2301      	movs	r3, #1
 8007956:	4642      	mov	r2, r8
 8007958:	e7df      	b.n	800791a <_printf_float+0x402>
 800795a:	2301      	movs	r3, #1
 800795c:	464a      	mov	r2, r9
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	f43f ae36 	beq.w	80075d6 <_printf_float+0xbe>
 800796a:	f108 0801 	add.w	r8, r8, #1
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007972:	1a5b      	subs	r3, r3, r1
 8007974:	4543      	cmp	r3, r8
 8007976:	dcf0      	bgt.n	800795a <_printf_float+0x442>
 8007978:	e6f8      	b.n	800776c <_printf_float+0x254>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	f104 0919 	add.w	r9, r4, #25
 8007982:	e7f4      	b.n	800796e <_printf_float+0x456>

08007984 <_printf_common>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	4616      	mov	r6, r2
 800798a:	4699      	mov	r9, r3
 800798c:	688a      	ldr	r2, [r1, #8]
 800798e:	690b      	ldr	r3, [r1, #16]
 8007990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007994:	4293      	cmp	r3, r2
 8007996:	bfb8      	it	lt
 8007998:	4613      	movlt	r3, r2
 800799a:	6033      	str	r3, [r6, #0]
 800799c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a0:	4607      	mov	r7, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	b10a      	cbz	r2, 80079aa <_printf_common+0x26>
 80079a6:	3301      	adds	r3, #1
 80079a8:	6033      	str	r3, [r6, #0]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	0699      	lsls	r1, r3, #26
 80079ae:	bf42      	ittt	mi
 80079b0:	6833      	ldrmi	r3, [r6, #0]
 80079b2:	3302      	addmi	r3, #2
 80079b4:	6033      	strmi	r3, [r6, #0]
 80079b6:	6825      	ldr	r5, [r4, #0]
 80079b8:	f015 0506 	ands.w	r5, r5, #6
 80079bc:	d106      	bne.n	80079cc <_printf_common+0x48>
 80079be:	f104 0a19 	add.w	sl, r4, #25
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	6832      	ldr	r2, [r6, #0]
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	dc26      	bgt.n	8007a1a <_printf_common+0x96>
 80079cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d0:	1e13      	subs	r3, r2, #0
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	bf18      	it	ne
 80079d6:	2301      	movne	r3, #1
 80079d8:	0692      	lsls	r2, r2, #26
 80079da:	d42b      	bmi.n	8007a34 <_printf_common+0xb0>
 80079dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e0:	4649      	mov	r1, r9
 80079e2:	4638      	mov	r0, r7
 80079e4:	47c0      	blx	r8
 80079e6:	3001      	adds	r0, #1
 80079e8:	d01e      	beq.n	8007a28 <_printf_common+0xa4>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	6922      	ldr	r2, [r4, #16]
 80079ee:	f003 0306 	and.w	r3, r3, #6
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	bf02      	ittt	eq
 80079f6:	68e5      	ldreq	r5, [r4, #12]
 80079f8:	6833      	ldreq	r3, [r6, #0]
 80079fa:	1aed      	subeq	r5, r5, r3
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	bf0c      	ite	eq
 8007a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a04:	2500      	movne	r5, #0
 8007a06:	4293      	cmp	r3, r2
 8007a08:	bfc4      	itt	gt
 8007a0a:	1a9b      	subgt	r3, r3, r2
 8007a0c:	18ed      	addgt	r5, r5, r3
 8007a0e:	2600      	movs	r6, #0
 8007a10:	341a      	adds	r4, #26
 8007a12:	42b5      	cmp	r5, r6
 8007a14:	d11a      	bne.n	8007a4c <_printf_common+0xc8>
 8007a16:	2000      	movs	r0, #0
 8007a18:	e008      	b.n	8007a2c <_printf_common+0xa8>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4652      	mov	r2, sl
 8007a1e:	4649      	mov	r1, r9
 8007a20:	4638      	mov	r0, r7
 8007a22:	47c0      	blx	r8
 8007a24:	3001      	adds	r0, #1
 8007a26:	d103      	bne.n	8007a30 <_printf_common+0xac>
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a30:	3501      	adds	r5, #1
 8007a32:	e7c6      	b.n	80079c2 <_printf_common+0x3e>
 8007a34:	18e1      	adds	r1, r4, r3
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	2030      	movs	r0, #48	; 0x30
 8007a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3e:	4422      	add	r2, r4
 8007a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a48:	3302      	adds	r3, #2
 8007a4a:	e7c7      	b.n	80079dc <_printf_common+0x58>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4649      	mov	r1, r9
 8007a52:	4638      	mov	r0, r7
 8007a54:	47c0      	blx	r8
 8007a56:	3001      	adds	r0, #1
 8007a58:	d0e6      	beq.n	8007a28 <_printf_common+0xa4>
 8007a5a:	3601      	adds	r6, #1
 8007a5c:	e7d9      	b.n	8007a12 <_printf_common+0x8e>
	...

08007a60 <_printf_i>:
 8007a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	7e0f      	ldrb	r7, [r1, #24]
 8007a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a68:	2f78      	cmp	r7, #120	; 0x78
 8007a6a:	4691      	mov	r9, r2
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	469a      	mov	sl, r3
 8007a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a76:	d807      	bhi.n	8007a88 <_printf_i+0x28>
 8007a78:	2f62      	cmp	r7, #98	; 0x62
 8007a7a:	d80a      	bhi.n	8007a92 <_printf_i+0x32>
 8007a7c:	2f00      	cmp	r7, #0
 8007a7e:	f000 80d4 	beq.w	8007c2a <_printf_i+0x1ca>
 8007a82:	2f58      	cmp	r7, #88	; 0x58
 8007a84:	f000 80c0 	beq.w	8007c08 <_printf_i+0x1a8>
 8007a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a90:	e03a      	b.n	8007b08 <_printf_i+0xa8>
 8007a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a96:	2b15      	cmp	r3, #21
 8007a98:	d8f6      	bhi.n	8007a88 <_printf_i+0x28>
 8007a9a:	a101      	add	r1, pc, #4	; (adr r1, 8007aa0 <_printf_i+0x40>)
 8007a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa0:	08007af9 	.word	0x08007af9
 8007aa4:	08007b0d 	.word	0x08007b0d
 8007aa8:	08007a89 	.word	0x08007a89
 8007aac:	08007a89 	.word	0x08007a89
 8007ab0:	08007a89 	.word	0x08007a89
 8007ab4:	08007a89 	.word	0x08007a89
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007a89 	.word	0x08007a89
 8007ac0:	08007a89 	.word	0x08007a89
 8007ac4:	08007a89 	.word	0x08007a89
 8007ac8:	08007a89 	.word	0x08007a89
 8007acc:	08007c11 	.word	0x08007c11
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007bcb 	.word	0x08007bcb
 8007ad8:	08007a89 	.word	0x08007a89
 8007adc:	08007a89 	.word	0x08007a89
 8007ae0:	08007c33 	.word	0x08007c33
 8007ae4:	08007a89 	.word	0x08007a89
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007a89 	.word	0x08007a89
 8007af0:	08007a89 	.word	0x08007a89
 8007af4:	08007bd3 	.word	0x08007bd3
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	602a      	str	r2, [r5, #0]
 8007b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e09f      	b.n	8007c4c <_printf_i+0x1ec>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	0607      	lsls	r7, r0, #24
 8007b12:	f103 0104 	add.w	r1, r3, #4
 8007b16:	6029      	str	r1, [r5, #0]
 8007b18:	d501      	bpl.n	8007b1e <_printf_i+0xbe>
 8007b1a:	681e      	ldr	r6, [r3, #0]
 8007b1c:	e003      	b.n	8007b26 <_printf_i+0xc6>
 8007b1e:	0646      	lsls	r6, r0, #25
 8007b20:	d5fb      	bpl.n	8007b1a <_printf_i+0xba>
 8007b22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	da03      	bge.n	8007b32 <_printf_i+0xd2>
 8007b2a:	232d      	movs	r3, #45	; 0x2d
 8007b2c:	4276      	negs	r6, r6
 8007b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b32:	485a      	ldr	r0, [pc, #360]	; (8007c9c <_printf_i+0x23c>)
 8007b34:	230a      	movs	r3, #10
 8007b36:	e012      	b.n	8007b5e <_printf_i+0xfe>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	1d19      	adds	r1, r3, #4
 8007b3e:	6029      	str	r1, [r5, #0]
 8007b40:	0605      	lsls	r5, r0, #24
 8007b42:	d501      	bpl.n	8007b48 <_printf_i+0xe8>
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	e002      	b.n	8007b4e <_printf_i+0xee>
 8007b48:	0641      	lsls	r1, r0, #25
 8007b4a:	d5fb      	bpl.n	8007b44 <_printf_i+0xe4>
 8007b4c:	881e      	ldrh	r6, [r3, #0]
 8007b4e:	4853      	ldr	r0, [pc, #332]	; (8007c9c <_printf_i+0x23c>)
 8007b50:	2f6f      	cmp	r7, #111	; 0x6f
 8007b52:	bf0c      	ite	eq
 8007b54:	2308      	moveq	r3, #8
 8007b56:	230a      	movne	r3, #10
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5e:	6865      	ldr	r5, [r4, #4]
 8007b60:	60a5      	str	r5, [r4, #8]
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	bfa2      	ittt	ge
 8007b66:	6821      	ldrge	r1, [r4, #0]
 8007b68:	f021 0104 	bicge.w	r1, r1, #4
 8007b6c:	6021      	strge	r1, [r4, #0]
 8007b6e:	b90e      	cbnz	r6, 8007b74 <_printf_i+0x114>
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	d04b      	beq.n	8007c0c <_printf_i+0x1ac>
 8007b74:	4615      	mov	r5, r2
 8007b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b7e:	5dc7      	ldrb	r7, [r0, r7]
 8007b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b84:	4637      	mov	r7, r6
 8007b86:	42bb      	cmp	r3, r7
 8007b88:	460e      	mov	r6, r1
 8007b8a:	d9f4      	bls.n	8007b76 <_printf_i+0x116>
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d10b      	bne.n	8007ba8 <_printf_i+0x148>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	07de      	lsls	r6, r3, #31
 8007b94:	d508      	bpl.n	8007ba8 <_printf_i+0x148>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	bfde      	ittt	le
 8007b9e:	2330      	movle	r3, #48	; 0x30
 8007ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ba8:	1b52      	subs	r2, r2, r5
 8007baa:	6122      	str	r2, [r4, #16]
 8007bac:	f8cd a000 	str.w	sl, [sp]
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	aa03      	add	r2, sp, #12
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fee4 	bl	8007984 <_printf_common>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d14a      	bne.n	8007c56 <_printf_i+0x1f6>
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc4:	b004      	add	sp, #16
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	f043 0320 	orr.w	r3, r3, #32
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	4833      	ldr	r0, [pc, #204]	; (8007ca0 <_printf_i+0x240>)
 8007bd4:	2778      	movs	r7, #120	; 0x78
 8007bd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	6829      	ldr	r1, [r5, #0]
 8007bde:	061f      	lsls	r7, r3, #24
 8007be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be4:	d402      	bmi.n	8007bec <_printf_i+0x18c>
 8007be6:	065f      	lsls	r7, r3, #25
 8007be8:	bf48      	it	mi
 8007bea:	b2b6      	uxthmi	r6, r6
 8007bec:	07df      	lsls	r7, r3, #31
 8007bee:	bf48      	it	mi
 8007bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf4:	6029      	str	r1, [r5, #0]
 8007bf6:	bf48      	it	mi
 8007bf8:	6023      	strmi	r3, [r4, #0]
 8007bfa:	b91e      	cbnz	r6, 8007c04 <_printf_i+0x1a4>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	f023 0320 	bic.w	r3, r3, #32
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	2310      	movs	r3, #16
 8007c06:	e7a7      	b.n	8007b58 <_printf_i+0xf8>
 8007c08:	4824      	ldr	r0, [pc, #144]	; (8007c9c <_printf_i+0x23c>)
 8007c0a:	e7e4      	b.n	8007bd6 <_printf_i+0x176>
 8007c0c:	4615      	mov	r5, r2
 8007c0e:	e7bd      	b.n	8007b8c <_printf_i+0x12c>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	6826      	ldr	r6, [r4, #0]
 8007c14:	6961      	ldr	r1, [r4, #20]
 8007c16:	1d18      	adds	r0, r3, #4
 8007c18:	6028      	str	r0, [r5, #0]
 8007c1a:	0635      	lsls	r5, r6, #24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0x1c4>
 8007c20:	6019      	str	r1, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <_printf_i+0x1ca>
 8007c24:	0670      	lsls	r0, r6, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0x1c0>
 8007c28:	8019      	strh	r1, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	4615      	mov	r5, r2
 8007c30:	e7bc      	b.n	8007bac <_printf_i+0x14c>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	602a      	str	r2, [r5, #0]
 8007c38:	681d      	ldr	r5, [r3, #0]
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7f8 fad6 	bl	80001f0 <memchr>
 8007c44:	b108      	cbz	r0, 8007c4a <_printf_i+0x1ea>
 8007c46:	1b40      	subs	r0, r0, r5
 8007c48:	6060      	str	r0, [r4, #4]
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c54:	e7aa      	b.n	8007bac <_printf_i+0x14c>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d0ad      	beq.n	8007bc0 <_printf_i+0x160>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	d413      	bmi.n	8007c92 <_printf_i+0x232>
 8007c6a:	68e0      	ldr	r0, [r4, #12]
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	4298      	cmp	r0, r3
 8007c70:	bfb8      	it	lt
 8007c72:	4618      	movlt	r0, r3
 8007c74:	e7a6      	b.n	8007bc4 <_printf_i+0x164>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d09d      	beq.n	8007bc0 <_printf_i+0x160>
 8007c84:	3501      	adds	r5, #1
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	9903      	ldr	r1, [sp, #12]
 8007c8a:	1a5b      	subs	r3, r3, r1
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dcf2      	bgt.n	8007c76 <_printf_i+0x216>
 8007c90:	e7eb      	b.n	8007c6a <_printf_i+0x20a>
 8007c92:	2500      	movs	r5, #0
 8007c94:	f104 0619 	add.w	r6, r4, #25
 8007c98:	e7f5      	b.n	8007c86 <_printf_i+0x226>
 8007c9a:	bf00      	nop
 8007c9c:	0800addb 	.word	0x0800addb
 8007ca0:	0800adec 	.word	0x0800adec

08007ca4 <std>:
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	b510      	push	{r4, lr}
 8007ca8:	4604      	mov	r4, r0
 8007caa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb2:	6083      	str	r3, [r0, #8]
 8007cb4:	8181      	strh	r1, [r0, #12]
 8007cb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007cb8:	81c2      	strh	r2, [r0, #14]
 8007cba:	6183      	str	r3, [r0, #24]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	305c      	adds	r0, #92	; 0x5c
 8007cc2:	f000 f92c 	bl	8007f1e <memset>
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x38>)
 8007cc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007cca:	4b05      	ldr	r3, [pc, #20]	; (8007ce0 <std+0x3c>)
 8007ccc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <std+0x40>)
 8007cd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <std+0x44>)
 8007cd4:	6224      	str	r4, [r4, #32]
 8007cd6:	6323      	str	r3, [r4, #48]	; 0x30
 8007cd8:	bd10      	pop	{r4, pc}
 8007cda:	bf00      	nop
 8007cdc:	08007e45 	.word	0x08007e45
 8007ce0:	08007e67 	.word	0x08007e67
 8007ce4:	08007e9f 	.word	0x08007e9f
 8007ce8:	08007ec3 	.word	0x08007ec3

08007cec <stdio_exit_handler>:
 8007cec:	4a02      	ldr	r2, [pc, #8]	; (8007cf8 <stdio_exit_handler+0xc>)
 8007cee:	4903      	ldr	r1, [pc, #12]	; (8007cfc <stdio_exit_handler+0x10>)
 8007cf0:	4803      	ldr	r0, [pc, #12]	; (8007d00 <stdio_exit_handler+0x14>)
 8007cf2:	f000 b869 	b.w	8007dc8 <_fwalk_sglue>
 8007cf6:	bf00      	nop
 8007cf8:	20000030 	.word	0x20000030
 8007cfc:	0800a299 	.word	0x0800a299
 8007d00:	200001a8 	.word	0x200001a8

08007d04 <cleanup_stdio>:
 8007d04:	6841      	ldr	r1, [r0, #4]
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <cleanup_stdio+0x34>)
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	b510      	push	{r4, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	d001      	beq.n	8007d14 <cleanup_stdio+0x10>
 8007d10:	f002 fac2 	bl	800a298 <_fflush_r>
 8007d14:	68a1      	ldr	r1, [r4, #8]
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <cleanup_stdio+0x38>)
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	d002      	beq.n	8007d22 <cleanup_stdio+0x1e>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f002 fabb 	bl	800a298 <_fflush_r>
 8007d22:	68e1      	ldr	r1, [r4, #12]
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <cleanup_stdio+0x3c>)
 8007d26:	4299      	cmp	r1, r3
 8007d28:	d004      	beq.n	8007d34 <cleanup_stdio+0x30>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d30:	f002 bab2 	b.w	800a298 <_fflush_r>
 8007d34:	bd10      	pop	{r4, pc}
 8007d36:	bf00      	nop
 8007d38:	200013b4 	.word	0x200013b4
 8007d3c:	2000141c 	.word	0x2000141c
 8007d40:	20001484 	.word	0x20001484

08007d44 <global_stdio_init.part.0>:
 8007d44:	b510      	push	{r4, lr}
 8007d46:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <global_stdio_init.part.0+0x30>)
 8007d48:	4c0b      	ldr	r4, [pc, #44]	; (8007d78 <global_stdio_init.part.0+0x34>)
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <global_stdio_init.part.0+0x38>)
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	2200      	movs	r2, #0
 8007d52:	2104      	movs	r1, #4
 8007d54:	f7ff ffa6 	bl	8007ca4 <std>
 8007d58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2109      	movs	r1, #9
 8007d60:	f7ff ffa0 	bl	8007ca4 <std>
 8007d64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d68:	2202      	movs	r2, #2
 8007d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6e:	2112      	movs	r1, #18
 8007d70:	f7ff bf98 	b.w	8007ca4 <std>
 8007d74:	200014ec 	.word	0x200014ec
 8007d78:	200013b4 	.word	0x200013b4
 8007d7c:	08007ced 	.word	0x08007ced

08007d80 <__sfp_lock_acquire>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__sfp_lock_acquire+0x8>)
 8007d82:	f000 b9a1 	b.w	80080c8 <__retarget_lock_acquire_recursive>
 8007d86:	bf00      	nop
 8007d88:	200014f5 	.word	0x200014f5

08007d8c <__sfp_lock_release>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__sfp_lock_release+0x8>)
 8007d8e:	f000 b99c 	b.w	80080ca <__retarget_lock_release_recursive>
 8007d92:	bf00      	nop
 8007d94:	200014f5 	.word	0x200014f5

08007d98 <__sinit>:
 8007d98:	b510      	push	{r4, lr}
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	f7ff fff0 	bl	8007d80 <__sfp_lock_acquire>
 8007da0:	6a23      	ldr	r3, [r4, #32]
 8007da2:	b11b      	cbz	r3, 8007dac <__sinit+0x14>
 8007da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da8:	f7ff bff0 	b.w	8007d8c <__sfp_lock_release>
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <__sinit+0x28>)
 8007dae:	6223      	str	r3, [r4, #32]
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <__sinit+0x2c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1f5      	bne.n	8007da4 <__sinit+0xc>
 8007db8:	f7ff ffc4 	bl	8007d44 <global_stdio_init.part.0>
 8007dbc:	e7f2      	b.n	8007da4 <__sinit+0xc>
 8007dbe:	bf00      	nop
 8007dc0:	08007d05 	.word	0x08007d05
 8007dc4:	200014ec 	.word	0x200014ec

08007dc8 <_fwalk_sglue>:
 8007dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	4607      	mov	r7, r0
 8007dce:	4688      	mov	r8, r1
 8007dd0:	4614      	mov	r4, r2
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8007ddc:	d505      	bpl.n	8007dea <_fwalk_sglue+0x22>
 8007dde:	6824      	ldr	r4, [r4, #0]
 8007de0:	2c00      	cmp	r4, #0
 8007de2:	d1f7      	bne.n	8007dd4 <_fwalk_sglue+0xc>
 8007de4:	4630      	mov	r0, r6
 8007de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d907      	bls.n	8007e00 <_fwalk_sglue+0x38>
 8007df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df4:	3301      	adds	r3, #1
 8007df6:	d003      	beq.n	8007e00 <_fwalk_sglue+0x38>
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	4306      	orrs	r6, r0
 8007e00:	3568      	adds	r5, #104	; 0x68
 8007e02:	e7e9      	b.n	8007dd8 <_fwalk_sglue+0x10>

08007e04 <siprintf>:
 8007e04:	b40e      	push	{r1, r2, r3}
 8007e06:	b500      	push	{lr}
 8007e08:	b09c      	sub	sp, #112	; 0x70
 8007e0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e0c:	9002      	str	r0, [sp, #8]
 8007e0e:	9006      	str	r0, [sp, #24]
 8007e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e14:	4809      	ldr	r0, [pc, #36]	; (8007e3c <siprintf+0x38>)
 8007e16:	9107      	str	r1, [sp, #28]
 8007e18:	9104      	str	r1, [sp, #16]
 8007e1a:	4909      	ldr	r1, [pc, #36]	; (8007e40 <siprintf+0x3c>)
 8007e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e20:	9105      	str	r1, [sp, #20]
 8007e22:	6800      	ldr	r0, [r0, #0]
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	a902      	add	r1, sp, #8
 8007e28:	f002 f8b2 	bl	8009f90 <_svfiprintf_r>
 8007e2c:	9b02      	ldr	r3, [sp, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	b01c      	add	sp, #112	; 0x70
 8007e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e38:	b003      	add	sp, #12
 8007e3a:	4770      	bx	lr
 8007e3c:	200001f4 	.word	0x200001f4
 8007e40:	ffff0208 	.word	0xffff0208

08007e44 <__sread>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	460c      	mov	r4, r1
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	f000 f8de 	bl	800800c <_read_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	bfab      	itete	ge
 8007e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e56:	89a3      	ldrhlt	r3, [r4, #12]
 8007e58:	181b      	addge	r3, r3, r0
 8007e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e5e:	bfac      	ite	ge
 8007e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e62:	81a3      	strhlt	r3, [r4, #12]
 8007e64:	bd10      	pop	{r4, pc}

08007e66 <__swrite>:
 8007e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	461f      	mov	r7, r3
 8007e6c:	898b      	ldrh	r3, [r1, #12]
 8007e6e:	05db      	lsls	r3, r3, #23
 8007e70:	4605      	mov	r5, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	4616      	mov	r6, r2
 8007e76:	d505      	bpl.n	8007e84 <__swrite+0x1e>
 8007e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f000 f8b2 	bl	8007fe8 <_lseek_r>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	4632      	mov	r2, r6
 8007e92:	463b      	mov	r3, r7
 8007e94:	4628      	mov	r0, r5
 8007e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9a:	f000 b8d9 	b.w	8008050 <_write_r>

08007e9e <__sseek>:
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea6:	f000 f89f 	bl	8007fe8 <_lseek_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	bf15      	itete	ne
 8007eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eba:	81a3      	strheq	r3, [r4, #12]
 8007ebc:	bf18      	it	ne
 8007ebe:	81a3      	strhne	r3, [r4, #12]
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <__sclose>:
 8007ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec6:	f000 b87f 	b.w	8007fc8 <_close_r>

08007eca <memcmp>:
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	3901      	subs	r1, #1
 8007ece:	4402      	add	r2, r0
 8007ed0:	4290      	cmp	r0, r2
 8007ed2:	d101      	bne.n	8007ed8 <memcmp+0xe>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e005      	b.n	8007ee4 <memcmp+0x1a>
 8007ed8:	7803      	ldrb	r3, [r0, #0]
 8007eda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ede:	42a3      	cmp	r3, r4
 8007ee0:	d001      	beq.n	8007ee6 <memcmp+0x1c>
 8007ee2:	1b18      	subs	r0, r3, r4
 8007ee4:	bd10      	pop	{r4, pc}
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	e7f2      	b.n	8007ed0 <memcmp+0x6>

08007eea <memmove>:
 8007eea:	4288      	cmp	r0, r1
 8007eec:	b510      	push	{r4, lr}
 8007eee:	eb01 0402 	add.w	r4, r1, r2
 8007ef2:	d902      	bls.n	8007efa <memmove+0x10>
 8007ef4:	4284      	cmp	r4, r0
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	d807      	bhi.n	8007f0a <memmove+0x20>
 8007efa:	1e43      	subs	r3, r0, #1
 8007efc:	42a1      	cmp	r1, r4
 8007efe:	d008      	beq.n	8007f12 <memmove+0x28>
 8007f00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f08:	e7f8      	b.n	8007efc <memmove+0x12>
 8007f0a:	4402      	add	r2, r0
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	428a      	cmp	r2, r1
 8007f10:	d100      	bne.n	8007f14 <memmove+0x2a>
 8007f12:	bd10      	pop	{r4, pc}
 8007f14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f1c:	e7f7      	b.n	8007f0e <memmove+0x24>

08007f1e <memset>:
 8007f1e:	4402      	add	r2, r0
 8007f20:	4603      	mov	r3, r0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d100      	bne.n	8007f28 <memset+0xa>
 8007f26:	4770      	bx	lr
 8007f28:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2c:	e7f9      	b.n	8007f22 <memset+0x4>

08007f2e <strchr>:
 8007f2e:	b2c9      	uxtb	r1, r1
 8007f30:	4603      	mov	r3, r0
 8007f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f36:	b11a      	cbz	r2, 8007f40 <strchr+0x12>
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	d1f9      	bne.n	8007f30 <strchr+0x2>
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	4770      	bx	lr
 8007f40:	2900      	cmp	r1, #0
 8007f42:	bf18      	it	ne
 8007f44:	2300      	movne	r3, #0
 8007f46:	e7f9      	b.n	8007f3c <strchr+0xe>

08007f48 <strncmp>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	b16a      	cbz	r2, 8007f68 <strncmp+0x20>
 8007f4c:	3901      	subs	r1, #1
 8007f4e:	1884      	adds	r4, r0, r2
 8007f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d103      	bne.n	8007f64 <strncmp+0x1c>
 8007f5c:	42a0      	cmp	r0, r4
 8007f5e:	d001      	beq.n	8007f64 <strncmp+0x1c>
 8007f60:	2a00      	cmp	r2, #0
 8007f62:	d1f5      	bne.n	8007f50 <strncmp+0x8>
 8007f64:	1ad0      	subs	r0, r2, r3
 8007f66:	bd10      	pop	{r4, pc}
 8007f68:	4610      	mov	r0, r2
 8007f6a:	e7fc      	b.n	8007f66 <strncmp+0x1e>

08007f6c <strncpy>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	3901      	subs	r1, #1
 8007f70:	4603      	mov	r3, r0
 8007f72:	b132      	cbz	r2, 8007f82 <strncpy+0x16>
 8007f74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f78:	f803 4b01 	strb.w	r4, [r3], #1
 8007f7c:	3a01      	subs	r2, #1
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d1f7      	bne.n	8007f72 <strncpy+0x6>
 8007f82:	441a      	add	r2, r3
 8007f84:	2100      	movs	r1, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d100      	bne.n	8007f8c <strncpy+0x20>
 8007f8a:	bd10      	pop	{r4, pc}
 8007f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f90:	e7f9      	b.n	8007f86 <strncpy+0x1a>

08007f92 <strstr>:
 8007f92:	780a      	ldrb	r2, [r1, #0]
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	b96a      	cbnz	r2, 8007fb4 <strstr+0x22>
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d109      	bne.n	8007fb2 <strstr+0x20>
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f6      	beq.n	8007f98 <strstr+0x6>
 8007faa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007fae:	429e      	cmp	r6, r3
 8007fb0:	d0f7      	beq.n	8007fa2 <strstr+0x10>
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	7803      	ldrb	r3, [r0, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1ef      	bne.n	8007f9a <strstr+0x8>
 8007fba:	4618      	mov	r0, r3
 8007fbc:	e7ec      	b.n	8007f98 <strstr+0x6>
	...

08007fc0 <_localeconv_r>:
 8007fc0:	4800      	ldr	r0, [pc, #0]	; (8007fc4 <_localeconv_r+0x4>)
 8007fc2:	4770      	bx	lr
 8007fc4:	2000012c 	.word	0x2000012c

08007fc8 <_close_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	; (8007fe4 <_close_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7fb fca7 	bl	8003926 <_close>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_close_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_close_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	200014f0 	.word	0x200014f0

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_lseek_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7fb fcbc 	bl	8003974 <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	200014f0 	.word	0x200014f0

0800800c <_read_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	; (800802c <_read_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7fb fc4a 	bl	80038b4 <_read>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_read_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_read_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	200014f0 	.word	0x200014f0

08008030 <_sbrk_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d06      	ldr	r5, [pc, #24]	; (800804c <_sbrk_r+0x1c>)
 8008034:	2300      	movs	r3, #0
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	602b      	str	r3, [r5, #0]
 800803c:	f7fb fca8 	bl	8003990 <_sbrk>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_sbrk_r+0x1a>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_sbrk_r+0x1a>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	200014f0 	.word	0x200014f0

08008050 <_write_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d07      	ldr	r5, [pc, #28]	; (8008070 <_write_r+0x20>)
 8008054:	4604      	mov	r4, r0
 8008056:	4608      	mov	r0, r1
 8008058:	4611      	mov	r1, r2
 800805a:	2200      	movs	r2, #0
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7fb fc45 	bl	80038ee <_write>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_write_r+0x1e>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_write_r+0x1e>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	200014f0 	.word	0x200014f0

08008074 <__errno>:
 8008074:	4b01      	ldr	r3, [pc, #4]	; (800807c <__errno+0x8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	200001f4 	.word	0x200001f4

08008080 <__libc_init_array>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	4d0d      	ldr	r5, [pc, #52]	; (80080b8 <__libc_init_array+0x38>)
 8008084:	4c0d      	ldr	r4, [pc, #52]	; (80080bc <__libc_init_array+0x3c>)
 8008086:	1b64      	subs	r4, r4, r5
 8008088:	10a4      	asrs	r4, r4, #2
 800808a:	2600      	movs	r6, #0
 800808c:	42a6      	cmp	r6, r4
 800808e:	d109      	bne.n	80080a4 <__libc_init_array+0x24>
 8008090:	4d0b      	ldr	r5, [pc, #44]	; (80080c0 <__libc_init_array+0x40>)
 8008092:	4c0c      	ldr	r4, [pc, #48]	; (80080c4 <__libc_init_array+0x44>)
 8008094:	f002 fc16 	bl	800a8c4 <_init>
 8008098:	1b64      	subs	r4, r4, r5
 800809a:	10a4      	asrs	r4, r4, #2
 800809c:	2600      	movs	r6, #0
 800809e:	42a6      	cmp	r6, r4
 80080a0:	d105      	bne.n	80080ae <__libc_init_array+0x2e>
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a8:	4798      	blx	r3
 80080aa:	3601      	adds	r6, #1
 80080ac:	e7ee      	b.n	800808c <__libc_init_array+0xc>
 80080ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b2:	4798      	blx	r3
 80080b4:	3601      	adds	r6, #1
 80080b6:	e7f2      	b.n	800809e <__libc_init_array+0x1e>
 80080b8:	0800b0a4 	.word	0x0800b0a4
 80080bc:	0800b0a4 	.word	0x0800b0a4
 80080c0:	0800b0a4 	.word	0x0800b0a4
 80080c4:	0800b0a8 	.word	0x0800b0a8

080080c8 <__retarget_lock_acquire_recursive>:
 80080c8:	4770      	bx	lr

080080ca <__retarget_lock_release_recursive>:
 80080ca:	4770      	bx	lr

080080cc <memcpy>:
 80080cc:	440a      	add	r2, r1
 80080ce:	4291      	cmp	r1, r2
 80080d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080d4:	d100      	bne.n	80080d8 <memcpy+0xc>
 80080d6:	4770      	bx	lr
 80080d8:	b510      	push	{r4, lr}
 80080da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080e2:	4291      	cmp	r1, r2
 80080e4:	d1f9      	bne.n	80080da <memcpy+0xe>
 80080e6:	bd10      	pop	{r4, pc}

080080e8 <nan>:
 80080e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80080f0 <nan+0x8>
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	00000000 	.word	0x00000000
 80080f4:	7ff80000 	.word	0x7ff80000

080080f8 <quorem>:
 80080f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	6903      	ldr	r3, [r0, #16]
 80080fe:	690c      	ldr	r4, [r1, #16]
 8008100:	42a3      	cmp	r3, r4
 8008102:	4607      	mov	r7, r0
 8008104:	db7e      	blt.n	8008204 <quorem+0x10c>
 8008106:	3c01      	subs	r4, #1
 8008108:	f101 0814 	add.w	r8, r1, #20
 800810c:	f100 0514 	add.w	r5, r0, #20
 8008110:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800811a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800811e:	3301      	adds	r3, #1
 8008120:	429a      	cmp	r2, r3
 8008122:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800812a:	fbb2 f6f3 	udiv	r6, r2, r3
 800812e:	d331      	bcc.n	8008194 <quorem+0x9c>
 8008130:	f04f 0e00 	mov.w	lr, #0
 8008134:	4640      	mov	r0, r8
 8008136:	46ac      	mov	ip, r5
 8008138:	46f2      	mov	sl, lr
 800813a:	f850 2b04 	ldr.w	r2, [r0], #4
 800813e:	b293      	uxth	r3, r2
 8008140:	fb06 e303 	mla	r3, r6, r3, lr
 8008144:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008148:	0c1a      	lsrs	r2, r3, #16
 800814a:	b29b      	uxth	r3, r3
 800814c:	ebaa 0303 	sub.w	r3, sl, r3
 8008150:	f8dc a000 	ldr.w	sl, [ip]
 8008154:	fa13 f38a 	uxtah	r3, r3, sl
 8008158:	fb06 220e 	mla	r2, r6, lr, r2
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	9b00      	ldr	r3, [sp, #0]
 8008160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008164:	b292      	uxth	r2, r2
 8008166:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800816a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800816e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008172:	4581      	cmp	r9, r0
 8008174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008178:	f84c 3b04 	str.w	r3, [ip], #4
 800817c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008180:	d2db      	bcs.n	800813a <quorem+0x42>
 8008182:	f855 300b 	ldr.w	r3, [r5, fp]
 8008186:	b92b      	cbnz	r3, 8008194 <quorem+0x9c>
 8008188:	9b01      	ldr	r3, [sp, #4]
 800818a:	3b04      	subs	r3, #4
 800818c:	429d      	cmp	r5, r3
 800818e:	461a      	mov	r2, r3
 8008190:	d32c      	bcc.n	80081ec <quorem+0xf4>
 8008192:	613c      	str	r4, [r7, #16]
 8008194:	4638      	mov	r0, r7
 8008196:	f001 fca5 	bl	8009ae4 <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	db22      	blt.n	80081e4 <quorem+0xec>
 800819e:	3601      	adds	r6, #1
 80081a0:	4629      	mov	r1, r5
 80081a2:	2000      	movs	r0, #0
 80081a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80081a8:	f8d1 c000 	ldr.w	ip, [r1]
 80081ac:	b293      	uxth	r3, r2
 80081ae:	1ac3      	subs	r3, r0, r3
 80081b0:	0c12      	lsrs	r2, r2, #16
 80081b2:	fa13 f38c 	uxtah	r3, r3, ip
 80081b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80081ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081c4:	45c1      	cmp	r9, r8
 80081c6:	f841 3b04 	str.w	r3, [r1], #4
 80081ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081ce:	d2e9      	bcs.n	80081a4 <quorem+0xac>
 80081d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d8:	b922      	cbnz	r2, 80081e4 <quorem+0xec>
 80081da:	3b04      	subs	r3, #4
 80081dc:	429d      	cmp	r5, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	d30a      	bcc.n	80081f8 <quorem+0x100>
 80081e2:	613c      	str	r4, [r7, #16]
 80081e4:	4630      	mov	r0, r6
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	3b04      	subs	r3, #4
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	d1ce      	bne.n	8008192 <quorem+0x9a>
 80081f4:	3c01      	subs	r4, #1
 80081f6:	e7c9      	b.n	800818c <quorem+0x94>
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	3b04      	subs	r3, #4
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	d1f0      	bne.n	80081e2 <quorem+0xea>
 8008200:	3c01      	subs	r4, #1
 8008202:	e7eb      	b.n	80081dc <quorem+0xe4>
 8008204:	2000      	movs	r0, #0
 8008206:	e7ee      	b.n	80081e6 <quorem+0xee>

08008208 <_dtoa_r>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	ed2d 8b04 	vpush	{d8-d9}
 8008210:	69c5      	ldr	r5, [r0, #28]
 8008212:	b093      	sub	sp, #76	; 0x4c
 8008214:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008218:	ec57 6b10 	vmov	r6, r7, d0
 800821c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008220:	9107      	str	r1, [sp, #28]
 8008222:	4604      	mov	r4, r0
 8008224:	920a      	str	r2, [sp, #40]	; 0x28
 8008226:	930d      	str	r3, [sp, #52]	; 0x34
 8008228:	b975      	cbnz	r5, 8008248 <_dtoa_r+0x40>
 800822a:	2010      	movs	r0, #16
 800822c:	f7fe f9c6 	bl	80065bc <malloc>
 8008230:	4602      	mov	r2, r0
 8008232:	61e0      	str	r0, [r4, #28]
 8008234:	b920      	cbnz	r0, 8008240 <_dtoa_r+0x38>
 8008236:	4bae      	ldr	r3, [pc, #696]	; (80084f0 <_dtoa_r+0x2e8>)
 8008238:	21ef      	movs	r1, #239	; 0xef
 800823a:	48ae      	ldr	r0, [pc, #696]	; (80084f4 <_dtoa_r+0x2ec>)
 800823c:	f002 f854 	bl	800a2e8 <__assert_func>
 8008240:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008244:	6005      	str	r5, [r0, #0]
 8008246:	60c5      	str	r5, [r0, #12]
 8008248:	69e3      	ldr	r3, [r4, #28]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	b151      	cbz	r1, 8008264 <_dtoa_r+0x5c>
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	604a      	str	r2, [r1, #4]
 8008252:	2301      	movs	r3, #1
 8008254:	4093      	lsls	r3, r2
 8008256:	608b      	str	r3, [r1, #8]
 8008258:	4620      	mov	r0, r4
 800825a:	f001 f9bd 	bl	80095d8 <_Bfree>
 800825e:	69e3      	ldr	r3, [r4, #28]
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	1e3b      	subs	r3, r7, #0
 8008266:	bfbb      	ittet	lt
 8008268:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800826c:	9303      	strlt	r3, [sp, #12]
 800826e:	2300      	movge	r3, #0
 8008270:	2201      	movlt	r2, #1
 8008272:	bfac      	ite	ge
 8008274:	f8c8 3000 	strge.w	r3, [r8]
 8008278:	f8c8 2000 	strlt.w	r2, [r8]
 800827c:	4b9e      	ldr	r3, [pc, #632]	; (80084f8 <_dtoa_r+0x2f0>)
 800827e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008282:	ea33 0308 	bics.w	r3, r3, r8
 8008286:	d11b      	bne.n	80082c0 <_dtoa_r+0xb8>
 8008288:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800828a:	f242 730f 	movw	r3, #9999	; 0x270f
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008294:	4333      	orrs	r3, r6
 8008296:	f000 8593 	beq.w	8008dc0 <_dtoa_r+0xbb8>
 800829a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800829c:	b963      	cbnz	r3, 80082b8 <_dtoa_r+0xb0>
 800829e:	4b97      	ldr	r3, [pc, #604]	; (80084fc <_dtoa_r+0x2f4>)
 80082a0:	e027      	b.n	80082f2 <_dtoa_r+0xea>
 80082a2:	4b97      	ldr	r3, [pc, #604]	; (8008500 <_dtoa_r+0x2f8>)
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	3308      	adds	r3, #8
 80082a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	9800      	ldr	r0, [sp, #0]
 80082ae:	b013      	add	sp, #76	; 0x4c
 80082b0:	ecbd 8b04 	vpop	{d8-d9}
 80082b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	4b90      	ldr	r3, [pc, #576]	; (80084fc <_dtoa_r+0x2f4>)
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	3303      	adds	r3, #3
 80082be:	e7f3      	b.n	80082a8 <_dtoa_r+0xa0>
 80082c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	ec51 0b17 	vmov	r0, r1, d7
 80082ca:	eeb0 8a47 	vmov.f32	s16, s14
 80082ce:	eef0 8a67 	vmov.f32	s17, s15
 80082d2:	2300      	movs	r3, #0
 80082d4:	f7f8 fc08 	bl	8000ae8 <__aeabi_dcmpeq>
 80082d8:	4681      	mov	r9, r0
 80082da:	b160      	cbz	r0, 80082f6 <_dtoa_r+0xee>
 80082dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082de:	2301      	movs	r3, #1
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8568 	beq.w	8008dba <_dtoa_r+0xbb2>
 80082ea:	4b86      	ldr	r3, [pc, #536]	; (8008504 <_dtoa_r+0x2fc>)
 80082ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	e7da      	b.n	80082ac <_dtoa_r+0xa4>
 80082f6:	aa10      	add	r2, sp, #64	; 0x40
 80082f8:	a911      	add	r1, sp, #68	; 0x44
 80082fa:	4620      	mov	r0, r4
 80082fc:	eeb0 0a48 	vmov.f32	s0, s16
 8008300:	eef0 0a68 	vmov.f32	s1, s17
 8008304:	f001 fd04 	bl	8009d10 <__d2b>
 8008308:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800830c:	4682      	mov	sl, r0
 800830e:	2d00      	cmp	r5, #0
 8008310:	d07f      	beq.n	8008412 <_dtoa_r+0x20a>
 8008312:	ee18 3a90 	vmov	r3, s17
 8008316:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800831a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800831e:	ec51 0b18 	vmov	r0, r1, d8
 8008322:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800832a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800832e:	4619      	mov	r1, r3
 8008330:	2200      	movs	r2, #0
 8008332:	4b75      	ldr	r3, [pc, #468]	; (8008508 <_dtoa_r+0x300>)
 8008334:	f7f7 ffb8 	bl	80002a8 <__aeabi_dsub>
 8008338:	a367      	add	r3, pc, #412	; (adr r3, 80084d8 <_dtoa_r+0x2d0>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f8 f96b 	bl	8000618 <__aeabi_dmul>
 8008342:	a367      	add	r3, pc, #412	; (adr r3, 80084e0 <_dtoa_r+0x2d8>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f7 ffb0 	bl	80002ac <__adddf3>
 800834c:	4606      	mov	r6, r0
 800834e:	4628      	mov	r0, r5
 8008350:	460f      	mov	r7, r1
 8008352:	f7f8 f8f7 	bl	8000544 <__aeabi_i2d>
 8008356:	a364      	add	r3, pc, #400	; (adr r3, 80084e8 <_dtoa_r+0x2e0>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f7f8 f95c 	bl	8000618 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f7 ffa0 	bl	80002ac <__adddf3>
 800836c:	4606      	mov	r6, r0
 800836e:	460f      	mov	r7, r1
 8008370:	f7f8 fc02 	bl	8000b78 <__aeabi_d2iz>
 8008374:	2200      	movs	r2, #0
 8008376:	4683      	mov	fp, r0
 8008378:	2300      	movs	r3, #0
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fbbd 	bl	8000afc <__aeabi_dcmplt>
 8008382:	b148      	cbz	r0, 8008398 <_dtoa_r+0x190>
 8008384:	4658      	mov	r0, fp
 8008386:	f7f8 f8dd 	bl	8000544 <__aeabi_i2d>
 800838a:	4632      	mov	r2, r6
 800838c:	463b      	mov	r3, r7
 800838e:	f7f8 fbab 	bl	8000ae8 <__aeabi_dcmpeq>
 8008392:	b908      	cbnz	r0, 8008398 <_dtoa_r+0x190>
 8008394:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008398:	f1bb 0f16 	cmp.w	fp, #22
 800839c:	d857      	bhi.n	800844e <_dtoa_r+0x246>
 800839e:	4b5b      	ldr	r3, [pc, #364]	; (800850c <_dtoa_r+0x304>)
 80083a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	ec51 0b18 	vmov	r0, r1, d8
 80083ac:	f7f8 fba6 	bl	8000afc <__aeabi_dcmplt>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d04e      	beq.n	8008452 <_dtoa_r+0x24a>
 80083b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083b8:	2300      	movs	r3, #0
 80083ba:	930c      	str	r3, [sp, #48]	; 0x30
 80083bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083be:	1b5b      	subs	r3, r3, r5
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	bf45      	ittet	mi
 80083c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80083c8:	9305      	strmi	r3, [sp, #20]
 80083ca:	2300      	movpl	r3, #0
 80083cc:	2300      	movmi	r3, #0
 80083ce:	9206      	str	r2, [sp, #24]
 80083d0:	bf54      	ite	pl
 80083d2:	9305      	strpl	r3, [sp, #20]
 80083d4:	9306      	strmi	r3, [sp, #24]
 80083d6:	f1bb 0f00 	cmp.w	fp, #0
 80083da:	db3c      	blt.n	8008456 <_dtoa_r+0x24e>
 80083dc:	9b06      	ldr	r3, [sp, #24]
 80083de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083e2:	445b      	add	r3, fp
 80083e4:	9306      	str	r3, [sp, #24]
 80083e6:	2300      	movs	r3, #0
 80083e8:	9308      	str	r3, [sp, #32]
 80083ea:	9b07      	ldr	r3, [sp, #28]
 80083ec:	2b09      	cmp	r3, #9
 80083ee:	d868      	bhi.n	80084c2 <_dtoa_r+0x2ba>
 80083f0:	2b05      	cmp	r3, #5
 80083f2:	bfc4      	itt	gt
 80083f4:	3b04      	subgt	r3, #4
 80083f6:	9307      	strgt	r3, [sp, #28]
 80083f8:	9b07      	ldr	r3, [sp, #28]
 80083fa:	f1a3 0302 	sub.w	r3, r3, #2
 80083fe:	bfcc      	ite	gt
 8008400:	2500      	movgt	r5, #0
 8008402:	2501      	movle	r5, #1
 8008404:	2b03      	cmp	r3, #3
 8008406:	f200 8085 	bhi.w	8008514 <_dtoa_r+0x30c>
 800840a:	e8df f003 	tbb	[pc, r3]
 800840e:	3b2e      	.short	0x3b2e
 8008410:	5839      	.short	0x5839
 8008412:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008416:	441d      	add	r5, r3
 8008418:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800841c:	2b20      	cmp	r3, #32
 800841e:	bfc1      	itttt	gt
 8008420:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008424:	fa08 f803 	lslgt.w	r8, r8, r3
 8008428:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800842c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008430:	bfd6      	itet	le
 8008432:	f1c3 0320 	rsble	r3, r3, #32
 8008436:	ea48 0003 	orrgt.w	r0, r8, r3
 800843a:	fa06 f003 	lslle.w	r0, r6, r3
 800843e:	f7f8 f871 	bl	8000524 <__aeabi_ui2d>
 8008442:	2201      	movs	r2, #1
 8008444:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008448:	3d01      	subs	r5, #1
 800844a:	920e      	str	r2, [sp, #56]	; 0x38
 800844c:	e76f      	b.n	800832e <_dtoa_r+0x126>
 800844e:	2301      	movs	r3, #1
 8008450:	e7b3      	b.n	80083ba <_dtoa_r+0x1b2>
 8008452:	900c      	str	r0, [sp, #48]	; 0x30
 8008454:	e7b2      	b.n	80083bc <_dtoa_r+0x1b4>
 8008456:	9b05      	ldr	r3, [sp, #20]
 8008458:	eba3 030b 	sub.w	r3, r3, fp
 800845c:	9305      	str	r3, [sp, #20]
 800845e:	f1cb 0300 	rsb	r3, fp, #0
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	2300      	movs	r3, #0
 8008466:	930b      	str	r3, [sp, #44]	; 0x2c
 8008468:	e7bf      	b.n	80083ea <_dtoa_r+0x1e2>
 800846a:	2300      	movs	r3, #0
 800846c:	9309      	str	r3, [sp, #36]	; 0x24
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc52      	bgt.n	800851a <_dtoa_r+0x312>
 8008474:	2301      	movs	r3, #1
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	461a      	mov	r2, r3
 800847c:	920a      	str	r2, [sp, #40]	; 0x28
 800847e:	e00b      	b.n	8008498 <_dtoa_r+0x290>
 8008480:	2301      	movs	r3, #1
 8008482:	e7f3      	b.n	800846c <_dtoa_r+0x264>
 8008484:	2300      	movs	r3, #0
 8008486:	9309      	str	r3, [sp, #36]	; 0x24
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	445b      	add	r3, fp
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	bfb8      	it	lt
 8008496:	2301      	movlt	r3, #1
 8008498:	69e0      	ldr	r0, [r4, #28]
 800849a:	2100      	movs	r1, #0
 800849c:	2204      	movs	r2, #4
 800849e:	f102 0614 	add.w	r6, r2, #20
 80084a2:	429e      	cmp	r6, r3
 80084a4:	d93d      	bls.n	8008522 <_dtoa_r+0x31a>
 80084a6:	6041      	str	r1, [r0, #4]
 80084a8:	4620      	mov	r0, r4
 80084aa:	f001 f855 	bl	8009558 <_Balloc>
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d139      	bne.n	8008528 <_dtoa_r+0x320>
 80084b4:	4b16      	ldr	r3, [pc, #88]	; (8008510 <_dtoa_r+0x308>)
 80084b6:	4602      	mov	r2, r0
 80084b8:	f240 11af 	movw	r1, #431	; 0x1af
 80084bc:	e6bd      	b.n	800823a <_dtoa_r+0x32>
 80084be:	2301      	movs	r3, #1
 80084c0:	e7e1      	b.n	8008486 <_dtoa_r+0x27e>
 80084c2:	2501      	movs	r5, #1
 80084c4:	2300      	movs	r3, #0
 80084c6:	9307      	str	r3, [sp, #28]
 80084c8:	9509      	str	r5, [sp, #36]	; 0x24
 80084ca:	f04f 33ff 	mov.w	r3, #4294967295
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	2200      	movs	r2, #0
 80084d4:	2312      	movs	r3, #18
 80084d6:	e7d1      	b.n	800847c <_dtoa_r+0x274>
 80084d8:	636f4361 	.word	0x636f4361
 80084dc:	3fd287a7 	.word	0x3fd287a7
 80084e0:	8b60c8b3 	.word	0x8b60c8b3
 80084e4:	3fc68a28 	.word	0x3fc68a28
 80084e8:	509f79fb 	.word	0x509f79fb
 80084ec:	3fd34413 	.word	0x3fd34413
 80084f0:	0800ae12 	.word	0x0800ae12
 80084f4:	0800ae29 	.word	0x0800ae29
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	0800ae0e 	.word	0x0800ae0e
 8008500:	0800ae05 	.word	0x0800ae05
 8008504:	0800adda 	.word	0x0800adda
 8008508:	3ff80000 	.word	0x3ff80000
 800850c:	0800af78 	.word	0x0800af78
 8008510:	0800ae81 	.word	0x0800ae81
 8008514:	2301      	movs	r3, #1
 8008516:	9309      	str	r3, [sp, #36]	; 0x24
 8008518:	e7d7      	b.n	80084ca <_dtoa_r+0x2c2>
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	e7ba      	b.n	8008498 <_dtoa_r+0x290>
 8008522:	3101      	adds	r1, #1
 8008524:	0052      	lsls	r2, r2, #1
 8008526:	e7ba      	b.n	800849e <_dtoa_r+0x296>
 8008528:	69e3      	ldr	r3, [r4, #28]
 800852a:	9a00      	ldr	r2, [sp, #0]
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	2b0e      	cmp	r3, #14
 8008532:	f200 80a8 	bhi.w	8008686 <_dtoa_r+0x47e>
 8008536:	2d00      	cmp	r5, #0
 8008538:	f000 80a5 	beq.w	8008686 <_dtoa_r+0x47e>
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	dd38      	ble.n	80085b4 <_dtoa_r+0x3ac>
 8008542:	4bc0      	ldr	r3, [pc, #768]	; (8008844 <_dtoa_r+0x63c>)
 8008544:	f00b 020f 	and.w	r2, fp, #15
 8008548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008550:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008554:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008558:	d019      	beq.n	800858e <_dtoa_r+0x386>
 800855a:	4bbb      	ldr	r3, [pc, #748]	; (8008848 <_dtoa_r+0x640>)
 800855c:	ec51 0b18 	vmov	r0, r1, d8
 8008560:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008564:	f7f8 f982 	bl	800086c <__aeabi_ddiv>
 8008568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800856c:	f008 080f 	and.w	r8, r8, #15
 8008570:	2503      	movs	r5, #3
 8008572:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008848 <_dtoa_r+0x640>
 8008576:	f1b8 0f00 	cmp.w	r8, #0
 800857a:	d10a      	bne.n	8008592 <_dtoa_r+0x38a>
 800857c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008580:	4632      	mov	r2, r6
 8008582:	463b      	mov	r3, r7
 8008584:	f7f8 f972 	bl	800086c <__aeabi_ddiv>
 8008588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858c:	e02b      	b.n	80085e6 <_dtoa_r+0x3de>
 800858e:	2502      	movs	r5, #2
 8008590:	e7ef      	b.n	8008572 <_dtoa_r+0x36a>
 8008592:	f018 0f01 	tst.w	r8, #1
 8008596:	d008      	beq.n	80085aa <_dtoa_r+0x3a2>
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085a0:	f7f8 f83a 	bl	8000618 <__aeabi_dmul>
 80085a4:	3501      	adds	r5, #1
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085ae:	f109 0908 	add.w	r9, r9, #8
 80085b2:	e7e0      	b.n	8008576 <_dtoa_r+0x36e>
 80085b4:	f000 809f 	beq.w	80086f6 <_dtoa_r+0x4ee>
 80085b8:	f1cb 0600 	rsb	r6, fp, #0
 80085bc:	4ba1      	ldr	r3, [pc, #644]	; (8008844 <_dtoa_r+0x63c>)
 80085be:	4fa2      	ldr	r7, [pc, #648]	; (8008848 <_dtoa_r+0x640>)
 80085c0:	f006 020f 	and.w	r2, r6, #15
 80085c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	ec51 0b18 	vmov	r0, r1, d8
 80085d0:	f7f8 f822 	bl	8000618 <__aeabi_dmul>
 80085d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d8:	1136      	asrs	r6, r6, #4
 80085da:	2300      	movs	r3, #0
 80085dc:	2502      	movs	r5, #2
 80085de:	2e00      	cmp	r6, #0
 80085e0:	d17e      	bne.n	80086e0 <_dtoa_r+0x4d8>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1d0      	bne.n	8008588 <_dtoa_r+0x380>
 80085e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8084 	beq.w	80086fa <_dtoa_r+0x4f2>
 80085f2:	4b96      	ldr	r3, [pc, #600]	; (800884c <_dtoa_r+0x644>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f8 fa7f 	bl	8000afc <__aeabi_dcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d07b      	beq.n	80086fa <_dtoa_r+0x4f2>
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d078      	beq.n	80086fa <_dtoa_r+0x4f2>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	dd39      	ble.n	8008682 <_dtoa_r+0x47a>
 800860e:	4b90      	ldr	r3, [pc, #576]	; (8008850 <_dtoa_r+0x648>)
 8008610:	2200      	movs	r2, #0
 8008612:	4640      	mov	r0, r8
 8008614:	4649      	mov	r1, r9
 8008616:	f7f7 ffff 	bl	8000618 <__aeabi_dmul>
 800861a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800861e:	9e01      	ldr	r6, [sp, #4]
 8008620:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008624:	3501      	adds	r5, #1
 8008626:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800862a:	4628      	mov	r0, r5
 800862c:	f7f7 ff8a 	bl	8000544 <__aeabi_i2d>
 8008630:	4642      	mov	r2, r8
 8008632:	464b      	mov	r3, r9
 8008634:	f7f7 fff0 	bl	8000618 <__aeabi_dmul>
 8008638:	4b86      	ldr	r3, [pc, #536]	; (8008854 <_dtoa_r+0x64c>)
 800863a:	2200      	movs	r2, #0
 800863c:	f7f7 fe36 	bl	80002ac <__adddf3>
 8008640:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008648:	9303      	str	r3, [sp, #12]
 800864a:	2e00      	cmp	r6, #0
 800864c:	d158      	bne.n	8008700 <_dtoa_r+0x4f8>
 800864e:	4b82      	ldr	r3, [pc, #520]	; (8008858 <_dtoa_r+0x650>)
 8008650:	2200      	movs	r2, #0
 8008652:	4640      	mov	r0, r8
 8008654:	4649      	mov	r1, r9
 8008656:	f7f7 fe27 	bl	80002a8 <__aeabi_dsub>
 800865a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800865e:	4680      	mov	r8, r0
 8008660:	4689      	mov	r9, r1
 8008662:	f7f8 fa69 	bl	8000b38 <__aeabi_dcmpgt>
 8008666:	2800      	cmp	r0, #0
 8008668:	f040 8296 	bne.w	8008b98 <_dtoa_r+0x990>
 800866c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008670:	4640      	mov	r0, r8
 8008672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008676:	4649      	mov	r1, r9
 8008678:	f7f8 fa40 	bl	8000afc <__aeabi_dcmplt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 8289 	bne.w	8008b94 <_dtoa_r+0x98c>
 8008682:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008688:	2b00      	cmp	r3, #0
 800868a:	f2c0 814e 	blt.w	800892a <_dtoa_r+0x722>
 800868e:	f1bb 0f0e 	cmp.w	fp, #14
 8008692:	f300 814a 	bgt.w	800892a <_dtoa_r+0x722>
 8008696:	4b6b      	ldr	r3, [pc, #428]	; (8008844 <_dtoa_r+0x63c>)
 8008698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800869c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f280 80dc 	bge.w	8008860 <_dtoa_r+0x658>
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f300 80d8 	bgt.w	8008860 <_dtoa_r+0x658>
 80086b0:	f040 826f 	bne.w	8008b92 <_dtoa_r+0x98a>
 80086b4:	4b68      	ldr	r3, [pc, #416]	; (8008858 <_dtoa_r+0x650>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f7 ffac 	bl	8000618 <__aeabi_dmul>
 80086c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086c4:	f7f8 fa2e 	bl	8000b24 <__aeabi_dcmpge>
 80086c8:	9e04      	ldr	r6, [sp, #16]
 80086ca:	4637      	mov	r7, r6
 80086cc:	2800      	cmp	r0, #0
 80086ce:	f040 8245 	bne.w	8008b5c <_dtoa_r+0x954>
 80086d2:	9d00      	ldr	r5, [sp, #0]
 80086d4:	2331      	movs	r3, #49	; 0x31
 80086d6:	f805 3b01 	strb.w	r3, [r5], #1
 80086da:	f10b 0b01 	add.w	fp, fp, #1
 80086de:	e241      	b.n	8008b64 <_dtoa_r+0x95c>
 80086e0:	07f2      	lsls	r2, r6, #31
 80086e2:	d505      	bpl.n	80086f0 <_dtoa_r+0x4e8>
 80086e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e8:	f7f7 ff96 	bl	8000618 <__aeabi_dmul>
 80086ec:	3501      	adds	r5, #1
 80086ee:	2301      	movs	r3, #1
 80086f0:	1076      	asrs	r6, r6, #1
 80086f2:	3708      	adds	r7, #8
 80086f4:	e773      	b.n	80085de <_dtoa_r+0x3d6>
 80086f6:	2502      	movs	r5, #2
 80086f8:	e775      	b.n	80085e6 <_dtoa_r+0x3de>
 80086fa:	9e04      	ldr	r6, [sp, #16]
 80086fc:	465f      	mov	r7, fp
 80086fe:	e792      	b.n	8008626 <_dtoa_r+0x41e>
 8008700:	9900      	ldr	r1, [sp, #0]
 8008702:	4b50      	ldr	r3, [pc, #320]	; (8008844 <_dtoa_r+0x63c>)
 8008704:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008708:	4431      	add	r1, r6
 800870a:	9102      	str	r1, [sp, #8]
 800870c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800870e:	eeb0 9a47 	vmov.f32	s18, s14
 8008712:	eef0 9a67 	vmov.f32	s19, s15
 8008716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800871a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800871e:	2900      	cmp	r1, #0
 8008720:	d044      	beq.n	80087ac <_dtoa_r+0x5a4>
 8008722:	494e      	ldr	r1, [pc, #312]	; (800885c <_dtoa_r+0x654>)
 8008724:	2000      	movs	r0, #0
 8008726:	f7f8 f8a1 	bl	800086c <__aeabi_ddiv>
 800872a:	ec53 2b19 	vmov	r2, r3, d9
 800872e:	f7f7 fdbb 	bl	80002a8 <__aeabi_dsub>
 8008732:	9d00      	ldr	r5, [sp, #0]
 8008734:	ec41 0b19 	vmov	d9, r0, r1
 8008738:	4649      	mov	r1, r9
 800873a:	4640      	mov	r0, r8
 800873c:	f7f8 fa1c 	bl	8000b78 <__aeabi_d2iz>
 8008740:	4606      	mov	r6, r0
 8008742:	f7f7 feff 	bl	8000544 <__aeabi_i2d>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4640      	mov	r0, r8
 800874c:	4649      	mov	r1, r9
 800874e:	f7f7 fdab 	bl	80002a8 <__aeabi_dsub>
 8008752:	3630      	adds	r6, #48	; 0x30
 8008754:	f805 6b01 	strb.w	r6, [r5], #1
 8008758:	ec53 2b19 	vmov	r2, r3, d9
 800875c:	4680      	mov	r8, r0
 800875e:	4689      	mov	r9, r1
 8008760:	f7f8 f9cc 	bl	8000afc <__aeabi_dcmplt>
 8008764:	2800      	cmp	r0, #0
 8008766:	d164      	bne.n	8008832 <_dtoa_r+0x62a>
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	4937      	ldr	r1, [pc, #220]	; (800884c <_dtoa_r+0x644>)
 800876e:	2000      	movs	r0, #0
 8008770:	f7f7 fd9a 	bl	80002a8 <__aeabi_dsub>
 8008774:	ec53 2b19 	vmov	r2, r3, d9
 8008778:	f7f8 f9c0 	bl	8000afc <__aeabi_dcmplt>
 800877c:	2800      	cmp	r0, #0
 800877e:	f040 80b6 	bne.w	80088ee <_dtoa_r+0x6e6>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	429d      	cmp	r5, r3
 8008786:	f43f af7c 	beq.w	8008682 <_dtoa_r+0x47a>
 800878a:	4b31      	ldr	r3, [pc, #196]	; (8008850 <_dtoa_r+0x648>)
 800878c:	ec51 0b19 	vmov	r0, r1, d9
 8008790:	2200      	movs	r2, #0
 8008792:	f7f7 ff41 	bl	8000618 <__aeabi_dmul>
 8008796:	4b2e      	ldr	r3, [pc, #184]	; (8008850 <_dtoa_r+0x648>)
 8008798:	ec41 0b19 	vmov	d9, r0, r1
 800879c:	2200      	movs	r2, #0
 800879e:	4640      	mov	r0, r8
 80087a0:	4649      	mov	r1, r9
 80087a2:	f7f7 ff39 	bl	8000618 <__aeabi_dmul>
 80087a6:	4680      	mov	r8, r0
 80087a8:	4689      	mov	r9, r1
 80087aa:	e7c5      	b.n	8008738 <_dtoa_r+0x530>
 80087ac:	ec51 0b17 	vmov	r0, r1, d7
 80087b0:	f7f7 ff32 	bl	8000618 <__aeabi_dmul>
 80087b4:	9b02      	ldr	r3, [sp, #8]
 80087b6:	9d00      	ldr	r5, [sp, #0]
 80087b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087ba:	ec41 0b19 	vmov	d9, r0, r1
 80087be:	4649      	mov	r1, r9
 80087c0:	4640      	mov	r0, r8
 80087c2:	f7f8 f9d9 	bl	8000b78 <__aeabi_d2iz>
 80087c6:	4606      	mov	r6, r0
 80087c8:	f7f7 febc 	bl	8000544 <__aeabi_i2d>
 80087cc:	3630      	adds	r6, #48	; 0x30
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f7 fd67 	bl	80002a8 <__aeabi_dsub>
 80087da:	f805 6b01 	strb.w	r6, [r5], #1
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	429d      	cmp	r5, r3
 80087e2:	4680      	mov	r8, r0
 80087e4:	4689      	mov	r9, r1
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	d124      	bne.n	8008836 <_dtoa_r+0x62e>
 80087ec:	4b1b      	ldr	r3, [pc, #108]	; (800885c <_dtoa_r+0x654>)
 80087ee:	ec51 0b19 	vmov	r0, r1, d9
 80087f2:	f7f7 fd5b 	bl	80002ac <__adddf3>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4640      	mov	r0, r8
 80087fc:	4649      	mov	r1, r9
 80087fe:	f7f8 f99b 	bl	8000b38 <__aeabi_dcmpgt>
 8008802:	2800      	cmp	r0, #0
 8008804:	d173      	bne.n	80088ee <_dtoa_r+0x6e6>
 8008806:	ec53 2b19 	vmov	r2, r3, d9
 800880a:	4914      	ldr	r1, [pc, #80]	; (800885c <_dtoa_r+0x654>)
 800880c:	2000      	movs	r0, #0
 800880e:	f7f7 fd4b 	bl	80002a8 <__aeabi_dsub>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4640      	mov	r0, r8
 8008818:	4649      	mov	r1, r9
 800881a:	f7f8 f96f 	bl	8000afc <__aeabi_dcmplt>
 800881e:	2800      	cmp	r0, #0
 8008820:	f43f af2f 	beq.w	8008682 <_dtoa_r+0x47a>
 8008824:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008826:	1e6b      	subs	r3, r5, #1
 8008828:	930f      	str	r3, [sp, #60]	; 0x3c
 800882a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800882e:	2b30      	cmp	r3, #48	; 0x30
 8008830:	d0f8      	beq.n	8008824 <_dtoa_r+0x61c>
 8008832:	46bb      	mov	fp, r7
 8008834:	e04a      	b.n	80088cc <_dtoa_r+0x6c4>
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <_dtoa_r+0x648>)
 8008838:	f7f7 feee 	bl	8000618 <__aeabi_dmul>
 800883c:	4680      	mov	r8, r0
 800883e:	4689      	mov	r9, r1
 8008840:	e7bd      	b.n	80087be <_dtoa_r+0x5b6>
 8008842:	bf00      	nop
 8008844:	0800af78 	.word	0x0800af78
 8008848:	0800af50 	.word	0x0800af50
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	40240000 	.word	0x40240000
 8008854:	401c0000 	.word	0x401c0000
 8008858:	40140000 	.word	0x40140000
 800885c:	3fe00000 	.word	0x3fe00000
 8008860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008864:	9d00      	ldr	r5, [sp, #0]
 8008866:	4642      	mov	r2, r8
 8008868:	464b      	mov	r3, r9
 800886a:	4630      	mov	r0, r6
 800886c:	4639      	mov	r1, r7
 800886e:	f7f7 fffd 	bl	800086c <__aeabi_ddiv>
 8008872:	f7f8 f981 	bl	8000b78 <__aeabi_d2iz>
 8008876:	9001      	str	r0, [sp, #4]
 8008878:	f7f7 fe64 	bl	8000544 <__aeabi_i2d>
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	f7f7 feca 	bl	8000618 <__aeabi_dmul>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f7 fd0c 	bl	80002a8 <__aeabi_dsub>
 8008890:	9e01      	ldr	r6, [sp, #4]
 8008892:	9f04      	ldr	r7, [sp, #16]
 8008894:	3630      	adds	r6, #48	; 0x30
 8008896:	f805 6b01 	strb.w	r6, [r5], #1
 800889a:	9e00      	ldr	r6, [sp, #0]
 800889c:	1bae      	subs	r6, r5, r6
 800889e:	42b7      	cmp	r7, r6
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	d134      	bne.n	8008910 <_dtoa_r+0x708>
 80088a6:	f7f7 fd01 	bl	80002ac <__adddf3>
 80088aa:	4642      	mov	r2, r8
 80088ac:	464b      	mov	r3, r9
 80088ae:	4606      	mov	r6, r0
 80088b0:	460f      	mov	r7, r1
 80088b2:	f7f8 f941 	bl	8000b38 <__aeabi_dcmpgt>
 80088b6:	b9c8      	cbnz	r0, 80088ec <_dtoa_r+0x6e4>
 80088b8:	4642      	mov	r2, r8
 80088ba:	464b      	mov	r3, r9
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f8 f912 	bl	8000ae8 <__aeabi_dcmpeq>
 80088c4:	b110      	cbz	r0, 80088cc <_dtoa_r+0x6c4>
 80088c6:	9b01      	ldr	r3, [sp, #4]
 80088c8:	07db      	lsls	r3, r3, #31
 80088ca:	d40f      	bmi.n	80088ec <_dtoa_r+0x6e4>
 80088cc:	4651      	mov	r1, sl
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fe82 	bl	80095d8 <_Bfree>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088d8:	702b      	strb	r3, [r5, #0]
 80088da:	f10b 0301 	add.w	r3, fp, #1
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f43f ace2 	beq.w	80082ac <_dtoa_r+0xa4>
 80088e8:	601d      	str	r5, [r3, #0]
 80088ea:	e4df      	b.n	80082ac <_dtoa_r+0xa4>
 80088ec:	465f      	mov	r7, fp
 80088ee:	462b      	mov	r3, r5
 80088f0:	461d      	mov	r5, r3
 80088f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f6:	2a39      	cmp	r2, #57	; 0x39
 80088f8:	d106      	bne.n	8008908 <_dtoa_r+0x700>
 80088fa:	9a00      	ldr	r2, [sp, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d1f7      	bne.n	80088f0 <_dtoa_r+0x6e8>
 8008900:	9900      	ldr	r1, [sp, #0]
 8008902:	2230      	movs	r2, #48	; 0x30
 8008904:	3701      	adds	r7, #1
 8008906:	700a      	strb	r2, [r1, #0]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	3201      	adds	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e790      	b.n	8008832 <_dtoa_r+0x62a>
 8008910:	4ba3      	ldr	r3, [pc, #652]	; (8008ba0 <_dtoa_r+0x998>)
 8008912:	2200      	movs	r2, #0
 8008914:	f7f7 fe80 	bl	8000618 <__aeabi_dmul>
 8008918:	2200      	movs	r2, #0
 800891a:	2300      	movs	r3, #0
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	f7f8 f8e2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008924:	2800      	cmp	r0, #0
 8008926:	d09e      	beq.n	8008866 <_dtoa_r+0x65e>
 8008928:	e7d0      	b.n	80088cc <_dtoa_r+0x6c4>
 800892a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892c:	2a00      	cmp	r2, #0
 800892e:	f000 80ca 	beq.w	8008ac6 <_dtoa_r+0x8be>
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	2a01      	cmp	r2, #1
 8008936:	f300 80ad 	bgt.w	8008a94 <_dtoa_r+0x88c>
 800893a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800893c:	2a00      	cmp	r2, #0
 800893e:	f000 80a5 	beq.w	8008a8c <_dtoa_r+0x884>
 8008942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008946:	9e08      	ldr	r6, [sp, #32]
 8008948:	9d05      	ldr	r5, [sp, #20]
 800894a:	9a05      	ldr	r2, [sp, #20]
 800894c:	441a      	add	r2, r3
 800894e:	9205      	str	r2, [sp, #20]
 8008950:	9a06      	ldr	r2, [sp, #24]
 8008952:	2101      	movs	r1, #1
 8008954:	441a      	add	r2, r3
 8008956:	4620      	mov	r0, r4
 8008958:	9206      	str	r2, [sp, #24]
 800895a:	f000 ff3d 	bl	80097d8 <__i2b>
 800895e:	4607      	mov	r7, r0
 8008960:	b165      	cbz	r5, 800897c <_dtoa_r+0x774>
 8008962:	9b06      	ldr	r3, [sp, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	dd09      	ble.n	800897c <_dtoa_r+0x774>
 8008968:	42ab      	cmp	r3, r5
 800896a:	9a05      	ldr	r2, [sp, #20]
 800896c:	bfa8      	it	ge
 800896e:	462b      	movge	r3, r5
 8008970:	1ad2      	subs	r2, r2, r3
 8008972:	9205      	str	r2, [sp, #20]
 8008974:	9a06      	ldr	r2, [sp, #24]
 8008976:	1aed      	subs	r5, r5, r3
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	9306      	str	r3, [sp, #24]
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	b1f3      	cbz	r3, 80089be <_dtoa_r+0x7b6>
 8008980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80a3 	beq.w	8008ace <_dtoa_r+0x8c6>
 8008988:	2e00      	cmp	r6, #0
 800898a:	dd10      	ble.n	80089ae <_dtoa_r+0x7a6>
 800898c:	4639      	mov	r1, r7
 800898e:	4632      	mov	r2, r6
 8008990:	4620      	mov	r0, r4
 8008992:	f000 ffe1 	bl	8009958 <__pow5mult>
 8008996:	4652      	mov	r2, sl
 8008998:	4601      	mov	r1, r0
 800899a:	4607      	mov	r7, r0
 800899c:	4620      	mov	r0, r4
 800899e:	f000 ff31 	bl	8009804 <__multiply>
 80089a2:	4651      	mov	r1, sl
 80089a4:	4680      	mov	r8, r0
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fe16 	bl	80095d8 <_Bfree>
 80089ac:	46c2      	mov	sl, r8
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	1b9a      	subs	r2, r3, r6
 80089b2:	d004      	beq.n	80089be <_dtoa_r+0x7b6>
 80089b4:	4651      	mov	r1, sl
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 ffce 	bl	8009958 <__pow5mult>
 80089bc:	4682      	mov	sl, r0
 80089be:	2101      	movs	r1, #1
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 ff09 	bl	80097d8 <__i2b>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	f340 8081 	ble.w	8008ad2 <_dtoa_r+0x8ca>
 80089d0:	461a      	mov	r2, r3
 80089d2:	4601      	mov	r1, r0
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 ffbf 	bl	8009958 <__pow5mult>
 80089da:	9b07      	ldr	r3, [sp, #28]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	4606      	mov	r6, r0
 80089e0:	dd7a      	ble.n	8008ad8 <_dtoa_r+0x8d0>
 80089e2:	f04f 0800 	mov.w	r8, #0
 80089e6:	6933      	ldr	r3, [r6, #16]
 80089e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089ec:	6918      	ldr	r0, [r3, #16]
 80089ee:	f000 fea5 	bl	800973c <__hi0bits>
 80089f2:	f1c0 0020 	rsb	r0, r0, #32
 80089f6:	9b06      	ldr	r3, [sp, #24]
 80089f8:	4418      	add	r0, r3
 80089fa:	f010 001f 	ands.w	r0, r0, #31
 80089fe:	f000 8094 	beq.w	8008b2a <_dtoa_r+0x922>
 8008a02:	f1c0 0320 	rsb	r3, r0, #32
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	f340 8085 	ble.w	8008b16 <_dtoa_r+0x90e>
 8008a0c:	9b05      	ldr	r3, [sp, #20]
 8008a0e:	f1c0 001c 	rsb	r0, r0, #28
 8008a12:	4403      	add	r3, r0
 8008a14:	9305      	str	r3, [sp, #20]
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	4403      	add	r3, r0
 8008a1a:	4405      	add	r5, r0
 8008a1c:	9306      	str	r3, [sp, #24]
 8008a1e:	9b05      	ldr	r3, [sp, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dd05      	ble.n	8008a30 <_dtoa_r+0x828>
 8008a24:	4651      	mov	r1, sl
 8008a26:	461a      	mov	r2, r3
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 ffef 	bl	8009a0c <__lshift>
 8008a2e:	4682      	mov	sl, r0
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dd05      	ble.n	8008a42 <_dtoa_r+0x83a>
 8008a36:	4631      	mov	r1, r6
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 ffe6 	bl	8009a0c <__lshift>
 8008a40:	4606      	mov	r6, r0
 8008a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d072      	beq.n	8008b2e <_dtoa_r+0x926>
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	f001 f84a 	bl	8009ae4 <__mcmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	da6c      	bge.n	8008b2e <_dtoa_r+0x926>
 8008a54:	2300      	movs	r3, #0
 8008a56:	4651      	mov	r1, sl
 8008a58:	220a      	movs	r2, #10
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 fdde 	bl	800961c <__multadd>
 8008a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a66:	4682      	mov	sl, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 81b0 	beq.w	8008dce <_dtoa_r+0xbc6>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4639      	mov	r1, r7
 8008a72:	220a      	movs	r2, #10
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fdd1 	bl	800961c <__multadd>
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	4607      	mov	r7, r0
 8008a80:	f300 8096 	bgt.w	8008bb0 <_dtoa_r+0x9a8>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	dc59      	bgt.n	8008b3e <_dtoa_r+0x936>
 8008a8a:	e091      	b.n	8008bb0 <_dtoa_r+0x9a8>
 8008a8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a92:	e758      	b.n	8008946 <_dtoa_r+0x73e>
 8008a94:	9b04      	ldr	r3, [sp, #16]
 8008a96:	1e5e      	subs	r6, r3, #1
 8008a98:	9b08      	ldr	r3, [sp, #32]
 8008a9a:	42b3      	cmp	r3, r6
 8008a9c:	bfbf      	itttt	lt
 8008a9e:	9b08      	ldrlt	r3, [sp, #32]
 8008aa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008aa2:	9608      	strlt	r6, [sp, #32]
 8008aa4:	1af3      	sublt	r3, r6, r3
 8008aa6:	bfb4      	ite	lt
 8008aa8:	18d2      	addlt	r2, r2, r3
 8008aaa:	1b9e      	subge	r6, r3, r6
 8008aac:	9b04      	ldr	r3, [sp, #16]
 8008aae:	bfbc      	itt	lt
 8008ab0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008ab2:	2600      	movlt	r6, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfb7      	itett	lt
 8008ab8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008abc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ac0:	1a9d      	sublt	r5, r3, r2
 8008ac2:	2300      	movlt	r3, #0
 8008ac4:	e741      	b.n	800894a <_dtoa_r+0x742>
 8008ac6:	9e08      	ldr	r6, [sp, #32]
 8008ac8:	9d05      	ldr	r5, [sp, #20]
 8008aca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008acc:	e748      	b.n	8008960 <_dtoa_r+0x758>
 8008ace:	9a08      	ldr	r2, [sp, #32]
 8008ad0:	e770      	b.n	80089b4 <_dtoa_r+0x7ac>
 8008ad2:	9b07      	ldr	r3, [sp, #28]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	dc19      	bgt.n	8008b0c <_dtoa_r+0x904>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	b9bb      	cbnz	r3, 8008b0c <_dtoa_r+0x904>
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ae2:	b99b      	cbnz	r3, 8008b0c <_dtoa_r+0x904>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aea:	0d1b      	lsrs	r3, r3, #20
 8008aec:	051b      	lsls	r3, r3, #20
 8008aee:	b183      	cbz	r3, 8008b12 <_dtoa_r+0x90a>
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	3301      	adds	r3, #1
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	9b06      	ldr	r3, [sp, #24]
 8008af8:	3301      	adds	r3, #1
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	f04f 0801 	mov.w	r8, #1
 8008b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f47f af6f 	bne.w	80089e6 <_dtoa_r+0x7de>
 8008b08:	2001      	movs	r0, #1
 8008b0a:	e774      	b.n	80089f6 <_dtoa_r+0x7ee>
 8008b0c:	f04f 0800 	mov.w	r8, #0
 8008b10:	e7f6      	b.n	8008b00 <_dtoa_r+0x8f8>
 8008b12:	4698      	mov	r8, r3
 8008b14:	e7f4      	b.n	8008b00 <_dtoa_r+0x8f8>
 8008b16:	d082      	beq.n	8008a1e <_dtoa_r+0x816>
 8008b18:	9a05      	ldr	r2, [sp, #20]
 8008b1a:	331c      	adds	r3, #28
 8008b1c:	441a      	add	r2, r3
 8008b1e:	9205      	str	r2, [sp, #20]
 8008b20:	9a06      	ldr	r2, [sp, #24]
 8008b22:	441a      	add	r2, r3
 8008b24:	441d      	add	r5, r3
 8008b26:	9206      	str	r2, [sp, #24]
 8008b28:	e779      	b.n	8008a1e <_dtoa_r+0x816>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	e7f4      	b.n	8008b18 <_dtoa_r+0x910>
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc37      	bgt.n	8008ba4 <_dtoa_r+0x99c>
 8008b34:	9b07      	ldr	r3, [sp, #28]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	dd34      	ble.n	8008ba4 <_dtoa_r+0x99c>
 8008b3a:	9b04      	ldr	r3, [sp, #16]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	9b01      	ldr	r3, [sp, #4]
 8008b40:	b963      	cbnz	r3, 8008b5c <_dtoa_r+0x954>
 8008b42:	4631      	mov	r1, r6
 8008b44:	2205      	movs	r2, #5
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fd68 	bl	800961c <__multadd>
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4606      	mov	r6, r0
 8008b50:	4650      	mov	r0, sl
 8008b52:	f000 ffc7 	bl	8009ae4 <__mcmp>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f73f adbb 	bgt.w	80086d2 <_dtoa_r+0x4ca>
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b5e:	9d00      	ldr	r5, [sp, #0]
 8008b60:	ea6f 0b03 	mvn.w	fp, r3
 8008b64:	f04f 0800 	mov.w	r8, #0
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fd34 	bl	80095d8 <_Bfree>
 8008b70:	2f00      	cmp	r7, #0
 8008b72:	f43f aeab 	beq.w	80088cc <_dtoa_r+0x6c4>
 8008b76:	f1b8 0f00 	cmp.w	r8, #0
 8008b7a:	d005      	beq.n	8008b88 <_dtoa_r+0x980>
 8008b7c:	45b8      	cmp	r8, r7
 8008b7e:	d003      	beq.n	8008b88 <_dtoa_r+0x980>
 8008b80:	4641      	mov	r1, r8
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 fd28 	bl	80095d8 <_Bfree>
 8008b88:	4639      	mov	r1, r7
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f000 fd24 	bl	80095d8 <_Bfree>
 8008b90:	e69c      	b.n	80088cc <_dtoa_r+0x6c4>
 8008b92:	2600      	movs	r6, #0
 8008b94:	4637      	mov	r7, r6
 8008b96:	e7e1      	b.n	8008b5c <_dtoa_r+0x954>
 8008b98:	46bb      	mov	fp, r7
 8008b9a:	4637      	mov	r7, r6
 8008b9c:	e599      	b.n	80086d2 <_dtoa_r+0x4ca>
 8008b9e:	bf00      	nop
 8008ba0:	40240000 	.word	0x40240000
 8008ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80c8 	beq.w	8008d3c <_dtoa_r+0xb34>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	2d00      	cmp	r5, #0
 8008bb2:	dd05      	ble.n	8008bc0 <_dtoa_r+0x9b8>
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 ff27 	bl	8009a0c <__lshift>
 8008bbe:	4607      	mov	r7, r0
 8008bc0:	f1b8 0f00 	cmp.w	r8, #0
 8008bc4:	d05b      	beq.n	8008c7e <_dtoa_r+0xa76>
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 fcc5 	bl	8009558 <_Balloc>
 8008bce:	4605      	mov	r5, r0
 8008bd0:	b928      	cbnz	r0, 8008bde <_dtoa_r+0x9d6>
 8008bd2:	4b83      	ldr	r3, [pc, #524]	; (8008de0 <_dtoa_r+0xbd8>)
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bda:	f7ff bb2e 	b.w	800823a <_dtoa_r+0x32>
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	3202      	adds	r2, #2
 8008be2:	0092      	lsls	r2, r2, #2
 8008be4:	f107 010c 	add.w	r1, r7, #12
 8008be8:	300c      	adds	r0, #12
 8008bea:	f7ff fa6f 	bl	80080cc <memcpy>
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 ff0a 	bl	8009a0c <__lshift>
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c02:	4413      	add	r3, r2
 8008c04:	9308      	str	r3, [sp, #32]
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	46b8      	mov	r8, r7
 8008c0e:	9306      	str	r3, [sp, #24]
 8008c10:	4607      	mov	r7, r0
 8008c12:	9b04      	ldr	r3, [sp, #16]
 8008c14:	4631      	mov	r1, r6
 8008c16:	3b01      	subs	r3, #1
 8008c18:	4650      	mov	r0, sl
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	f7ff fa6c 	bl	80080f8 <quorem>
 8008c20:	4641      	mov	r1, r8
 8008c22:	9002      	str	r0, [sp, #8]
 8008c24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c28:	4650      	mov	r0, sl
 8008c2a:	f000 ff5b 	bl	8009ae4 <__mcmp>
 8008c2e:	463a      	mov	r2, r7
 8008c30:	9005      	str	r0, [sp, #20]
 8008c32:	4631      	mov	r1, r6
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 ff71 	bl	8009b1c <__mdiff>
 8008c3a:	68c2      	ldr	r2, [r0, #12]
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	bb02      	cbnz	r2, 8008c82 <_dtoa_r+0xa7a>
 8008c40:	4601      	mov	r1, r0
 8008c42:	4650      	mov	r0, sl
 8008c44:	f000 ff4e 	bl	8009ae4 <__mcmp>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c50:	f000 fcc2 	bl	80095d8 <_Bfree>
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c58:	9d04      	ldr	r5, [sp, #16]
 8008c5a:	ea43 0102 	orr.w	r1, r3, r2
 8008c5e:	9b06      	ldr	r3, [sp, #24]
 8008c60:	4319      	orrs	r1, r3
 8008c62:	d110      	bne.n	8008c86 <_dtoa_r+0xa7e>
 8008c64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c68:	d029      	beq.n	8008cbe <_dtoa_r+0xab6>
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dd02      	ble.n	8008c76 <_dtoa_r+0xa6e>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	f883 9000 	strb.w	r9, [r3]
 8008c7c:	e774      	b.n	8008b68 <_dtoa_r+0x960>
 8008c7e:	4638      	mov	r0, r7
 8008c80:	e7ba      	b.n	8008bf8 <_dtoa_r+0x9f0>
 8008c82:	2201      	movs	r2, #1
 8008c84:	e7e1      	b.n	8008c4a <_dtoa_r+0xa42>
 8008c86:	9b05      	ldr	r3, [sp, #20]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db04      	blt.n	8008c96 <_dtoa_r+0xa8e>
 8008c8c:	9907      	ldr	r1, [sp, #28]
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	9906      	ldr	r1, [sp, #24]
 8008c92:	430b      	orrs	r3, r1
 8008c94:	d120      	bne.n	8008cd8 <_dtoa_r+0xad0>
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	dded      	ble.n	8008c76 <_dtoa_r+0xa6e>
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 feb4 	bl	8009a0c <__lshift>
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	f000 ff1c 	bl	8009ae4 <__mcmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dc03      	bgt.n	8008cb8 <_dtoa_r+0xab0>
 8008cb0:	d1e1      	bne.n	8008c76 <_dtoa_r+0xa6e>
 8008cb2:	f019 0f01 	tst.w	r9, #1
 8008cb6:	d0de      	beq.n	8008c76 <_dtoa_r+0xa6e>
 8008cb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cbc:	d1d8      	bne.n	8008c70 <_dtoa_r+0xa68>
 8008cbe:	9a01      	ldr	r2, [sp, #4]
 8008cc0:	2339      	movs	r3, #57	; 0x39
 8008cc2:	7013      	strb	r3, [r2, #0]
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	461d      	mov	r5, r3
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cce:	2a39      	cmp	r2, #57	; 0x39
 8008cd0:	d06c      	beq.n	8008dac <_dtoa_r+0xba4>
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	e747      	b.n	8008b68 <_dtoa_r+0x960>
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	dd07      	ble.n	8008cec <_dtoa_r+0xae4>
 8008cdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ce0:	d0ed      	beq.n	8008cbe <_dtoa_r+0xab6>
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	f109 0301 	add.w	r3, r9, #1
 8008ce8:	7013      	strb	r3, [r2, #0]
 8008cea:	e73d      	b.n	8008b68 <_dtoa_r+0x960>
 8008cec:	9b04      	ldr	r3, [sp, #16]
 8008cee:	9a08      	ldr	r2, [sp, #32]
 8008cf0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d043      	beq.n	8008d80 <_dtoa_r+0xb78>
 8008cf8:	4651      	mov	r1, sl
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 fc8c 	bl	800961c <__multadd>
 8008d04:	45b8      	cmp	r8, r7
 8008d06:	4682      	mov	sl, r0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	f04f 020a 	mov.w	r2, #10
 8008d10:	4641      	mov	r1, r8
 8008d12:	4620      	mov	r0, r4
 8008d14:	d107      	bne.n	8008d26 <_dtoa_r+0xb1e>
 8008d16:	f000 fc81 	bl	800961c <__multadd>
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	4607      	mov	r7, r0
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	3301      	adds	r3, #1
 8008d22:	9304      	str	r3, [sp, #16]
 8008d24:	e775      	b.n	8008c12 <_dtoa_r+0xa0a>
 8008d26:	f000 fc79 	bl	800961c <__multadd>
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	4680      	mov	r8, r0
 8008d2e:	2300      	movs	r3, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fc72 	bl	800961c <__multadd>
 8008d38:	4607      	mov	r7, r0
 8008d3a:	e7f0      	b.n	8008d1e <_dtoa_r+0xb16>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	9d00      	ldr	r5, [sp, #0]
 8008d42:	4631      	mov	r1, r6
 8008d44:	4650      	mov	r0, sl
 8008d46:	f7ff f9d7 	bl	80080f8 <quorem>
 8008d4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	f805 9b01 	strb.w	r9, [r5], #1
 8008d54:	1aea      	subs	r2, r5, r3
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	dd07      	ble.n	8008d6c <_dtoa_r+0xb64>
 8008d5c:	4651      	mov	r1, sl
 8008d5e:	2300      	movs	r3, #0
 8008d60:	220a      	movs	r2, #10
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fc5a 	bl	800961c <__multadd>
 8008d68:	4682      	mov	sl, r0
 8008d6a:	e7ea      	b.n	8008d42 <_dtoa_r+0xb3a>
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bfc8      	it	gt
 8008d72:	461d      	movgt	r5, r3
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	bfd8      	it	le
 8008d78:	2501      	movle	r5, #1
 8008d7a:	441d      	add	r5, r3
 8008d7c:	f04f 0800 	mov.w	r8, #0
 8008d80:	4651      	mov	r1, sl
 8008d82:	2201      	movs	r2, #1
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 fe41 	bl	8009a0c <__lshift>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	f000 fea9 	bl	8009ae4 <__mcmp>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	dc96      	bgt.n	8008cc4 <_dtoa_r+0xabc>
 8008d96:	d102      	bne.n	8008d9e <_dtoa_r+0xb96>
 8008d98:	f019 0f01 	tst.w	r9, #1
 8008d9c:	d192      	bne.n	8008cc4 <_dtoa_r+0xabc>
 8008d9e:	462b      	mov	r3, r5
 8008da0:	461d      	mov	r5, r3
 8008da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008da6:	2a30      	cmp	r2, #48	; 0x30
 8008da8:	d0fa      	beq.n	8008da0 <_dtoa_r+0xb98>
 8008daa:	e6dd      	b.n	8008b68 <_dtoa_r+0x960>
 8008dac:	9a00      	ldr	r2, [sp, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d189      	bne.n	8008cc6 <_dtoa_r+0xabe>
 8008db2:	f10b 0b01 	add.w	fp, fp, #1
 8008db6:	2331      	movs	r3, #49	; 0x31
 8008db8:	e796      	b.n	8008ce8 <_dtoa_r+0xae0>
 8008dba:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <_dtoa_r+0xbdc>)
 8008dbc:	f7ff ba99 	b.w	80082f2 <_dtoa_r+0xea>
 8008dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f47f aa6d 	bne.w	80082a2 <_dtoa_r+0x9a>
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <_dtoa_r+0xbe0>)
 8008dca:	f7ff ba92 	b.w	80082f2 <_dtoa_r+0xea>
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dcb5      	bgt.n	8008d40 <_dtoa_r+0xb38>
 8008dd4:	9b07      	ldr	r3, [sp, #28]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	f73f aeb1 	bgt.w	8008b3e <_dtoa_r+0x936>
 8008ddc:	e7b0      	b.n	8008d40 <_dtoa_r+0xb38>
 8008dde:	bf00      	nop
 8008de0:	0800ae81 	.word	0x0800ae81
 8008de4:	0800add9 	.word	0x0800add9
 8008de8:	0800ae05 	.word	0x0800ae05

08008dec <_free_r>:
 8008dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dee:	2900      	cmp	r1, #0
 8008df0:	d044      	beq.n	8008e7c <_free_r+0x90>
 8008df2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008df6:	9001      	str	r0, [sp, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f1a1 0404 	sub.w	r4, r1, #4
 8008dfe:	bfb8      	it	lt
 8008e00:	18e4      	addlt	r4, r4, r3
 8008e02:	f7fd fc8b 	bl	800671c <__malloc_lock>
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <_free_r+0x94>)
 8008e08:	9801      	ldr	r0, [sp, #4]
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	b933      	cbnz	r3, 8008e1c <_free_r+0x30>
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6014      	str	r4, [r2, #0]
 8008e12:	b003      	add	sp, #12
 8008e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e18:	f7fd bc86 	b.w	8006728 <__malloc_unlock>
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d908      	bls.n	8008e32 <_free_r+0x46>
 8008e20:	6825      	ldr	r5, [r4, #0]
 8008e22:	1961      	adds	r1, r4, r5
 8008e24:	428b      	cmp	r3, r1
 8008e26:	bf01      	itttt	eq
 8008e28:	6819      	ldreq	r1, [r3, #0]
 8008e2a:	685b      	ldreq	r3, [r3, #4]
 8008e2c:	1949      	addeq	r1, r1, r5
 8008e2e:	6021      	streq	r1, [r4, #0]
 8008e30:	e7ed      	b.n	8008e0e <_free_r+0x22>
 8008e32:	461a      	mov	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b10b      	cbz	r3, 8008e3c <_free_r+0x50>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d9fa      	bls.n	8008e32 <_free_r+0x46>
 8008e3c:	6811      	ldr	r1, [r2, #0]
 8008e3e:	1855      	adds	r5, r2, r1
 8008e40:	42a5      	cmp	r5, r4
 8008e42:	d10b      	bne.n	8008e5c <_free_r+0x70>
 8008e44:	6824      	ldr	r4, [r4, #0]
 8008e46:	4421      	add	r1, r4
 8008e48:	1854      	adds	r4, r2, r1
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	d1e0      	bne.n	8008e12 <_free_r+0x26>
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	6053      	str	r3, [r2, #4]
 8008e56:	440c      	add	r4, r1
 8008e58:	6014      	str	r4, [r2, #0]
 8008e5a:	e7da      	b.n	8008e12 <_free_r+0x26>
 8008e5c:	d902      	bls.n	8008e64 <_free_r+0x78>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	e7d6      	b.n	8008e12 <_free_r+0x26>
 8008e64:	6825      	ldr	r5, [r4, #0]
 8008e66:	1961      	adds	r1, r4, r5
 8008e68:	428b      	cmp	r3, r1
 8008e6a:	bf04      	itt	eq
 8008e6c:	6819      	ldreq	r1, [r3, #0]
 8008e6e:	685b      	ldreq	r3, [r3, #4]
 8008e70:	6063      	str	r3, [r4, #4]
 8008e72:	bf04      	itt	eq
 8008e74:	1949      	addeq	r1, r1, r5
 8008e76:	6021      	streq	r1, [r4, #0]
 8008e78:	6054      	str	r4, [r2, #4]
 8008e7a:	e7ca      	b.n	8008e12 <_free_r+0x26>
 8008e7c:	b003      	add	sp, #12
 8008e7e:	bd30      	pop	{r4, r5, pc}
 8008e80:	200013ac 	.word	0x200013ac

08008e84 <rshift>:
 8008e84:	6903      	ldr	r3, [r0, #16]
 8008e86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e92:	f100 0414 	add.w	r4, r0, #20
 8008e96:	dd45      	ble.n	8008f24 <rshift+0xa0>
 8008e98:	f011 011f 	ands.w	r1, r1, #31
 8008e9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ea0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ea4:	d10c      	bne.n	8008ec0 <rshift+0x3c>
 8008ea6:	f100 0710 	add.w	r7, r0, #16
 8008eaa:	4629      	mov	r1, r5
 8008eac:	42b1      	cmp	r1, r6
 8008eae:	d334      	bcc.n	8008f1a <rshift+0x96>
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	1eea      	subs	r2, r5, #3
 8008eb6:	4296      	cmp	r6, r2
 8008eb8:	bf38      	it	cc
 8008eba:	2300      	movcc	r3, #0
 8008ebc:	4423      	add	r3, r4
 8008ebe:	e015      	b.n	8008eec <rshift+0x68>
 8008ec0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ec4:	f1c1 0820 	rsb	r8, r1, #32
 8008ec8:	40cf      	lsrs	r7, r1
 8008eca:	f105 0e04 	add.w	lr, r5, #4
 8008ece:	46a1      	mov	r9, r4
 8008ed0:	4576      	cmp	r6, lr
 8008ed2:	46f4      	mov	ip, lr
 8008ed4:	d815      	bhi.n	8008f02 <rshift+0x7e>
 8008ed6:	1a9a      	subs	r2, r3, r2
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	3a04      	subs	r2, #4
 8008edc:	3501      	adds	r5, #1
 8008ede:	42ae      	cmp	r6, r5
 8008ee0:	bf38      	it	cc
 8008ee2:	2200      	movcc	r2, #0
 8008ee4:	18a3      	adds	r3, r4, r2
 8008ee6:	50a7      	str	r7, [r4, r2]
 8008ee8:	b107      	cbz	r7, 8008eec <rshift+0x68>
 8008eea:	3304      	adds	r3, #4
 8008eec:	1b1a      	subs	r2, r3, r4
 8008eee:	42a3      	cmp	r3, r4
 8008ef0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ef4:	bf08      	it	eq
 8008ef6:	2300      	moveq	r3, #0
 8008ef8:	6102      	str	r2, [r0, #16]
 8008efa:	bf08      	it	eq
 8008efc:	6143      	streq	r3, [r0, #20]
 8008efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f02:	f8dc c000 	ldr.w	ip, [ip]
 8008f06:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f0a:	ea4c 0707 	orr.w	r7, ip, r7
 8008f0e:	f849 7b04 	str.w	r7, [r9], #4
 8008f12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f16:	40cf      	lsrs	r7, r1
 8008f18:	e7da      	b.n	8008ed0 <rshift+0x4c>
 8008f1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f22:	e7c3      	b.n	8008eac <rshift+0x28>
 8008f24:	4623      	mov	r3, r4
 8008f26:	e7e1      	b.n	8008eec <rshift+0x68>

08008f28 <__hexdig_fun>:
 8008f28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	d802      	bhi.n	8008f36 <__hexdig_fun+0xe>
 8008f30:	3820      	subs	r0, #32
 8008f32:	b2c0      	uxtb	r0, r0
 8008f34:	4770      	bx	lr
 8008f36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d801      	bhi.n	8008f42 <__hexdig_fun+0x1a>
 8008f3e:	3847      	subs	r0, #71	; 0x47
 8008f40:	e7f7      	b.n	8008f32 <__hexdig_fun+0xa>
 8008f42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	d801      	bhi.n	8008f4e <__hexdig_fun+0x26>
 8008f4a:	3827      	subs	r0, #39	; 0x27
 8008f4c:	e7f1      	b.n	8008f32 <__hexdig_fun+0xa>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	4770      	bx	lr
	...

08008f54 <__gethex>:
 8008f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f58:	4617      	mov	r7, r2
 8008f5a:	680a      	ldr	r2, [r1, #0]
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	f102 0b02 	add.w	fp, r2, #2
 8008f62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f6a:	4681      	mov	r9, r0
 8008f6c:	468a      	mov	sl, r1
 8008f6e:	9302      	str	r3, [sp, #8]
 8008f70:	32fe      	adds	r2, #254	; 0xfe
 8008f72:	eb02 030b 	add.w	r3, r2, fp
 8008f76:	46d8      	mov	r8, fp
 8008f78:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	2830      	cmp	r0, #48	; 0x30
 8008f80:	d0f7      	beq.n	8008f72 <__gethex+0x1e>
 8008f82:	f7ff ffd1 	bl	8008f28 <__hexdig_fun>
 8008f86:	4604      	mov	r4, r0
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d138      	bne.n	8008ffe <__gethex+0xaa>
 8008f8c:	49a7      	ldr	r1, [pc, #668]	; (800922c <__gethex+0x2d8>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4640      	mov	r0, r8
 8008f92:	f7fe ffd9 	bl	8007f48 <strncmp>
 8008f96:	4606      	mov	r6, r0
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d169      	bne.n	8009070 <__gethex+0x11c>
 8008f9c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008fa0:	465d      	mov	r5, fp
 8008fa2:	f7ff ffc1 	bl	8008f28 <__hexdig_fun>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d064      	beq.n	8009074 <__gethex+0x120>
 8008faa:	465a      	mov	r2, fp
 8008fac:	7810      	ldrb	r0, [r2, #0]
 8008fae:	2830      	cmp	r0, #48	; 0x30
 8008fb0:	4690      	mov	r8, r2
 8008fb2:	f102 0201 	add.w	r2, r2, #1
 8008fb6:	d0f9      	beq.n	8008fac <__gethex+0x58>
 8008fb8:	f7ff ffb6 	bl	8008f28 <__hexdig_fun>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	fab0 f480 	clz	r4, r0
 8008fc2:	0964      	lsrs	r4, r4, #5
 8008fc4:	465e      	mov	r6, fp
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	4642      	mov	r2, r8
 8008fca:	4615      	mov	r5, r2
 8008fcc:	3201      	adds	r2, #1
 8008fce:	7828      	ldrb	r0, [r5, #0]
 8008fd0:	f7ff ffaa 	bl	8008f28 <__hexdig_fun>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1f8      	bne.n	8008fca <__gethex+0x76>
 8008fd8:	4994      	ldr	r1, [pc, #592]	; (800922c <__gethex+0x2d8>)
 8008fda:	2201      	movs	r2, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f7fe ffb3 	bl	8007f48 <strncmp>
 8008fe2:	b978      	cbnz	r0, 8009004 <__gethex+0xb0>
 8008fe4:	b946      	cbnz	r6, 8008ff8 <__gethex+0xa4>
 8008fe6:	1c6e      	adds	r6, r5, #1
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4615      	mov	r5, r2
 8008fec:	3201      	adds	r2, #1
 8008fee:	7828      	ldrb	r0, [r5, #0]
 8008ff0:	f7ff ff9a 	bl	8008f28 <__hexdig_fun>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d1f8      	bne.n	8008fea <__gethex+0x96>
 8008ff8:	1b73      	subs	r3, r6, r5
 8008ffa:	009e      	lsls	r6, r3, #2
 8008ffc:	e004      	b.n	8009008 <__gethex+0xb4>
 8008ffe:	2400      	movs	r4, #0
 8009000:	4626      	mov	r6, r4
 8009002:	e7e1      	b.n	8008fc8 <__gethex+0x74>
 8009004:	2e00      	cmp	r6, #0
 8009006:	d1f7      	bne.n	8008ff8 <__gethex+0xa4>
 8009008:	782b      	ldrb	r3, [r5, #0]
 800900a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800900e:	2b50      	cmp	r3, #80	; 0x50
 8009010:	d13d      	bne.n	800908e <__gethex+0x13a>
 8009012:	786b      	ldrb	r3, [r5, #1]
 8009014:	2b2b      	cmp	r3, #43	; 0x2b
 8009016:	d02f      	beq.n	8009078 <__gethex+0x124>
 8009018:	2b2d      	cmp	r3, #45	; 0x2d
 800901a:	d031      	beq.n	8009080 <__gethex+0x12c>
 800901c:	1c69      	adds	r1, r5, #1
 800901e:	f04f 0b00 	mov.w	fp, #0
 8009022:	7808      	ldrb	r0, [r1, #0]
 8009024:	f7ff ff80 	bl	8008f28 <__hexdig_fun>
 8009028:	1e42      	subs	r2, r0, #1
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	2a18      	cmp	r2, #24
 800902e:	d82e      	bhi.n	800908e <__gethex+0x13a>
 8009030:	f1a0 0210 	sub.w	r2, r0, #16
 8009034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009038:	f7ff ff76 	bl	8008f28 <__hexdig_fun>
 800903c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009040:	fa5f fc8c 	uxtb.w	ip, ip
 8009044:	f1bc 0f18 	cmp.w	ip, #24
 8009048:	d91d      	bls.n	8009086 <__gethex+0x132>
 800904a:	f1bb 0f00 	cmp.w	fp, #0
 800904e:	d000      	beq.n	8009052 <__gethex+0xfe>
 8009050:	4252      	negs	r2, r2
 8009052:	4416      	add	r6, r2
 8009054:	f8ca 1000 	str.w	r1, [sl]
 8009058:	b1dc      	cbz	r4, 8009092 <__gethex+0x13e>
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	bf14      	ite	ne
 8009060:	f04f 0800 	movne.w	r8, #0
 8009064:	f04f 0806 	moveq.w	r8, #6
 8009068:	4640      	mov	r0, r8
 800906a:	b005      	add	sp, #20
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009070:	4645      	mov	r5, r8
 8009072:	4626      	mov	r6, r4
 8009074:	2401      	movs	r4, #1
 8009076:	e7c7      	b.n	8009008 <__gethex+0xb4>
 8009078:	f04f 0b00 	mov.w	fp, #0
 800907c:	1ca9      	adds	r1, r5, #2
 800907e:	e7d0      	b.n	8009022 <__gethex+0xce>
 8009080:	f04f 0b01 	mov.w	fp, #1
 8009084:	e7fa      	b.n	800907c <__gethex+0x128>
 8009086:	230a      	movs	r3, #10
 8009088:	fb03 0002 	mla	r0, r3, r2, r0
 800908c:	e7d0      	b.n	8009030 <__gethex+0xdc>
 800908e:	4629      	mov	r1, r5
 8009090:	e7e0      	b.n	8009054 <__gethex+0x100>
 8009092:	eba5 0308 	sub.w	r3, r5, r8
 8009096:	3b01      	subs	r3, #1
 8009098:	4621      	mov	r1, r4
 800909a:	2b07      	cmp	r3, #7
 800909c:	dc0a      	bgt.n	80090b4 <__gethex+0x160>
 800909e:	4648      	mov	r0, r9
 80090a0:	f000 fa5a 	bl	8009558 <_Balloc>
 80090a4:	4604      	mov	r4, r0
 80090a6:	b940      	cbnz	r0, 80090ba <__gethex+0x166>
 80090a8:	4b61      	ldr	r3, [pc, #388]	; (8009230 <__gethex+0x2dc>)
 80090aa:	4602      	mov	r2, r0
 80090ac:	21e4      	movs	r1, #228	; 0xe4
 80090ae:	4861      	ldr	r0, [pc, #388]	; (8009234 <__gethex+0x2e0>)
 80090b0:	f001 f91a 	bl	800a2e8 <__assert_func>
 80090b4:	3101      	adds	r1, #1
 80090b6:	105b      	asrs	r3, r3, #1
 80090b8:	e7ef      	b.n	800909a <__gethex+0x146>
 80090ba:	f100 0a14 	add.w	sl, r0, #20
 80090be:	2300      	movs	r3, #0
 80090c0:	495a      	ldr	r1, [pc, #360]	; (800922c <__gethex+0x2d8>)
 80090c2:	f8cd a004 	str.w	sl, [sp, #4]
 80090c6:	469b      	mov	fp, r3
 80090c8:	45a8      	cmp	r8, r5
 80090ca:	d342      	bcc.n	8009152 <__gethex+0x1fe>
 80090cc:	9801      	ldr	r0, [sp, #4]
 80090ce:	f840 bb04 	str.w	fp, [r0], #4
 80090d2:	eba0 000a 	sub.w	r0, r0, sl
 80090d6:	1080      	asrs	r0, r0, #2
 80090d8:	6120      	str	r0, [r4, #16]
 80090da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80090de:	4658      	mov	r0, fp
 80090e0:	f000 fb2c 	bl	800973c <__hi0bits>
 80090e4:	683d      	ldr	r5, [r7, #0]
 80090e6:	eba8 0000 	sub.w	r0, r8, r0
 80090ea:	42a8      	cmp	r0, r5
 80090ec:	dd59      	ble.n	80091a2 <__gethex+0x24e>
 80090ee:	eba0 0805 	sub.w	r8, r0, r5
 80090f2:	4641      	mov	r1, r8
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 febb 	bl	8009e70 <__any_on>
 80090fa:	4683      	mov	fp, r0
 80090fc:	b1b8      	cbz	r0, 800912e <__gethex+0x1da>
 80090fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8009102:	1159      	asrs	r1, r3, #5
 8009104:	f003 021f 	and.w	r2, r3, #31
 8009108:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800910c:	f04f 0b01 	mov.w	fp, #1
 8009110:	fa0b f202 	lsl.w	r2, fp, r2
 8009114:	420a      	tst	r2, r1
 8009116:	d00a      	beq.n	800912e <__gethex+0x1da>
 8009118:	455b      	cmp	r3, fp
 800911a:	dd06      	ble.n	800912a <__gethex+0x1d6>
 800911c:	f1a8 0102 	sub.w	r1, r8, #2
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fea5 	bl	8009e70 <__any_on>
 8009126:	2800      	cmp	r0, #0
 8009128:	d138      	bne.n	800919c <__gethex+0x248>
 800912a:	f04f 0b02 	mov.w	fp, #2
 800912e:	4641      	mov	r1, r8
 8009130:	4620      	mov	r0, r4
 8009132:	f7ff fea7 	bl	8008e84 <rshift>
 8009136:	4446      	add	r6, r8
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	42b3      	cmp	r3, r6
 800913c:	da41      	bge.n	80091c2 <__gethex+0x26e>
 800913e:	4621      	mov	r1, r4
 8009140:	4648      	mov	r0, r9
 8009142:	f000 fa49 	bl	80095d8 <_Bfree>
 8009146:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009148:	2300      	movs	r3, #0
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009150:	e78a      	b.n	8009068 <__gethex+0x114>
 8009152:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009156:	2a2e      	cmp	r2, #46	; 0x2e
 8009158:	d014      	beq.n	8009184 <__gethex+0x230>
 800915a:	2b20      	cmp	r3, #32
 800915c:	d106      	bne.n	800916c <__gethex+0x218>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	f843 bb04 	str.w	fp, [r3], #4
 8009164:	f04f 0b00 	mov.w	fp, #0
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	465b      	mov	r3, fp
 800916c:	7828      	ldrb	r0, [r5, #0]
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	f7ff feda 	bl	8008f28 <__hexdig_fun>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	f000 000f 	and.w	r0, r0, #15
 800917a:	4098      	lsls	r0, r3
 800917c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009180:	3304      	adds	r3, #4
 8009182:	e7a1      	b.n	80090c8 <__gethex+0x174>
 8009184:	45a8      	cmp	r8, r5
 8009186:	d8e8      	bhi.n	800915a <__gethex+0x206>
 8009188:	2201      	movs	r2, #1
 800918a:	4628      	mov	r0, r5
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	f7fe fedb 	bl	8007f48 <strncmp>
 8009192:	4926      	ldr	r1, [pc, #152]	; (800922c <__gethex+0x2d8>)
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	2800      	cmp	r0, #0
 8009198:	d1df      	bne.n	800915a <__gethex+0x206>
 800919a:	e795      	b.n	80090c8 <__gethex+0x174>
 800919c:	f04f 0b03 	mov.w	fp, #3
 80091a0:	e7c5      	b.n	800912e <__gethex+0x1da>
 80091a2:	da0b      	bge.n	80091bc <__gethex+0x268>
 80091a4:	eba5 0800 	sub.w	r8, r5, r0
 80091a8:	4621      	mov	r1, r4
 80091aa:	4642      	mov	r2, r8
 80091ac:	4648      	mov	r0, r9
 80091ae:	f000 fc2d 	bl	8009a0c <__lshift>
 80091b2:	eba6 0608 	sub.w	r6, r6, r8
 80091b6:	4604      	mov	r4, r0
 80091b8:	f100 0a14 	add.w	sl, r0, #20
 80091bc:	f04f 0b00 	mov.w	fp, #0
 80091c0:	e7ba      	b.n	8009138 <__gethex+0x1e4>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	42b3      	cmp	r3, r6
 80091c6:	dd73      	ble.n	80092b0 <__gethex+0x35c>
 80091c8:	1b9e      	subs	r6, r3, r6
 80091ca:	42b5      	cmp	r5, r6
 80091cc:	dc34      	bgt.n	8009238 <__gethex+0x2e4>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d023      	beq.n	800921c <__gethex+0x2c8>
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d025      	beq.n	8009224 <__gethex+0x2d0>
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d115      	bne.n	8009208 <__gethex+0x2b4>
 80091dc:	42b5      	cmp	r5, r6
 80091de:	d113      	bne.n	8009208 <__gethex+0x2b4>
 80091e0:	2d01      	cmp	r5, #1
 80091e2:	d10b      	bne.n	80091fc <__gethex+0x2a8>
 80091e4:	9a02      	ldr	r2, [sp, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	2301      	movs	r3, #1
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	f8ca 3000 	str.w	r3, [sl]
 80091f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80091f8:	601c      	str	r4, [r3, #0]
 80091fa:	e735      	b.n	8009068 <__gethex+0x114>
 80091fc:	1e69      	subs	r1, r5, #1
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 fe36 	bl	8009e70 <__any_on>
 8009204:	2800      	cmp	r0, #0
 8009206:	d1ed      	bne.n	80091e4 <__gethex+0x290>
 8009208:	4621      	mov	r1, r4
 800920a:	4648      	mov	r0, r9
 800920c:	f000 f9e4 	bl	80095d8 <_Bfree>
 8009210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009212:	2300      	movs	r3, #0
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	f04f 0850 	mov.w	r8, #80	; 0x50
 800921a:	e725      	b.n	8009068 <__gethex+0x114>
 800921c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f2      	bne.n	8009208 <__gethex+0x2b4>
 8009222:	e7df      	b.n	80091e4 <__gethex+0x290>
 8009224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1dc      	bne.n	80091e4 <__gethex+0x290>
 800922a:	e7ed      	b.n	8009208 <__gethex+0x2b4>
 800922c:	0800ac74 	.word	0x0800ac74
 8009230:	0800ae81 	.word	0x0800ae81
 8009234:	0800ae92 	.word	0x0800ae92
 8009238:	f106 38ff 	add.w	r8, r6, #4294967295
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d133      	bne.n	80092aa <__gethex+0x356>
 8009242:	f1b8 0f00 	cmp.w	r8, #0
 8009246:	d004      	beq.n	8009252 <__gethex+0x2fe>
 8009248:	4641      	mov	r1, r8
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fe10 	bl	8009e70 <__any_on>
 8009250:	4683      	mov	fp, r0
 8009252:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009256:	2301      	movs	r3, #1
 8009258:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800925c:	f008 081f 	and.w	r8, r8, #31
 8009260:	fa03 f308 	lsl.w	r3, r3, r8
 8009264:	4213      	tst	r3, r2
 8009266:	4631      	mov	r1, r6
 8009268:	4620      	mov	r0, r4
 800926a:	bf18      	it	ne
 800926c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009270:	1bad      	subs	r5, r5, r6
 8009272:	f7ff fe07 	bl	8008e84 <rshift>
 8009276:	687e      	ldr	r6, [r7, #4]
 8009278:	f04f 0802 	mov.w	r8, #2
 800927c:	f1bb 0f00 	cmp.w	fp, #0
 8009280:	d04a      	beq.n	8009318 <__gethex+0x3c4>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d016      	beq.n	80092b6 <__gethex+0x362>
 8009288:	2b03      	cmp	r3, #3
 800928a:	d018      	beq.n	80092be <__gethex+0x36a>
 800928c:	2b01      	cmp	r3, #1
 800928e:	d109      	bne.n	80092a4 <__gethex+0x350>
 8009290:	f01b 0f02 	tst.w	fp, #2
 8009294:	d006      	beq.n	80092a4 <__gethex+0x350>
 8009296:	f8da 3000 	ldr.w	r3, [sl]
 800929a:	ea4b 0b03 	orr.w	fp, fp, r3
 800929e:	f01b 0f01 	tst.w	fp, #1
 80092a2:	d10f      	bne.n	80092c4 <__gethex+0x370>
 80092a4:	f048 0810 	orr.w	r8, r8, #16
 80092a8:	e036      	b.n	8009318 <__gethex+0x3c4>
 80092aa:	f04f 0b01 	mov.w	fp, #1
 80092ae:	e7d0      	b.n	8009252 <__gethex+0x2fe>
 80092b0:	f04f 0801 	mov.w	r8, #1
 80092b4:	e7e2      	b.n	800927c <__gethex+0x328>
 80092b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092b8:	f1c3 0301 	rsb	r3, r3, #1
 80092bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80092be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ef      	beq.n	80092a4 <__gethex+0x350>
 80092c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092c8:	f104 0214 	add.w	r2, r4, #20
 80092cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80092d6:	2300      	movs	r3, #0
 80092d8:	4694      	mov	ip, r2
 80092da:	f852 1b04 	ldr.w	r1, [r2], #4
 80092de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80092e2:	d01e      	beq.n	8009322 <__gethex+0x3ce>
 80092e4:	3101      	adds	r1, #1
 80092e6:	f8cc 1000 	str.w	r1, [ip]
 80092ea:	f1b8 0f02 	cmp.w	r8, #2
 80092ee:	f104 0214 	add.w	r2, r4, #20
 80092f2:	d13d      	bne.n	8009370 <__gethex+0x41c>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	d10b      	bne.n	8009314 <__gethex+0x3c0>
 80092fc:	1169      	asrs	r1, r5, #5
 80092fe:	2301      	movs	r3, #1
 8009300:	f005 051f 	and.w	r5, r5, #31
 8009304:	fa03 f505 	lsl.w	r5, r3, r5
 8009308:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800930c:	421d      	tst	r5, r3
 800930e:	bf18      	it	ne
 8009310:	f04f 0801 	movne.w	r8, #1
 8009314:	f048 0820 	orr.w	r8, r8, #32
 8009318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800931a:	601c      	str	r4, [r3, #0]
 800931c:	9b02      	ldr	r3, [sp, #8]
 800931e:	601e      	str	r6, [r3, #0]
 8009320:	e6a2      	b.n	8009068 <__gethex+0x114>
 8009322:	4290      	cmp	r0, r2
 8009324:	f842 3c04 	str.w	r3, [r2, #-4]
 8009328:	d8d6      	bhi.n	80092d8 <__gethex+0x384>
 800932a:	68a2      	ldr	r2, [r4, #8]
 800932c:	4593      	cmp	fp, r2
 800932e:	db17      	blt.n	8009360 <__gethex+0x40c>
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4648      	mov	r0, r9
 8009334:	3101      	adds	r1, #1
 8009336:	f000 f90f 	bl	8009558 <_Balloc>
 800933a:	4682      	mov	sl, r0
 800933c:	b918      	cbnz	r0, 8009346 <__gethex+0x3f2>
 800933e:	4b1b      	ldr	r3, [pc, #108]	; (80093ac <__gethex+0x458>)
 8009340:	4602      	mov	r2, r0
 8009342:	2184      	movs	r1, #132	; 0x84
 8009344:	e6b3      	b.n	80090ae <__gethex+0x15a>
 8009346:	6922      	ldr	r2, [r4, #16]
 8009348:	3202      	adds	r2, #2
 800934a:	f104 010c 	add.w	r1, r4, #12
 800934e:	0092      	lsls	r2, r2, #2
 8009350:	300c      	adds	r0, #12
 8009352:	f7fe febb 	bl	80080cc <memcpy>
 8009356:	4621      	mov	r1, r4
 8009358:	4648      	mov	r0, r9
 800935a:	f000 f93d 	bl	80095d8 <_Bfree>
 800935e:	4654      	mov	r4, sl
 8009360:	6922      	ldr	r2, [r4, #16]
 8009362:	1c51      	adds	r1, r2, #1
 8009364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009368:	6121      	str	r1, [r4, #16]
 800936a:	2101      	movs	r1, #1
 800936c:	6151      	str	r1, [r2, #20]
 800936e:	e7bc      	b.n	80092ea <__gethex+0x396>
 8009370:	6921      	ldr	r1, [r4, #16]
 8009372:	4559      	cmp	r1, fp
 8009374:	dd0b      	ble.n	800938e <__gethex+0x43a>
 8009376:	2101      	movs	r1, #1
 8009378:	4620      	mov	r0, r4
 800937a:	f7ff fd83 	bl	8008e84 <rshift>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	3601      	adds	r6, #1
 8009382:	42b3      	cmp	r3, r6
 8009384:	f6ff aedb 	blt.w	800913e <__gethex+0x1ea>
 8009388:	f04f 0801 	mov.w	r8, #1
 800938c:	e7c2      	b.n	8009314 <__gethex+0x3c0>
 800938e:	f015 051f 	ands.w	r5, r5, #31
 8009392:	d0f9      	beq.n	8009388 <__gethex+0x434>
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	441a      	add	r2, r3
 8009398:	f1c5 0520 	rsb	r5, r5, #32
 800939c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80093a0:	f000 f9cc 	bl	800973c <__hi0bits>
 80093a4:	42a8      	cmp	r0, r5
 80093a6:	dbe6      	blt.n	8009376 <__gethex+0x422>
 80093a8:	e7ee      	b.n	8009388 <__gethex+0x434>
 80093aa:	bf00      	nop
 80093ac:	0800ae81 	.word	0x0800ae81

080093b0 <L_shift>:
 80093b0:	f1c2 0208 	rsb	r2, r2, #8
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	f1c2 0620 	rsb	r6, r2, #32
 80093bc:	6843      	ldr	r3, [r0, #4]
 80093be:	6804      	ldr	r4, [r0, #0]
 80093c0:	fa03 f506 	lsl.w	r5, r3, r6
 80093c4:	432c      	orrs	r4, r5
 80093c6:	40d3      	lsrs	r3, r2
 80093c8:	6004      	str	r4, [r0, #0]
 80093ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80093ce:	4288      	cmp	r0, r1
 80093d0:	d3f4      	bcc.n	80093bc <L_shift+0xc>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}

080093d4 <__match>:
 80093d4:	b530      	push	{r4, r5, lr}
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093de:	b914      	cbnz	r4, 80093e6 <__match+0x12>
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	2001      	movs	r0, #1
 80093e4:	bd30      	pop	{r4, r5, pc}
 80093e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093ee:	2d19      	cmp	r5, #25
 80093f0:	bf98      	it	ls
 80093f2:	3220      	addls	r2, #32
 80093f4:	42a2      	cmp	r2, r4
 80093f6:	d0f0      	beq.n	80093da <__match+0x6>
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7f3      	b.n	80093e4 <__match+0x10>

080093fc <__hexnan>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	680b      	ldr	r3, [r1, #0]
 8009402:	6801      	ldr	r1, [r0, #0]
 8009404:	115e      	asrs	r6, r3, #5
 8009406:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800940a:	f013 031f 	ands.w	r3, r3, #31
 800940e:	b087      	sub	sp, #28
 8009410:	bf18      	it	ne
 8009412:	3604      	addne	r6, #4
 8009414:	2500      	movs	r5, #0
 8009416:	1f37      	subs	r7, r6, #4
 8009418:	4682      	mov	sl, r0
 800941a:	4690      	mov	r8, r2
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009422:	46b9      	mov	r9, r7
 8009424:	463c      	mov	r4, r7
 8009426:	9502      	str	r5, [sp, #8]
 8009428:	46ab      	mov	fp, r5
 800942a:	784a      	ldrb	r2, [r1, #1]
 800942c:	1c4b      	adds	r3, r1, #1
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	b342      	cbz	r2, 8009484 <__hexnan+0x88>
 8009432:	4610      	mov	r0, r2
 8009434:	9105      	str	r1, [sp, #20]
 8009436:	9204      	str	r2, [sp, #16]
 8009438:	f7ff fd76 	bl	8008f28 <__hexdig_fun>
 800943c:	2800      	cmp	r0, #0
 800943e:	d14f      	bne.n	80094e0 <__hexnan+0xe4>
 8009440:	9a04      	ldr	r2, [sp, #16]
 8009442:	9905      	ldr	r1, [sp, #20]
 8009444:	2a20      	cmp	r2, #32
 8009446:	d818      	bhi.n	800947a <__hexnan+0x7e>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	459b      	cmp	fp, r3
 800944c:	dd13      	ble.n	8009476 <__hexnan+0x7a>
 800944e:	454c      	cmp	r4, r9
 8009450:	d206      	bcs.n	8009460 <__hexnan+0x64>
 8009452:	2d07      	cmp	r5, #7
 8009454:	dc04      	bgt.n	8009460 <__hexnan+0x64>
 8009456:	462a      	mov	r2, r5
 8009458:	4649      	mov	r1, r9
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff ffa8 	bl	80093b0 <L_shift>
 8009460:	4544      	cmp	r4, r8
 8009462:	d950      	bls.n	8009506 <__hexnan+0x10a>
 8009464:	2300      	movs	r3, #0
 8009466:	f1a4 0904 	sub.w	r9, r4, #4
 800946a:	f844 3c04 	str.w	r3, [r4, #-4]
 800946e:	f8cd b008 	str.w	fp, [sp, #8]
 8009472:	464c      	mov	r4, r9
 8009474:	461d      	mov	r5, r3
 8009476:	9903      	ldr	r1, [sp, #12]
 8009478:	e7d7      	b.n	800942a <__hexnan+0x2e>
 800947a:	2a29      	cmp	r2, #41	; 0x29
 800947c:	d155      	bne.n	800952a <__hexnan+0x12e>
 800947e:	3102      	adds	r1, #2
 8009480:	f8ca 1000 	str.w	r1, [sl]
 8009484:	f1bb 0f00 	cmp.w	fp, #0
 8009488:	d04f      	beq.n	800952a <__hexnan+0x12e>
 800948a:	454c      	cmp	r4, r9
 800948c:	d206      	bcs.n	800949c <__hexnan+0xa0>
 800948e:	2d07      	cmp	r5, #7
 8009490:	dc04      	bgt.n	800949c <__hexnan+0xa0>
 8009492:	462a      	mov	r2, r5
 8009494:	4649      	mov	r1, r9
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff ff8a 	bl	80093b0 <L_shift>
 800949c:	4544      	cmp	r4, r8
 800949e:	d934      	bls.n	800950a <__hexnan+0x10e>
 80094a0:	f1a8 0204 	sub.w	r2, r8, #4
 80094a4:	4623      	mov	r3, r4
 80094a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80094aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80094ae:	429f      	cmp	r7, r3
 80094b0:	d2f9      	bcs.n	80094a6 <__hexnan+0xaa>
 80094b2:	1b3b      	subs	r3, r7, r4
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3304      	adds	r3, #4
 80094ba:	3e03      	subs	r6, #3
 80094bc:	3401      	adds	r4, #1
 80094be:	42a6      	cmp	r6, r4
 80094c0:	bf38      	it	cc
 80094c2:	2304      	movcc	r3, #4
 80094c4:	4443      	add	r3, r8
 80094c6:	2200      	movs	r2, #0
 80094c8:	f843 2b04 	str.w	r2, [r3], #4
 80094cc:	429f      	cmp	r7, r3
 80094ce:	d2fb      	bcs.n	80094c8 <__hexnan+0xcc>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	b91b      	cbnz	r3, 80094dc <__hexnan+0xe0>
 80094d4:	4547      	cmp	r7, r8
 80094d6:	d126      	bne.n	8009526 <__hexnan+0x12a>
 80094d8:	2301      	movs	r3, #1
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	2005      	movs	r0, #5
 80094de:	e025      	b.n	800952c <__hexnan+0x130>
 80094e0:	3501      	adds	r5, #1
 80094e2:	2d08      	cmp	r5, #8
 80094e4:	f10b 0b01 	add.w	fp, fp, #1
 80094e8:	dd06      	ble.n	80094f8 <__hexnan+0xfc>
 80094ea:	4544      	cmp	r4, r8
 80094ec:	d9c3      	bls.n	8009476 <__hexnan+0x7a>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094f4:	2501      	movs	r5, #1
 80094f6:	3c04      	subs	r4, #4
 80094f8:	6822      	ldr	r2, [r4, #0]
 80094fa:	f000 000f 	and.w	r0, r0, #15
 80094fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009502:	6020      	str	r0, [r4, #0]
 8009504:	e7b7      	b.n	8009476 <__hexnan+0x7a>
 8009506:	2508      	movs	r5, #8
 8009508:	e7b5      	b.n	8009476 <__hexnan+0x7a>
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0df      	beq.n	80094d0 <__hexnan+0xd4>
 8009510:	f1c3 0320 	rsb	r3, r3, #32
 8009514:	f04f 32ff 	mov.w	r2, #4294967295
 8009518:	40da      	lsrs	r2, r3
 800951a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800951e:	4013      	ands	r3, r2
 8009520:	f846 3c04 	str.w	r3, [r6, #-4]
 8009524:	e7d4      	b.n	80094d0 <__hexnan+0xd4>
 8009526:	3f04      	subs	r7, #4
 8009528:	e7d2      	b.n	80094d0 <__hexnan+0xd4>
 800952a:	2004      	movs	r0, #4
 800952c:	b007      	add	sp, #28
 800952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009532 <__ascii_mbtowc>:
 8009532:	b082      	sub	sp, #8
 8009534:	b901      	cbnz	r1, 8009538 <__ascii_mbtowc+0x6>
 8009536:	a901      	add	r1, sp, #4
 8009538:	b142      	cbz	r2, 800954c <__ascii_mbtowc+0x1a>
 800953a:	b14b      	cbz	r3, 8009550 <__ascii_mbtowc+0x1e>
 800953c:	7813      	ldrb	r3, [r2, #0]
 800953e:	600b      	str	r3, [r1, #0]
 8009540:	7812      	ldrb	r2, [r2, #0]
 8009542:	1e10      	subs	r0, r2, #0
 8009544:	bf18      	it	ne
 8009546:	2001      	movne	r0, #1
 8009548:	b002      	add	sp, #8
 800954a:	4770      	bx	lr
 800954c:	4610      	mov	r0, r2
 800954e:	e7fb      	b.n	8009548 <__ascii_mbtowc+0x16>
 8009550:	f06f 0001 	mvn.w	r0, #1
 8009554:	e7f8      	b.n	8009548 <__ascii_mbtowc+0x16>
	...

08009558 <_Balloc>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	69c6      	ldr	r6, [r0, #28]
 800955c:	4604      	mov	r4, r0
 800955e:	460d      	mov	r5, r1
 8009560:	b976      	cbnz	r6, 8009580 <_Balloc+0x28>
 8009562:	2010      	movs	r0, #16
 8009564:	f7fd f82a 	bl	80065bc <malloc>
 8009568:	4602      	mov	r2, r0
 800956a:	61e0      	str	r0, [r4, #28]
 800956c:	b920      	cbnz	r0, 8009578 <_Balloc+0x20>
 800956e:	4b18      	ldr	r3, [pc, #96]	; (80095d0 <_Balloc+0x78>)
 8009570:	4818      	ldr	r0, [pc, #96]	; (80095d4 <_Balloc+0x7c>)
 8009572:	216b      	movs	r1, #107	; 0x6b
 8009574:	f000 feb8 	bl	800a2e8 <__assert_func>
 8009578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800957c:	6006      	str	r6, [r0, #0]
 800957e:	60c6      	str	r6, [r0, #12]
 8009580:	69e6      	ldr	r6, [r4, #28]
 8009582:	68f3      	ldr	r3, [r6, #12]
 8009584:	b183      	cbz	r3, 80095a8 <_Balloc+0x50>
 8009586:	69e3      	ldr	r3, [r4, #28]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800958e:	b9b8      	cbnz	r0, 80095c0 <_Balloc+0x68>
 8009590:	2101      	movs	r1, #1
 8009592:	fa01 f605 	lsl.w	r6, r1, r5
 8009596:	1d72      	adds	r2, r6, #5
 8009598:	0092      	lsls	r2, r2, #2
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fec2 	bl	800a324 <_calloc_r>
 80095a0:	b160      	cbz	r0, 80095bc <_Balloc+0x64>
 80095a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095a6:	e00e      	b.n	80095c6 <_Balloc+0x6e>
 80095a8:	2221      	movs	r2, #33	; 0x21
 80095aa:	2104      	movs	r1, #4
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 feb9 	bl	800a324 <_calloc_r>
 80095b2:	69e3      	ldr	r3, [r4, #28]
 80095b4:	60f0      	str	r0, [r6, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e4      	bne.n	8009586 <_Balloc+0x2e>
 80095bc:	2000      	movs	r0, #0
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	6802      	ldr	r2, [r0, #0]
 80095c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095c6:	2300      	movs	r3, #0
 80095c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095cc:	e7f7      	b.n	80095be <_Balloc+0x66>
 80095ce:	bf00      	nop
 80095d0:	0800ae12 	.word	0x0800ae12
 80095d4:	0800aef2 	.word	0x0800aef2

080095d8 <_Bfree>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	69c6      	ldr	r6, [r0, #28]
 80095dc:	4605      	mov	r5, r0
 80095de:	460c      	mov	r4, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Bfree+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7fc ffea 	bl	80065bc <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	61e8      	str	r0, [r5, #28]
 80095ec:	b920      	cbnz	r0, 80095f8 <_Bfree+0x20>
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <_Bfree+0x3c>)
 80095f0:	4809      	ldr	r0, [pc, #36]	; (8009618 <_Bfree+0x40>)
 80095f2:	218f      	movs	r1, #143	; 0x8f
 80095f4:	f000 fe78 	bl	800a2e8 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	b13c      	cbz	r4, 8009612 <_Bfree+0x3a>
 8009602:	69eb      	ldr	r3, [r5, #28]
 8009604:	6862      	ldr	r2, [r4, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800960c:	6021      	str	r1, [r4, #0]
 800960e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	0800ae12 	.word	0x0800ae12
 8009618:	0800aef2 	.word	0x0800aef2

0800961c <__multadd>:
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	690d      	ldr	r5, [r1, #16]
 8009622:	4607      	mov	r7, r0
 8009624:	460c      	mov	r4, r1
 8009626:	461e      	mov	r6, r3
 8009628:	f101 0c14 	add.w	ip, r1, #20
 800962c:	2000      	movs	r0, #0
 800962e:	f8dc 3000 	ldr.w	r3, [ip]
 8009632:	b299      	uxth	r1, r3
 8009634:	fb02 6101 	mla	r1, r2, r1, r6
 8009638:	0c1e      	lsrs	r6, r3, #16
 800963a:	0c0b      	lsrs	r3, r1, #16
 800963c:	fb02 3306 	mla	r3, r2, r6, r3
 8009640:	b289      	uxth	r1, r1
 8009642:	3001      	adds	r0, #1
 8009644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009648:	4285      	cmp	r5, r0
 800964a:	f84c 1b04 	str.w	r1, [ip], #4
 800964e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009652:	dcec      	bgt.n	800962e <__multadd+0x12>
 8009654:	b30e      	cbz	r6, 800969a <__multadd+0x7e>
 8009656:	68a3      	ldr	r3, [r4, #8]
 8009658:	42ab      	cmp	r3, r5
 800965a:	dc19      	bgt.n	8009690 <__multadd+0x74>
 800965c:	6861      	ldr	r1, [r4, #4]
 800965e:	4638      	mov	r0, r7
 8009660:	3101      	adds	r1, #1
 8009662:	f7ff ff79 	bl	8009558 <_Balloc>
 8009666:	4680      	mov	r8, r0
 8009668:	b928      	cbnz	r0, 8009676 <__multadd+0x5a>
 800966a:	4602      	mov	r2, r0
 800966c:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <__multadd+0x84>)
 800966e:	480d      	ldr	r0, [pc, #52]	; (80096a4 <__multadd+0x88>)
 8009670:	21ba      	movs	r1, #186	; 0xba
 8009672:	f000 fe39 	bl	800a2e8 <__assert_func>
 8009676:	6922      	ldr	r2, [r4, #16]
 8009678:	3202      	adds	r2, #2
 800967a:	f104 010c 	add.w	r1, r4, #12
 800967e:	0092      	lsls	r2, r2, #2
 8009680:	300c      	adds	r0, #12
 8009682:	f7fe fd23 	bl	80080cc <memcpy>
 8009686:	4621      	mov	r1, r4
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ffa5 	bl	80095d8 <_Bfree>
 800968e:	4644      	mov	r4, r8
 8009690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009694:	3501      	adds	r5, #1
 8009696:	615e      	str	r6, [r3, #20]
 8009698:	6125      	str	r5, [r4, #16]
 800969a:	4620      	mov	r0, r4
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	0800ae81 	.word	0x0800ae81
 80096a4:	0800aef2 	.word	0x0800aef2

080096a8 <__s2b>:
 80096a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ac:	460c      	mov	r4, r1
 80096ae:	4615      	mov	r5, r2
 80096b0:	461f      	mov	r7, r3
 80096b2:	2209      	movs	r2, #9
 80096b4:	3308      	adds	r3, #8
 80096b6:	4606      	mov	r6, r0
 80096b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80096bc:	2100      	movs	r1, #0
 80096be:	2201      	movs	r2, #1
 80096c0:	429a      	cmp	r2, r3
 80096c2:	db09      	blt.n	80096d8 <__s2b+0x30>
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ff47 	bl	8009558 <_Balloc>
 80096ca:	b940      	cbnz	r0, 80096de <__s2b+0x36>
 80096cc:	4602      	mov	r2, r0
 80096ce:	4b19      	ldr	r3, [pc, #100]	; (8009734 <__s2b+0x8c>)
 80096d0:	4819      	ldr	r0, [pc, #100]	; (8009738 <__s2b+0x90>)
 80096d2:	21d3      	movs	r1, #211	; 0xd3
 80096d4:	f000 fe08 	bl	800a2e8 <__assert_func>
 80096d8:	0052      	lsls	r2, r2, #1
 80096da:	3101      	adds	r1, #1
 80096dc:	e7f0      	b.n	80096c0 <__s2b+0x18>
 80096de:	9b08      	ldr	r3, [sp, #32]
 80096e0:	6143      	str	r3, [r0, #20]
 80096e2:	2d09      	cmp	r5, #9
 80096e4:	f04f 0301 	mov.w	r3, #1
 80096e8:	6103      	str	r3, [r0, #16]
 80096ea:	dd16      	ble.n	800971a <__s2b+0x72>
 80096ec:	f104 0909 	add.w	r9, r4, #9
 80096f0:	46c8      	mov	r8, r9
 80096f2:	442c      	add	r4, r5
 80096f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80096f8:	4601      	mov	r1, r0
 80096fa:	3b30      	subs	r3, #48	; 0x30
 80096fc:	220a      	movs	r2, #10
 80096fe:	4630      	mov	r0, r6
 8009700:	f7ff ff8c 	bl	800961c <__multadd>
 8009704:	45a0      	cmp	r8, r4
 8009706:	d1f5      	bne.n	80096f4 <__s2b+0x4c>
 8009708:	f1a5 0408 	sub.w	r4, r5, #8
 800970c:	444c      	add	r4, r9
 800970e:	1b2d      	subs	r5, r5, r4
 8009710:	1963      	adds	r3, r4, r5
 8009712:	42bb      	cmp	r3, r7
 8009714:	db04      	blt.n	8009720 <__s2b+0x78>
 8009716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800971a:	340a      	adds	r4, #10
 800971c:	2509      	movs	r5, #9
 800971e:	e7f6      	b.n	800970e <__s2b+0x66>
 8009720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009724:	4601      	mov	r1, r0
 8009726:	3b30      	subs	r3, #48	; 0x30
 8009728:	220a      	movs	r2, #10
 800972a:	4630      	mov	r0, r6
 800972c:	f7ff ff76 	bl	800961c <__multadd>
 8009730:	e7ee      	b.n	8009710 <__s2b+0x68>
 8009732:	bf00      	nop
 8009734:	0800ae81 	.word	0x0800ae81
 8009738:	0800aef2 	.word	0x0800aef2

0800973c <__hi0bits>:
 800973c:	0c03      	lsrs	r3, r0, #16
 800973e:	041b      	lsls	r3, r3, #16
 8009740:	b9d3      	cbnz	r3, 8009778 <__hi0bits+0x3c>
 8009742:	0400      	lsls	r0, r0, #16
 8009744:	2310      	movs	r3, #16
 8009746:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800974a:	bf04      	itt	eq
 800974c:	0200      	lsleq	r0, r0, #8
 800974e:	3308      	addeq	r3, #8
 8009750:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009754:	bf04      	itt	eq
 8009756:	0100      	lsleq	r0, r0, #4
 8009758:	3304      	addeq	r3, #4
 800975a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800975e:	bf04      	itt	eq
 8009760:	0080      	lsleq	r0, r0, #2
 8009762:	3302      	addeq	r3, #2
 8009764:	2800      	cmp	r0, #0
 8009766:	db05      	blt.n	8009774 <__hi0bits+0x38>
 8009768:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800976c:	f103 0301 	add.w	r3, r3, #1
 8009770:	bf08      	it	eq
 8009772:	2320      	moveq	r3, #32
 8009774:	4618      	mov	r0, r3
 8009776:	4770      	bx	lr
 8009778:	2300      	movs	r3, #0
 800977a:	e7e4      	b.n	8009746 <__hi0bits+0xa>

0800977c <__lo0bits>:
 800977c:	6803      	ldr	r3, [r0, #0]
 800977e:	f013 0207 	ands.w	r2, r3, #7
 8009782:	d00c      	beq.n	800979e <__lo0bits+0x22>
 8009784:	07d9      	lsls	r1, r3, #31
 8009786:	d422      	bmi.n	80097ce <__lo0bits+0x52>
 8009788:	079a      	lsls	r2, r3, #30
 800978a:	bf49      	itett	mi
 800978c:	085b      	lsrmi	r3, r3, #1
 800978e:	089b      	lsrpl	r3, r3, #2
 8009790:	6003      	strmi	r3, [r0, #0]
 8009792:	2201      	movmi	r2, #1
 8009794:	bf5c      	itt	pl
 8009796:	6003      	strpl	r3, [r0, #0]
 8009798:	2202      	movpl	r2, #2
 800979a:	4610      	mov	r0, r2
 800979c:	4770      	bx	lr
 800979e:	b299      	uxth	r1, r3
 80097a0:	b909      	cbnz	r1, 80097a6 <__lo0bits+0x2a>
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	2210      	movs	r2, #16
 80097a6:	b2d9      	uxtb	r1, r3
 80097a8:	b909      	cbnz	r1, 80097ae <__lo0bits+0x32>
 80097aa:	3208      	adds	r2, #8
 80097ac:	0a1b      	lsrs	r3, r3, #8
 80097ae:	0719      	lsls	r1, r3, #28
 80097b0:	bf04      	itt	eq
 80097b2:	091b      	lsreq	r3, r3, #4
 80097b4:	3204      	addeq	r2, #4
 80097b6:	0799      	lsls	r1, r3, #30
 80097b8:	bf04      	itt	eq
 80097ba:	089b      	lsreq	r3, r3, #2
 80097bc:	3202      	addeq	r2, #2
 80097be:	07d9      	lsls	r1, r3, #31
 80097c0:	d403      	bmi.n	80097ca <__lo0bits+0x4e>
 80097c2:	085b      	lsrs	r3, r3, #1
 80097c4:	f102 0201 	add.w	r2, r2, #1
 80097c8:	d003      	beq.n	80097d2 <__lo0bits+0x56>
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	e7e5      	b.n	800979a <__lo0bits+0x1e>
 80097ce:	2200      	movs	r2, #0
 80097d0:	e7e3      	b.n	800979a <__lo0bits+0x1e>
 80097d2:	2220      	movs	r2, #32
 80097d4:	e7e1      	b.n	800979a <__lo0bits+0x1e>
	...

080097d8 <__i2b>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	460c      	mov	r4, r1
 80097dc:	2101      	movs	r1, #1
 80097de:	f7ff febb 	bl	8009558 <_Balloc>
 80097e2:	4602      	mov	r2, r0
 80097e4:	b928      	cbnz	r0, 80097f2 <__i2b+0x1a>
 80097e6:	4b05      	ldr	r3, [pc, #20]	; (80097fc <__i2b+0x24>)
 80097e8:	4805      	ldr	r0, [pc, #20]	; (8009800 <__i2b+0x28>)
 80097ea:	f240 1145 	movw	r1, #325	; 0x145
 80097ee:	f000 fd7b 	bl	800a2e8 <__assert_func>
 80097f2:	2301      	movs	r3, #1
 80097f4:	6144      	str	r4, [r0, #20]
 80097f6:	6103      	str	r3, [r0, #16]
 80097f8:	bd10      	pop	{r4, pc}
 80097fa:	bf00      	nop
 80097fc:	0800ae81 	.word	0x0800ae81
 8009800:	0800aef2 	.word	0x0800aef2

08009804 <__multiply>:
 8009804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	4691      	mov	r9, r2
 800980a:	690a      	ldr	r2, [r1, #16]
 800980c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009810:	429a      	cmp	r2, r3
 8009812:	bfb8      	it	lt
 8009814:	460b      	movlt	r3, r1
 8009816:	460c      	mov	r4, r1
 8009818:	bfbc      	itt	lt
 800981a:	464c      	movlt	r4, r9
 800981c:	4699      	movlt	r9, r3
 800981e:	6927      	ldr	r7, [r4, #16]
 8009820:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009824:	68a3      	ldr	r3, [r4, #8]
 8009826:	6861      	ldr	r1, [r4, #4]
 8009828:	eb07 060a 	add.w	r6, r7, sl
 800982c:	42b3      	cmp	r3, r6
 800982e:	b085      	sub	sp, #20
 8009830:	bfb8      	it	lt
 8009832:	3101      	addlt	r1, #1
 8009834:	f7ff fe90 	bl	8009558 <_Balloc>
 8009838:	b930      	cbnz	r0, 8009848 <__multiply+0x44>
 800983a:	4602      	mov	r2, r0
 800983c:	4b44      	ldr	r3, [pc, #272]	; (8009950 <__multiply+0x14c>)
 800983e:	4845      	ldr	r0, [pc, #276]	; (8009954 <__multiply+0x150>)
 8009840:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009844:	f000 fd50 	bl	800a2e8 <__assert_func>
 8009848:	f100 0514 	add.w	r5, r0, #20
 800984c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009850:	462b      	mov	r3, r5
 8009852:	2200      	movs	r2, #0
 8009854:	4543      	cmp	r3, r8
 8009856:	d321      	bcc.n	800989c <__multiply+0x98>
 8009858:	f104 0314 	add.w	r3, r4, #20
 800985c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009860:	f109 0314 	add.w	r3, r9, #20
 8009864:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009868:	9202      	str	r2, [sp, #8]
 800986a:	1b3a      	subs	r2, r7, r4
 800986c:	3a15      	subs	r2, #21
 800986e:	f022 0203 	bic.w	r2, r2, #3
 8009872:	3204      	adds	r2, #4
 8009874:	f104 0115 	add.w	r1, r4, #21
 8009878:	428f      	cmp	r7, r1
 800987a:	bf38      	it	cc
 800987c:	2204      	movcc	r2, #4
 800987e:	9201      	str	r2, [sp, #4]
 8009880:	9a02      	ldr	r2, [sp, #8]
 8009882:	9303      	str	r3, [sp, #12]
 8009884:	429a      	cmp	r2, r3
 8009886:	d80c      	bhi.n	80098a2 <__multiply+0x9e>
 8009888:	2e00      	cmp	r6, #0
 800988a:	dd03      	ble.n	8009894 <__multiply+0x90>
 800988c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009890:	2b00      	cmp	r3, #0
 8009892:	d05b      	beq.n	800994c <__multiply+0x148>
 8009894:	6106      	str	r6, [r0, #16]
 8009896:	b005      	add	sp, #20
 8009898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989c:	f843 2b04 	str.w	r2, [r3], #4
 80098a0:	e7d8      	b.n	8009854 <__multiply+0x50>
 80098a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098a6:	f1ba 0f00 	cmp.w	sl, #0
 80098aa:	d024      	beq.n	80098f6 <__multiply+0xf2>
 80098ac:	f104 0e14 	add.w	lr, r4, #20
 80098b0:	46a9      	mov	r9, r5
 80098b2:	f04f 0c00 	mov.w	ip, #0
 80098b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098ba:	f8d9 1000 	ldr.w	r1, [r9]
 80098be:	fa1f fb82 	uxth.w	fp, r2
 80098c2:	b289      	uxth	r1, r1
 80098c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098cc:	f8d9 2000 	ldr.w	r2, [r9]
 80098d0:	4461      	add	r1, ip
 80098d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80098da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098de:	b289      	uxth	r1, r1
 80098e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098e4:	4577      	cmp	r7, lr
 80098e6:	f849 1b04 	str.w	r1, [r9], #4
 80098ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098ee:	d8e2      	bhi.n	80098b6 <__multiply+0xb2>
 80098f0:	9a01      	ldr	r2, [sp, #4]
 80098f2:	f845 c002 	str.w	ip, [r5, r2]
 80098f6:	9a03      	ldr	r2, [sp, #12]
 80098f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098fc:	3304      	adds	r3, #4
 80098fe:	f1b9 0f00 	cmp.w	r9, #0
 8009902:	d021      	beq.n	8009948 <__multiply+0x144>
 8009904:	6829      	ldr	r1, [r5, #0]
 8009906:	f104 0c14 	add.w	ip, r4, #20
 800990a:	46ae      	mov	lr, r5
 800990c:	f04f 0a00 	mov.w	sl, #0
 8009910:	f8bc b000 	ldrh.w	fp, [ip]
 8009914:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009918:	fb09 220b 	mla	r2, r9, fp, r2
 800991c:	4452      	add	r2, sl
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009924:	f84e 1b04 	str.w	r1, [lr], #4
 8009928:	f85c 1b04 	ldr.w	r1, [ip], #4
 800992c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009930:	f8be 1000 	ldrh.w	r1, [lr]
 8009934:	fb09 110a 	mla	r1, r9, sl, r1
 8009938:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800993c:	4567      	cmp	r7, ip
 800993e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009942:	d8e5      	bhi.n	8009910 <__multiply+0x10c>
 8009944:	9a01      	ldr	r2, [sp, #4]
 8009946:	50a9      	str	r1, [r5, r2]
 8009948:	3504      	adds	r5, #4
 800994a:	e799      	b.n	8009880 <__multiply+0x7c>
 800994c:	3e01      	subs	r6, #1
 800994e:	e79b      	b.n	8009888 <__multiply+0x84>
 8009950:	0800ae81 	.word	0x0800ae81
 8009954:	0800aef2 	.word	0x0800aef2

08009958 <__pow5mult>:
 8009958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800995c:	4615      	mov	r5, r2
 800995e:	f012 0203 	ands.w	r2, r2, #3
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	d007      	beq.n	8009978 <__pow5mult+0x20>
 8009968:	4c25      	ldr	r4, [pc, #148]	; (8009a00 <__pow5mult+0xa8>)
 800996a:	3a01      	subs	r2, #1
 800996c:	2300      	movs	r3, #0
 800996e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009972:	f7ff fe53 	bl	800961c <__multadd>
 8009976:	4607      	mov	r7, r0
 8009978:	10ad      	asrs	r5, r5, #2
 800997a:	d03d      	beq.n	80099f8 <__pow5mult+0xa0>
 800997c:	69f4      	ldr	r4, [r6, #28]
 800997e:	b97c      	cbnz	r4, 80099a0 <__pow5mult+0x48>
 8009980:	2010      	movs	r0, #16
 8009982:	f7fc fe1b 	bl	80065bc <malloc>
 8009986:	4602      	mov	r2, r0
 8009988:	61f0      	str	r0, [r6, #28]
 800998a:	b928      	cbnz	r0, 8009998 <__pow5mult+0x40>
 800998c:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <__pow5mult+0xac>)
 800998e:	481e      	ldr	r0, [pc, #120]	; (8009a08 <__pow5mult+0xb0>)
 8009990:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009994:	f000 fca8 	bl	800a2e8 <__assert_func>
 8009998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800999c:	6004      	str	r4, [r0, #0]
 800999e:	60c4      	str	r4, [r0, #12]
 80099a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80099a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099a8:	b94c      	cbnz	r4, 80099be <__pow5mult+0x66>
 80099aa:	f240 2171 	movw	r1, #625	; 0x271
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ff12 	bl	80097d8 <__i2b>
 80099b4:	2300      	movs	r3, #0
 80099b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ba:	4604      	mov	r4, r0
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	f04f 0900 	mov.w	r9, #0
 80099c2:	07eb      	lsls	r3, r5, #31
 80099c4:	d50a      	bpl.n	80099dc <__pow5mult+0x84>
 80099c6:	4639      	mov	r1, r7
 80099c8:	4622      	mov	r2, r4
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff1a 	bl	8009804 <__multiply>
 80099d0:	4639      	mov	r1, r7
 80099d2:	4680      	mov	r8, r0
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff fdff 	bl	80095d8 <_Bfree>
 80099da:	4647      	mov	r7, r8
 80099dc:	106d      	asrs	r5, r5, #1
 80099de:	d00b      	beq.n	80099f8 <__pow5mult+0xa0>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	b938      	cbnz	r0, 80099f4 <__pow5mult+0x9c>
 80099e4:	4622      	mov	r2, r4
 80099e6:	4621      	mov	r1, r4
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff ff0b 	bl	8009804 <__multiply>
 80099ee:	6020      	str	r0, [r4, #0]
 80099f0:	f8c0 9000 	str.w	r9, [r0]
 80099f4:	4604      	mov	r4, r0
 80099f6:	e7e4      	b.n	80099c2 <__pow5mult+0x6a>
 80099f8:	4638      	mov	r0, r7
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	bf00      	nop
 8009a00:	0800b040 	.word	0x0800b040
 8009a04:	0800ae12 	.word	0x0800ae12
 8009a08:	0800aef2 	.word	0x0800aef2

08009a0c <__lshift>:
 8009a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	6849      	ldr	r1, [r1, #4]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	4691      	mov	r9, r2
 8009a20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a24:	f108 0601 	add.w	r6, r8, #1
 8009a28:	42b3      	cmp	r3, r6
 8009a2a:	db0b      	blt.n	8009a44 <__lshift+0x38>
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7ff fd93 	bl	8009558 <_Balloc>
 8009a32:	4605      	mov	r5, r0
 8009a34:	b948      	cbnz	r0, 8009a4a <__lshift+0x3e>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b28      	ldr	r3, [pc, #160]	; (8009adc <__lshift+0xd0>)
 8009a3a:	4829      	ldr	r0, [pc, #164]	; (8009ae0 <__lshift+0xd4>)
 8009a3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009a40:	f000 fc52 	bl	800a2e8 <__assert_func>
 8009a44:	3101      	adds	r1, #1
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	e7ee      	b.n	8009a28 <__lshift+0x1c>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f100 0114 	add.w	r1, r0, #20
 8009a50:	f100 0210 	add.w	r2, r0, #16
 8009a54:	4618      	mov	r0, r3
 8009a56:	4553      	cmp	r3, sl
 8009a58:	db33      	blt.n	8009ac2 <__lshift+0xb6>
 8009a5a:	6920      	ldr	r0, [r4, #16]
 8009a5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a60:	f104 0314 	add.w	r3, r4, #20
 8009a64:	f019 091f 	ands.w	r9, r9, #31
 8009a68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a70:	d02b      	beq.n	8009aca <__lshift+0xbe>
 8009a72:	f1c9 0e20 	rsb	lr, r9, #32
 8009a76:	468a      	mov	sl, r1
 8009a78:	2200      	movs	r2, #0
 8009a7a:	6818      	ldr	r0, [r3, #0]
 8009a7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a80:	4310      	orrs	r0, r2
 8009a82:	f84a 0b04 	str.w	r0, [sl], #4
 8009a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8a:	459c      	cmp	ip, r3
 8009a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a90:	d8f3      	bhi.n	8009a7a <__lshift+0x6e>
 8009a92:	ebac 0304 	sub.w	r3, ip, r4
 8009a96:	3b15      	subs	r3, #21
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	f104 0015 	add.w	r0, r4, #21
 8009aa2:	4584      	cmp	ip, r0
 8009aa4:	bf38      	it	cc
 8009aa6:	2304      	movcc	r3, #4
 8009aa8:	50ca      	str	r2, [r1, r3]
 8009aaa:	b10a      	cbz	r2, 8009ab0 <__lshift+0xa4>
 8009aac:	f108 0602 	add.w	r6, r8, #2
 8009ab0:	3e01      	subs	r6, #1
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	612e      	str	r6, [r5, #16]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	f7ff fd8e 	bl	80095d8 <_Bfree>
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	e7c5      	b.n	8009a56 <__lshift+0x4a>
 8009aca:	3904      	subs	r1, #4
 8009acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ad4:	459c      	cmp	ip, r3
 8009ad6:	d8f9      	bhi.n	8009acc <__lshift+0xc0>
 8009ad8:	e7ea      	b.n	8009ab0 <__lshift+0xa4>
 8009ada:	bf00      	nop
 8009adc:	0800ae81 	.word	0x0800ae81
 8009ae0:	0800aef2 	.word	0x0800aef2

08009ae4 <__mcmp>:
 8009ae4:	b530      	push	{r4, r5, lr}
 8009ae6:	6902      	ldr	r2, [r0, #16]
 8009ae8:	690c      	ldr	r4, [r1, #16]
 8009aea:	1b12      	subs	r2, r2, r4
 8009aec:	d10e      	bne.n	8009b0c <__mcmp+0x28>
 8009aee:	f100 0314 	add.w	r3, r0, #20
 8009af2:	3114      	adds	r1, #20
 8009af4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009af8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009afc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b04:	42a5      	cmp	r5, r4
 8009b06:	d003      	beq.n	8009b10 <__mcmp+0x2c>
 8009b08:	d305      	bcc.n	8009b16 <__mcmp+0x32>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	bd30      	pop	{r4, r5, pc}
 8009b10:	4283      	cmp	r3, r0
 8009b12:	d3f3      	bcc.n	8009afc <__mcmp+0x18>
 8009b14:	e7fa      	b.n	8009b0c <__mcmp+0x28>
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	e7f7      	b.n	8009b0c <__mcmp+0x28>

08009b1c <__mdiff>:
 8009b1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460c      	mov	r4, r1
 8009b22:	4606      	mov	r6, r0
 8009b24:	4611      	mov	r1, r2
 8009b26:	4620      	mov	r0, r4
 8009b28:	4690      	mov	r8, r2
 8009b2a:	f7ff ffdb 	bl	8009ae4 <__mcmp>
 8009b2e:	1e05      	subs	r5, r0, #0
 8009b30:	d110      	bne.n	8009b54 <__mdiff+0x38>
 8009b32:	4629      	mov	r1, r5
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff fd0f 	bl	8009558 <_Balloc>
 8009b3a:	b930      	cbnz	r0, 8009b4a <__mdiff+0x2e>
 8009b3c:	4b3a      	ldr	r3, [pc, #232]	; (8009c28 <__mdiff+0x10c>)
 8009b3e:	4602      	mov	r2, r0
 8009b40:	f240 2137 	movw	r1, #567	; 0x237
 8009b44:	4839      	ldr	r0, [pc, #228]	; (8009c2c <__mdiff+0x110>)
 8009b46:	f000 fbcf 	bl	800a2e8 <__assert_func>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	bfa4      	itt	ge
 8009b56:	4643      	movge	r3, r8
 8009b58:	46a0      	movge	r8, r4
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b60:	bfa6      	itte	ge
 8009b62:	461c      	movge	r4, r3
 8009b64:	2500      	movge	r5, #0
 8009b66:	2501      	movlt	r5, #1
 8009b68:	f7ff fcf6 	bl	8009558 <_Balloc>
 8009b6c:	b920      	cbnz	r0, 8009b78 <__mdiff+0x5c>
 8009b6e:	4b2e      	ldr	r3, [pc, #184]	; (8009c28 <__mdiff+0x10c>)
 8009b70:	4602      	mov	r2, r0
 8009b72:	f240 2145 	movw	r1, #581	; 0x245
 8009b76:	e7e5      	b.n	8009b44 <__mdiff+0x28>
 8009b78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b7c:	6926      	ldr	r6, [r4, #16]
 8009b7e:	60c5      	str	r5, [r0, #12]
 8009b80:	f104 0914 	add.w	r9, r4, #20
 8009b84:	f108 0514 	add.w	r5, r8, #20
 8009b88:	f100 0e14 	add.w	lr, r0, #20
 8009b8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b94:	f108 0210 	add.w	r2, r8, #16
 8009b98:	46f2      	mov	sl, lr
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ba0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ba4:	fa11 f88b 	uxtah	r8, r1, fp
 8009ba8:	b299      	uxth	r1, r3
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	eba8 0801 	sub.w	r8, r8, r1
 8009bb0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bb4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bb8:	fa1f f888 	uxth.w	r8, r8
 8009bbc:	1419      	asrs	r1, r3, #16
 8009bbe:	454e      	cmp	r6, r9
 8009bc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bc4:	f84a 3b04 	str.w	r3, [sl], #4
 8009bc8:	d8e8      	bhi.n	8009b9c <__mdiff+0x80>
 8009bca:	1b33      	subs	r3, r6, r4
 8009bcc:	3b15      	subs	r3, #21
 8009bce:	f023 0303 	bic.w	r3, r3, #3
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	3415      	adds	r4, #21
 8009bd6:	42a6      	cmp	r6, r4
 8009bd8:	bf38      	it	cc
 8009bda:	2304      	movcc	r3, #4
 8009bdc:	441d      	add	r5, r3
 8009bde:	4473      	add	r3, lr
 8009be0:	469e      	mov	lr, r3
 8009be2:	462e      	mov	r6, r5
 8009be4:	4566      	cmp	r6, ip
 8009be6:	d30e      	bcc.n	8009c06 <__mdiff+0xea>
 8009be8:	f10c 0203 	add.w	r2, ip, #3
 8009bec:	1b52      	subs	r2, r2, r5
 8009bee:	f022 0203 	bic.w	r2, r2, #3
 8009bf2:	3d03      	subs	r5, #3
 8009bf4:	45ac      	cmp	ip, r5
 8009bf6:	bf38      	it	cc
 8009bf8:	2200      	movcc	r2, #0
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c00:	b17a      	cbz	r2, 8009c22 <__mdiff+0x106>
 8009c02:	6107      	str	r7, [r0, #16]
 8009c04:	e7a4      	b.n	8009b50 <__mdiff+0x34>
 8009c06:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c0a:	fa11 f288 	uxtah	r2, r1, r8
 8009c0e:	1414      	asrs	r4, r2, #16
 8009c10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c14:	b292      	uxth	r2, r2
 8009c16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c1a:	f84e 2b04 	str.w	r2, [lr], #4
 8009c1e:	1421      	asrs	r1, r4, #16
 8009c20:	e7e0      	b.n	8009be4 <__mdiff+0xc8>
 8009c22:	3f01      	subs	r7, #1
 8009c24:	e7ea      	b.n	8009bfc <__mdiff+0xe0>
 8009c26:	bf00      	nop
 8009c28:	0800ae81 	.word	0x0800ae81
 8009c2c:	0800aef2 	.word	0x0800aef2

08009c30 <__ulp>:
 8009c30:	b082      	sub	sp, #8
 8009c32:	ed8d 0b00 	vstr	d0, [sp]
 8009c36:	9a01      	ldr	r2, [sp, #4]
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <__ulp+0x48>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dc08      	bgt.n	8009c56 <__ulp+0x26>
 8009c44:	425b      	negs	r3, r3
 8009c46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009c4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c4e:	da04      	bge.n	8009c5a <__ulp+0x2a>
 8009c50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009c54:	4113      	asrs	r3, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	e008      	b.n	8009c6c <__ulp+0x3c>
 8009c5a:	f1a2 0314 	sub.w	r3, r2, #20
 8009c5e:	2b1e      	cmp	r3, #30
 8009c60:	bfda      	itte	le
 8009c62:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c66:	40da      	lsrle	r2, r3
 8009c68:	2201      	movgt	r2, #1
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	ec41 0b10 	vmov	d0, r0, r1
 8009c74:	b002      	add	sp, #8
 8009c76:	4770      	bx	lr
 8009c78:	7ff00000 	.word	0x7ff00000

08009c7c <__b2d>:
 8009c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	6906      	ldr	r6, [r0, #16]
 8009c82:	f100 0814 	add.w	r8, r0, #20
 8009c86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009c8a:	1f37      	subs	r7, r6, #4
 8009c8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c90:	4610      	mov	r0, r2
 8009c92:	f7ff fd53 	bl	800973c <__hi0bits>
 8009c96:	f1c0 0320 	rsb	r3, r0, #32
 8009c9a:	280a      	cmp	r0, #10
 8009c9c:	600b      	str	r3, [r1, #0]
 8009c9e:	491b      	ldr	r1, [pc, #108]	; (8009d0c <__b2d+0x90>)
 8009ca0:	dc15      	bgt.n	8009cce <__b2d+0x52>
 8009ca2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ca6:	fa22 f30c 	lsr.w	r3, r2, ip
 8009caa:	45b8      	cmp	r8, r7
 8009cac:	ea43 0501 	orr.w	r5, r3, r1
 8009cb0:	bf34      	ite	cc
 8009cb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009cb6:	2300      	movcs	r3, #0
 8009cb8:	3015      	adds	r0, #21
 8009cba:	fa02 f000 	lsl.w	r0, r2, r0
 8009cbe:	fa23 f30c 	lsr.w	r3, r3, ip
 8009cc2:	4303      	orrs	r3, r0
 8009cc4:	461c      	mov	r4, r3
 8009cc6:	ec45 4b10 	vmov	d0, r4, r5
 8009cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cce:	45b8      	cmp	r8, r7
 8009cd0:	bf3a      	itte	cc
 8009cd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009cd6:	f1a6 0708 	subcc.w	r7, r6, #8
 8009cda:	2300      	movcs	r3, #0
 8009cdc:	380b      	subs	r0, #11
 8009cde:	d012      	beq.n	8009d06 <__b2d+0x8a>
 8009ce0:	f1c0 0120 	rsb	r1, r0, #32
 8009ce4:	fa23 f401 	lsr.w	r4, r3, r1
 8009ce8:	4082      	lsls	r2, r0
 8009cea:	4322      	orrs	r2, r4
 8009cec:	4547      	cmp	r7, r8
 8009cee:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009cf2:	bf8c      	ite	hi
 8009cf4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009cf8:	2200      	movls	r2, #0
 8009cfa:	4083      	lsls	r3, r0
 8009cfc:	40ca      	lsrs	r2, r1
 8009cfe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d02:	4313      	orrs	r3, r2
 8009d04:	e7de      	b.n	8009cc4 <__b2d+0x48>
 8009d06:	ea42 0501 	orr.w	r5, r2, r1
 8009d0a:	e7db      	b.n	8009cc4 <__b2d+0x48>
 8009d0c:	3ff00000 	.word	0x3ff00000

08009d10 <__d2b>:
 8009d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	460f      	mov	r7, r1
 8009d16:	2101      	movs	r1, #1
 8009d18:	ec59 8b10 	vmov	r8, r9, d0
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	f7ff fc1b 	bl	8009558 <_Balloc>
 8009d22:	4604      	mov	r4, r0
 8009d24:	b930      	cbnz	r0, 8009d34 <__d2b+0x24>
 8009d26:	4602      	mov	r2, r0
 8009d28:	4b24      	ldr	r3, [pc, #144]	; (8009dbc <__d2b+0xac>)
 8009d2a:	4825      	ldr	r0, [pc, #148]	; (8009dc0 <__d2b+0xb0>)
 8009d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8009d30:	f000 fada 	bl	800a2e8 <__assert_func>
 8009d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d3c:	bb2d      	cbnz	r5, 8009d8a <__d2b+0x7a>
 8009d3e:	9301      	str	r3, [sp, #4]
 8009d40:	f1b8 0300 	subs.w	r3, r8, #0
 8009d44:	d026      	beq.n	8009d94 <__d2b+0x84>
 8009d46:	4668      	mov	r0, sp
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	f7ff fd17 	bl	800977c <__lo0bits>
 8009d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d52:	b1e8      	cbz	r0, 8009d90 <__d2b+0x80>
 8009d54:	f1c0 0320 	rsb	r3, r0, #32
 8009d58:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	40c2      	lsrs	r2, r0
 8009d60:	6163      	str	r3, [r4, #20]
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	9b01      	ldr	r3, [sp, #4]
 8009d66:	61a3      	str	r3, [r4, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2202      	movne	r2, #2
 8009d6e:	2201      	moveq	r2, #1
 8009d70:	6122      	str	r2, [r4, #16]
 8009d72:	b1bd      	cbz	r5, 8009da4 <__d2b+0x94>
 8009d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d78:	4405      	add	r5, r0
 8009d7a:	603d      	str	r5, [r7, #0]
 8009d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	4620      	mov	r0, r4
 8009d84:	b003      	add	sp, #12
 8009d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d8e:	e7d6      	b.n	8009d3e <__d2b+0x2e>
 8009d90:	6161      	str	r1, [r4, #20]
 8009d92:	e7e7      	b.n	8009d64 <__d2b+0x54>
 8009d94:	a801      	add	r0, sp, #4
 8009d96:	f7ff fcf1 	bl	800977c <__lo0bits>
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	6163      	str	r3, [r4, #20]
 8009d9e:	3020      	adds	r0, #32
 8009da0:	2201      	movs	r2, #1
 8009da2:	e7e5      	b.n	8009d70 <__d2b+0x60>
 8009da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dac:	6038      	str	r0, [r7, #0]
 8009dae:	6918      	ldr	r0, [r3, #16]
 8009db0:	f7ff fcc4 	bl	800973c <__hi0bits>
 8009db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009db8:	e7e2      	b.n	8009d80 <__d2b+0x70>
 8009dba:	bf00      	nop
 8009dbc:	0800ae81 	.word	0x0800ae81
 8009dc0:	0800aef2 	.word	0x0800aef2

08009dc4 <__ratio>:
 8009dc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc8:	4688      	mov	r8, r1
 8009dca:	4669      	mov	r1, sp
 8009dcc:	4681      	mov	r9, r0
 8009dce:	f7ff ff55 	bl	8009c7c <__b2d>
 8009dd2:	a901      	add	r1, sp, #4
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	ec55 4b10 	vmov	r4, r5, d0
 8009dda:	f7ff ff4f 	bl	8009c7c <__b2d>
 8009dde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009de2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009de6:	eba3 0c02 	sub.w	ip, r3, r2
 8009dea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dee:	1a9b      	subs	r3, r3, r2
 8009df0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009df4:	ec51 0b10 	vmov	r0, r1, d0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfd6      	itet	le
 8009dfc:	460a      	movle	r2, r1
 8009dfe:	462a      	movgt	r2, r5
 8009e00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e04:	468b      	mov	fp, r1
 8009e06:	462f      	mov	r7, r5
 8009e08:	bfd4      	ite	le
 8009e0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e12:	4620      	mov	r0, r4
 8009e14:	ee10 2a10 	vmov	r2, s0
 8009e18:	465b      	mov	r3, fp
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 fd26 	bl	800086c <__aeabi_ddiv>
 8009e20:	ec41 0b10 	vmov	d0, r0, r1
 8009e24:	b003      	add	sp, #12
 8009e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e2a <__copybits>:
 8009e2a:	3901      	subs	r1, #1
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	1149      	asrs	r1, r1, #5
 8009e30:	6914      	ldr	r4, [r2, #16]
 8009e32:	3101      	adds	r1, #1
 8009e34:	f102 0314 	add.w	r3, r2, #20
 8009e38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e40:	1f05      	subs	r5, r0, #4
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	d30c      	bcc.n	8009e60 <__copybits+0x36>
 8009e46:	1aa3      	subs	r3, r4, r2
 8009e48:	3b11      	subs	r3, #17
 8009e4a:	f023 0303 	bic.w	r3, r3, #3
 8009e4e:	3211      	adds	r2, #17
 8009e50:	42a2      	cmp	r2, r4
 8009e52:	bf88      	it	hi
 8009e54:	2300      	movhi	r3, #0
 8009e56:	4418      	add	r0, r3
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4288      	cmp	r0, r1
 8009e5c:	d305      	bcc.n	8009e6a <__copybits+0x40>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e64:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e68:	e7eb      	b.n	8009e42 <__copybits+0x18>
 8009e6a:	f840 3b04 	str.w	r3, [r0], #4
 8009e6e:	e7f4      	b.n	8009e5a <__copybits+0x30>

08009e70 <__any_on>:
 8009e70:	f100 0214 	add.w	r2, r0, #20
 8009e74:	6900      	ldr	r0, [r0, #16]
 8009e76:	114b      	asrs	r3, r1, #5
 8009e78:	4298      	cmp	r0, r3
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	db11      	blt.n	8009ea2 <__any_on+0x32>
 8009e7e:	dd0a      	ble.n	8009e96 <__any_on+0x26>
 8009e80:	f011 011f 	ands.w	r1, r1, #31
 8009e84:	d007      	beq.n	8009e96 <__any_on+0x26>
 8009e86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e8a:	fa24 f001 	lsr.w	r0, r4, r1
 8009e8e:	fa00 f101 	lsl.w	r1, r0, r1
 8009e92:	428c      	cmp	r4, r1
 8009e94:	d10b      	bne.n	8009eae <__any_on+0x3e>
 8009e96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d803      	bhi.n	8009ea6 <__any_on+0x36>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	bd10      	pop	{r4, pc}
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	e7f7      	b.n	8009e96 <__any_on+0x26>
 8009ea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	d0f5      	beq.n	8009e9a <__any_on+0x2a>
 8009eae:	2001      	movs	r0, #1
 8009eb0:	e7f6      	b.n	8009ea0 <__any_on+0x30>

08009eb2 <_malloc_usable_size_r>:
 8009eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb6:	1f18      	subs	r0, r3, #4
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfbc      	itt	lt
 8009ebc:	580b      	ldrlt	r3, [r1, r0]
 8009ebe:	18c0      	addlt	r0, r0, r3
 8009ec0:	4770      	bx	lr

08009ec2 <__ascii_wctomb>:
 8009ec2:	b149      	cbz	r1, 8009ed8 <__ascii_wctomb+0x16>
 8009ec4:	2aff      	cmp	r2, #255	; 0xff
 8009ec6:	bf85      	ittet	hi
 8009ec8:	238a      	movhi	r3, #138	; 0x8a
 8009eca:	6003      	strhi	r3, [r0, #0]
 8009ecc:	700a      	strbls	r2, [r1, #0]
 8009ece:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ed2:	bf98      	it	ls
 8009ed4:	2001      	movls	r0, #1
 8009ed6:	4770      	bx	lr
 8009ed8:	4608      	mov	r0, r1
 8009eda:	4770      	bx	lr

08009edc <__ssputs_r>:
 8009edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	688e      	ldr	r6, [r1, #8]
 8009ee2:	461f      	mov	r7, r3
 8009ee4:	42be      	cmp	r6, r7
 8009ee6:	680b      	ldr	r3, [r1, #0]
 8009ee8:	4682      	mov	sl, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	4690      	mov	r8, r2
 8009eee:	d82c      	bhi.n	8009f4a <__ssputs_r+0x6e>
 8009ef0:	898a      	ldrh	r2, [r1, #12]
 8009ef2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ef6:	d026      	beq.n	8009f46 <__ssputs_r+0x6a>
 8009ef8:	6965      	ldr	r5, [r4, #20]
 8009efa:	6909      	ldr	r1, [r1, #16]
 8009efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f00:	eba3 0901 	sub.w	r9, r3, r1
 8009f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f08:	1c7b      	adds	r3, r7, #1
 8009f0a:	444b      	add	r3, r9
 8009f0c:	106d      	asrs	r5, r5, #1
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	bf38      	it	cc
 8009f12:	461d      	movcc	r5, r3
 8009f14:	0553      	lsls	r3, r2, #21
 8009f16:	d527      	bpl.n	8009f68 <__ssputs_r+0x8c>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	f7fc fb7f 	bl	800661c <_malloc_r>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	b360      	cbz	r0, 8009f7c <__ssputs_r+0xa0>
 8009f22:	6921      	ldr	r1, [r4, #16]
 8009f24:	464a      	mov	r2, r9
 8009f26:	f7fe f8d1 	bl	80080cc <memcpy>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	6126      	str	r6, [r4, #16]
 8009f38:	6165      	str	r5, [r4, #20]
 8009f3a:	444e      	add	r6, r9
 8009f3c:	eba5 0509 	sub.w	r5, r5, r9
 8009f40:	6026      	str	r6, [r4, #0]
 8009f42:	60a5      	str	r5, [r4, #8]
 8009f44:	463e      	mov	r6, r7
 8009f46:	42be      	cmp	r6, r7
 8009f48:	d900      	bls.n	8009f4c <__ssputs_r+0x70>
 8009f4a:	463e      	mov	r6, r7
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	4632      	mov	r2, r6
 8009f50:	4641      	mov	r1, r8
 8009f52:	f7fd ffca 	bl	8007eea <memmove>
 8009f56:	68a3      	ldr	r3, [r4, #8]
 8009f58:	1b9b      	subs	r3, r3, r6
 8009f5a:	60a3      	str	r3, [r4, #8]
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	4433      	add	r3, r6
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	2000      	movs	r0, #0
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	462a      	mov	r2, r5
 8009f6a:	f7fc fbeb 	bl	8006744 <_realloc_r>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d1e0      	bne.n	8009f36 <__ssputs_r+0x5a>
 8009f74:	6921      	ldr	r1, [r4, #16]
 8009f76:	4650      	mov	r0, sl
 8009f78:	f7fe ff38 	bl	8008dec <_free_r>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	f8ca 3000 	str.w	r3, [sl]
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	e7e9      	b.n	8009f64 <__ssputs_r+0x88>

08009f90 <_svfiprintf_r>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	4698      	mov	r8, r3
 8009f96:	898b      	ldrh	r3, [r1, #12]
 8009f98:	061b      	lsls	r3, r3, #24
 8009f9a:	b09d      	sub	sp, #116	; 0x74
 8009f9c:	4607      	mov	r7, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	4614      	mov	r4, r2
 8009fa2:	d50e      	bpl.n	8009fc2 <_svfiprintf_r+0x32>
 8009fa4:	690b      	ldr	r3, [r1, #16]
 8009fa6:	b963      	cbnz	r3, 8009fc2 <_svfiprintf_r+0x32>
 8009fa8:	2140      	movs	r1, #64	; 0x40
 8009faa:	f7fc fb37 	bl	800661c <_malloc_r>
 8009fae:	6028      	str	r0, [r5, #0]
 8009fb0:	6128      	str	r0, [r5, #16]
 8009fb2:	b920      	cbnz	r0, 8009fbe <_svfiprintf_r+0x2e>
 8009fb4:	230c      	movs	r3, #12
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	e0d0      	b.n	800a160 <_svfiprintf_r+0x1d0>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	616b      	str	r3, [r5, #20]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc6:	2320      	movs	r3, #32
 8009fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fd0:	2330      	movs	r3, #48	; 0x30
 8009fd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a178 <_svfiprintf_r+0x1e8>
 8009fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fda:	f04f 0901 	mov.w	r9, #1
 8009fde:	4623      	mov	r3, r4
 8009fe0:	469a      	mov	sl, r3
 8009fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fe6:	b10a      	cbz	r2, 8009fec <_svfiprintf_r+0x5c>
 8009fe8:	2a25      	cmp	r2, #37	; 0x25
 8009fea:	d1f9      	bne.n	8009fe0 <_svfiprintf_r+0x50>
 8009fec:	ebba 0b04 	subs.w	fp, sl, r4
 8009ff0:	d00b      	beq.n	800a00a <_svfiprintf_r+0x7a>
 8009ff2:	465b      	mov	r3, fp
 8009ff4:	4622      	mov	r2, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f7ff ff6f 	bl	8009edc <__ssputs_r>
 8009ffe:	3001      	adds	r0, #1
 800a000:	f000 80a9 	beq.w	800a156 <_svfiprintf_r+0x1c6>
 800a004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a006:	445a      	add	r2, fp
 800a008:	9209      	str	r2, [sp, #36]	; 0x24
 800a00a:	f89a 3000 	ldrb.w	r3, [sl]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 80a1 	beq.w	800a156 <_svfiprintf_r+0x1c6>
 800a014:	2300      	movs	r3, #0
 800a016:	f04f 32ff 	mov.w	r2, #4294967295
 800a01a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a01e:	f10a 0a01 	add.w	sl, sl, #1
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a02a:	931a      	str	r3, [sp, #104]	; 0x68
 800a02c:	4654      	mov	r4, sl
 800a02e:	2205      	movs	r2, #5
 800a030:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a034:	4850      	ldr	r0, [pc, #320]	; (800a178 <_svfiprintf_r+0x1e8>)
 800a036:	f7f6 f8db 	bl	80001f0 <memchr>
 800a03a:	9a04      	ldr	r2, [sp, #16]
 800a03c:	b9d8      	cbnz	r0, 800a076 <_svfiprintf_r+0xe6>
 800a03e:	06d0      	lsls	r0, r2, #27
 800a040:	bf44      	itt	mi
 800a042:	2320      	movmi	r3, #32
 800a044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a048:	0711      	lsls	r1, r2, #28
 800a04a:	bf44      	itt	mi
 800a04c:	232b      	movmi	r3, #43	; 0x2b
 800a04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a052:	f89a 3000 	ldrb.w	r3, [sl]
 800a056:	2b2a      	cmp	r3, #42	; 0x2a
 800a058:	d015      	beq.n	800a086 <_svfiprintf_r+0xf6>
 800a05a:	9a07      	ldr	r2, [sp, #28]
 800a05c:	4654      	mov	r4, sl
 800a05e:	2000      	movs	r0, #0
 800a060:	f04f 0c0a 	mov.w	ip, #10
 800a064:	4621      	mov	r1, r4
 800a066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a06a:	3b30      	subs	r3, #48	; 0x30
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	d94d      	bls.n	800a10c <_svfiprintf_r+0x17c>
 800a070:	b1b0      	cbz	r0, 800a0a0 <_svfiprintf_r+0x110>
 800a072:	9207      	str	r2, [sp, #28]
 800a074:	e014      	b.n	800a0a0 <_svfiprintf_r+0x110>
 800a076:	eba0 0308 	sub.w	r3, r0, r8
 800a07a:	fa09 f303 	lsl.w	r3, r9, r3
 800a07e:	4313      	orrs	r3, r2
 800a080:	9304      	str	r3, [sp, #16]
 800a082:	46a2      	mov	sl, r4
 800a084:	e7d2      	b.n	800a02c <_svfiprintf_r+0x9c>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	1d19      	adds	r1, r3, #4
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	9103      	str	r1, [sp, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfbb      	ittet	lt
 800a092:	425b      	neglt	r3, r3
 800a094:	f042 0202 	orrlt.w	r2, r2, #2
 800a098:	9307      	strge	r3, [sp, #28]
 800a09a:	9307      	strlt	r3, [sp, #28]
 800a09c:	bfb8      	it	lt
 800a09e:	9204      	strlt	r2, [sp, #16]
 800a0a0:	7823      	ldrb	r3, [r4, #0]
 800a0a2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0a4:	d10c      	bne.n	800a0c0 <_svfiprintf_r+0x130>
 800a0a6:	7863      	ldrb	r3, [r4, #1]
 800a0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0aa:	d134      	bne.n	800a116 <_svfiprintf_r+0x186>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	1d1a      	adds	r2, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9203      	str	r2, [sp, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfb8      	it	lt
 800a0b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0bc:	3402      	adds	r4, #2
 800a0be:	9305      	str	r3, [sp, #20]
 800a0c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a188 <_svfiprintf_r+0x1f8>
 800a0c4:	7821      	ldrb	r1, [r4, #0]
 800a0c6:	2203      	movs	r2, #3
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	f7f6 f891 	bl	80001f0 <memchr>
 800a0ce:	b138      	cbz	r0, 800a0e0 <_svfiprintf_r+0x150>
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	eba0 000a 	sub.w	r0, r0, sl
 800a0d6:	2240      	movs	r2, #64	; 0x40
 800a0d8:	4082      	lsls	r2, r0
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	3401      	adds	r4, #1
 800a0de:	9304      	str	r3, [sp, #16]
 800a0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0e4:	4825      	ldr	r0, [pc, #148]	; (800a17c <_svfiprintf_r+0x1ec>)
 800a0e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	f7f6 f880 	bl	80001f0 <memchr>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d038      	beq.n	800a166 <_svfiprintf_r+0x1d6>
 800a0f4:	4b22      	ldr	r3, [pc, #136]	; (800a180 <_svfiprintf_r+0x1f0>)
 800a0f6:	bb1b      	cbnz	r3, 800a140 <_svfiprintf_r+0x1b0>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	3307      	adds	r3, #7
 800a0fc:	f023 0307 	bic.w	r3, r3, #7
 800a100:	3308      	adds	r3, #8
 800a102:	9303      	str	r3, [sp, #12]
 800a104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a106:	4433      	add	r3, r6
 800a108:	9309      	str	r3, [sp, #36]	; 0x24
 800a10a:	e768      	b.n	8009fde <_svfiprintf_r+0x4e>
 800a10c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a110:	460c      	mov	r4, r1
 800a112:	2001      	movs	r0, #1
 800a114:	e7a6      	b.n	800a064 <_svfiprintf_r+0xd4>
 800a116:	2300      	movs	r3, #0
 800a118:	3401      	adds	r4, #1
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	4619      	mov	r1, r3
 800a11e:	f04f 0c0a 	mov.w	ip, #10
 800a122:	4620      	mov	r0, r4
 800a124:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a128:	3a30      	subs	r2, #48	; 0x30
 800a12a:	2a09      	cmp	r2, #9
 800a12c:	d903      	bls.n	800a136 <_svfiprintf_r+0x1a6>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0c6      	beq.n	800a0c0 <_svfiprintf_r+0x130>
 800a132:	9105      	str	r1, [sp, #20]
 800a134:	e7c4      	b.n	800a0c0 <_svfiprintf_r+0x130>
 800a136:	fb0c 2101 	mla	r1, ip, r1, r2
 800a13a:	4604      	mov	r4, r0
 800a13c:	2301      	movs	r3, #1
 800a13e:	e7f0      	b.n	800a122 <_svfiprintf_r+0x192>
 800a140:	ab03      	add	r3, sp, #12
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	462a      	mov	r2, r5
 800a146:	4b0f      	ldr	r3, [pc, #60]	; (800a184 <_svfiprintf_r+0x1f4>)
 800a148:	a904      	add	r1, sp, #16
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7fd f9e4 	bl	8007518 <_printf_float>
 800a150:	1c42      	adds	r2, r0, #1
 800a152:	4606      	mov	r6, r0
 800a154:	d1d6      	bne.n	800a104 <_svfiprintf_r+0x174>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	065b      	lsls	r3, r3, #25
 800a15a:	f53f af2d 	bmi.w	8009fb8 <_svfiprintf_r+0x28>
 800a15e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a160:	b01d      	add	sp, #116	; 0x74
 800a162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a166:	ab03      	add	r3, sp, #12
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	462a      	mov	r2, r5
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <_svfiprintf_r+0x1f4>)
 800a16e:	a904      	add	r1, sp, #16
 800a170:	4638      	mov	r0, r7
 800a172:	f7fd fc75 	bl	8007a60 <_printf_i>
 800a176:	e7eb      	b.n	800a150 <_svfiprintf_r+0x1c0>
 800a178:	0800b04c 	.word	0x0800b04c
 800a17c:	0800b056 	.word	0x0800b056
 800a180:	08007519 	.word	0x08007519
 800a184:	08009edd 	.word	0x08009edd
 800a188:	0800b052 	.word	0x0800b052

0800a18c <__sflush_r>:
 800a18c:	898a      	ldrh	r2, [r1, #12]
 800a18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a192:	4605      	mov	r5, r0
 800a194:	0710      	lsls	r0, r2, #28
 800a196:	460c      	mov	r4, r1
 800a198:	d458      	bmi.n	800a24c <__sflush_r+0xc0>
 800a19a:	684b      	ldr	r3, [r1, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dc05      	bgt.n	800a1ac <__sflush_r+0x20>
 800a1a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dc02      	bgt.n	800a1ac <__sflush_r+0x20>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1ae:	2e00      	cmp	r6, #0
 800a1b0:	d0f9      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1b8:	682f      	ldr	r7, [r5, #0]
 800a1ba:	6a21      	ldr	r1, [r4, #32]
 800a1bc:	602b      	str	r3, [r5, #0]
 800a1be:	d032      	beq.n	800a226 <__sflush_r+0x9a>
 800a1c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1c2:	89a3      	ldrh	r3, [r4, #12]
 800a1c4:	075a      	lsls	r2, r3, #29
 800a1c6:	d505      	bpl.n	800a1d4 <__sflush_r+0x48>
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	1ac0      	subs	r0, r0, r3
 800a1cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ce:	b10b      	cbz	r3, 800a1d4 <__sflush_r+0x48>
 800a1d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1d2:	1ac0      	subs	r0, r0, r3
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1da:	6a21      	ldr	r1, [r4, #32]
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b0      	blx	r6
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	d106      	bne.n	800a1f4 <__sflush_r+0x68>
 800a1e6:	6829      	ldr	r1, [r5, #0]
 800a1e8:	291d      	cmp	r1, #29
 800a1ea:	d82b      	bhi.n	800a244 <__sflush_r+0xb8>
 800a1ec:	4a29      	ldr	r2, [pc, #164]	; (800a294 <__sflush_r+0x108>)
 800a1ee:	410a      	asrs	r2, r1
 800a1f0:	07d6      	lsls	r6, r2, #31
 800a1f2:	d427      	bmi.n	800a244 <__sflush_r+0xb8>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	6062      	str	r2, [r4, #4]
 800a1f8:	04d9      	lsls	r1, r3, #19
 800a1fa:	6922      	ldr	r2, [r4, #16]
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	d504      	bpl.n	800a20a <__sflush_r+0x7e>
 800a200:	1c42      	adds	r2, r0, #1
 800a202:	d101      	bne.n	800a208 <__sflush_r+0x7c>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b903      	cbnz	r3, 800a20a <__sflush_r+0x7e>
 800a208:	6560      	str	r0, [r4, #84]	; 0x54
 800a20a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a20c:	602f      	str	r7, [r5, #0]
 800a20e:	2900      	cmp	r1, #0
 800a210:	d0c9      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a216:	4299      	cmp	r1, r3
 800a218:	d002      	beq.n	800a220 <__sflush_r+0x94>
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7fe fde6 	bl	8008dec <_free_r>
 800a220:	2000      	movs	r0, #0
 800a222:	6360      	str	r0, [r4, #52]	; 0x34
 800a224:	e7c0      	b.n	800a1a8 <__sflush_r+0x1c>
 800a226:	2301      	movs	r3, #1
 800a228:	4628      	mov	r0, r5
 800a22a:	47b0      	blx	r6
 800a22c:	1c41      	adds	r1, r0, #1
 800a22e:	d1c8      	bne.n	800a1c2 <__sflush_r+0x36>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0c5      	beq.n	800a1c2 <__sflush_r+0x36>
 800a236:	2b1d      	cmp	r3, #29
 800a238:	d001      	beq.n	800a23e <__sflush_r+0xb2>
 800a23a:	2b16      	cmp	r3, #22
 800a23c:	d101      	bne.n	800a242 <__sflush_r+0xb6>
 800a23e:	602f      	str	r7, [r5, #0]
 800a240:	e7b1      	b.n	800a1a6 <__sflush_r+0x1a>
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	e7ad      	b.n	800a1a8 <__sflush_r+0x1c>
 800a24c:	690f      	ldr	r7, [r1, #16]
 800a24e:	2f00      	cmp	r7, #0
 800a250:	d0a9      	beq.n	800a1a6 <__sflush_r+0x1a>
 800a252:	0793      	lsls	r3, r2, #30
 800a254:	680e      	ldr	r6, [r1, #0]
 800a256:	bf08      	it	eq
 800a258:	694b      	ldreq	r3, [r1, #20]
 800a25a:	600f      	str	r7, [r1, #0]
 800a25c:	bf18      	it	ne
 800a25e:	2300      	movne	r3, #0
 800a260:	eba6 0807 	sub.w	r8, r6, r7
 800a264:	608b      	str	r3, [r1, #8]
 800a266:	f1b8 0f00 	cmp.w	r8, #0
 800a26a:	dd9c      	ble.n	800a1a6 <__sflush_r+0x1a>
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a270:	4643      	mov	r3, r8
 800a272:	463a      	mov	r2, r7
 800a274:	4628      	mov	r0, r5
 800a276:	47b0      	blx	r6
 800a278:	2800      	cmp	r0, #0
 800a27a:	dc06      	bgt.n	800a28a <__sflush_r+0xfe>
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e78e      	b.n	800a1a8 <__sflush_r+0x1c>
 800a28a:	4407      	add	r7, r0
 800a28c:	eba8 0800 	sub.w	r8, r8, r0
 800a290:	e7e9      	b.n	800a266 <__sflush_r+0xda>
 800a292:	bf00      	nop
 800a294:	dfbffffe 	.word	0xdfbffffe

0800a298 <_fflush_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	690b      	ldr	r3, [r1, #16]
 800a29c:	4605      	mov	r5, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	b913      	cbnz	r3, 800a2a8 <_fflush_r+0x10>
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	b118      	cbz	r0, 800a2b2 <_fflush_r+0x1a>
 800a2aa:	6a03      	ldr	r3, [r0, #32]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <_fflush_r+0x1a>
 800a2ae:	f7fd fd73 	bl	8007d98 <__sinit>
 800a2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f3      	beq.n	800a2a2 <_fflush_r+0xa>
 800a2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2bc:	07d0      	lsls	r0, r2, #31
 800a2be:	d404      	bmi.n	800a2ca <_fflush_r+0x32>
 800a2c0:	0599      	lsls	r1, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_fflush_r+0x32>
 800a2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c6:	f7fd feff 	bl	80080c8 <__retarget_lock_acquire_recursive>
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	f7ff ff5d 	bl	800a18c <__sflush_r>
 800a2d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d4:	07da      	lsls	r2, r3, #31
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	d4e4      	bmi.n	800a2a4 <_fflush_r+0xc>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	059b      	lsls	r3, r3, #22
 800a2de:	d4e1      	bmi.n	800a2a4 <_fflush_r+0xc>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2e2:	f7fd fef2 	bl	80080ca <__retarget_lock_release_recursive>
 800a2e6:	e7dd      	b.n	800a2a4 <_fflush_r+0xc>

0800a2e8 <__assert_func>:
 800a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ea:	4614      	mov	r4, r2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <__assert_func+0x2c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	68d8      	ldr	r0, [r3, #12]
 800a2f6:	b14c      	cbz	r4, 800a30c <__assert_func+0x24>
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <__assert_func+0x30>)
 800a2fa:	9100      	str	r1, [sp, #0]
 800a2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a300:	4906      	ldr	r1, [pc, #24]	; (800a31c <__assert_func+0x34>)
 800a302:	462b      	mov	r3, r5
 800a304:	f000 f824 	bl	800a350 <fiprintf>
 800a308:	f000 f834 	bl	800a374 <abort>
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <__assert_func+0x38>)
 800a30e:	461c      	mov	r4, r3
 800a310:	e7f3      	b.n	800a2fa <__assert_func+0x12>
 800a312:	bf00      	nop
 800a314:	200001f4 	.word	0x200001f4
 800a318:	0800b05d 	.word	0x0800b05d
 800a31c:	0800b06a 	.word	0x0800b06a
 800a320:	0800b098 	.word	0x0800b098

0800a324 <_calloc_r>:
 800a324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a326:	fba1 2402 	umull	r2, r4, r1, r2
 800a32a:	b94c      	cbnz	r4, 800a340 <_calloc_r+0x1c>
 800a32c:	4611      	mov	r1, r2
 800a32e:	9201      	str	r2, [sp, #4]
 800a330:	f7fc f974 	bl	800661c <_malloc_r>
 800a334:	9a01      	ldr	r2, [sp, #4]
 800a336:	4605      	mov	r5, r0
 800a338:	b930      	cbnz	r0, 800a348 <_calloc_r+0x24>
 800a33a:	4628      	mov	r0, r5
 800a33c:	b003      	add	sp, #12
 800a33e:	bd30      	pop	{r4, r5, pc}
 800a340:	220c      	movs	r2, #12
 800a342:	6002      	str	r2, [r0, #0]
 800a344:	2500      	movs	r5, #0
 800a346:	e7f8      	b.n	800a33a <_calloc_r+0x16>
 800a348:	4621      	mov	r1, r4
 800a34a:	f7fd fde8 	bl	8007f1e <memset>
 800a34e:	e7f4      	b.n	800a33a <_calloc_r+0x16>

0800a350 <fiprintf>:
 800a350:	b40e      	push	{r1, r2, r3}
 800a352:	b503      	push	{r0, r1, lr}
 800a354:	4601      	mov	r1, r0
 800a356:	ab03      	add	r3, sp, #12
 800a358:	4805      	ldr	r0, [pc, #20]	; (800a370 <fiprintf+0x20>)
 800a35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35e:	6800      	ldr	r0, [r0, #0]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	f000 f837 	bl	800a3d4 <_vfiprintf_r>
 800a366:	b002      	add	sp, #8
 800a368:	f85d eb04 	ldr.w	lr, [sp], #4
 800a36c:	b003      	add	sp, #12
 800a36e:	4770      	bx	lr
 800a370:	200001f4 	.word	0x200001f4

0800a374 <abort>:
 800a374:	b508      	push	{r3, lr}
 800a376:	2006      	movs	r0, #6
 800a378:	f000 fa04 	bl	800a784 <raise>
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7f9 fa8f 	bl	80038a0 <_exit>

0800a382 <__sfputc_r>:
 800a382:	6893      	ldr	r3, [r2, #8]
 800a384:	3b01      	subs	r3, #1
 800a386:	2b00      	cmp	r3, #0
 800a388:	b410      	push	{r4}
 800a38a:	6093      	str	r3, [r2, #8]
 800a38c:	da08      	bge.n	800a3a0 <__sfputc_r+0x1e>
 800a38e:	6994      	ldr	r4, [r2, #24]
 800a390:	42a3      	cmp	r3, r4
 800a392:	db01      	blt.n	800a398 <__sfputc_r+0x16>
 800a394:	290a      	cmp	r1, #10
 800a396:	d103      	bne.n	800a3a0 <__sfputc_r+0x1e>
 800a398:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39c:	f000 b934 	b.w	800a608 <__swbuf_r>
 800a3a0:	6813      	ldr	r3, [r2, #0]
 800a3a2:	1c58      	adds	r0, r3, #1
 800a3a4:	6010      	str	r0, [r2, #0]
 800a3a6:	7019      	strb	r1, [r3, #0]
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <__sfputs_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	460f      	mov	r7, r1
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	18d5      	adds	r5, r2, r3
 800a3ba:	42ac      	cmp	r4, r5
 800a3bc:	d101      	bne.n	800a3c2 <__sfputs_r+0x12>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e007      	b.n	800a3d2 <__sfputs_r+0x22>
 800a3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c6:	463a      	mov	r2, r7
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff ffda 	bl	800a382 <__sfputc_r>
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	d1f3      	bne.n	800a3ba <__sfputs_r+0xa>
 800a3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3d4 <_vfiprintf_r>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	460d      	mov	r5, r1
 800a3da:	b09d      	sub	sp, #116	; 0x74
 800a3dc:	4614      	mov	r4, r2
 800a3de:	4698      	mov	r8, r3
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <_vfiprintf_r+0x18>
 800a3e4:	6a03      	ldr	r3, [r0, #32]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <_vfiprintf_r+0x18>
 800a3e8:	f7fd fcd6 	bl	8007d98 <__sinit>
 800a3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ee:	07d9      	lsls	r1, r3, #31
 800a3f0:	d405      	bmi.n	800a3fe <_vfiprintf_r+0x2a>
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	059a      	lsls	r2, r3, #22
 800a3f6:	d402      	bmi.n	800a3fe <_vfiprintf_r+0x2a>
 800a3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3fa:	f7fd fe65 	bl	80080c8 <__retarget_lock_acquire_recursive>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	071b      	lsls	r3, r3, #28
 800a402:	d501      	bpl.n	800a408 <_vfiprintf_r+0x34>
 800a404:	692b      	ldr	r3, [r5, #16]
 800a406:	b99b      	cbnz	r3, 800a430 <_vfiprintf_r+0x5c>
 800a408:	4629      	mov	r1, r5
 800a40a:	4630      	mov	r0, r6
 800a40c:	f000 f93a 	bl	800a684 <__swsetup_r>
 800a410:	b170      	cbz	r0, 800a430 <_vfiprintf_r+0x5c>
 800a412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a414:	07dc      	lsls	r4, r3, #31
 800a416:	d504      	bpl.n	800a422 <_vfiprintf_r+0x4e>
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	b01d      	add	sp, #116	; 0x74
 800a41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	0598      	lsls	r0, r3, #22
 800a426:	d4f7      	bmi.n	800a418 <_vfiprintf_r+0x44>
 800a428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42a:	f7fd fe4e 	bl	80080ca <__retarget_lock_release_recursive>
 800a42e:	e7f3      	b.n	800a418 <_vfiprintf_r+0x44>
 800a430:	2300      	movs	r3, #0
 800a432:	9309      	str	r3, [sp, #36]	; 0x24
 800a434:	2320      	movs	r3, #32
 800a436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43e:	2330      	movs	r3, #48	; 0x30
 800a440:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a5f4 <_vfiprintf_r+0x220>
 800a444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a448:	f04f 0901 	mov.w	r9, #1
 800a44c:	4623      	mov	r3, r4
 800a44e:	469a      	mov	sl, r3
 800a450:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a454:	b10a      	cbz	r2, 800a45a <_vfiprintf_r+0x86>
 800a456:	2a25      	cmp	r2, #37	; 0x25
 800a458:	d1f9      	bne.n	800a44e <_vfiprintf_r+0x7a>
 800a45a:	ebba 0b04 	subs.w	fp, sl, r4
 800a45e:	d00b      	beq.n	800a478 <_vfiprintf_r+0xa4>
 800a460:	465b      	mov	r3, fp
 800a462:	4622      	mov	r2, r4
 800a464:	4629      	mov	r1, r5
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff ffa2 	bl	800a3b0 <__sfputs_r>
 800a46c:	3001      	adds	r0, #1
 800a46e:	f000 80a9 	beq.w	800a5c4 <_vfiprintf_r+0x1f0>
 800a472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a474:	445a      	add	r2, fp
 800a476:	9209      	str	r2, [sp, #36]	; 0x24
 800a478:	f89a 3000 	ldrb.w	r3, [sl]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80a1 	beq.w	800a5c4 <_vfiprintf_r+0x1f0>
 800a482:	2300      	movs	r3, #0
 800a484:	f04f 32ff 	mov.w	r2, #4294967295
 800a488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a48c:	f10a 0a01 	add.w	sl, sl, #1
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a498:	931a      	str	r3, [sp, #104]	; 0x68
 800a49a:	4654      	mov	r4, sl
 800a49c:	2205      	movs	r2, #5
 800a49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a2:	4854      	ldr	r0, [pc, #336]	; (800a5f4 <_vfiprintf_r+0x220>)
 800a4a4:	f7f5 fea4 	bl	80001f0 <memchr>
 800a4a8:	9a04      	ldr	r2, [sp, #16]
 800a4aa:	b9d8      	cbnz	r0, 800a4e4 <_vfiprintf_r+0x110>
 800a4ac:	06d1      	lsls	r1, r2, #27
 800a4ae:	bf44      	itt	mi
 800a4b0:	2320      	movmi	r3, #32
 800a4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4b6:	0713      	lsls	r3, r2, #28
 800a4b8:	bf44      	itt	mi
 800a4ba:	232b      	movmi	r3, #43	; 0x2b
 800a4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c6:	d015      	beq.n	800a4f4 <_vfiprintf_r+0x120>
 800a4c8:	9a07      	ldr	r2, [sp, #28]
 800a4ca:	4654      	mov	r4, sl
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f04f 0c0a 	mov.w	ip, #10
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d8:	3b30      	subs	r3, #48	; 0x30
 800a4da:	2b09      	cmp	r3, #9
 800a4dc:	d94d      	bls.n	800a57a <_vfiprintf_r+0x1a6>
 800a4de:	b1b0      	cbz	r0, 800a50e <_vfiprintf_r+0x13a>
 800a4e0:	9207      	str	r2, [sp, #28]
 800a4e2:	e014      	b.n	800a50e <_vfiprintf_r+0x13a>
 800a4e4:	eba0 0308 	sub.w	r3, r0, r8
 800a4e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	46a2      	mov	sl, r4
 800a4f2:	e7d2      	b.n	800a49a <_vfiprintf_r+0xc6>
 800a4f4:	9b03      	ldr	r3, [sp, #12]
 800a4f6:	1d19      	adds	r1, r3, #4
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	9103      	str	r1, [sp, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfbb      	ittet	lt
 800a500:	425b      	neglt	r3, r3
 800a502:	f042 0202 	orrlt.w	r2, r2, #2
 800a506:	9307      	strge	r3, [sp, #28]
 800a508:	9307      	strlt	r3, [sp, #28]
 800a50a:	bfb8      	it	lt
 800a50c:	9204      	strlt	r2, [sp, #16]
 800a50e:	7823      	ldrb	r3, [r4, #0]
 800a510:	2b2e      	cmp	r3, #46	; 0x2e
 800a512:	d10c      	bne.n	800a52e <_vfiprintf_r+0x15a>
 800a514:	7863      	ldrb	r3, [r4, #1]
 800a516:	2b2a      	cmp	r3, #42	; 0x2a
 800a518:	d134      	bne.n	800a584 <_vfiprintf_r+0x1b0>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	1d1a      	adds	r2, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9203      	str	r2, [sp, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfb8      	it	lt
 800a526:	f04f 33ff 	movlt.w	r3, #4294967295
 800a52a:	3402      	adds	r4, #2
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a604 <_vfiprintf_r+0x230>
 800a532:	7821      	ldrb	r1, [r4, #0]
 800a534:	2203      	movs	r2, #3
 800a536:	4650      	mov	r0, sl
 800a538:	f7f5 fe5a 	bl	80001f0 <memchr>
 800a53c:	b138      	cbz	r0, 800a54e <_vfiprintf_r+0x17a>
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	eba0 000a 	sub.w	r0, r0, sl
 800a544:	2240      	movs	r2, #64	; 0x40
 800a546:	4082      	lsls	r2, r0
 800a548:	4313      	orrs	r3, r2
 800a54a:	3401      	adds	r4, #1
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	4829      	ldr	r0, [pc, #164]	; (800a5f8 <_vfiprintf_r+0x224>)
 800a554:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a558:	2206      	movs	r2, #6
 800a55a:	f7f5 fe49 	bl	80001f0 <memchr>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d03f      	beq.n	800a5e2 <_vfiprintf_r+0x20e>
 800a562:	4b26      	ldr	r3, [pc, #152]	; (800a5fc <_vfiprintf_r+0x228>)
 800a564:	bb1b      	cbnz	r3, 800a5ae <_vfiprintf_r+0x1da>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3307      	adds	r3, #7
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	3308      	adds	r3, #8
 800a570:	9303      	str	r3, [sp, #12]
 800a572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a574:	443b      	add	r3, r7
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	e768      	b.n	800a44c <_vfiprintf_r+0x78>
 800a57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a57e:	460c      	mov	r4, r1
 800a580:	2001      	movs	r0, #1
 800a582:	e7a6      	b.n	800a4d2 <_vfiprintf_r+0xfe>
 800a584:	2300      	movs	r3, #0
 800a586:	3401      	adds	r4, #1
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	4619      	mov	r1, r3
 800a58c:	f04f 0c0a 	mov.w	ip, #10
 800a590:	4620      	mov	r0, r4
 800a592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a596:	3a30      	subs	r2, #48	; 0x30
 800a598:	2a09      	cmp	r2, #9
 800a59a:	d903      	bls.n	800a5a4 <_vfiprintf_r+0x1d0>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0c6      	beq.n	800a52e <_vfiprintf_r+0x15a>
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	e7c4      	b.n	800a52e <_vfiprintf_r+0x15a>
 800a5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e7f0      	b.n	800a590 <_vfiprintf_r+0x1bc>
 800a5ae:	ab03      	add	r3, sp, #12
 800a5b0:	9300      	str	r3, [sp, #0]
 800a5b2:	462a      	mov	r2, r5
 800a5b4:	4b12      	ldr	r3, [pc, #72]	; (800a600 <_vfiprintf_r+0x22c>)
 800a5b6:	a904      	add	r1, sp, #16
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7fc ffad 	bl	8007518 <_printf_float>
 800a5be:	4607      	mov	r7, r0
 800a5c0:	1c78      	adds	r0, r7, #1
 800a5c2:	d1d6      	bne.n	800a572 <_vfiprintf_r+0x19e>
 800a5c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5c6:	07d9      	lsls	r1, r3, #31
 800a5c8:	d405      	bmi.n	800a5d6 <_vfiprintf_r+0x202>
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	059a      	lsls	r2, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <_vfiprintf_r+0x202>
 800a5d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d2:	f7fd fd7a 	bl	80080ca <__retarget_lock_release_recursive>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	065b      	lsls	r3, r3, #25
 800a5da:	f53f af1d 	bmi.w	800a418 <_vfiprintf_r+0x44>
 800a5de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e0:	e71c      	b.n	800a41c <_vfiprintf_r+0x48>
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	462a      	mov	r2, r5
 800a5e8:	4b05      	ldr	r3, [pc, #20]	; (800a600 <_vfiprintf_r+0x22c>)
 800a5ea:	a904      	add	r1, sp, #16
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7fd fa37 	bl	8007a60 <_printf_i>
 800a5f2:	e7e4      	b.n	800a5be <_vfiprintf_r+0x1ea>
 800a5f4:	0800b04c 	.word	0x0800b04c
 800a5f8:	0800b056 	.word	0x0800b056
 800a5fc:	08007519 	.word	0x08007519
 800a600:	0800a3b1 	.word	0x0800a3b1
 800a604:	0800b052 	.word	0x0800b052

0800a608 <__swbuf_r>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	460e      	mov	r6, r1
 800a60c:	4614      	mov	r4, r2
 800a60e:	4605      	mov	r5, r0
 800a610:	b118      	cbz	r0, 800a61a <__swbuf_r+0x12>
 800a612:	6a03      	ldr	r3, [r0, #32]
 800a614:	b90b      	cbnz	r3, 800a61a <__swbuf_r+0x12>
 800a616:	f7fd fbbf 	bl	8007d98 <__sinit>
 800a61a:	69a3      	ldr	r3, [r4, #24]
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	89a3      	ldrh	r3, [r4, #12]
 800a620:	071a      	lsls	r2, r3, #28
 800a622:	d525      	bpl.n	800a670 <__swbuf_r+0x68>
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	b31b      	cbz	r3, 800a670 <__swbuf_r+0x68>
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	6922      	ldr	r2, [r4, #16]
 800a62c:	1a98      	subs	r0, r3, r2
 800a62e:	6963      	ldr	r3, [r4, #20]
 800a630:	b2f6      	uxtb	r6, r6
 800a632:	4283      	cmp	r3, r0
 800a634:	4637      	mov	r7, r6
 800a636:	dc04      	bgt.n	800a642 <__swbuf_r+0x3a>
 800a638:	4621      	mov	r1, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7ff fe2c 	bl	800a298 <_fflush_r>
 800a640:	b9e0      	cbnz	r0, 800a67c <__swbuf_r+0x74>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	3b01      	subs	r3, #1
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	1c5a      	adds	r2, r3, #1
 800a64c:	6022      	str	r2, [r4, #0]
 800a64e:	701e      	strb	r6, [r3, #0]
 800a650:	6962      	ldr	r2, [r4, #20]
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	d004      	beq.n	800a662 <__swbuf_r+0x5a>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d506      	bpl.n	800a66c <__swbuf_r+0x64>
 800a65e:	2e0a      	cmp	r6, #10
 800a660:	d104      	bne.n	800a66c <__swbuf_r+0x64>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f7ff fe17 	bl	800a298 <_fflush_r>
 800a66a:	b938      	cbnz	r0, 800a67c <__swbuf_r+0x74>
 800a66c:	4638      	mov	r0, r7
 800a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f806 	bl	800a684 <__swsetup_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0d5      	beq.n	800a628 <__swbuf_r+0x20>
 800a67c:	f04f 37ff 	mov.w	r7, #4294967295
 800a680:	e7f4      	b.n	800a66c <__swbuf_r+0x64>
	...

0800a684 <__swsetup_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4b2a      	ldr	r3, [pc, #168]	; (800a730 <__swsetup_r+0xac>)
 800a688:	4605      	mov	r5, r0
 800a68a:	6818      	ldr	r0, [r3, #0]
 800a68c:	460c      	mov	r4, r1
 800a68e:	b118      	cbz	r0, 800a698 <__swsetup_r+0x14>
 800a690:	6a03      	ldr	r3, [r0, #32]
 800a692:	b90b      	cbnz	r3, 800a698 <__swsetup_r+0x14>
 800a694:	f7fd fb80 	bl	8007d98 <__sinit>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69e:	0718      	lsls	r0, r3, #28
 800a6a0:	d422      	bmi.n	800a6e8 <__swsetup_r+0x64>
 800a6a2:	06d9      	lsls	r1, r3, #27
 800a6a4:	d407      	bmi.n	800a6b6 <__swsetup_r+0x32>
 800a6a6:	2309      	movs	r3, #9
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ae:	81a3      	strh	r3, [r4, #12]
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	e034      	b.n	800a720 <__swsetup_r+0x9c>
 800a6b6:	0758      	lsls	r0, r3, #29
 800a6b8:	d512      	bpl.n	800a6e0 <__swsetup_r+0x5c>
 800a6ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6bc:	b141      	cbz	r1, 800a6d0 <__swsetup_r+0x4c>
 800a6be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6c2:	4299      	cmp	r1, r3
 800a6c4:	d002      	beq.n	800a6cc <__swsetup_r+0x48>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f7fe fb90 	bl	8008dec <_free_r>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6063      	str	r3, [r4, #4]
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f043 0308 	orr.w	r3, r3, #8
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b94b      	cbnz	r3, 800a700 <__swsetup_r+0x7c>
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f6:	d003      	beq.n	800a700 <__swsetup_r+0x7c>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f884 	bl	800a808 <__smakebuf_r>
 800a700:	89a0      	ldrh	r0, [r4, #12]
 800a702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a706:	f010 0301 	ands.w	r3, r0, #1
 800a70a:	d00a      	beq.n	800a722 <__swsetup_r+0x9e>
 800a70c:	2300      	movs	r3, #0
 800a70e:	60a3      	str	r3, [r4, #8]
 800a710:	6963      	ldr	r3, [r4, #20]
 800a712:	425b      	negs	r3, r3
 800a714:	61a3      	str	r3, [r4, #24]
 800a716:	6923      	ldr	r3, [r4, #16]
 800a718:	b943      	cbnz	r3, 800a72c <__swsetup_r+0xa8>
 800a71a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a71e:	d1c4      	bne.n	800a6aa <__swsetup_r+0x26>
 800a720:	bd38      	pop	{r3, r4, r5, pc}
 800a722:	0781      	lsls	r1, r0, #30
 800a724:	bf58      	it	pl
 800a726:	6963      	ldrpl	r3, [r4, #20]
 800a728:	60a3      	str	r3, [r4, #8]
 800a72a:	e7f4      	b.n	800a716 <__swsetup_r+0x92>
 800a72c:	2000      	movs	r0, #0
 800a72e:	e7f7      	b.n	800a720 <__swsetup_r+0x9c>
 800a730:	200001f4 	.word	0x200001f4

0800a734 <_raise_r>:
 800a734:	291f      	cmp	r1, #31
 800a736:	b538      	push	{r3, r4, r5, lr}
 800a738:	4604      	mov	r4, r0
 800a73a:	460d      	mov	r5, r1
 800a73c:	d904      	bls.n	800a748 <_raise_r+0x14>
 800a73e:	2316      	movs	r3, #22
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	bd38      	pop	{r3, r4, r5, pc}
 800a748:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a74a:	b112      	cbz	r2, 800a752 <_raise_r+0x1e>
 800a74c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a750:	b94b      	cbnz	r3, 800a766 <_raise_r+0x32>
 800a752:	4620      	mov	r0, r4
 800a754:	f000 f830 	bl	800a7b8 <_getpid_r>
 800a758:	462a      	mov	r2, r5
 800a75a:	4601      	mov	r1, r0
 800a75c:	4620      	mov	r0, r4
 800a75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a762:	f000 b817 	b.w	800a794 <_kill_r>
 800a766:	2b01      	cmp	r3, #1
 800a768:	d00a      	beq.n	800a780 <_raise_r+0x4c>
 800a76a:	1c59      	adds	r1, r3, #1
 800a76c:	d103      	bne.n	800a776 <_raise_r+0x42>
 800a76e:	2316      	movs	r3, #22
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	2001      	movs	r0, #1
 800a774:	e7e7      	b.n	800a746 <_raise_r+0x12>
 800a776:	2400      	movs	r4, #0
 800a778:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a77c:	4628      	mov	r0, r5
 800a77e:	4798      	blx	r3
 800a780:	2000      	movs	r0, #0
 800a782:	e7e0      	b.n	800a746 <_raise_r+0x12>

0800a784 <raise>:
 800a784:	4b02      	ldr	r3, [pc, #8]	; (800a790 <raise+0xc>)
 800a786:	4601      	mov	r1, r0
 800a788:	6818      	ldr	r0, [r3, #0]
 800a78a:	f7ff bfd3 	b.w	800a734 <_raise_r>
 800a78e:	bf00      	nop
 800a790:	200001f4 	.word	0x200001f4

0800a794 <_kill_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4d07      	ldr	r5, [pc, #28]	; (800a7b4 <_kill_r+0x20>)
 800a798:	2300      	movs	r3, #0
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f7f9 f86d 	bl	8003880 <_kill>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d102      	bne.n	800a7b0 <_kill_r+0x1c>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b103      	cbz	r3, 800a7b0 <_kill_r+0x1c>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200014f0 	.word	0x200014f0

0800a7b8 <_getpid_r>:
 800a7b8:	f7f9 b85a 	b.w	8003870 <_getpid>

0800a7bc <__swhatbuf_r>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	2900      	cmp	r1, #0
 800a7c6:	b096      	sub	sp, #88	; 0x58
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	461e      	mov	r6, r3
 800a7cc:	da0d      	bge.n	800a7ea <__swhatbuf_r+0x2e>
 800a7ce:	89a3      	ldrh	r3, [r4, #12]
 800a7d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a7d4:	f04f 0100 	mov.w	r1, #0
 800a7d8:	bf0c      	ite	eq
 800a7da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a7de:	2340      	movne	r3, #64	; 0x40
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	6031      	str	r1, [r6, #0]
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	b016      	add	sp, #88	; 0x58
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ea:	466a      	mov	r2, sp
 800a7ec:	f000 f848 	bl	800a880 <_fstat_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	dbec      	blt.n	800a7ce <__swhatbuf_r+0x12>
 800a7f4:	9901      	ldr	r1, [sp, #4]
 800a7f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7fe:	4259      	negs	r1, r3
 800a800:	4159      	adcs	r1, r3
 800a802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a806:	e7eb      	b.n	800a7e0 <__swhatbuf_r+0x24>

0800a808 <__smakebuf_r>:
 800a808:	898b      	ldrh	r3, [r1, #12]
 800a80a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a80c:	079d      	lsls	r5, r3, #30
 800a80e:	4606      	mov	r6, r0
 800a810:	460c      	mov	r4, r1
 800a812:	d507      	bpl.n	800a824 <__smakebuf_r+0x1c>
 800a814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	6123      	str	r3, [r4, #16]
 800a81c:	2301      	movs	r3, #1
 800a81e:	6163      	str	r3, [r4, #20]
 800a820:	b002      	add	sp, #8
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	ab01      	add	r3, sp, #4
 800a826:	466a      	mov	r2, sp
 800a828:	f7ff ffc8 	bl	800a7bc <__swhatbuf_r>
 800a82c:	9900      	ldr	r1, [sp, #0]
 800a82e:	4605      	mov	r5, r0
 800a830:	4630      	mov	r0, r6
 800a832:	f7fb fef3 	bl	800661c <_malloc_r>
 800a836:	b948      	cbnz	r0, 800a84c <__smakebuf_r+0x44>
 800a838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83c:	059a      	lsls	r2, r3, #22
 800a83e:	d4ef      	bmi.n	800a820 <__smakebuf_r+0x18>
 800a840:	f023 0303 	bic.w	r3, r3, #3
 800a844:	f043 0302 	orr.w	r3, r3, #2
 800a848:	81a3      	strh	r3, [r4, #12]
 800a84a:	e7e3      	b.n	800a814 <__smakebuf_r+0xc>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	6020      	str	r0, [r4, #0]
 800a850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	9b00      	ldr	r3, [sp, #0]
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	9b01      	ldr	r3, [sp, #4]
 800a85c:	6120      	str	r0, [r4, #16]
 800a85e:	b15b      	cbz	r3, 800a878 <__smakebuf_r+0x70>
 800a860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a864:	4630      	mov	r0, r6
 800a866:	f000 f81d 	bl	800a8a4 <_isatty_r>
 800a86a:	b128      	cbz	r0, 800a878 <__smakebuf_r+0x70>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f023 0303 	bic.w	r3, r3, #3
 800a872:	f043 0301 	orr.w	r3, r3, #1
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	431d      	orrs	r5, r3
 800a87c:	81a5      	strh	r5, [r4, #12]
 800a87e:	e7cf      	b.n	800a820 <__smakebuf_r+0x18>

0800a880 <_fstat_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	; (800a8a0 <_fstat_r+0x20>)
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	4611      	mov	r1, r2
 800a88c:	602b      	str	r3, [r5, #0]
 800a88e:	f7f9 f856 	bl	800393e <_fstat>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	d102      	bne.n	800a89c <_fstat_r+0x1c>
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	b103      	cbz	r3, 800a89c <_fstat_r+0x1c>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd38      	pop	{r3, r4, r5, pc}
 800a89e:	bf00      	nop
 800a8a0:	200014f0 	.word	0x200014f0

0800a8a4 <_isatty_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_isatty_r+0x1c>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	602b      	str	r3, [r5, #0]
 800a8b0:	f7f9 f855 	bl	800395e <_isatty>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_isatty_r+0x1a>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_isatty_r+0x1a>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	200014f0 	.word	0x200014f0

0800a8c4 <_init>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <_fini>:
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d2:	bf00      	nop
 800a8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d6:	bc08      	pop	{r3}
 800a8d8:	469e      	mov	lr, r3
 800a8da:	4770      	bx	lr
